
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c73c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800c84c  0800c84c  0001c84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c90c  0800c90c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c90c  0800c90c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c90c  0800c90c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c90c  0800c90c  0001c90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c910  0800c910  0001c910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001684  20000180  0800ca90  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001804  0800ca90  00021804  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019977  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb8  00000000  00000000  00039b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d354  00000000  00000000  00040f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da92  00000000  00000000  0005e294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ac7  00000000  00000000  0007bd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f7ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005730  00000000  00000000  0010f840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c834 	.word	0x0800c834

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800c834 	.word	0x0800c834

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_frsub>:
 80009fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	e002      	b.n	8000a08 <__addsf3>
 8000a02:	bf00      	nop

08000a04 <__aeabi_fsub>:
 8000a04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a08 <__addsf3>:
 8000a08:	0042      	lsls	r2, r0, #1
 8000a0a:	bf1f      	itttt	ne
 8000a0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a10:	ea92 0f03 	teqne	r2, r3
 8000a14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a1c:	d06a      	beq.n	8000af4 <__addsf3+0xec>
 8000a1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a26:	bfc1      	itttt	gt
 8000a28:	18d2      	addgt	r2, r2, r3
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	4048      	eorgt	r0, r1
 8000a2e:	4041      	eorgt	r1, r0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	2b19      	cmp	r3, #25
 8000a36:	bf88      	it	hi
 8000a38:	4770      	bxhi	lr
 8000a3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4249      	negne	r1, r1
 8000a5a:	ea92 0f03 	teq	r2, r3
 8000a5e:	d03f      	beq.n	8000ae0 <__addsf3+0xd8>
 8000a60:	f1a2 0201 	sub.w	r2, r2, #1
 8000a64:	fa41 fc03 	asr.w	ip, r1, r3
 8000a68:	eb10 000c 	adds.w	r0, r0, ip
 8000a6c:	f1c3 0320 	rsb	r3, r3, #32
 8000a70:	fa01 f103 	lsl.w	r1, r1, r3
 8000a74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__addsf3+0x78>
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a84:	d313      	bcc.n	8000aae <__addsf3+0xa6>
 8000a86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8a:	d306      	bcc.n	8000a9a <__addsf3+0x92>
 8000a8c:	0840      	lsrs	r0, r0, #1
 8000a8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a92:	f102 0201 	add.w	r2, r2, #1
 8000a96:	2afe      	cmp	r2, #254	; 0xfe
 8000a98:	d251      	bcs.n	8000b3e <__addsf3+0x136>
 8000a9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa2:	bf08      	it	eq
 8000aa4:	f020 0001 	biceq.w	r0, r0, #1
 8000aa8:	ea40 0003 	orr.w	r0, r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	0049      	lsls	r1, r1, #1
 8000ab0:	eb40 0000 	adc.w	r0, r0, r0
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000abc:	d2ed      	bcs.n	8000a9a <__addsf3+0x92>
 8000abe:	fab0 fc80 	clz	ip, r0
 8000ac2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ace:	bfaa      	itet	ge
 8000ad0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad4:	4252      	neglt	r2, r2
 8000ad6:	4318      	orrge	r0, r3
 8000ad8:	bfbc      	itt	lt
 8000ada:	40d0      	lsrlt	r0, r2
 8000adc:	4318      	orrlt	r0, r3
 8000ade:	4770      	bx	lr
 8000ae0:	f092 0f00 	teq	r2, #0
 8000ae4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae8:	bf06      	itte	eq
 8000aea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aee:	3201      	addeq	r2, #1
 8000af0:	3b01      	subne	r3, #1
 8000af2:	e7b5      	b.n	8000a60 <__addsf3+0x58>
 8000af4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000afc:	bf18      	it	ne
 8000afe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b02:	d021      	beq.n	8000b48 <__addsf3+0x140>
 8000b04:	ea92 0f03 	teq	r2, r3
 8000b08:	d004      	beq.n	8000b14 <__addsf3+0x10c>
 8000b0a:	f092 0f00 	teq	r2, #0
 8000b0e:	bf08      	it	eq
 8000b10:	4608      	moveq	r0, r1
 8000b12:	4770      	bx	lr
 8000b14:	ea90 0f01 	teq	r0, r1
 8000b18:	bf1c      	itt	ne
 8000b1a:	2000      	movne	r0, #0
 8000b1c:	4770      	bxne	lr
 8000b1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b22:	d104      	bne.n	8000b2e <__addsf3+0x126>
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	bf28      	it	cs
 8000b28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	4770      	bx	lr
 8000b2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b32:	bf3c      	itt	cc
 8000b34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bxcc	lr
 8000b3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b4c:	bf16      	itet	ne
 8000b4e:	4608      	movne	r0, r1
 8000b50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b54:	4601      	movne	r1, r0
 8000b56:	0242      	lsls	r2, r0, #9
 8000b58:	bf06      	itte	eq
 8000b5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5e:	ea90 0f01 	teqeq	r0, r1
 8000b62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_ui2f>:
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e004      	b.n	8000b78 <__aeabi_i2f+0x8>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_i2f>:
 8000b70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b74:	bf48      	it	mi
 8000b76:	4240      	negmi	r0, r0
 8000b78:	ea5f 0c00 	movs.w	ip, r0
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b84:	4601      	mov	r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	e01c      	b.n	8000bc6 <__aeabi_l2f+0x2a>

08000b8c <__aeabi_ul2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e00a      	b.n	8000bb0 <__aeabi_l2f+0x14>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_l2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__aeabi_l2f+0x14>
 8000baa:	4240      	negs	r0, r0
 8000bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb0:	ea5f 0c01 	movs.w	ip, r1
 8000bb4:	bf02      	ittt	eq
 8000bb6:	4684      	moveq	ip, r0
 8000bb8:	4601      	moveq	r1, r0
 8000bba:	2000      	moveq	r0, #0
 8000bbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bca:	fabc f28c 	clz	r2, ip
 8000bce:	3a08      	subs	r2, #8
 8000bd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd4:	db10      	blt.n	8000bf8 <__aeabi_l2f+0x5c>
 8000bd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bda:	4463      	add	r3, ip
 8000bdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f102 0220 	add.w	r2, r2, #32
 8000bfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c08:	fa21 f202 	lsr.w	r2, r1, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_fmul>:
 8000c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c20:	bf1e      	ittt	ne
 8000c22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c26:	ea92 0f0c 	teqne	r2, ip
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d06f      	beq.n	8000d10 <__aeabi_fmul+0xf8>
 8000c30:	441a      	add	r2, r3
 8000c32:	ea80 0c01 	eor.w	ip, r0, r1
 8000c36:	0240      	lsls	r0, r0, #9
 8000c38:	bf18      	it	ne
 8000c3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3e:	d01e      	beq.n	8000c7e <__aeabi_fmul+0x66>
 8000c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c58:	bf3e      	ittt	cc
 8000c5a:	0049      	lslcc	r1, r1, #1
 8000c5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c60:	005b      	lslcc	r3, r3, #1
 8000c62:	ea40 0001 	orr.w	r0, r0, r1
 8000c66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c6a:	2afd      	cmp	r2, #253	; 0xfd
 8000c6c:	d81d      	bhi.n	8000caa <__aeabi_fmul+0x92>
 8000c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c86:	bf08      	it	eq
 8000c88:	0249      	lsleq	r1, r1, #9
 8000c8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	bfc2      	ittt	gt
 8000c96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9e:	4770      	bxgt	lr
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	dc5d      	bgt.n	8000d68 <__aeabi_fmul+0x150>
 8000cac:	f112 0f19 	cmn.w	r2, #25
 8000cb0:	bfdc      	itt	le
 8000cb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bxle	lr
 8000cb8:	f1c2 0200 	rsb	r2, r2, #0
 8000cbc:	0041      	lsls	r1, r0, #1
 8000cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000cc2:	f1c2 0220 	rsb	r2, r2, #32
 8000cc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cce:	f140 0000 	adc.w	r0, r0, #0
 8000cd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd6:	bf08      	it	eq
 8000cd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cdc:	4770      	bx	lr
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0040      	lsleq	r0, r0, #1
 8000cea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cee:	3a01      	subeq	r2, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fmul+0xce>
 8000cf2:	ea40 000c 	orr.w	r0, r0, ip
 8000cf6:	f093 0f00 	teq	r3, #0
 8000cfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0049      	lsleq	r1, r1, #1
 8000d02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d06:	3b01      	subeq	r3, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xe6>
 8000d0a:	ea41 010c 	orr.w	r1, r1, ip
 8000d0e:	e78f      	b.n	8000c30 <__aeabi_fmul+0x18>
 8000d10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	bf18      	it	ne
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d00a      	beq.n	8000d36 <__aeabi_fmul+0x11e>
 8000d20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d24:	bf18      	it	ne
 8000d26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	d1d8      	bne.n	8000cde <__aeabi_fmul+0xc6>
 8000d2c:	ea80 0001 	eor.w	r0, r0, r1
 8000d30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	bf17      	itett	ne
 8000d3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d40:	4608      	moveq	r0, r1
 8000d42:	f091 0f00 	teqne	r1, #0
 8000d46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d4a:	d014      	beq.n	8000d76 <__aeabi_fmul+0x15e>
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fmul+0x13e>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d10f      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d56:	ea93 0f0c 	teq	r3, ip
 8000d5a:	d103      	bne.n	8000d64 <__aeabi_fmul+0x14c>
 8000d5c:	024b      	lsls	r3, r1, #9
 8000d5e:	bf18      	it	ne
 8000d60:	4608      	movne	r0, r1
 8000d62:	d108      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fdiv>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d069      	beq.n	8000e6c <__aeabi_fdiv+0xec>
 8000d98:	eba2 0203 	sub.w	r2, r2, r3
 8000d9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000da0:	0249      	lsls	r1, r1, #9
 8000da2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da6:	d037      	beq.n	8000e18 <__aeabi_fdiv+0x98>
 8000da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	428b      	cmp	r3, r1
 8000dba:	bf38      	it	cc
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	bf24      	itt	cs
 8000dca:	1a5b      	subcs	r3, r3, r1
 8000dcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd4:	bf24      	itt	cs
 8000dd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000de2:	bf24      	itt	cs
 8000de4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df0:	bf24      	itt	cs
 8000df2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	bf18      	it	ne
 8000dfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e02:	d1e0      	bne.n	8000dc6 <__aeabi_fdiv+0x46>
 8000e04:	2afd      	cmp	r2, #253	; 0xfd
 8000e06:	f63f af50 	bhi.w	8000caa <__aeabi_fmul+0x92>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e20:	327f      	adds	r2, #127	; 0x7f
 8000e22:	bfc2      	ittt	gt
 8000e24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2c:	4770      	bxgt	lr
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	3a01      	subs	r2, #1
 8000e38:	e737      	b.n	8000caa <__aeabi_fmul+0x92>
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fdiv+0xc2>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xda>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e795      	b.n	8000d98 <__aeabi_fdiv+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d108      	bne.n	8000e88 <__aeabi_fdiv+0x108>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	f47f af7d 	bne.w	8000d76 <__aeabi_fmul+0x15e>
 8000e7c:	ea93 0f0c 	teq	r3, ip
 8000e80:	f47f af70 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e776      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e88:	ea93 0f0c 	teq	r3, ip
 8000e8c:	d104      	bne.n	8000e98 <__aeabi_fdiv+0x118>
 8000e8e:	024b      	lsls	r3, r1, #9
 8000e90:	f43f af4c 	beq.w	8000d2c <__aeabi_fmul+0x114>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e76e      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1ca      	bne.n	8000e3a <__aeabi_fdiv+0xba>
 8000ea4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea8:	f47f af5c 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000eac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb0:	f47f af3c 	bne.w	8000d2c <__aeabi_fmul+0x114>
 8000eb4:	e75f      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000eb6:	bf00      	nop

08000eb8 <__gesf2>:
 8000eb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ebc:	e006      	b.n	8000ecc <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__lesf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	e002      	b.n	8000ecc <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__cmpsf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	bf18      	it	ne
 8000ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ee2:	d011      	beq.n	8000f08 <__cmpsf2+0x40>
 8000ee4:	b001      	add	sp, #4
 8000ee6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eea:	bf18      	it	ne
 8000eec:	ea90 0f01 	teqne	r0, r1
 8000ef0:	bf58      	it	pl
 8000ef2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef6:	bf88      	it	hi
 8000ef8:	17c8      	asrhi	r0, r1, #31
 8000efa:	bf38      	it	cc
 8000efc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f00:	bf18      	it	ne
 8000f02:	f040 0001 	orrne.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__cmpsf2+0x4c>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d105      	bne.n	8000f20 <__cmpsf2+0x58>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d1e4      	bne.n	8000ee4 <__cmpsf2+0x1c>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d0e1      	beq.n	8000ee4 <__cmpsf2+0x1c>
 8000f20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__aeabi_cfrcmple>:
 8000f28:	4684      	mov	ip, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4661      	mov	r1, ip
 8000f2e:	e7ff      	b.n	8000f30 <__aeabi_cfcmpeq>

08000f30 <__aeabi_cfcmpeq>:
 8000f30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f32:	f7ff ffc9 	bl	8000ec8 <__cmpsf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	bf48      	it	mi
 8000f3a:	f110 0f00 	cmnmi.w	r0, #0
 8000f3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f40 <__aeabi_fcmpeq>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff fff4 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f48:	bf0c      	ite	eq
 8000f4a:	2001      	moveq	r0, #1
 8000f4c:	2000      	movne	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmplt>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffea 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f5c:	bf34      	ite	cc
 8000f5e:	2001      	movcc	r0, #1
 8000f60:	2000      	movcs	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmple>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffe0 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f70:	bf94      	ite	ls
 8000f72:	2001      	movls	r0, #1
 8000f74:	2000      	movhi	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmpge>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffd2 	bl	8000f28 <__aeabi_cfrcmple>
 8000f84:	bf94      	ite	ls
 8000f86:	2001      	movls	r0, #1
 8000f88:	2000      	movhi	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmpgt>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffc8 	bl	8000f28 <__aeabi_cfrcmple>
 8000f98:	bf34      	ite	cc
 8000f9a:	2001      	movcc	r0, #1
 8000f9c:	2000      	movcs	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2iz>:
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30f      	bcc.n	8000fce <__aeabi_f2iz+0x2a>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d90d      	bls.n	8000fd4 <__aeabi_f2iz+0x30>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	bf18      	it	ne
 8000fca:	4240      	negne	r0, r0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2iz+0x3a>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d105      	bne.n	8000fea <__aeabi_f2iz+0x46>
 8000fde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe2:	bf08      	it	eq
 8000fe4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr

08000ff0 <Flash_Read>:
#include "main.h"
#include "flash.h"

//Reads data from flash memory address with given length in bytes
void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001000:	e00b      	b.n	800101a <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	4413      	add	r3, r2
 8001008:	4619      	mov	r1, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4413      	add	r3, r2
 8001010:	780a      	ldrb	r2, [r1, #0]
 8001012:	701a      	strb	r2, [r3, #0]
		i++;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
	while(i != length){
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	429a      	cmp	r2, r3
 8001020:	d1ef      	bne.n	8001002 <Flash_Read+0x12>
	}
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <Flash_Write>:

//Writes data to flash memory address with given length in bytes
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 800102e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 800104c:	f003 f858 	bl	8004100 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8001050:	f107 0210 	add.w	r2, r7, #16
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f003 f938 	bl	80042d0 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	b29a      	uxth	r2, r3
 800106a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	b29b      	uxth	r3, r3
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8001078:	e027      	b.n	80010ca <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 800107a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 8001080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001082:	3303      	adds	r3, #3
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 800108c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800108e:	3302      	adds	r3, #2
 8001090:	68f9      	ldr	r1, [r7, #12]
 8001092:	440b      	add	r3, r1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 8001098:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 800109a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800109c:	3301      	adds	r3, #1
 800109e:	68f9      	ldr	r1, [r7, #12]
 80010a0:	440b      	add	r3, r1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 80010a6:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80010a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	440a      	add	r2, r1
 80010ae:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80010b0:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80010b2:	2200      	movs	r2, #0
 80010b4:	4698      	mov	r8, r3
 80010b6:	4691      	mov	r9, r2
 80010b8:	4642      	mov	r2, r8
 80010ba:	464b      	mov	r3, r9
 80010bc:	4601      	mov	r1, r0
 80010be:	2002      	movs	r0, #2
 80010c0:	f002 ffae 	bl	8004020 <HAL_FLASH_Program>
		);
		i+=4;
 80010c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010c6:	3304      	adds	r3, #4
 80010c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80010ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d1d2      	bne.n	800107a <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d03f      	beq.n	800115a <Flash_Write+0x12c>
		uint32_t wdata = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 80010de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d114      	bne.n	800110e <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 80010e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010e6:	3302      	adds	r3, #2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	061a      	lsls	r2, r3, #24
 80010f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010f2:	3301      	adds	r3, #1
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	440b      	add	r3, r1
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	041b      	lsls	r3, r3, #16
 80010fc:	431a      	orrs	r2, r3
 80010fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	440b      	add	r3, r1
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	4313      	orrs	r3, r2
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
 800110c:	e019      	b.n	8001142 <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 800110e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001110:	2b02      	cmp	r3, #2
 8001112:	d10d      	bne.n	8001130 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 8001114:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001116:	3301      	adds	r3, #1
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	061a      	lsls	r2, r3, #24
 8001120:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001122:	68f9      	ldr	r1, [r7, #12]
 8001124:	440b      	add	r3, r1
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	041b      	lsls	r3, r3, #16
 800112a:	4313      	orrs	r3, r2
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
 800112e:	e008      	b.n	8001142 <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8001130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001132:	2b01      	cmp	r3, #1
 8001134:	d105      	bne.n	8001142 <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 8001136:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	061b      	lsls	r3, r3, #24
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8001142:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	18d1      	adds	r1, r2, r3
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	2200      	movs	r2, #0
 800114c:	461c      	mov	r4, r3
 800114e:	4615      	mov	r5, r2
 8001150:	4622      	mov	r2, r4
 8001152:	462b      	mov	r3, r5
 8001154:	2002      	movs	r0, #2
 8001156:	f002 ff63 	bl	8004020 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 800115a:	f002 fff7 	bl	800414c <HAL_FLASH_Lock>
 800115e:	bf00      	nop
 8001160:	3730      	adds	r7, #48	; 0x30
 8001162:	46bd      	mov	sp, r7
 8001164:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001168 <LED_On>:

//Working variable, counter for turning off LED in "LED_MODE_POSITION_CHANGE" mode
static uint32_t systick;

//Function used only in this file
static void LED_On(bool on){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	if(on){
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <LED_On+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <LED_On+0x34>)
 800117e:	f003 faea 	bl	8004756 <HAL_GPIO_WritePin>
 8001182:	e004      	b.n	800118e <LED_On+0x26>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <LED_On+0x34>)
 800118a:	f003 fae4 	bl	8004756 <HAL_GPIO_WritePin>
	}
	led_o.on = on;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <LED_On+0x38>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	7013      	strb	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40010800 	.word	0x40010800
 80011a0:	200001a4 	.word	0x200001a4

080011a4 <LED_SysTick_Interrupt>:

//SysTick interrupt for LED, called in every millisecond, with lowest interrupt priority (highest number)
void LED_SysTick_Interrupt(){
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	if(led_ctr.mode == LED_MODE_POSITION_CHANGE){
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <LED_SysTick_Interrupt+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d104      	bne.n	80011ba <LED_SysTick_Interrupt+0x16>
		systick++;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <LED_SysTick_Interrupt+0x24>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <LED_SysTick_Interrupt+0x24>)
 80011b8:	6013      	str	r3, [r2, #0]
	}
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2000019c 	.word	0x2000019c
 80011c8:	200001a8 	.word	0x200001a8

080011cc <LED_Update>:

//Should be called from app main loop function to make LED work
void LED_Update(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	switch(led_ctr.mode){
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <LED_Update+0x80>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d837      	bhi.n	8001248 <LED_Update+0x7c>
 80011d8:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <LED_Update+0x14>)
 80011da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011de:	bf00      	nop
 80011e0:	080011f1 	.word	0x080011f1
 80011e4:	080011f9 	.word	0x080011f9
 80011e8:	08001201 	.word	0x08001201
 80011ec:	08001219 	.word	0x08001219
		case LED_MODE_OFF:
			LED_On(false);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff ffb9 	bl	8001168 <LED_On>
		break;
 80011f6:	e027      	b.n	8001248 <LED_Update+0x7c>
		case LED_MODE_POWER:
			LED_On(true);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff ffb5 	bl	8001168 <LED_On>
		break;
 80011fe:	e023      	b.n	8001248 <LED_Update+0x7c>
		case LED_MODE_PID:
			if(led_i.pid_running){
 8001200:	4b13      	ldr	r3, [pc, #76]	; (8001250 <LED_Update+0x84>)
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <LED_Update+0x44>
				LED_On(true);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ffad 	bl	8001168 <LED_On>
			}else{
				LED_On(false);
			}
		break;
 800120e:	e01b      	b.n	8001248 <LED_Update+0x7c>
				LED_On(false);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ffa9 	bl	8001168 <LED_On>
		break;
 8001216:	e017      	b.n	8001248 <LED_Update+0x7c>
		case LED_MODE_POSITION_CHANGE:
			if(led_i.position_changed){
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <LED_Update+0x84>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <LED_Update+0x66>
				led_i.position_changed = false;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <LED_Update+0x84>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
				systick = 0;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LED_Update+0x88>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
				LED_On(true);
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff ff9b 	bl	8001168 <LED_On>
			}
			if(systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <LED_Update+0x88>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b13      	cmp	r3, #19
 8001238:	d905      	bls.n	8001246 <LED_Update+0x7a>
				LED_On(false);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff94 	bl	8001168 <LED_On>
				systick = 0;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <LED_Update+0x88>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
			}
		break;
 8001246:	bf00      	nop
	}
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000019c 	.word	0x2000019c
 8001250:	200001a0 	.word	0x200001a0
 8001254:	200001a8 	.word	0x200001a8

08001258 <Motor_SysTick_Interrupt>:

//Working variable, counter for motor turn off in test mode
static uint32_t systick;

//SysTick interrupt for motor, called in every millisecond, with lowest interrupt priority (highest number)
void Motor_SysTick_Interrupt(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	if(!motor_i.pid_running){
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <Motor_SysTick_Interrupt+0x3c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d012      	beq.n	8001290 <Motor_SysTick_Interrupt+0x38>
		if(motor_o.running){
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <Motor_SysTick_Interrupt+0x40>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00e      	beq.n	8001290 <Motor_SysTick_Interrupt+0x38>
			systick++;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <Motor_SysTick_Interrupt+0x44>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <Motor_SysTick_Interrupt+0x44>)
 800127a:	6013      	str	r3, [r2, #0]
			if(systick == MOTOR_TEST_TIMEOUT_MS){
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <Motor_SysTick_Interrupt+0x44>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d105      	bne.n	8001290 <Motor_SysTick_Interrupt+0x38>
				Motor_Set(0);
 8001284:	2000      	movs	r0, #0
 8001286:	f000 f80b 	bl	80012a0 <Motor_Set>
				systick = 0;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <Motor_SysTick_Interrupt+0x44>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001b0 	.word	0x200001b0
 8001298:	200001b4 	.word	0x200001b4
 800129c:	200001b8 	.word	0x200001b8

080012a0 <Motor_Set>:

//Sets motor rotation direction and power, value from -1000 to 1000. Zero means off
void Motor_Set(int16_t strength){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
	if(motor_ctr.invert == MOTOR_INVERT){
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <Motor_Set+0xc0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	425b      	negs	r3, r3
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	80fb      	strh	r3, [r7, #6]
	}

	systick = 0;
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <Motor_Set+0xc4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
	if(strength == 0){
 80012c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10d      	bne.n	80012e4 <Motor_Set+0x44>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <Motor_Set+0xc8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 80012d2:	4b25      	ldr	r3, [pc, #148]	; (8001368 <Motor_Set+0xc8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012da:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = false;
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <Motor_Set+0xcc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000 - (strength / (1000 / motor_ctr.max_power)));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
		motor_o.running = true;
	}
}
 80012e2:	e038      	b.n	8001356 <Motor_Set+0xb6>
	}else if(strength < 0){
 80012e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da18      	bge.n	800131e <Motor_Set+0x7e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <Motor_Set+0xc8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000 + (strength / (1000 / motor_ctr.max_power)));
 80012f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <Motor_Set+0xc0>)
 80012fc:	885b      	ldrh	r3, [r3, #2]
 80012fe:	4619      	mov	r1, r3
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	fb93 f3f1 	sdiv	r3, r3, r1
 8001308:	fb92 f3f3 	sdiv	r3, r2, r3
 800130c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <Motor_Set+0xc8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = true;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <Motor_Set+0xcc>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
}
 800131c:	e01b      	b.n	8001356 <Motor_Set+0xb6>
	}else if(strength > 0){
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	2b00      	cmp	r3, #0
 8001324:	dd17      	ble.n	8001356 <Motor_Set+0xb6>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000 - (strength / (1000 / motor_ctr.max_power)));
 8001326:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <Motor_Set+0xc0>)
 800132c:	885b      	ldrh	r3, [r3, #2]
 800132e:	4619      	mov	r1, r3
 8001330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001334:	fb93 f3f1 	sdiv	r3, r3, r1
 8001338:	fb92 f3f3 	sdiv	r3, r2, r3
 800133c:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <Motor_Set+0xc8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <Motor_Set+0xc8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = true;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <Motor_Set+0xcc>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	200001ac 	.word	0x200001ac
 8001364:	200001b8 	.word	0x200001b8
 8001368:	20000530 	.word	0x20000530
 800136c:	200001b4 	.word	0x200001b4

08001370 <Motor_Get>:

//Returns current motor rotation direction and power, value from -1000 to 1000
int16_t Motor_Get(){
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1) != 1000){
 8001374:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <Motor_Get+0x78>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800137e:	d013      	beq.n	80013a8 <Motor_Get+0x38>
		return (1000 - (int16_t)__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1)) * (1000 / motor_ctr.max_power);
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <Motor_Get+0x78>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001386:	b21b      	sxth	r3, r3
 8001388:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800138c:	b29b      	uxth	r3, r3
 800138e:	4a17      	ldr	r2, [pc, #92]	; (80013ec <Motor_Get+0x7c>)
 8001390:	8852      	ldrh	r2, [r2, #2]
 8001392:	4611      	mov	r1, r2
 8001394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001398:	fb92 f2f1 	sdiv	r2, r2, r1
 800139c:	b292      	uxth	r2, r2
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	e01a      	b.n	80013de <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 80013a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b2:	d013      	beq.n	80013dc <Motor_Get+0x6c>
		return ((int16_t)__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1000) * (1000 / motor_ctr.max_power);
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <Motor_Get+0x78>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <Motor_Get+0x7c>)
 80013c4:	8852      	ldrh	r2, [r2, #2]
 80013c6:	4611      	mov	r1, r2
 80013c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013cc:	fb92 f2f1 	sdiv	r2, r2, r1
 80013d0:	b292      	uxth	r2, r2
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	e000      	b.n	80013de <Motor_Get+0x6e>
	}
	return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000530 	.word	0x20000530
 80013ec:	200001ac 	.word	0x200001ac

080013f0 <Motor_Init>:

//Init function, should be called once at start
void Motor_Init(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013f4:	2100      	movs	r1, #0
 80013f6:	4804      	ldr	r0, [pc, #16]	; (8001408 <Motor_Init+0x18>)
 80013f8:	f005 fd46 	bl	8006e88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80013fc:	2104      	movs	r1, #4
 80013fe:	4802      	ldr	r0, [pc, #8]	; (8001408 <Motor_Init+0x18>)
 8001400:	f005 fd42 	bl	8006e88 <HAL_TIM_PWM_Start>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000530 	.word	0x20000530

0800140c <PID_Timer_Stop>:
//Working variables
static float last_input;
static float output_sum;

//Functions used only in this file
static void PID_Timer_Stop(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <PID_Timer_Stop+0x10>)
 8001412:	f005 fcb3 	bl	8006d7c <HAL_TIM_Base_Stop_IT>
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000578 	.word	0x20000578

08001420 <PID_Timer_Restart>:
static void PID_Timer_Restart(){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <PID_Timer_Restart+0x1c>)
 8001426:	f005 fca9 	bl	8006d7c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <PID_Timer_Restart+0x1c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8001432:	4802      	ldr	r0, [pc, #8]	; (800143c <PID_Timer_Restart+0x1c>)
 8001434:	f005 fc50 	bl	8006cd8 <HAL_TIM_Base_Start_IT>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000578 	.word	0x20000578

08001440 <PID_Compute>:
static void PID_Compute(){
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
	float input = pid_i.input;
 8001446:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <PID_Compute+0x1b0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]
	float error = pid_i.setpoint - input;
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <PID_Compute+0x1b0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	68f9      	ldr	r1, [r7, #12]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fad6 	bl	8000a04 <__aeabi_fsub>
 8001458:	4603      	mov	r3, r0
 800145a:	60bb      	str	r3, [r7, #8]
	float input_d = (input - last_input);
 800145c:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <PID_Compute+0x1b4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff face 	bl	8000a04 <__aeabi_fsub>
 8001468:	4603      	mov	r3, r0
 800146a:	607b      	str	r3, [r7, #4]
	float output = 0;
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]

	//Select parameters for range
	float kp, ki, kd;
	if(error >= pid_ctr.split_1){
 8001472:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <PID_Compute+0x1b8>)
 8001474:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb7a 	bl	8000b70 <__aeabi_i2f>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f7ff fd7b 	bl	8000f7c <__aeabi_fcmpge>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <PID_Compute+0x60>
		kp = pid_ctr.kp_1;
 800148c:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <PID_Compute+0x1b8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_1;
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <PID_Compute+0x1b8>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_1;
 8001498:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <PID_Compute+0x1b8>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	e02c      	b.n	80014fa <PID_Compute+0xba>
	}else if((error < pid_ctr.split_1) && (error >= pid_ctr.split_2)){
 80014a0:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <PID_Compute+0x1b8>)
 80014a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fb63 	bl	8000b70 <__aeabi_i2f>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4619      	mov	r1, r3
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f7ff fd50 	bl	8000f54 <__aeabi_fcmplt>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d016      	beq.n	80014e8 <PID_Compute+0xa8>
 80014ba:	4b4f      	ldr	r3, [pc, #316]	; (80015f8 <PID_Compute+0x1b8>)
 80014bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb56 	bl	8000b70 <__aeabi_i2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4619      	mov	r1, r3
 80014c8:	68b8      	ldr	r0, [r7, #8]
 80014ca:	f7ff fd57 	bl	8000f7c <__aeabi_fcmpge>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d009      	beq.n	80014e8 <PID_Compute+0xa8>
		kp = pid_ctr.kp_2;
 80014d4:	4b48      	ldr	r3, [pc, #288]	; (80015f8 <PID_Compute+0x1b8>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_2;
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <PID_Compute+0x1b8>)
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_2;
 80014e0:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <PID_Compute+0x1b8>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e008      	b.n	80014fa <PID_Compute+0xba>
	}else{
		kp = pid_ctr.kp_3;
 80014e8:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <PID_Compute+0x1b8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_3;
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <PID_Compute+0x1b8>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_3;
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <PID_Compute+0x1b8>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	613b      	str	r3, [r7, #16]
	}

	//Calculate output
	output_sum += ki * error;
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7ff fb8b 	bl	8000c18 <__aeabi_fmul>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <PID_Compute+0x1bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4619      	mov	r1, r3
 800150c:	4610      	mov	r0, r2
 800150e:	f7ff fa7b 	bl	8000a08 <__addsf3>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	4b39      	ldr	r3, [pc, #228]	; (80015fc <PID_Compute+0x1bc>)
 8001518:	601a      	str	r2, [r3, #0]
	if(pid_ctr.on_e_m == PID_ON_M){
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <PID_Compute+0x1b8>)
 800151c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <PID_Compute+0x102>
		output_sum -= kp * input_d;
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <PID_Compute+0x1bc>)
 8001526:	681c      	ldr	r4, [r3, #0]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	69b8      	ldr	r0, [r7, #24]
 800152c:	f7ff fb74 	bl	8000c18 <__aeabi_fmul>
 8001530:	4603      	mov	r3, r0
 8001532:	4619      	mov	r1, r3
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fa65 	bl	8000a04 <__aeabi_fsub>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <PID_Compute+0x1bc>)
 8001540:	601a      	str	r2, [r3, #0]
	}

	if(output_sum > 1000.0f){
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <PID_Compute+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	492e      	ldr	r1, [pc, #184]	; (8001600 <PID_Compute+0x1c0>)
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fd21 	bl	8000f90 <__aeabi_fcmpgt>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <PID_Compute+0x11c>
		output_sum = 1000.0f;
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <PID_Compute+0x1bc>)
 8001556:	4a2a      	ldr	r2, [pc, #168]	; (8001600 <PID_Compute+0x1c0>)
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e00b      	b.n	8001574 <PID_Compute+0x134>
	}else if(output_sum < -1000.0f){
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <PID_Compute+0x1bc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4928      	ldr	r1, [pc, #160]	; (8001604 <PID_Compute+0x1c4>)
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fcf6 	bl	8000f54 <__aeabi_fcmplt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <PID_Compute+0x134>
		output_sum = -1000.0f;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <PID_Compute+0x1bc>)
 8001570:	4a24      	ldr	r2, [pc, #144]	; (8001604 <PID_Compute+0x1c4>)
 8001572:	601a      	str	r2, [r3, #0]
	}

	if(pid_ctr.on_e_m == PID_ON_E){
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <PID_Compute+0x1b8>)
 8001576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800157a:	f083 0301 	eor.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <PID_Compute+0x150>
		output = kp * error;
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	69b8      	ldr	r0, [r7, #24]
 8001588:	f7ff fb46 	bl	8000c18 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	61fb      	str	r3, [r7, #28]
	}

	output += output_sum - kd * input_d;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <PID_Compute+0x1bc>)
 8001592:	681c      	ldr	r4, [r3, #0]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	6938      	ldr	r0, [r7, #16]
 8001598:	f7ff fb3e 	bl	8000c18 <__aeabi_fmul>
 800159c:	4603      	mov	r3, r0
 800159e:	4619      	mov	r1, r3
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff fa2f 	bl	8000a04 <__aeabi_fsub>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4619      	mov	r1, r3
 80015aa:	69f8      	ldr	r0, [r7, #28]
 80015ac:	f7ff fa2c 	bl	8000a08 <__addsf3>
 80015b0:	4603      	mov	r3, r0
 80015b2:	61fb      	str	r3, [r7, #28]
	if(output > 1000.0f){
 80015b4:	4912      	ldr	r1, [pc, #72]	; (8001600 <PID_Compute+0x1c0>)
 80015b6:	69f8      	ldr	r0, [r7, #28]
 80015b8:	f7ff fcea 	bl	8000f90 <__aeabi_fcmpgt>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <PID_Compute+0x188>
		output = 1000.0f;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <PID_Compute+0x1c0>)
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	e008      	b.n	80015da <PID_Compute+0x19a>
	}
	else if(output < -1000.0f){
 80015c8:	490e      	ldr	r1, [pc, #56]	; (8001604 <PID_Compute+0x1c4>)
 80015ca:	69f8      	ldr	r0, [r7, #28]
 80015cc:	f7ff fcc2 	bl	8000f54 <__aeabi_fcmplt>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <PID_Compute+0x19a>
		output = -1000.0f;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <PID_Compute+0x1c4>)
 80015d8:	61fb      	str	r3, [r7, #28]
	}

	//Store
	pid_o.output = output;
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <PID_Compute+0x1c8>)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	6053      	str	r3, [r2, #4]
	last_input = input;
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <PID_Compute+0x1b4>)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6013      	str	r3, [r2, #0]
}
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200001e8 	.word	0x200001e8
 80015f4:	200001f8 	.word	0x200001f8
 80015f8:	200001bc 	.word	0x200001bc
 80015fc:	200001fc 	.word	0x200001fc
 8001600:	447a0000 	.word	0x447a0000
 8001604:	c47a0000 	.word	0xc47a0000
 8001608:	200001f0 	.word	0x200001f0

0800160c <PID_Timer_Interrupt>:

//Timer interrupt
void PID_Timer_Interrupt(){
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	PID_Compute();
 8001610:	f7ff ff16 	bl	8001440 <PID_Compute>
	PID_Ready(pid_o.output);
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <PID_Timer_Interrupt+0x18>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fea7 	bl	800236c <PID_Ready>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200001f0 	.word	0x200001f0

08001628 <PID_Set_Sampling_Time>:
//Returns sampling time in milliseconds
uint16_t PID_Get_Sampling_Time(){
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
}
//Sets PID sampling time
void PID_Set_Sampling_Time(uint16_t ms){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	2264      	movs	r2, #100	; 0x64
 8001636:	fb03 f202 	mul.w	r2, r3, r2
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <PID_Set_Sampling_Time+0x30>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	2264      	movs	r2, #100	; 0x64
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4b03      	ldr	r3, [pc, #12]	; (8001658 <PID_Set_Sampling_Time+0x30>)
 800164c:	60da      	str	r2, [r3, #12]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	20000578 	.word	0x20000578

0800165c <PID_Start>:
//Starts PID. Before calling this, correct sampling time should be set
void PID_Start(){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	if(!pid_o.running){
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <PID_Start+0x30>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	f083 0301 	eor.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00c      	beq.n	8001688 <PID_Start+0x2c>
		last_input = pid_i.input;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <PID_Start+0x34>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <PID_Start+0x38>)
 8001674:	6013      	str	r3, [r2, #0]
		output_sum = 0;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <PID_Start+0x3c>)
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
		PID_Timer_Restart();
 800167e:	f7ff fecf 	bl	8001420 <PID_Timer_Restart>
		pid_o.running = true;
 8001682:	4b02      	ldr	r3, [pc, #8]	; (800168c <PID_Start+0x30>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
	}
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200001f0 	.word	0x200001f0
 8001690:	200001e8 	.word	0x200001e8
 8001694:	200001f8 	.word	0x200001f8
 8001698:	200001fc 	.word	0x200001fc

0800169c <PID_Stop>:
//Stops PID
void PID_Stop(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	if(pid_o.running){
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <PID_Stop+0x24>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <PID_Stop+0x1e>
		PID_Timer_Stop();
 80016a8:	f7ff feb0 	bl	800140c <PID_Timer_Stop>
		PID_Ready(0);
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f000 fe5c 	bl	800236c <PID_Ready>
		pid_o.running = false;
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <PID_Stop+0x24>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
	}
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200001f0 	.word	0x200001f0

080016c4 <Potentiometer_ADC_Interrupt>:
static uint32_t adctmp; //Buffer variable for collecting ADC measurements sum
static uint16_t adccnt; //Counter for how many measurements were performed
static bool init_cplt; //Set to "true" once ADC initialization is complete and measurement is working

//ADC Interrupt
void Potentiometer_ADC_Interrupt(){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	adctmp += HAL_ADC_GetValue(&hadc1);
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <Potentiometer_ADC_Interrupt+0x60>)
 80016ca:	f002 f82b 	bl	8003724 <HAL_ADC_GetValue>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <Potentiometer_ADC_Interrupt+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <Potentiometer_ADC_Interrupt+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]
	adccnt++;
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <Potentiometer_ADC_Interrupt+0x68>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <Potentiometer_ADC_Interrupt+0x68>)
 80016e4:	801a      	strh	r2, [r3, #0]
	if(adccnt == POTENTIOMETER_SAMPLE_CNT){
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <Potentiometer_ADC_Interrupt+0x68>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d115      	bne.n	800171a <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_o.position = (float)adctmp / (float)POTENTIOMETER_SAMPLE_CNT;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <Potentiometer_ADC_Interrupt+0x64>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fa38 	bl	8000b68 <__aeabi_ui2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <Potentiometer_ADC_Interrupt+0x6c>)
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb3f 	bl	8000d80 <__aeabi_fdiv>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <Potentiometer_ADC_Interrupt+0x70>)
 8001708:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 800170a:	f000 fe3f 	bl	800238c <Potentiometer_Ready>
		adccnt = 0;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <Potentiometer_ADC_Interrupt+0x68>)
 8001710:	2200      	movs	r2, #0
 8001712:	801a      	strh	r2, [r3, #0]
		adctmp = 0;
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <Potentiometer_ADC_Interrupt+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	}
	init_cplt = true;
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <Potentiometer_ADC_Interrupt+0x74>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200004f8 	.word	0x200004f8
 8001728:	20000204 	.word	0x20000204
 800172c:	20000208 	.word	0x20000208
 8001730:	42c80000 	.word	0x42c80000
 8001734:	20000200 	.word	0x20000200
 8001738:	2000020a 	.word	0x2000020a

0800173c <Potentiometer_Init>:

//Runs measurement, called once at start
void Potentiometer_Init(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001740:	bf00      	nop
 8001742:	480a      	ldr	r0, [pc, #40]	; (800176c <Potentiometer_Init+0x30>)
 8001744:	f002 fa5a 	bl	8003bfc <HAL_ADCEx_Calibration_Start>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f9      	bne.n	8001742 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <Potentiometer_Init+0x30>)
 8001750:	f001 ff32 	bl	80035b8 <HAL_ADC_Start_IT>
	while(!init_cplt);
 8001754:	bf00      	nop
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <Potentiometer_Init+0x34>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f8      	bne.n	8001756 <Potentiometer_Init+0x1a>
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200004f8 	.word	0x200004f8
 8001770:	2000020a 	.word	0x2000020a

08001774 <Signal_Timer_Stop>:
static uint32_t timeout_passed_ms = 0; //Counter for measuring time since getting first edge of signal
static bool signal_reading;
static bool signal_present;

//Functions used only in this file
static void Signal_Timer_Stop(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <Signal_Timer_Stop+0x10>)
 800177a:	f005 faff 	bl	8006d7c <HAL_TIM_Base_Stop_IT>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200005c0 	.word	0x200005c0

08001788 <Signal_Timer_Restart>:
static void Signal_Timer_Restart(){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <Signal_Timer_Restart+0x1c>)
 800178e:	f005 faf5 	bl	8006d7c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <Signal_Timer_Restart+0x1c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim4);
 800179a:	4802      	ldr	r0, [pc, #8]	; (80017a4 <Signal_Timer_Restart+0x1c>)
 800179c:	f005 fa9c 	bl	8006cd8 <HAL_TIM_Base_Start_IT>
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200005c0 	.word	0x200005c0

080017a8 <Signal_Read_Timer>:
static uint32_t Signal_Read_Timer(){
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <Signal_Read_Timer+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200005c0 	.word	0x200005c0

080017c0 <Signal_Read_Pin>:
static uint8_t Signal_Read_Pin(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	71fb      	strb	r3, [r7, #7]
	uint8_t level;
	uint8_t i;

	while(retry != SIGNAL_DEBOUNCE_RETRIES){
 80017ca:	e024      	b.n	8001816 <Signal_Read_Pin+0x56>
		retry++;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	3301      	adds	r3, #1
 80017d0:	71fb      	strb	r3, [r7, #7]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 80017d2:	2102      	movs	r1, #2
 80017d4:	4815      	ldr	r0, [pc, #84]	; (800182c <Signal_Read_Pin+0x6c>)
 80017d6:	f002 ffa7 	bl	8004728 <HAL_GPIO_ReadPin>
 80017da:	4603      	mov	r3, r0
 80017dc:	71bb      	strb	r3, [r7, #6]
		i = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	717b      	strb	r3, [r7, #5]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 80017e2:	e010      	b.n	8001806 <Signal_Read_Pin+0x46>
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 80017e4:	2102      	movs	r1, #2
 80017e6:	4811      	ldr	r0, [pc, #68]	; (800182c <Signal_Read_Pin+0x6c>)
 80017e8:	f002 ff9e 	bl	8004728 <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d004      	beq.n	8001800 <Signal_Read_Pin+0x40>
				if(retry == SIGNAL_DEBOUNCE_RETRIES){
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d108      	bne.n	800180e <Signal_Read_Pin+0x4e>
					//If this is a last retry and still can't determine signal level correctly, just return low
					return SIGNAL_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e010      	b.n	8001822 <Signal_Read_Pin+0x62>
				}
				break;
			}
			i++;
 8001800:	797b      	ldrb	r3, [r7, #5]
 8001802:	3301      	adds	r3, #1
 8001804:	717b      	strb	r3, [r7, #5]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001806:	797b      	ldrb	r3, [r7, #5]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d1eb      	bne.n	80017e4 <Signal_Read_Pin+0x24>
 800180c:	e000      	b.n	8001810 <Signal_Read_Pin+0x50>
				break;
 800180e:	bf00      	nop
		}
		if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001810:	797b      	ldrb	r3, [r7, #5]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d003      	beq.n	800181e <Signal_Read_Pin+0x5e>
	while(retry != SIGNAL_DEBOUNCE_RETRIES){
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2b05      	cmp	r3, #5
 800181a:	d1d7      	bne.n	80017cc <Signal_Read_Pin+0xc>
 800181c:	e000      	b.n	8001820 <Signal_Read_Pin+0x60>
			break;
 800181e:	bf00      	nop
		}
	}
	return level;
 8001820:	79bb      	ldrb	r3, [r7, #6]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40010c00 	.word	0x40010c00

08001830 <Signal_SysTick_Interrupt>:

//SysTick interrupt, used for detecting signal timeout
void Signal_SysTick_Interrupt(){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	if(signal_reading || signal_present){
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <Signal_SysTick_Interrupt+0x3c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d103      	bne.n	8001844 <Signal_SysTick_Interrupt+0x14>
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <Signal_SysTick_Interrupt+0x40>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d010      	beq.n	8001866 <Signal_SysTick_Interrupt+0x36>
		if(timeout_passed_ms >= signal_ctr.timeout_ms){
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <Signal_SysTick_Interrupt+0x44>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <Signal_SysTick_Interrupt+0x48>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d805      	bhi.n	800185c <Signal_SysTick_Interrupt+0x2c>
			signal_present = false;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <Signal_SysTick_Interrupt+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
			Signal_Gone();
 8001856:	f000 fde7 	bl	8002428 <Signal_Gone>
		}else{
			timeout_passed_ms++;
		}
	}
}
 800185a:	e004      	b.n	8001866 <Signal_SysTick_Interrupt+0x36>
			timeout_passed_ms++;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <Signal_SysTick_Interrupt+0x48>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <Signal_SysTick_Interrupt+0x48>)
 8001864:	6013      	str	r3, [r2, #0]
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000214 	.word	0x20000214
 8001870:	20000215 	.word	0x20000215
 8001874:	2000020c 	.word	0x2000020c
 8001878:	20000210 	.word	0x20000210

0800187c <Signal_Timer_Interrupt>:
void Signal_Timer_Interrupt(){
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
	signal_reading = false;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <Signal_Timer_Interrupt+0x14>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000214 	.word	0x20000214

08001894 <Signal_Pin_Interrupt>:
//Signal pin interrupt
void Signal_Pin_Interrupt(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	if(Signal_Read_Pin() == SIGNAL_HIGH){
 800189a:	f7ff ff91 	bl	80017c0 <Signal_Read_Pin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <Signal_Pin_Interrupt+0x22>
		//Start measuring signal length
		Signal_Timer_Restart();
 80018a4:	f7ff ff70 	bl	8001788 <Signal_Timer_Restart>
		timeout_passed_ms = 0;
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <Signal_Pin_Interrupt+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
		signal_reading = true;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <Signal_Pin_Interrupt+0x68>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
		Signal_Timer_Stop();
		signal_reading = false;
		signal_present = true;
		Signal_Received(length_ms);
	}
}
 80018b4:	e01c      	b.n	80018f0 <Signal_Pin_Interrupt+0x5c>
	}else if(signal_reading){
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <Signal_Pin_Interrupt+0x68>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d018      	beq.n	80018f0 <Signal_Pin_Interrupt+0x5c>
		float length_ms  = (float)((uint32_t)Signal_Read_Timer() + (uint32_t)1) / 24000.0f;
 80018be:	f7ff ff73 	bl	80017a8 <Signal_Read_Timer>
 80018c2:	4603      	mov	r3, r0
 80018c4:	3301      	adds	r3, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f94e 	bl	8000b68 <__aeabi_ui2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	490c      	ldr	r1, [pc, #48]	; (8001900 <Signal_Pin_Interrupt+0x6c>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa55 	bl	8000d80 <__aeabi_fdiv>
 80018d6:	4603      	mov	r3, r0
 80018d8:	607b      	str	r3, [r7, #4]
		Signal_Timer_Stop();
 80018da:	f7ff ff4b 	bl	8001774 <Signal_Timer_Stop>
		signal_reading = false;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <Signal_Pin_Interrupt+0x68>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
		signal_present = true;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <Signal_Pin_Interrupt+0x70>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
		Signal_Received(length_ms);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fdc4 	bl	8002478 <Signal_Received>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000210 	.word	0x20000210
 80018fc:	20000214 	.word	0x20000214
 8001900:	46bb8000 	.word	0x46bb8000
 8001904:	20000215 	.word	0x20000215

08001908 <_memcpy>:
//Received status and configuration data pointers from host
usb_config_t usb_rx_config;
usb_rx_status_t usb_rx_status;

//Function used only in this file, simple data copy loop for unaligned memory access
static void _memcpy(uint32_t dst_addr, uint32_t src_addr, uint32_t length){
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001918:	e00b      	b.n	8001932 <_memcpy+0x2a>
		*(uint8_t *)(dst_addr + i) = *(uint8_t *)(src_addr + i);
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	4413      	add	r3, r2
 8001920:	4619      	mov	r1, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4413      	add	r3, r2
 8001928:	780a      	ldrb	r2, [r1, #0]
 800192a:	701a      	strb	r2, [r3, #0]
		i++;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	3301      	adds	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d1ef      	bne.n	800191a <_memcpy+0x12>
	}
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
	...

08001948 <USB_Packet_Received>:

//Called from USB packet received interrupt
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
		each time "*data" will contain 64 or less bytes, "length" will indicate how many bytes
		can be read from "*data".
	*/

	//Ignore any packet if previous packet request is still pending or size could not be correct
	if((usb_o.usb_rq != USB_RQ_NONE) || (length % sizeof(uint32_t))){
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <USB_Packet_Received+0xf0>)
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 81c3 	bne.w	8001ce2 <USB_Packet_Received+0x39a>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 81bd 	bne.w	8001ce2 <USB_Packet_Received+0x39a>
		return;
	}

	//Variables for CRCs
	uint32_t stored_crc = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
	uint32_t actual_crc = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
	
	//Calculate expecting configuration request packet length without CRC padding symbols
	uint32_t cmd_rx_config_rq_length = 2 + sizeof(uint8_t) + sizeof(uint32_t);
 8001970:	2307      	movs	r3, #7
 8001972:	617b      	str	r3, [r7, #20]
	//Include CRC padding symbols in length
	while(cmd_rx_config_rq_length % sizeof(uint32_t)) cmd_rx_config_rq_length++;
 8001974:	e002      	b.n	800197c <USB_Packet_Received+0x34>
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f7      	bne.n	8001976 <USB_Packet_Received+0x2e>

	//Configuration request from host, length is less than 64
	if(
		(data[1] == USB_CMD_CONFIG) &&
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3301      	adds	r3, #1
 800198a:	781b      	ldrb	r3, [r3, #0]
	if(
 800198c:	2b00      	cmp	r3, #0
 800198e:	d129      	bne.n	80019e4 <USB_Packet_Received+0x9c>
		((uint32_t)data[0] == cmd_rx_config_rq_length) &&
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
		(data[1] == USB_CMD_CONFIG) &&
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	4293      	cmp	r3, r2
 800199a:	d123      	bne.n	80019e4 <USB_Packet_Received+0x9c>
		((uint32_t)data[0] == cmd_rx_config_rq_length) &&
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d11f      	bne.n	80019e4 <USB_Packet_Received+0x9c>
		(length == cmd_rx_config_rq_length)
	){
		_memcpy((uint32_t)&stored_crc, (uint32_t)&data[length - sizeof(uint32_t)], sizeof(uint32_t));
 80019a4:	f107 0008 	add.w	r0, r7, #8
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3b04      	subs	r3, #4
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	2204      	movs	r2, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff ffa8 	bl	8001908 <_memcpy>
		actual_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / sizeof(uint32_t)) - 1);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3b01      	subs	r3, #1
 80019be:	461a      	mov	r2, r3
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	481e      	ldr	r0, [pc, #120]	; (8001a3c <USB_Packet_Received+0xf4>)
 80019c4:	f002 faf9 	bl	8003fba <HAL_CRC_Calculate>
 80019c8:	60f8      	str	r0, [r7, #12]
		if(stored_crc == actual_crc){
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	f040 8189 	bne.w	8001ce6 <USB_Packet_Received+0x39e>
			//Parse received request
			usb_o.set_revert_flash_rq = data[2];
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	789a      	ldrb	r2, [r3, #2]
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <USB_Packet_Received+0xf0>)
 80019da:	709a      	strb	r2, [r3, #2]
			usb_o.usb_rq = USB_RQ_CONF;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <USB_Packet_Received+0xf0>)
 80019de:	2201      	movs	r2, #1
 80019e0:	705a      	strb	r2, [r3, #1]
		}
		return;
 80019e2:	e180      	b.n	8001ce6 <USB_Packet_Received+0x39e>
	}

	//Calculate expecting status request packet length without CRC padding symbols
	//Length and command bytes
	uint32_t cmd_rx_status_rq_length = 2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
	//Append "usb_config_t" length
	cmd_rx_status_rq_length +=
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	333e      	adds	r3, #62	; 0x3e
 80019ec:	613b      	str	r3, [r7, #16]
		sizeof(float) +
		sizeof(uint16_t) +
		sizeof(uint16_t) +
		sizeof(uint8_t);
	//Append "usb_rx_status_t" length
	cmd_rx_status_rq_length +=
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3306      	adds	r3, #6
 80019f2:	613b      	str	r3, [r7, #16]
		sizeof(float) +
		sizeof(bool) +
		sizeof(uint8_t);
	//Append CRC length
	cmd_rx_status_rq_length +=
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	3304      	adds	r3, #4
 80019f8:	613b      	str	r3, [r7, #16]
		sizeof(uint32_t);
	
	//Include CRC padding symbols in length
	while(cmd_rx_status_rq_length % sizeof(uint32_t)) cmd_rx_status_rq_length++;
 80019fa:	e002      	b.n	8001a02 <USB_Packet_Received+0xba>
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	3301      	adds	r3, #1
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f7      	bne.n	80019fc <USB_Packet_Received+0xb4>

	//Status request from host, length is more than 64, so here we store first 64 bytes
	if(
		(data[1] == USB_CMD_STATUS) &&
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	781b      	ldrb	r3, [r3, #0]
	if(
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d116      	bne.n	8001a44 <USB_Packet_Received+0xfc>
		((uint32_t)data[0] == cmd_rx_status_rq_length) &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
		(data[1] == USB_CMD_STATUS) &&
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d110      	bne.n	8001a44 <USB_Packet_Received+0xfc>
		((uint32_t)data[0] == cmd_rx_status_rq_length) &&
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b40      	cmp	r3, #64	; 0x40
 8001a26:	d10d      	bne.n	8001a44 <USB_Packet_Received+0xfc>
		(length == 64)
	){
		_memcpy((uint32_t)&rx_buffer[0], (uint32_t)&data[0], 64);
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <USB_Packet_Received+0xf8>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff ff6a 	bl	8001908 <_memcpy>
		return;
 8001a34:	e158      	b.n	8001ce8 <USB_Packet_Received+0x3a0>
 8001a36:	bf00      	nop
 8001a38:	20000418 	.word	0x20000418
 8001a3c:	20000528 	.word	0x20000528
 8001a40:	20000318 	.word	0x20000318
	}

	//Status request from host, here we store remaining bytes and parse results
	if(
		(rx_buffer[0] == cmd_rx_status_rq_length) &&
 8001a44:	4baa      	ldr	r3, [pc, #680]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
	if(
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f040 8141 	bne.w	8001cd4 <USB_Packet_Received+0x38c>
		(rx_buffer[1] == USB_CMD_STATUS) &&
 8001a52:	4ba7      	ldr	r3, [pc, #668]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001a54:	785b      	ldrb	r3, [r3, #1]
		(rx_buffer[0] == cmd_rx_status_rq_length) &&
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f040 813c 	bne.w	8001cd4 <USB_Packet_Received+0x38c>
		(64 + length == cmd_rx_status_rq_length)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3340      	adds	r3, #64	; 0x40
		(rx_buffer[1] == USB_CMD_STATUS) &&
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	f040 8136 	bne.w	8001cd4 <USB_Packet_Received+0x38c>
	){
		//Copy remaining data
		_memcpy((uint32_t)&rx_buffer[64], (uint32_t)&data[0], length);
 8001a68:	48a2      	ldr	r0, [pc, #648]	; (8001cf4 <USB_Packet_Received+0x3ac>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff ff4a 	bl	8001908 <_memcpy>
		//Check CRC
		_memcpy((uint32_t)&stored_crc, (uint32_t)&rx_buffer[cmd_rx_status_rq_length - sizeof(uint32_t)], sizeof(uint32_t));
 8001a74:	f107 0008 	add.w	r0, r7, #8
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	4a9c      	ldr	r2, [pc, #624]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001a7e:	4413      	add	r3, r2
 8001a80:	2204      	movs	r2, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff ff40 	bl	8001908 <_memcpy>
		actual_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)rx_buffer, (cmd_rx_status_rq_length / sizeof(uint32_t)) - 1);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4997      	ldr	r1, [pc, #604]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001a92:	4899      	ldr	r0, [pc, #612]	; (8001cf8 <USB_Packet_Received+0x3b0>)
 8001a94:	f002 fa91 	bl	8003fba <HAL_CRC_Calculate>
 8001a98:	60f8      	str	r0, [r7, #12]
		if(stored_crc == actual_crc){
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	f040 8118 	bne.w	8001cd4 <USB_Packet_Received+0x38c>
			//We don't copy size and command bytes here
			length = 2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	603b      	str	r3, [r7, #0]

			//Copy config to global struct variables
			_memcpy((uint32_t)&usb_rx_config.potentiometer_min, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001aa8:	4894      	ldr	r0, [pc, #592]	; (8001cfc <USB_Packet_Received+0x3b4>)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	4a90      	ldr	r2, [pc, #576]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001aae:	4413      	add	r3, r2
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff ff28 	bl	8001908 <_memcpy>
			length += sizeof(uint16_t);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	3302      	adds	r3, #2
 8001abc:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.potentiometer_max, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001abe:	4890      	ldr	r0, [pc, #576]	; (8001d00 <USB_Packet_Received+0x3b8>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4a8b      	ldr	r2, [pc, #556]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff ff1d 	bl	8001908 <_memcpy>
			length += sizeof(uint16_t);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.motor_max_power, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001ad4:	488b      	ldr	r0, [pc, #556]	; (8001d04 <USB_Packet_Received+0x3bc>)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4a85      	ldr	r2, [pc, #532]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001ada:	4413      	add	r3, r2
 8001adc:	2201      	movs	r2, #1
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff ff12 	bl	8001908 <_memcpy>
			length += sizeof(uint8_t);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.motor_invert, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001aea:	4887      	ldr	r0, [pc, #540]	; (8001d08 <USB_Packet_Received+0x3c0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4a80      	ldr	r2, [pc, #512]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001af0:	4413      	add	r3, r2
 8001af2:	2201      	movs	r2, #1
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff ff07 	bl	8001908 <_memcpy>
			length += sizeof(bool);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_ignore, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001b00:	4882      	ldr	r0, [pc, #520]	; (8001d0c <USB_Packet_Received+0x3c4>)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001b06:	4413      	add	r3, r2
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff fefc 	bl	8001908 <_memcpy>
			length += sizeof(bool);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_min, (uint32_t)&rx_buffer[length], sizeof(float));
 8001b16:	487e      	ldr	r0, [pc, #504]	; (8001d10 <USB_Packet_Received+0x3c8>)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4a75      	ldr	r2, [pc, #468]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2204      	movs	r2, #4
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff fef1 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_max, (uint32_t)&rx_buffer[length], sizeof(float));
 8001b2c:	4879      	ldr	r0, [pc, #484]	; (8001d14 <USB_Packet_Received+0x3cc>)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	4a6f      	ldr	r2, [pc, #444]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001b32:	4413      	add	r3, r2
 8001b34:	2204      	movs	r2, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7ff fee6 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_timeout, (uint32_t)&rx_buffer[length], sizeof(uint32_t));
 8001b42:	4875      	ldr	r0, [pc, #468]	; (8001d18 <USB_Packet_Received+0x3d0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4a6a      	ldr	r2, [pc, #424]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001b48:	4413      	add	r3, r2
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff fedb 	bl	8001908 <_memcpy>
			length += sizeof(uint32_t);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3304      	adds	r3, #4
 8001b56:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.led_mode, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001b58:	4870      	ldr	r0, [pc, #448]	; (8001d1c <USB_Packet_Received+0x3d4>)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4a64      	ldr	r2, [pc, #400]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	2201      	movs	r2, #1
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff fed0 	bl	8001908 <_memcpy>
			length += sizeof(uint8_t);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_on_e_m, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001b6e:	486c      	ldr	r0, [pc, #432]	; (8001d20 <USB_Packet_Received+0x3d8>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4a5f      	ldr	r2, [pc, #380]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001b74:	4413      	add	r3, r2
 8001b76:	2201      	movs	r2, #1
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff fec5 	bl	8001908 <_memcpy>
			length += sizeof(bool);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3301      	adds	r3, #1
 8001b82:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001b84:	4867      	ldr	r0, [pc, #412]	; (8001d24 <USB_Packet_Received+0x3dc>)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	4a59      	ldr	r2, [pc, #356]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff feba 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3304      	adds	r3, #4
 8001b98:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001b9a:	4863      	ldr	r0, [pc, #396]	; (8001d28 <USB_Packet_Received+0x3e0>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4a54      	ldr	r2, [pc, #336]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7ff feaf 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3304      	adds	r3, #4
 8001bae:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bb0:	485e      	ldr	r0, [pc, #376]	; (8001d2c <USB_Packet_Received+0x3e4>)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7ff fea4 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bc6:	485a      	ldr	r0, [pc, #360]	; (8001d30 <USB_Packet_Received+0x3e8>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	2204      	movs	r2, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff fe99 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bdc:	4855      	ldr	r0, [pc, #340]	; (8001d34 <USB_Packet_Received+0x3ec>)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4a43      	ldr	r2, [pc, #268]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001be2:	4413      	add	r3, r2
 8001be4:	2204      	movs	r2, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7ff fe8e 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bf2:	4851      	ldr	r0, [pc, #324]	; (8001d38 <USB_Packet_Received+0x3f0>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4a3e      	ldr	r2, [pc, #248]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7ff fe83 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3304      	adds	r3, #4
 8001c06:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c08:	484c      	ldr	r0, [pc, #304]	; (8001d3c <USB_Packet_Received+0x3f4>)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	4a38      	ldr	r2, [pc, #224]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001c0e:	4413      	add	r3, r2
 8001c10:	2204      	movs	r2, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7ff fe78 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c1e:	4848      	ldr	r0, [pc, #288]	; (8001d40 <USB_Packet_Received+0x3f8>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4a33      	ldr	r2, [pc, #204]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001c24:	4413      	add	r3, r2
 8001c26:	2204      	movs	r2, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7ff fe6d 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	3304      	adds	r3, #4
 8001c32:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c34:	4843      	ldr	r0, [pc, #268]	; (8001d44 <USB_Packet_Received+0x3fc>)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4a2d      	ldr	r2, [pc, #180]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7ff fe62 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3304      	adds	r3, #4
 8001c48:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_split_steps_1, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001c4a:	483f      	ldr	r0, [pc, #252]	; (8001d48 <USB_Packet_Received+0x400>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001c50:	4413      	add	r3, r2
 8001c52:	2202      	movs	r2, #2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7ff fe57 	bl	8001908 <_memcpy>
			length += sizeof(uint16_t);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_split_steps_2, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001c60:	483a      	ldr	r0, [pc, #232]	; (8001d4c <USB_Packet_Received+0x404>)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001c66:	4413      	add	r3, r2
 8001c68:	2202      	movs	r2, #2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7ff fe4c 	bl	8001908 <_memcpy>
			length += sizeof(uint16_t);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3302      	adds	r3, #2
 8001c74:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_sampling_ms, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001c76:	4836      	ldr	r0, [pc, #216]	; (8001d50 <USB_Packet_Received+0x408>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7ff fe41 	bl	8001908 <_memcpy>
			length += sizeof(uint8_t);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	603b      	str	r3, [r7, #0]

			//Copy status
			_memcpy((uint32_t)&usb_rx_status.pid_setpoint, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c8c:	4831      	ldr	r0, [pc, #196]	; (8001d54 <USB_Packet_Received+0x40c>)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001c92:	4413      	add	r3, r2
 8001c94:	2204      	movs	r2, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7ff fe36 	bl	8001908 <_memcpy>
			length += sizeof(float);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_status.usb_rq_stat_phold, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001ca2:	482d      	ldr	r0, [pc, #180]	; (8001d58 <USB_Packet_Received+0x410>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001ca8:	4413      	add	r3, r2
 8001caa:	2201      	movs	r2, #1
 8001cac:	4619      	mov	r1, r3
 8001cae:	f7ff fe2b 	bl	8001908 <_memcpy>
			length += sizeof(bool);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_status.usb_rq_stat_motor, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001cb8:	4828      	ldr	r0, [pc, #160]	; (8001d5c <USB_Packet_Received+0x414>)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7ff fe20 	bl	8001908 <_memcpy>
			length += sizeof(uint8_t);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]

			//Set status request flag
			usb_o.usb_rq = USB_RQ_STAT;
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <USB_Packet_Received+0x418>)
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	705a      	strb	r2, [r3, #1]
		}
	}

	//Clear length and command bytes in buffer
	rx_buffer[0] = 0x00;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
	rx_buffer[1] = 0xff;
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <USB_Packet_Received+0x3a8>)
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	705a      	strb	r2, [r3, #1]
 8001ce0:	e002      	b.n	8001ce8 <USB_Packet_Received+0x3a0>
		return;
 8001ce2:	bf00      	nop
 8001ce4:	e000      	b.n	8001ce8 <USB_Packet_Received+0x3a0>
		return;
 8001ce6:	bf00      	nop
}
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000318 	.word	0x20000318
 8001cf4:	20000358 	.word	0x20000358
 8001cf8:	20000528 	.word	0x20000528
 8001cfc:	2000041c 	.word	0x2000041c
 8001d00:	2000041e 	.word	0x2000041e
 8001d04:	20000420 	.word	0x20000420
 8001d08:	20000421 	.word	0x20000421
 8001d0c:	20000422 	.word	0x20000422
 8001d10:	20000424 	.word	0x20000424
 8001d14:	20000428 	.word	0x20000428
 8001d18:	2000042c 	.word	0x2000042c
 8001d1c:	20000430 	.word	0x20000430
 8001d20:	20000431 	.word	0x20000431
 8001d24:	20000434 	.word	0x20000434
 8001d28:	20000438 	.word	0x20000438
 8001d2c:	2000043c 	.word	0x2000043c
 8001d30:	20000440 	.word	0x20000440
 8001d34:	20000444 	.word	0x20000444
 8001d38:	20000448 	.word	0x20000448
 8001d3c:	2000044c 	.word	0x2000044c
 8001d40:	20000450 	.word	0x20000450
 8001d44:	20000454 	.word	0x20000454
 8001d48:	20000458 	.word	0x20000458
 8001d4c:	2000045a 	.word	0x2000045a
 8001d50:	2000045c 	.word	0x2000045c
 8001d54:	20000460 	.word	0x20000460
 8001d58:	20000464 	.word	0x20000464
 8001d5c:	20000465 	.word	0x20000465
 8001d60:	20000418 	.word	0x20000418

08001d64 <USB_Send_Status>:

//Sends status, clears pending request flag
void USB_Send_Status(usb_tx_status_t *status){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	//Keep track of written data
	uint8_t length = 0; //Total length should not be more than 255 bytes
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]

	//First byte of tx array contains total data length, we write it last
	length++;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	3301      	adds	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
	
	//Write command byte
	tx_buffer[length] = USB_CMD_STATUS;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	4a39      	ldr	r2, [pc, #228]	; (8001e60 <USB_Send_Status+0xfc>)
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	54d1      	strb	r1, [r2, r3]
	length++;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	3301      	adds	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]

	//Write data
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->pid_running, sizeof(bool));
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <USB_Send_Status+0xfc>)
 8001d88:	4413      	add	r3, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7ff fdb9 	bl	8001908 <_memcpy>
	length += sizeof(bool);
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->pid_setpoint, sizeof(float));
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <USB_Send_Status+0xfc>)
 8001da0:	4413      	add	r3, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	2204      	movs	r2, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7ff fdac 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	3304      	adds	r3, #4
 8001db4:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->potentiometer_position, sizeof(float));
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <USB_Send_Status+0xfc>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3308      	adds	r3, #8
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7ff fd9f 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->motor_power, sizeof(int16_t));
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <USB_Send_Status+0xfc>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	330c      	adds	r3, #12
 8001ddc:	2202      	movs	r2, #2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7ff fd92 	bl	8001908 <_memcpy>
	length += sizeof(int16_t);
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	3302      	adds	r3, #2
 8001de8:	73fb      	strb	r3, [r7, #15]

	//Write CRC padding bytes
	while(length % sizeof(uint32_t)){
 8001dea:	e006      	b.n	8001dfa <USB_Send_Status+0x96>
		tx_buffer[length] = USB_CRC_PADDING_SYMBOL;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <USB_Send_Status+0xfc>)
 8001df0:	2100      	movs	r1, #0
 8001df2:	54d1      	strb	r1, [r2, r3]
		length++;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	3301      	adds	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
	while(length % sizeof(uint32_t)){
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f2      	bne.n	8001dec <USB_Send_Status+0x88>
	}

	//Set length at start now
	tx_buffer[0] = length + sizeof(uint32_t);
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <USB_Send_Status+0xfc>)
 8001e0e:	701a      	strb	r2, [r3, #0]

	//Write CRC
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&tx_buffer, (length / sizeof(uint32_t)));
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	4911      	ldr	r1, [pc, #68]	; (8001e60 <USB_Send_Status+0xfc>)
 8001e1a:	4812      	ldr	r0, [pc, #72]	; (8001e64 <USB_Send_Status+0x100>)
 8001e1c:	f002 f8cd 	bl	8003fba <HAL_CRC_Calculate>
 8001e20:	4603      	mov	r3, r0
 8001e22:	60bb      	str	r3, [r7, #8]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&crc, sizeof(uint32_t));
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <USB_Send_Status+0xfc>)
 8001e28:	4413      	add	r3, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	2204      	movs	r2, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7ff fd68 	bl	8001908 <_memcpy>
	length += sizeof(uint32_t);
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	73fb      	strb	r3, [r7, #15]
	
	//Send
	CDC_Transmit_FS((uint8_t *)&tx_buffer, length);
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4619      	mov	r1, r3
 8001e44:	4806      	ldr	r0, [pc, #24]	; (8001e60 <USB_Send_Status+0xfc>)
 8001e46:	f00a f8dd 	bl	800c004 <CDC_Transmit_FS>

	//Clear flags
	usb_o.set_revert_flash_rq = USB_SETTINGS_KEEP;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <USB_Send_Status+0x104>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	709a      	strb	r2, [r3, #2]
	usb_o.usb_rq = USB_RQ_NONE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <USB_Send_Status+0x104>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	705a      	strb	r2, [r3, #1]
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000218 	.word	0x20000218
 8001e64:	20000528 	.word	0x20000528
 8001e68:	20000418 	.word	0x20000418

08001e6c <USB_Send_Config>:
//Sends config, clears pending request flag
void USB_Send_Config(usb_config_t *config){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	//Keep track of written data
	uint8_t length = 0; //Total length should not be more than 255 bytes
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]

	//First byte of tx array contains total data length, we write it last
	length++;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
	
	//Write command byte
	tx_buffer[length] = USB_CMD_CONFIG;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	4aae      	ldr	r2, [pc, #696]	; (800213c <USB_Send_Config+0x2d0>)
 8001e82:	2100      	movs	r1, #0
 8001e84:	54d1      	strb	r1, [r2, r3]
	length++;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]

	//Write data
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->potentiometer_min, sizeof(uint16_t));
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	4aab      	ldr	r2, [pc, #684]	; (800213c <USB_Send_Config+0x2d0>)
 8001e90:	4413      	add	r3, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7ff fd35 	bl	8001908 <_memcpy>
	length += sizeof(uint16_t);
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->potentiometer_max, sizeof(uint16_t));
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	4aa5      	ldr	r2, [pc, #660]	; (800213c <USB_Send_Config+0x2d0>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3302      	adds	r3, #2
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7ff fd28 	bl	8001908 <_memcpy>
	length += sizeof(uint16_t);
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	3302      	adds	r3, #2
 8001ebc:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->motor_max_power, sizeof(uint8_t));
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	4a9e      	ldr	r2, [pc, #632]	; (800213c <USB_Send_Config+0x2d0>)
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7ff fd1b 	bl	8001908 <_memcpy>
	length += sizeof(uint8_t);
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->motor_invert, sizeof(bool));
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	4a98      	ldr	r2, [pc, #608]	; (800213c <USB_Send_Config+0x2d0>)
 8001edc:	4413      	add	r3, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3305      	adds	r3, #5
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7ff fd0e 	bl	8001908 <_memcpy>
	length += sizeof(bool);
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_ignore, sizeof(bool));
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	4a91      	ldr	r2, [pc, #580]	; (800213c <USB_Send_Config+0x2d0>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3306      	adds	r3, #6
 8001efe:	2201      	movs	r2, #1
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7ff fd01 	bl	8001908 <_memcpy>
	length += sizeof(bool);
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_min, sizeof(float));
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	4a8b      	ldr	r2, [pc, #556]	; (800213c <USB_Send_Config+0x2d0>)
 8001f10:	4413      	add	r3, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3308      	adds	r3, #8
 8001f18:	2204      	movs	r2, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7ff fcf4 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3304      	adds	r3, #4
 8001f24:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_max, sizeof(float));
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4a84      	ldr	r2, [pc, #528]	; (800213c <USB_Send_Config+0x2d0>)
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	330c      	adds	r3, #12
 8001f32:	2204      	movs	r2, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7ff fce7 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_timeout, sizeof(uint32_t));
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	4a7e      	ldr	r2, [pc, #504]	; (800213c <USB_Send_Config+0x2d0>)
 8001f44:	4413      	add	r3, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3310      	adds	r3, #16
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7ff fcda 	bl	8001908 <_memcpy>
	length += sizeof(uint32_t);
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	3304      	adds	r3, #4
 8001f58:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->led_mode, sizeof(uint8_t));
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	4a77      	ldr	r2, [pc, #476]	; (800213c <USB_Send_Config+0x2d0>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3314      	adds	r3, #20
 8001f66:	2201      	movs	r2, #1
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7ff fccd 	bl	8001908 <_memcpy>
	length += sizeof(uint8_t);
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_on_e_m, sizeof(bool));
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	4a71      	ldr	r2, [pc, #452]	; (800213c <USB_Send_Config+0x2d0>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3315      	adds	r3, #21
 8001f80:	2201      	movs	r2, #1
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7ff fcc0 	bl	8001908 <_memcpy>
	length += sizeof(bool);
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_1, sizeof(float));
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	4a6a      	ldr	r2, [pc, #424]	; (800213c <USB_Send_Config+0x2d0>)
 8001f92:	4413      	add	r3, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3318      	adds	r3, #24
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7ff fcb3 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_1, sizeof(float));
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	4a64      	ldr	r2, [pc, #400]	; (800213c <USB_Send_Config+0x2d0>)
 8001fac:	4413      	add	r3, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	331c      	adds	r3, #28
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7ff fca6 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_1, sizeof(float));
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	4a5d      	ldr	r2, [pc, #372]	; (800213c <USB_Send_Config+0x2d0>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3320      	adds	r3, #32
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7ff fc99 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_2, sizeof(float));
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	4a57      	ldr	r2, [pc, #348]	; (800213c <USB_Send_Config+0x2d0>)
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3324      	adds	r3, #36	; 0x24
 8001fe8:	2204      	movs	r2, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	f7ff fc8c 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_2, sizeof(float));
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	4a50      	ldr	r2, [pc, #320]	; (800213c <USB_Send_Config+0x2d0>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3328      	adds	r3, #40	; 0x28
 8002002:	2204      	movs	r2, #4
 8002004:	4619      	mov	r1, r3
 8002006:	f7ff fc7f 	bl	8001908 <_memcpy>
	length += sizeof(float);
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	3304      	adds	r3, #4
 800200e:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_2, sizeof(float));
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	4a4a      	ldr	r2, [pc, #296]	; (800213c <USB_Send_Config+0x2d0>)
 8002014:	4413      	add	r3, r2
 8002016:	4618      	mov	r0, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	332c      	adds	r3, #44	; 0x2c
 800201c:	2204      	movs	r2, #4
 800201e:	4619      	mov	r1, r3
 8002020:	f7ff fc72 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	3304      	adds	r3, #4
 8002028:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_3, sizeof(float));
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	4a43      	ldr	r2, [pc, #268]	; (800213c <USB_Send_Config+0x2d0>)
 800202e:	4413      	add	r3, r2
 8002030:	4618      	mov	r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3330      	adds	r3, #48	; 0x30
 8002036:	2204      	movs	r2, #4
 8002038:	4619      	mov	r1, r3
 800203a:	f7ff fc65 	bl	8001908 <_memcpy>
	length += sizeof(float);
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3304      	adds	r3, #4
 8002042:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_3, sizeof(float));
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	4a3d      	ldr	r2, [pc, #244]	; (800213c <USB_Send_Config+0x2d0>)
 8002048:	4413      	add	r3, r2
 800204a:	4618      	mov	r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3334      	adds	r3, #52	; 0x34
 8002050:	2204      	movs	r2, #4
 8002052:	4619      	mov	r1, r3
 8002054:	f7ff fc58 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	3304      	adds	r3, #4
 800205c:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_3, sizeof(float));
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	4a36      	ldr	r2, [pc, #216]	; (800213c <USB_Send_Config+0x2d0>)
 8002062:	4413      	add	r3, r2
 8002064:	4618      	mov	r0, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3338      	adds	r3, #56	; 0x38
 800206a:	2204      	movs	r2, #4
 800206c:	4619      	mov	r1, r3
 800206e:	f7ff fc4b 	bl	8001908 <_memcpy>
	length += sizeof(float);
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3304      	adds	r3, #4
 8002076:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_split_steps_1, sizeof(uint16_t));
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	4a30      	ldr	r2, [pc, #192]	; (800213c <USB_Send_Config+0x2d0>)
 800207c:	4413      	add	r3, r2
 800207e:	4618      	mov	r0, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	333c      	adds	r3, #60	; 0x3c
 8002084:	2202      	movs	r2, #2
 8002086:	4619      	mov	r1, r3
 8002088:	f7ff fc3e 	bl	8001908 <_memcpy>
	length += sizeof(uint16_t);
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	3302      	adds	r3, #2
 8002090:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_split_steps_2, sizeof(uint16_t));
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	4a29      	ldr	r2, [pc, #164]	; (800213c <USB_Send_Config+0x2d0>)
 8002096:	4413      	add	r3, r2
 8002098:	4618      	mov	r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	333e      	adds	r3, #62	; 0x3e
 800209e:	2202      	movs	r2, #2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7ff fc31 	bl	8001908 <_memcpy>
	length += sizeof(uint16_t);
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	3302      	adds	r3, #2
 80020aa:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_sampling_ms, sizeof(uint8_t));
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	4a23      	ldr	r2, [pc, #140]	; (800213c <USB_Send_Config+0x2d0>)
 80020b0:	4413      	add	r3, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3340      	adds	r3, #64	; 0x40
 80020b8:	2201      	movs	r2, #1
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7ff fc24 	bl	8001908 <_memcpy>
	length += sizeof(uint8_t);
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	3301      	adds	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]

	//Write CRC padding bytes
	while(length % sizeof(uint32_t)){
 80020c6:	e006      	b.n	80020d6 <USB_Send_Config+0x26a>
		tx_buffer[length] = USB_CRC_PADDING_SYMBOL;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	4a1c      	ldr	r2, [pc, #112]	; (800213c <USB_Send_Config+0x2d0>)
 80020cc:	2100      	movs	r1, #0
 80020ce:	54d1      	strb	r1, [r2, r3]
		length++;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	3301      	adds	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
	while(length % sizeof(uint32_t)){
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f2      	bne.n	80020c8 <USB_Send_Config+0x25c>
	}

	//Set length at start now
	tx_buffer[0] = length + sizeof(uint32_t);
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	3304      	adds	r3, #4
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <USB_Send_Config+0x2d0>)
 80020ea:	701a      	strb	r2, [r3, #0]

	//Write CRC
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&tx_buffer, (length / sizeof(uint32_t)));
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	4911      	ldr	r1, [pc, #68]	; (800213c <USB_Send_Config+0x2d0>)
 80020f6:	4812      	ldr	r0, [pc, #72]	; (8002140 <USB_Send_Config+0x2d4>)
 80020f8:	f001 ff5f 	bl	8003fba <HAL_CRC_Calculate>
 80020fc:	4603      	mov	r3, r0
 80020fe:	60bb      	str	r3, [r7, #8]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&crc, sizeof(uint32_t));
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	4a0e      	ldr	r2, [pc, #56]	; (800213c <USB_Send_Config+0x2d0>)
 8002104:	4413      	add	r3, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	2204      	movs	r2, #4
 800210e:	4619      	mov	r1, r3
 8002110:	f7ff fbfa 	bl	8001908 <_memcpy>
	length += sizeof(uint32_t);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3304      	adds	r3, #4
 8002118:	73fb      	strb	r3, [r7, #15]

	//Send
	CDC_Transmit_FS((uint8_t *)&tx_buffer, length);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	b29b      	uxth	r3, r3
 800211e:	4619      	mov	r1, r3
 8002120:	4806      	ldr	r0, [pc, #24]	; (800213c <USB_Send_Config+0x2d0>)
 8002122:	f009 ff6f 	bl	800c004 <CDC_Transmit_FS>

	//Clear flags
	usb_o.set_revert_flash_rq = USB_SETTINGS_KEEP;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <USB_Send_Config+0x2d8>)
 8002128:	2200      	movs	r2, #0
 800212a:	709a      	strb	r2, [r3, #2]
	usb_o.usb_rq = USB_RQ_NONE;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <USB_Send_Config+0x2d8>)
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000218 	.word	0x20000218
 8002140:	20000528 	.word	0x20000528
 8002144:	20000418 	.word	0x20000418

08002148 <USB_Det>:
//Checks if USB is connected and updates "usb_o.usb_present" variable
void USB_Det(){
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	usb_o.usb_present = (hUsbDeviceFS.dev_state == USBD_STATE_ADDRESSED) || (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED);
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <USB_Det+0x30>)
 800214e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002152:	2b02      	cmp	r3, #2
 8002154:	d004      	beq.n	8002160 <USB_Det+0x18>
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <USB_Det+0x30>)
 8002158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800215c:	2b03      	cmp	r3, #3
 800215e:	d101      	bne.n	8002164 <USB_Det+0x1c>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <USB_Det+0x1e>
 8002164:	2300      	movs	r3, #0
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <USB_Det+0x34>)
 800216e:	701a      	strb	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	20000634 	.word	0x20000634
 800217c:	20000418 	.word	0x20000418

08002180 <HAL_ADC_ConvCpltCallback>:
#include "Drivers/signal.h"
#include "Drivers/motor.h"
#include "Drivers/led.h"

//ADC Conversation complete interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_ADC_ConvCpltCallback+0x20>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 8002192:	f7ff fa97 	bl	80016c4 <Potentiometer_ADC_Interrupt>
    }
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40012400 	.word	0x40012400

080021a4 <HAL_TIM_PeriodElapsedCallback>:

//Timer period elapsed interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d102      	bne.n	80021bc <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_Timer_Interrupt();
 80021b6:	f7ff fa29 	bl	800160c <PID_Timer_Interrupt>
	}
	else if(htim->Instance == TIM4){
		Signal_Timer_Interrupt();
	}
}
 80021ba:	e006      	b.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim->Instance == TIM4){
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x26>
		Signal_Timer_Interrupt();
 80021c6:	f7ff fb59 	bl	800187c <Signal_Timer_Interrupt>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800

080021dc <HAL_GPIO_EXTI_Callback>:

//GPIO interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIGNAL_Pin){
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d101      	bne.n	80021f0 <HAL_GPIO_EXTI_Callback+0x14>
		Signal_Pin_Interrupt();
 80021ec:	f7ff fb52 	bl	8001894 <Signal_Pin_Interrupt>
	}
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <Interrupts_SysTick>:

//Interrupt function called in every millisecond by system timer
void Interrupts_SysTick(){
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	Signal_SysTick_Interrupt();
 80021fc:	f7ff fb18 	bl	8001830 <Signal_SysTick_Interrupt>
	Motor_SysTick_Interrupt();
 8002200:	f7ff f82a 	bl	8001258 <Motor_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8002204:	f7fe ffce 	bl	80011a4 <LED_SysTick_Interrupt>
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <App_Init>:
#include "System/Drivers/signal.h"
#include "System/Drivers/usb.h"
#include "app.h"
#include "settings.h"

void App_Init(){
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	//Read configuration from flash into "settings_data" global struct
	Settings_Read();
 8002210:	f000 fa2e 	bl	8002670 <Settings_Read>
	//Apply configuration to functions
	Settings_Apply();
 8002214:	f000 fc08 	bl	8002a28 <Settings_Apply>

	//Start motor PWM
	Motor_Init();
 8002218:	f7ff f8ea 	bl	80013f0 <Motor_Init>
	//Start potentiometer measurements
	Potentiometer_Init();
 800221c:	f7ff fa8e 	bl	800173c <Potentiometer_Init>
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <App_Loop>:
void App_Loop(){
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
	//Reply and handle USB requests
	switch(usb_o.usb_rq){
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <App_Loop+0x124>)
 800222c:	785b      	ldrb	r3, [r3, #1]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d002      	beq.n	8002238 <App_Loop+0x14>
 8002232:	2b02      	cmp	r3, #2
 8002234:	d013      	beq.n	800225e <App_Loop+0x3a>
 8002236:	e07a      	b.n	800232e <App_Loop+0x10a>
		//Configuration request from host
		case USB_RQ_CONF:
			//Flash update or revert if "set_revert_flash_rq" byte is set so in received packet
			switch(usb_o.set_revert_flash_rq){
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <App_Loop+0x124>)
 800223a:	789b      	ldrb	r3, [r3, #2]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d002      	beq.n	8002246 <App_Loop+0x22>
 8002240:	2b02      	cmp	r3, #2
 8002242:	d005      	beq.n	8002250 <App_Loop+0x2c>
 8002244:	e007      	b.n	8002256 <App_Loop+0x32>
				case USB_SETTINGS_REVERT:
					Settings_Read();
 8002246:	f000 fa13 	bl	8002670 <Settings_Read>
					Settings_Apply();
 800224a:	f000 fbed 	bl	8002a28 <Settings_Apply>
				break;
 800224e:	e002      	b.n	8002256 <App_Loop+0x32>
				case USB_SETTINGS_FLASH:
					Settings_Write();
 8002250:	f000 fc46 	bl	8002ae0 <Settings_Write>
				break;
 8002254:	bf00      	nop
			}

			//Reply with configuration
			USB_Send_Config(&settings_data);
 8002256:	483d      	ldr	r0, [pc, #244]	; (800234c <App_Loop+0x128>)
 8002258:	f7ff fe08 	bl	8001e6c <USB_Send_Config>
		break;
 800225c:	e067      	b.n	800232e <App_Loop+0x10a>

		//Status request from host (incoming packet also contains configuration which we should set)
		case USB_RQ_STAT:
			//Copy packed struct to unpacked struct and apply configuration to functions
			settings_data = usb_rx_config;
 800225e:	4a3b      	ldr	r2, [pc, #236]	; (800234c <App_Loop+0x128>)
 8002260:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <App_Loop+0x12c>)
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	2344      	movs	r3, #68	; 0x44
 8002268:	461a      	mov	r2, r3
 800226a:	f00a facd 	bl	800c808 <memcpy>
			Settings_Apply();
 800226e:	f000 fbdb 	bl	8002a28 <Settings_Apply>

			//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout if "usb_rq_stat_motor" is set in received packet
			switch(usb_rx_status.usb_rq_stat_motor){
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <App_Loop+0x130>)
 8002274:	795b      	ldrb	r3, [r3, #5]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d002      	beq.n	8002280 <App_Loop+0x5c>
 800227a:	2b02      	cmp	r3, #2
 800227c:	d014      	beq.n	80022a8 <App_Loop+0x84>
 800227e:	e028      	b.n	80022d2 <App_Loop+0xae>
				case USB_MOTOR_BACKWARD:
					if(potentiometer_o.position > settings_data.potentiometer_min){
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <App_Loop+0x134>)
 8002282:	681c      	ldr	r4, [r3, #0]
 8002284:	4b31      	ldr	r3, [pc, #196]	; (800234c <App_Loop+0x128>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe fc71 	bl	8000b70 <__aeabi_i2f>
 800228e:	4603      	mov	r3, r0
 8002290:	4619      	mov	r1, r3
 8002292:	4620      	mov	r0, r4
 8002294:	f7fe fe7c 	bl	8000f90 <__aeabi_fcmpgt>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d100      	bne.n	80022a0 <App_Loop+0x7c>
						Motor_Set(-1000);
					}
				break;
 800229e:	e018      	b.n	80022d2 <App_Loop+0xae>
						Motor_Set(-1000);
 80022a0:	482e      	ldr	r0, [pc, #184]	; (800235c <App_Loop+0x138>)
 80022a2:	f7fe fffd 	bl	80012a0 <Motor_Set>
				break;
 80022a6:	e014      	b.n	80022d2 <App_Loop+0xae>
				case USB_MOTOR_FORWARD:
					if(potentiometer_o.position < settings_data.potentiometer_max){
 80022a8:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <App_Loop+0x134>)
 80022aa:	681c      	ldr	r4, [r3, #0]
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <App_Loop+0x128>)
 80022ae:	885b      	ldrh	r3, [r3, #2]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fc5d 	bl	8000b70 <__aeabi_i2f>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7fe fe4a 	bl	8000f54 <__aeabi_fcmplt>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d100      	bne.n	80022c8 <App_Loop+0xa4>
						Motor_Set(1000);
					}
				break;
 80022c6:	e003      	b.n	80022d0 <App_Loop+0xac>
						Motor_Set(1000);
 80022c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022cc:	f7fe ffe8 	bl	80012a0 <Motor_Set>
				break;
 80022d0:	bf00      	nop
			}

			//Hold position with PID request if "usb_rq_stat_phold" is set in received packet
			if(usb_rx_status.usb_rq_stat_phold){
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <App_Loop+0x130>)
 80022d4:	791b      	ldrb	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <App_Loop+0xd2>
				pid_i.setpoint = usb_rx_status.pid_setpoint;
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <App_Loop+0x130>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a20      	ldr	r2, [pc, #128]	; (8002360 <App_Loop+0x13c>)
 80022e0:	6053      	str	r3, [r2, #4]
				if(!pid_o.running){
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <App_Loop+0x140>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	f083 0301 	eor.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <App_Loop+0xe6>
					//In this mode PID and motor operation automatically stops after signal_ctr.timeout_ms milliseconds unless renewed
					PID_Start();
 80022f0:	f7ff f9b4 	bl	800165c <PID_Start>
 80022f4:	e009      	b.n	800230a <App_Loop+0xe6>
				}
			}else if(settings_data.signal_ignore && pid_o.running){
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <App_Loop+0x128>)
 80022f8:	799b      	ldrb	r3, [r3, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <App_Loop+0xe6>
 80022fe:	4b19      	ldr	r3, [pc, #100]	; (8002364 <App_Loop+0x140>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <App_Loop+0xe6>
				PID_Stop();
 8002306:	f7ff f9c9 	bl	800169c <PID_Stop>
			}

			//Reply with status packet
			usb_tx_status_t status = {
				.pid_running = pid_o.running,
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <App_Loop+0x140>)
 800230c:	781b      	ldrb	r3, [r3, #0]
			usb_tx_status_t status = {
 800230e:	703b      	strb	r3, [r7, #0]
				.pid_setpoint = pid_i.setpoint,
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <App_Loop+0x13c>)
 8002312:	685b      	ldr	r3, [r3, #4]
			usb_tx_status_t status = {
 8002314:	607b      	str	r3, [r7, #4]
				.potentiometer_position = potentiometer_o.position,
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <App_Loop+0x134>)
 8002318:	681b      	ldr	r3, [r3, #0]
			usb_tx_status_t status = {
 800231a:	60bb      	str	r3, [r7, #8]
				.motor_power = Motor_Get()
 800231c:	f7ff f828 	bl	8001370 <Motor_Get>
 8002320:	4603      	mov	r3, r0
			usb_tx_status_t status = {
 8002322:	81bb      	strh	r3, [r7, #12]
			};
			USB_Send_Status(&status);
 8002324:	463b      	mov	r3, r7
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fd1c 	bl	8001d64 <USB_Send_Status>
		break;
 800232c:	bf00      	nop
	}

	//Update USB is connected or not status variable
	USB_Det();
 800232e:	f7ff ff0b 	bl	8002148 <USB_Det>
	//Operate LED
	led_i.pid_running = pid_o.running;
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <App_Loop+0x140>)
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <App_Loop+0x144>)
 8002338:	705a      	strb	r2, [r3, #1]
	LED_Update();
 800233a:	f7fe ff47 	bl	80011cc <LED_Update>
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop
 8002348:	20000418 	.word	0x20000418
 800234c:	20000468 	.word	0x20000468
 8002350:	2000041c 	.word	0x2000041c
 8002354:	20000460 	.word	0x20000460
 8002358:	20000200 	.word	0x20000200
 800235c:	fffffc18 	.word	0xfffffc18
 8002360:	200001e8 	.word	0x200001e8
 8002364:	200001f0 	.word	0x200001f0
 8002368:	200001a0 	.word	0x200001a0

0800236c <PID_Ready>:
#include "System/Drivers/signal.h"
#include "System/Drivers/usb.h"
#include "settings.h"

//PID
void PID_Ready(float output){
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7fe fe15 	bl	8000fa4 <__aeabi_f2iz>
 800237a:	4603      	mov	r3, r0
 800237c:	b21b      	sxth	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe ff8e 	bl	80012a0 <Motor_Set>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <Potentiometer_Ready>:

//Potentiometer
void Potentiometer_Ready(){
 800238c:	b598      	push	{r3, r4, r7, lr}
 800238e:	af00      	add	r7, sp, #0
	pid_i.input = potentiometer_o.position;
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <Potentiometer_Ready+0x88>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a20      	ldr	r2, [pc, #128]	; (8002418 <Potentiometer_Ready+0x8c>)
 8002396:	6013      	str	r3, [r2, #0]
	if(!pid_o.running){
 8002398:	4b20      	ldr	r3, [pc, #128]	; (800241c <Potentiometer_Ready+0x90>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d033      	beq.n	800240e <Potentiometer_Ready+0x82>
		if(motor_o.running){
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <Potentiometer_Ready+0x94>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d02f      	beq.n	800240e <Potentiometer_Ready+0x82>
			if((potentiometer_o.position <= settings_data.potentiometer_min) && (Motor_Get() < 0)){
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <Potentiometer_Ready+0x88>)
 80023b0:	681c      	ldr	r4, [r3, #0]
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <Potentiometer_Ready+0x98>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fbda 	bl	8000b70 <__aeabi_i2f>
 80023bc:	4603      	mov	r3, r0
 80023be:	4619      	mov	r1, r3
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7fe fdd1 	bl	8000f68 <__aeabi_fcmple>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <Potentiometer_Ready+0x52>
 80023cc:	f7fe ffd0 	bl	8001370 <Motor_Get>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da03      	bge.n	80023de <Potentiometer_Ready+0x52>
				Motor_Set(0);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fe ff62 	bl	80012a0 <Motor_Set>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 80023dc:	e017      	b.n	800240e <Potentiometer_Ready+0x82>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <Potentiometer_Ready+0x88>)
 80023e0:	681c      	ldr	r4, [r3, #0]
 80023e2:	4b10      	ldr	r3, [pc, #64]	; (8002424 <Potentiometer_Ready+0x98>)
 80023e4:	885b      	ldrh	r3, [r3, #2]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fbc2 	bl	8000b70 <__aeabi_i2f>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4619      	mov	r1, r3
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7fe fdc3 	bl	8000f7c <__aeabi_fcmpge>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d100      	bne.n	80023fe <Potentiometer_Ready+0x72>
}
 80023fc:	e007      	b.n	800240e <Potentiometer_Ready+0x82>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
 80023fe:	f7fe ffb7 	bl	8001370 <Motor_Get>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	dd02      	ble.n	800240e <Potentiometer_Ready+0x82>
				Motor_Set(0);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe ff49 	bl	80012a0 <Motor_Set>
}
 800240e:	bf00      	nop
 8002410:	bd98      	pop	{r3, r4, r7, pc}
 8002412:	bf00      	nop
 8002414:	20000200 	.word	0x20000200
 8002418:	200001e8 	.word	0x200001e8
 800241c:	200001f0 	.word	0x200001f0
 8002420:	200001b4 	.word	0x200001b4
 8002424:	20000468 	.word	0x20000468

08002428 <Signal_Gone>:

//Signal
void Signal_Gone(){
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	if(!settings_data.signal_ignore || (settings_data.signal_ignore && (!usb_o.usb_present))){
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <Signal_Gone+0x40>)
 800242e:	799b      	ldrb	r3, [r3, #6]
 8002430:	f083 0301 	eor.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <Signal_Gone+0x28>
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <Signal_Gone+0x40>)
 800243c:	799b      	ldrb	r3, [r3, #6]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <Signal_Gone+0x3c>
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <Signal_Gone+0x44>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f083 0301 	eor.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <Signal_Gone+0x3c>
		if(pid_o.running){
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <Signal_Gone+0x48>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <Signal_Gone+0x34>
			PID_Stop();
 8002458:	f7ff f920 	bl	800169c <PID_Stop>
		}
		pid_i.setpoint = 0;
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <Signal_Gone+0x4c>)
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
	}
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000468 	.word	0x20000468
 800246c:	20000418 	.word	0x20000418
 8002470:	200001f0 	.word	0x200001f0
 8002474:	200001e8 	.word	0x200001e8

08002478 <Signal_Received>:
void Signal_Received(float length_ms){
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if(!usb_o.usb_present || (!settings_data.signal_ignore && usb_o.usb_present)){
 8002480:	4b65      	ldr	r3, [pc, #404]	; (8002618 <Signal_Received+0x1a0>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <Signal_Received+0x30>
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <Signal_Received+0x1a4>)
 8002490:	799b      	ldrb	r3, [r3, #6]
 8002492:	f083 0301 	eor.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80b2 	beq.w	8002602 <Signal_Received+0x18a>
 800249e:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <Signal_Received+0x1a0>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80ad 	beq.w	8002602 <Signal_Received+0x18a>
		if((length_ms <= settings_data.signal_max) && (length_ms >= settings_data.signal_min)){
 80024a8:	4b5c      	ldr	r3, [pc, #368]	; (800261c <Signal_Received+0x1a4>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fd5a 	bl	8000f68 <__aeabi_fcmple>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d100      	bne.n	80024bc <Signal_Received+0x44>
			if(!pid_o.running){
				PID_Start();
			}
		}
	}
}
 80024ba:	e0a2      	b.n	8002602 <Signal_Received+0x18a>
		if((length_ms <= settings_data.signal_max) && (length_ms >= settings_data.signal_min)){
 80024bc:	4b57      	ldr	r3, [pc, #348]	; (800261c <Signal_Received+0x1a4>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fd5a 	bl	8000f7c <__aeabi_fcmpge>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d100      	bne.n	80024d0 <Signal_Received+0x58>
}
 80024ce:	e098      	b.n	8002602 <Signal_Received+0x18a>
						((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) * //Total enabled potentiometer scale
 80024d0:	4b52      	ldr	r3, [pc, #328]	; (800261c <Signal_Received+0x1a4>)
 80024d2:	885b      	ldrh	r3, [r3, #2]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fb47 	bl	8000b68 <__aeabi_ui2f>
 80024da:	4604      	mov	r4, r0
 80024dc:	4b4f      	ldr	r3, [pc, #316]	; (800261c <Signal_Received+0x1a4>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fb41 	bl	8000b68 <__aeabi_ui2f>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4619      	mov	r1, r3
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7fe fa8a 	bl	8000a04 <__aeabi_fsub>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461c      	mov	r4, r3
						((length_ms - settings_data.signal_min) / (settings_data.signal_max - settings_data.signal_min)) //Received signal to total signal scale ratio
 80024f4:	4b49      	ldr	r3, [pc, #292]	; (800261c <Signal_Received+0x1a4>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4619      	mov	r1, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fa82 	bl	8000a04 <__aeabi_fsub>
 8002500:	4603      	mov	r3, r0
 8002502:	461d      	mov	r5, r3
 8002504:	4b45      	ldr	r3, [pc, #276]	; (800261c <Signal_Received+0x1a4>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a44      	ldr	r2, [pc, #272]	; (800261c <Signal_Received+0x1a4>)
 800250a:	6892      	ldr	r2, [r2, #8]
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fa78 	bl	8000a04 <__aeabi_fsub>
 8002514:	4603      	mov	r3, r0
 8002516:	4619      	mov	r1, r3
 8002518:	4628      	mov	r0, r5
 800251a:	f7fe fc31 	bl	8000d80 <__aeabi_fdiv>
 800251e:	4603      	mov	r3, r0
						((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) * //Total enabled potentiometer scale
 8002520:	4619      	mov	r1, r3
 8002522:	4620      	mov	r0, r4
 8002524:	f7fe fb78 	bl	8000c18 <__aeabi_fmul>
 8002528:	4603      	mov	r3, r0
 800252a:	461c      	mov	r4, r3
					) + (float)settings_data.potentiometer_min;
 800252c:	4b3b      	ldr	r3, [pc, #236]	; (800261c <Signal_Received+0x1a4>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fb19 	bl	8000b68 <__aeabi_ui2f>
 8002536:	4603      	mov	r3, r0
			float new_pid_setpoint =
 8002538:	4619      	mov	r1, r3
 800253a:	4620      	mov	r0, r4
 800253c:	f7fe fa64 	bl	8000a08 <__addsf3>
 8002540:	4603      	mov	r3, r0
 8002542:	60fb      	str	r3, [r7, #12]
				fabs((new_pid_setpoint - (float)settings_data.potentiometer_min) - (pid_i.setpoint - (float)settings_data.potentiometer_min)) /
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <Signal_Received+0x1a4>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fb0d 	bl	8000b68 <__aeabi_ui2f>
 800254e:	4603      	mov	r3, r0
 8002550:	4619      	mov	r1, r3
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7fe fa56 	bl	8000a04 <__aeabi_fsub>
 8002558:	4603      	mov	r3, r0
 800255a:	461d      	mov	r5, r3
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <Signal_Received+0x1a8>)
 800255e:	685c      	ldr	r4, [r3, #4]
 8002560:	4b2e      	ldr	r3, [pc, #184]	; (800261c <Signal_Received+0x1a4>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe faff 	bl	8000b68 <__aeabi_ui2f>
 800256a:	4603      	mov	r3, r0
 800256c:	4619      	mov	r1, r3
 800256e:	4620      	mov	r0, r4
 8002570:	f7fe fa48 	bl	8000a04 <__aeabi_fsub>
 8002574:	4603      	mov	r3, r0
 8002576:	4619      	mov	r1, r3
 8002578:	4628      	mov	r0, r5
 800257a:	f7fe fa43 	bl	8000a04 <__aeabi_fsub>
 800257e:	4603      	mov	r3, r0
 8002580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ff47 	bl	8000418 <__aeabi_f2d>
 800258a:	4604      	mov	r4, r0
 800258c:	460d      	mov	r5, r1
					((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) / 100.0f
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <Signal_Received+0x1a4>)
 8002590:	885b      	ldrh	r3, [r3, #2]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fae8 	bl	8000b68 <__aeabi_ui2f>
 8002598:	4606      	mov	r6, r0
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <Signal_Received+0x1a4>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fae2 	bl	8000b68 <__aeabi_ui2f>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4619      	mov	r1, r3
 80025a8:	4630      	mov	r0, r6
 80025aa:	f7fe fa2b 	bl	8000a04 <__aeabi_fsub>
 80025ae:	4603      	mov	r3, r0
 80025b0:	491c      	ldr	r1, [pc, #112]	; (8002624 <Signal_Received+0x1ac>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fbe4 	bl	8000d80 <__aeabi_fdiv>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ff2c 	bl	8000418 <__aeabi_f2d>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
				fabs((new_pid_setpoint - (float)settings_data.potentiometer_min) - (pid_i.setpoint - (float)settings_data.potentiometer_min)) /
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fe f8a8 	bl	800071c <__aeabi_ddiv>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
			if(
 80025d4:	a30e      	add	r3, pc, #56	; (adr r3, 8002610 <Signal_Received+0x198>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fe f9fb 	bl	80009d4 <__aeabi_dcmpge>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <Signal_Received+0x172>
				led_i.position_changed = true;
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <Signal_Received+0x1b0>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
			pid_i.setpoint = new_pid_setpoint;
 80025ea:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <Signal_Received+0x1a8>)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6053      	str	r3, [r2, #4]
			if(!pid_o.running){
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <Signal_Received+0x1b4>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f083 0301 	eor.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <Signal_Received+0x18a>
				PID_Start();
 80025fe:	f7ff f82d 	bl	800165c <PID_Start>
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	20000000 	.word	0x20000000
 8002614:	3fa1eb85 	.word	0x3fa1eb85
 8002618:	20000418 	.word	0x20000418
 800261c:	20000468 	.word	0x20000468
 8002620:	200001e8 	.word	0x200001e8
 8002624:	42c80000 	.word	0x42c80000
 8002628:	200001a0 	.word	0x200001a0
 800262c:	200001f0 	.word	0x200001f0

08002630 <_memcpy>:

//Buffer for data + CRC padding bytes + CRC for writing to/reading from flash
static uint8_t settings_data_buff[sizeof(usb_config_t) + (sizeof(uint32_t) - 1) + sizeof(uint32_t)]; //Data size + maximum amount of CRC padding bytes + CRC size

//Function used only in this file, simple data copy loop for unaligned memory access
static void _memcpy(uint32_t dst_addr, uint32_t src_addr, uint32_t length){
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
	while(i != length){
 8002640:	e00b      	b.n	800265a <_memcpy+0x2a>
		*(uint8_t *)(dst_addr + i) = *(uint8_t *)(src_addr + i);
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	4413      	add	r3, r2
 8002648:	4619      	mov	r1, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	4413      	add	r3, r2
 8002650:	780a      	ldrb	r2, [r1, #0]
 8002652:	701a      	strb	r2, [r3, #0]
		i++;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
	while(i != length){
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	d1ef      	bne.n	8002642 <_memcpy+0x12>
	}
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
	...

08002670 <Settings_Read>:

//Reads settings to "settings_data" global variable from flash. If does not exist in flash or wrong data, writes default values
void Settings_Read(){
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
	//Calculate CRC padding bytes count
	uint8_t i = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 800267a:	e002      	b.n	8002682 <Settings_Read+0x12>
		i++;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3301      	adds	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f7      	bne.n	800267c <Settings_Read+0xc>
	}

	//Read from flash
	Flash_Read(&settings_data_buff[0], SETTINGS_FLASH_ADDRESS, sizeof(usb_config_t) + i + sizeof(uint32_t));
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	3348      	adds	r3, #72	; 0x48
 8002690:	461a      	mov	r2, r3
 8002692:	4912      	ldr	r1, [pc, #72]	; (80026dc <Settings_Read+0x6c>)
 8002694:	4812      	ldr	r0, [pc, #72]	; (80026e0 <Settings_Read+0x70>)
 8002696:	f7fe fcab 	bl	8000ff0 <Flash_Read>

	//Get CRCs
	uint32_t actual_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&settings_data_buff[0], (sizeof(usb_config_t) + i) / sizeof(uint32_t));
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3344      	adds	r3, #68	; 0x44
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	490f      	ldr	r1, [pc, #60]	; (80026e0 <Settings_Read+0x70>)
 80026a4:	480f      	ldr	r0, [pc, #60]	; (80026e4 <Settings_Read+0x74>)
 80026a6:	f001 fc88 	bl	8003fba <HAL_CRC_Calculate>
 80026aa:	60b8      	str	r0, [r7, #8]
	uint32_t stored_crc = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
	_memcpy((uint32_t)&stored_crc, (uint32_t)&settings_data_buff[sizeof(usb_config_t) + i], sizeof(uint32_t));
 80026b0:	1d38      	adds	r0, r7, #4
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	3344      	adds	r3, #68	; 0x44
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <Settings_Read+0x70>)
 80026b8:	4413      	add	r3, r2
 80026ba:	2204      	movs	r2, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	f7ff ffb7 	bl	8002630 <_memcpy>

	//Check if CRC is correct
	if(actual_crc != stored_crc){
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d012      	beq.n	80026f0 <Settings_Read+0x80>
		settings_data = settings_data_defaults;
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <Settings_Read+0x78>)
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <Settings_Read+0x7c>)
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	2344      	movs	r3, #68	; 0x44
 80026d4:	461a      	mov	r2, r3
 80026d6:	f00a f897 	bl	800c808 <memcpy>
 80026da:	e19c      	b.n	8002a16 <Settings_Read+0x3a6>
 80026dc:	0800fc00 	.word	0x0800fc00
 80026e0:	200004ac 	.word	0x200004ac
 80026e4:	20000528 	.word	0x20000528
 80026e8:	20000468 	.word	0x20000468
 80026ec:	0800c8b0 	.word	0x0800c8b0
		return;
	}

	//Copy to global variable from flash buffer
	_memcpy((uint32_t)&settings_data, (uint32_t)&settings_data_buff[0], sizeof(usb_config_t));
 80026f0:	4ba8      	ldr	r3, [pc, #672]	; (8002994 <Settings_Read+0x324>)
 80026f2:	49a9      	ldr	r1, [pc, #676]	; (8002998 <Settings_Read+0x328>)
 80026f4:	2244      	movs	r2, #68	; 0x44
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff9a 	bl	8002630 <_memcpy>

	//Verify that all configuration values are in range
	if(
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 80026fc:	4ba5      	ldr	r3, [pc, #660]	; (8002994 <Settings_Read+0x324>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
	if(
 8002702:	4293      	cmp	r3, r2
 8002704:	f0c0 817f 	bcc.w	8002a06 <Settings_Read+0x396>
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 8002708:	4ba2      	ldr	r3, [pc, #648]	; (8002994 <Settings_Read+0x324>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	f640 727f 	movw	r2, #3967	; 0xf7f
 8002710:	4293      	cmp	r3, r2
 8002712:	f200 8178 	bhi.w	8002a06 <Settings_Read+0x396>
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 8002716:	4b9f      	ldr	r3, [pc, #636]	; (8002994 <Settings_Read+0x324>)
 8002718:	885b      	ldrh	r3, [r3, #2]
 800271a:	2280      	movs	r2, #128	; 0x80
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 800271c:	4293      	cmp	r3, r2
 800271e:	f0c0 8172 	bcc.w	8002a06 <Settings_Read+0x396>
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 8002722:	4b9c      	ldr	r3, [pc, #624]	; (8002994 <Settings_Read+0x324>)
 8002724:	885b      	ldrh	r3, [r3, #2]
 8002726:	f640 72ff 	movw	r2, #4095	; 0xfff
 800272a:	4293      	cmp	r3, r2
 800272c:	f200 816b 	bhi.w	8002a06 <Settings_Read+0x396>
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 8002730:	4b98      	ldr	r3, [pc, #608]	; (8002994 <Settings_Read+0x324>)
 8002732:	791b      	ldrb	r3, [r3, #4]
 8002734:	2200      	movs	r2, #0
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 8002736:	4293      	cmp	r3, r2
 8002738:	f0c0 8165 	bcc.w	8002a06 <Settings_Read+0x396>
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 800273c:	4b95      	ldr	r3, [pc, #596]	; (8002994 <Settings_Read+0x324>)
 800273e:	791b      	ldrb	r3, [r3, #4]
 8002740:	2264      	movs	r2, #100	; 0x64
 8002742:	4293      	cmp	r3, r2
 8002744:	f200 815f 	bhi.w	8002a06 <Settings_Read+0x396>
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 8002748:	4b92      	ldr	r3, [pc, #584]	; (8002994 <Settings_Read+0x324>)
 800274a:	795b      	ldrb	r3, [r3, #5]
 800274c:	2200      	movs	r2, #0
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 800274e:	4293      	cmp	r3, r2
 8002750:	f0c0 8159 	bcc.w	8002a06 <Settings_Read+0x396>
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 8002754:	4b8f      	ldr	r3, [pc, #572]	; (8002994 <Settings_Read+0x324>)
 8002756:	795b      	ldrb	r3, [r3, #5]
 8002758:	2201      	movs	r2, #1
 800275a:	4293      	cmp	r3, r2
 800275c:	f200 8153 	bhi.w	8002a06 <Settings_Read+0x396>
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 8002760:	4b8c      	ldr	r3, [pc, #560]	; (8002994 <Settings_Read+0x324>)
 8002762:	799b      	ldrb	r3, [r3, #6]
 8002764:	2200      	movs	r2, #0
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 8002766:	4293      	cmp	r3, r2
 8002768:	f0c0 814d 	bcc.w	8002a06 <Settings_Read+0x396>
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 800276c:	4b89      	ldr	r3, [pc, #548]	; (8002994 <Settings_Read+0x324>)
 800276e:	795b      	ldrb	r3, [r3, #5]
 8002770:	2201      	movs	r2, #1
 8002772:	4293      	cmp	r3, r2
 8002774:	f200 8147 	bhi.w	8002a06 <Settings_Read+0x396>
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 8002778:	4b86      	ldr	r3, [pc, #536]	; (8002994 <Settings_Read+0x324>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a87      	ldr	r2, [pc, #540]	; (800299c <Settings_Read+0x32c>)
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fbe7 	bl	8000f54 <__aeabi_fcmplt>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 813c 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 800278e:	4b81      	ldr	r3, [pc, #516]	; (8002994 <Settings_Read+0x324>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	4a83      	ldr	r2, [pc, #524]	; (80029a0 <Settings_Read+0x330>)
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fbfa 	bl	8000f90 <__aeabi_fcmpgt>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f040 8131 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027a4:	4b7b      	ldr	r3, [pc, #492]	; (8002994 <Settings_Read+0x324>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fbd0 	bl	8000f54 <__aeabi_fcmplt>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8125 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027bc:	4b75      	ldr	r3, [pc, #468]	; (8002994 <Settings_Read+0x324>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a78      	ldr	r2, [pc, #480]	; (80029a4 <Settings_Read+0x334>)
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fbe3 	bl	8000f90 <__aeabi_fcmpgt>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f040 811a 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 80027d2:	4b70      	ldr	r3, [pc, #448]	; (8002994 <Settings_Read+0x324>)
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2206      	movs	r2, #6
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027d8:	4293      	cmp	r3, r2
 80027da:	f0c0 8114 	bcc.w	8002a06 <Settings_Read+0x396>
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 80027de:	4b6d      	ldr	r3, [pc, #436]	; (8002994 <Settings_Read+0x324>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	22c8      	movs	r2, #200	; 0xc8
 80027e4:	4293      	cmp	r3, r2
 80027e6:	f200 810e 	bhi.w	8002a06 <Settings_Read+0x396>
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <Settings_Read+0x324>)
 80027ec:	7d1b      	ldrb	r3, [r3, #20]
 80027ee:	2200      	movs	r2, #0
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 80027f0:	4293      	cmp	r3, r2
 80027f2:	f0c0 8108 	bcc.w	8002a06 <Settings_Read+0x396>
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <Settings_Read+0x324>)
 80027f8:	7d1b      	ldrb	r3, [r3, #20]
 80027fa:	2203      	movs	r2, #3
 80027fc:	4293      	cmp	r3, r2
 80027fe:	f200 8102 	bhi.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 8002802:	4b64      	ldr	r3, [pc, #400]	; (8002994 <Settings_Read+0x324>)
 8002804:	7d5b      	ldrb	r3, [r3, #21]
 8002806:	2200      	movs	r2, #0
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 8002808:	4293      	cmp	r3, r2
 800280a:	f0c0 80fc 	bcc.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 800280e:	4b61      	ldr	r3, [pc, #388]	; (8002994 <Settings_Read+0x324>)
 8002810:	7d5b      	ldrb	r3, [r3, #21]
 8002812:	2201      	movs	r2, #1
 8002814:	4293      	cmp	r3, r2
 8002816:	f200 80f6 	bhi.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 800281a:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <Settings_Read+0x324>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fb95 	bl	8000f54 <__aeabi_fcmplt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 80ea 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 8002832:	4b58      	ldr	r3, [pc, #352]	; (8002994 <Settings_Read+0x324>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	4a5c      	ldr	r2, [pc, #368]	; (80029a8 <Settings_Read+0x338>)
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fba8 	bl	8000f90 <__aeabi_fcmpgt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 80df 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 8002848:	4b52      	ldr	r3, [pc, #328]	; (8002994 <Settings_Read+0x324>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fb7e 	bl	8000f54 <__aeabi_fcmplt>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 80d3 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <Settings_Read+0x324>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <Settings_Read+0x338>)
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fb91 	bl	8000f90 <__aeabi_fcmpgt>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	f040 80c8 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <Settings_Read+0x324>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fb67 	bl	8000f54 <__aeabi_fcmplt>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 80bc 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 800288e:	4b41      	ldr	r3, [pc, #260]	; (8002994 <Settings_Read+0x324>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a45      	ldr	r2, [pc, #276]	; (80029a8 <Settings_Read+0x338>)
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fb7a 	bl	8000f90 <__aeabi_fcmpgt>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 80b1 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028a4:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <Settings_Read+0x324>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fb50 	bl	8000f54 <__aeabi_fcmplt>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f040 80a5 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <Settings_Read+0x324>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	4a39      	ldr	r2, [pc, #228]	; (80029a8 <Settings_Read+0x338>)
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fb63 	bl	8000f90 <__aeabi_fcmpgt>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 809a 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 80028d2:	4b30      	ldr	r3, [pc, #192]	; (8002994 <Settings_Read+0x324>)
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fb39 	bl	8000f54 <__aeabi_fcmplt>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 808e 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 80028ea:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <Settings_Read+0x324>)
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	4a2e      	ldr	r2, [pc, #184]	; (80029a8 <Settings_Read+0x338>)
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fb4c 	bl	8000f90 <__aeabi_fcmpgt>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 8083 	bne.w	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <Settings_Read+0x324>)
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fb22 	bl	8000f54 <__aeabi_fcmplt>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d177      	bne.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <Settings_Read+0x324>)
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <Settings_Read+0x338>)
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fb36 	bl	8000f90 <__aeabi_fcmpgt>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d16d      	bne.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <Settings_Read+0x324>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fb0d 	bl	8000f54 <__aeabi_fcmplt>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d162      	bne.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <Settings_Read+0x324>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <Settings_Read+0x338>)
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fb21 	bl	8000f90 <__aeabi_fcmpgt>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d158      	bne.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <Settings_Read+0x324>)
 8002956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002958:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe faf8 	bl	8000f54 <__aeabi_fcmplt>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d14d      	bne.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <Settings_Read+0x324>)
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <Settings_Read+0x338>)
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fb0c 	bl	8000f90 <__aeabi_fcmpgt>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d143      	bne.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <Settings_Read+0x324>)
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fae3 	bl	8000f54 <__aeabi_fcmplt>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	e00b      	b.n	80029ac <Settings_Read+0x33c>
 8002994:	20000468 	.word	0x20000468
 8002998:	200004ac 	.word	0x200004ac
 800299c:	3dcccccd 	.word	0x3dcccccd
 80029a0:	40066666 	.word	0x40066666
 80029a4:	402ccccd 	.word	0x402ccccd
 80029a8:	42c80000 	.word	0x42c80000
 80029ac:	d12b      	bne.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <Settings_Read+0x3ac>)
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <Settings_Read+0x3b0>)
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe faea 	bl	8000f90 <__aeabi_fcmpgt>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d121      	bne.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <Settings_Read+0x3ac>)
 80029c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80029c6:	2200      	movs	r2, #0
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d31c      	bcc.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <Settings_Read+0x3ac>)
 80029ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80029d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d816      	bhi.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <Settings_Read+0x3ac>)
 80029da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029dc:	2200      	movs	r2, #0
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 80029de:	4293      	cmp	r3, r2
 80029e0:	d311      	bcc.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <Settings_Read+0x3ac>)
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d80b      	bhi.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_sampling_ms < settings_data_min.pid_sampling_ms) || (settings_data.pid_sampling_ms > settings_data_max.pid_sampling_ms)
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <Settings_Read+0x3ac>)
 80029f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f4:	2205      	movs	r2, #5
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d305      	bcc.n	8002a06 <Settings_Read+0x396>
		(settings_data.pid_sampling_ms < settings_data_min.pid_sampling_ms) || (settings_data.pid_sampling_ms > settings_data_max.pid_sampling_ms)
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <Settings_Read+0x3ac>)
 80029fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a00:	2264      	movs	r2, #100	; 0x64
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d907      	bls.n	8002a16 <Settings_Read+0x3a6>
	){
		//If anything is aout of range, copy defaults
		settings_data = settings_data_defaults;
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <Settings_Read+0x3ac>)
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <Settings_Read+0x3b4>)
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	2344      	movs	r3, #68	; 0x44
 8002a10:	461a      	mov	r2, r3
 8002a12:	f009 fef9 	bl	800c808 <memcpy>
	}
}
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000468 	.word	0x20000468
 8002a20:	42c80000 	.word	0x42c80000
 8002a24:	0800c8b0 	.word	0x0800c8b0

08002a28 <Settings_Apply>:

//Copies values from "settings_data" to functions configurations variables
void Settings_Apply(){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	motor_ctr.max_power = settings_data.motor_max_power * 10;
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <Settings_Apply+0xa4>)
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <Settings_Apply+0xa8>)
 8002a3e:	805a      	strh	r2, [r3, #2]
	motor_ctr.invert = settings_data.motor_invert;
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <Settings_Apply+0xa4>)
 8002a42:	795a      	ldrb	r2, [r3, #5]
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <Settings_Apply+0xa8>)
 8002a46:	701a      	strb	r2, [r3, #0]
	signal_ctr.timeout_ms = settings_data.signal_timeout;
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <Settings_Apply+0xa4>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	4a21      	ldr	r2, [pc, #132]	; (8002ad4 <Settings_Apply+0xac>)
 8002a4e:	6013      	str	r3, [r2, #0]
	led_ctr.mode = settings_data.led_mode;
 8002a50:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <Settings_Apply+0xa4>)
 8002a52:	7d1a      	ldrb	r2, [r3, #20]
 8002a54:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <Settings_Apply+0xb0>)
 8002a56:	701a      	strb	r2, [r3, #0]
	pid_ctr.on_e_m = settings_data.pid_on_e_m;
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <Settings_Apply+0xa4>)
 8002a5a:	7d5a      	ldrb	r2, [r3, #21]
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <Settings_Apply+0xb4>)
 8002a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pid_ctr.kp_1 = settings_data.pid_kp_1;
 8002a62:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <Settings_Apply+0xa4>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <Settings_Apply+0xb4>)
 8002a68:	6013      	str	r3, [r2, #0]
	pid_ctr.ki_1 = settings_data.pid_ki_1;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <Settings_Apply+0xa4>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <Settings_Apply+0xb4>)
 8002a70:	6053      	str	r3, [r2, #4]
	pid_ctr.kd_1 = settings_data.pid_kd_1;
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <Settings_Apply+0xa4>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a19      	ldr	r2, [pc, #100]	; (8002adc <Settings_Apply+0xb4>)
 8002a78:	6093      	str	r3, [r2, #8]
	pid_ctr.kp_2 = settings_data.pid_kp_2;
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <Settings_Apply+0xa4>)
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <Settings_Apply+0xb4>)
 8002a80:	60d3      	str	r3, [r2, #12]
	pid_ctr.ki_2 = settings_data.pid_ki_2;
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <Settings_Apply+0xa4>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	4a15      	ldr	r2, [pc, #84]	; (8002adc <Settings_Apply+0xb4>)
 8002a88:	6113      	str	r3, [r2, #16]
	pid_ctr.kd_2 = settings_data.pid_kd_2;
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <Settings_Apply+0xa4>)
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <Settings_Apply+0xb4>)
 8002a90:	6153      	str	r3, [r2, #20]
	pid_ctr.kp_3 = settings_data.pid_kp_3;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <Settings_Apply+0xa4>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a11      	ldr	r2, [pc, #68]	; (8002adc <Settings_Apply+0xb4>)
 8002a98:	6193      	str	r3, [r2, #24]
	pid_ctr.ki_3 = settings_data.pid_ki_3;
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <Settings_Apply+0xa4>)
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <Settings_Apply+0xb4>)
 8002aa0:	61d3      	str	r3, [r2, #28]
	pid_ctr.kd_3 = settings_data.pid_kd_3;
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <Settings_Apply+0xa4>)
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <Settings_Apply+0xb4>)
 8002aa8:	6213      	str	r3, [r2, #32]
	pid_ctr.split_1 = settings_data.pid_split_steps_1;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <Settings_Apply+0xa4>)
 8002aac:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <Settings_Apply+0xb4>)
 8002ab0:	849a      	strh	r2, [r3, #36]	; 0x24
	pid_ctr.split_2 = settings_data.pid_split_steps_2;
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <Settings_Apply+0xa4>)
 8002ab4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <Settings_Apply+0xb4>)
 8002ab8:	84da      	strh	r2, [r3, #38]	; 0x26
	PID_Set_Sampling_Time(settings_data.pid_sampling_ms);
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <Settings_Apply+0xa4>)
 8002abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fdb0 	bl	8001628 <PID_Set_Sampling_Time>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000468 	.word	0x20000468
 8002ad0:	200001ac 	.word	0x200001ac
 8002ad4:	2000020c 	.word	0x2000020c
 8002ad8:	2000019c 	.word	0x2000019c
 8002adc:	200001bc 	.word	0x200001bc

08002ae0 <Settings_Write>:

//Writes "settings_data" global variable to flash
void Settings_Write(){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
	//Copy data to temporary buffer
	_memcpy((uint32_t)&settings_data_buff[0], (uint32_t)&settings_data, sizeof(usb_config_t));
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <Settings_Write+0x70>)
 8002ae8:	491a      	ldr	r1, [pc, #104]	; (8002b54 <Settings_Write+0x74>)
 8002aea:	2244      	movs	r2, #68	; 0x44
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fd9f 	bl	8002630 <_memcpy>
	//Append CRC padding symbols if necessary
	uint8_t i = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	71fb      	strb	r3, [r7, #7]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 8002af6:	e007      	b.n	8002b08 <Settings_Write+0x28>
		settings_data_buff[sizeof(usb_config_t) + i] = USB_CRC_PADDING_SYMBOL;
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	3344      	adds	r3, #68	; 0x44
 8002afc:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <Settings_Write+0x70>)
 8002afe:	2100      	movs	r1, #0
 8002b00:	54d1      	strb	r1, [r2, r3]
		i++;
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	3301      	adds	r3, #1
 8002b06:	71fb      	strb	r3, [r7, #7]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f2      	bne.n	8002af8 <Settings_Write+0x18>
	}

	//Append CRC
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&settings_data_buff[0], (sizeof(usb_config_t) + i) / sizeof(uint32_t));
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	3344      	adds	r3, #68	; 0x44
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	490d      	ldr	r1, [pc, #52]	; (8002b50 <Settings_Write+0x70>)
 8002b1c:	480e      	ldr	r0, [pc, #56]	; (8002b58 <Settings_Write+0x78>)
 8002b1e:	f001 fa4c 	bl	8003fba <HAL_CRC_Calculate>
 8002b22:	4603      	mov	r3, r0
 8002b24:	603b      	str	r3, [r7, #0]
	_memcpy((uint32_t)&settings_data_buff[sizeof(usb_config_t) + i], (uint32_t)&crc, sizeof(uint32_t));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	3344      	adds	r3, #68	; 0x44
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <Settings_Write+0x70>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	463b      	mov	r3, r7
 8002b32:	2204      	movs	r2, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7ff fd7b 	bl	8002630 <_memcpy>
	
	//Write to flash
	Flash_Write(&settings_data_buff[0], SETTINGS_FLASH_ADDRESS, sizeof(usb_config_t) + i + sizeof(uint32_t));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	3348      	adds	r3, #72	; 0x48
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4906      	ldr	r1, [pc, #24]	; (8002b5c <Settings_Write+0x7c>)
 8002b42:	4803      	ldr	r0, [pc, #12]	; (8002b50 <Settings_Write+0x70>)
 8002b44:	f7fe fa73 	bl	800102e <Flash_Write>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200004ac 	.word	0x200004ac
 8002b54:	20000468 	.word	0x20000468
 8002b58:	20000528 	.word	0x20000528
 8002b5c:	0800fc00 	.word	0x0800fc00

08002b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b64:	f000 fbee 	bl	8003344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b68:	f000 f813 	bl	8002b92 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b6c:	f000 f9e6 	bl	8002f3c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b70:	f000 f86c 	bl	8002c4c <MX_ADC1_Init>
  MX_CRC_Init();
 8002b74:	f000 f8a8 	bl	8002cc8 <MX_CRC_Init>
  MX_TIM2_Init();
 8002b78:	f000 f8ba 	bl	8002cf0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b7c:	f000 f93a 	bl	8002df4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b80:	f000 f986 	bl	8002e90 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002b84:	f009 f97a 	bl	800be7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 8002b88:	f7ff fb40 	bl	800220c <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 8002b8c:	f7ff fb4a 	bl	8002224 <App_Loop>
 8002b90:	e7fc      	b.n	8002b8c <main+0x2c>

08002b92 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b094      	sub	sp, #80	; 0x50
 8002b96:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b9c:	2228      	movs	r2, #40	; 0x28
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f009 fe3f 	bl	800c824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bb6:	1d3b      	adds	r3, r7, #4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bde:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 faa9 	bl	8006140 <HAL_RCC_OscConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002bf4:	f000 fa04 	bl	8003000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c08:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fd15 	bl	8006644 <HAL_RCC_ClockConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002c20:	f000 f9ee 	bl	8003000 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002c24:	2312      	movs	r3, #18
 8002c26:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fe89 	bl	800694c <HAL_RCCEx_PeriphCLKConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002c40:	f000 f9de 	bl	8003000 <Error_Handler>
  }
}
 8002c44:	bf00      	nop
 8002c46:	3750      	adds	r7, #80	; 0x50
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002c5e:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <MX_ADC1_Init+0x78>)
 8002c60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c62:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c68:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c6e:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002c76:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c88:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002c8a:	f000 fbbd 	bl	8003408 <HAL_ADC_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002c94:	f000 f9b4 	bl	8003000 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002c98:	2304      	movs	r3, #4
 8002c9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_ADC1_Init+0x74>)
 8002caa:	f000 fe13 	bl	80038d4 <HAL_ADC_ConfigChannel>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002cb4:	f000 f9a4 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	200004f8 	.word	0x200004f8
 8002cc4:	40012400 	.word	0x40012400

08002cc8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <MX_CRC_Init+0x20>)
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <MX_CRC_Init+0x24>)
 8002cd0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_CRC_Init+0x20>)
 8002cd4:	f001 f955 	bl	8003f82 <HAL_CRC_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002cde:	f000 f98f 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000528 	.word	0x20000528
 8002cec:	40023000 	.word	0x40023000

08002cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d04:	f107 0320 	add.w	r3, r7, #32
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
 8002d1c:	615a      	str	r2, [r3, #20]
 8002d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d20:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002d28:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002d34:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d42:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d48:	4829      	ldr	r0, [pc, #164]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d4a:	f003 ff75 	bl	8006c38 <HAL_TIM_Base_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d54:	f000 f954 	bl	8003000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d62:	4619      	mov	r1, r3
 8002d64:	4822      	ldr	r0, [pc, #136]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d66:	f004 fb51 	bl	800740c <HAL_TIM_ConfigClockSource>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d70:	f000 f946 	bl	8003000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d74:	481e      	ldr	r0, [pc, #120]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d76:	f004 f82f 	bl	8006dd8 <HAL_TIM_PWM_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d80:	f000 f93e 	bl	8003000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	4619      	mov	r1, r3
 8002d92:	4817      	ldr	r0, [pc, #92]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002d94:	f004 fec6 	bl	8007b24 <HAL_TIMEx_MasterConfigSynchronization>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002d9e:	f000 f92f 	bl	8003000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da2:	2360      	movs	r3, #96	; 0x60
 8002da4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002dac:	2302      	movs	r3, #2
 8002dae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2200      	movs	r2, #0
 8002db8:	4619      	mov	r1, r3
 8002dba:	480d      	ldr	r0, [pc, #52]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002dbc:	f004 fa68 	bl	8007290 <HAL_TIM_PWM_ConfigChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002dc6:	f000 f91b 	bl	8003000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	2204      	movs	r2, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4807      	ldr	r0, [pc, #28]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002dd2:	f004 fa5d 	bl	8007290 <HAL_TIM_PWM_ConfigChannel>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002ddc:	f000 f910 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002de0:	4803      	ldr	r0, [pc, #12]	; (8002df0 <MX_TIM2_Init+0x100>)
 8002de2:	f000 f9fb 	bl	80031dc <HAL_TIM_MspPostInit>

}
 8002de6:	bf00      	nop
 8002de8:	3738      	adds	r7, #56	; 0x38
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000530 	.word	0x20000530

08002df4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e08:	463b      	mov	r3, r7
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <MX_TIM3_Init+0x98>)
 8002e14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e18:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002e24:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e26:	22c7      	movs	r2, #199	; 0xc7
 8002e28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e36:	4814      	ldr	r0, [pc, #80]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e38:	f003 fefe 	bl	8006c38 <HAL_TIM_Base_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e42:	f000 f8dd 	bl	8003000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e4c:	f107 0308 	add.w	r3, r7, #8
 8002e50:	4619      	mov	r1, r3
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e54:	f004 fada 	bl	800740c <HAL_TIM_ConfigClockSource>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002e5e:	f000 f8cf 	bl	8003000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4806      	ldr	r0, [pc, #24]	; (8002e88 <MX_TIM3_Init+0x94>)
 8002e70:	f004 fe58 	bl	8007b24 <HAL_TIMEx_MasterConfigSynchronization>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002e7a:	f000 f8c1 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000578 	.word	0x20000578
 8002e8c:	40000400 	.word	0x40000400

08002e90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e96:	f107 0308 	add.w	r3, r7, #8
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002eac:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <MX_TIM4_Init+0xa8>)
 8002eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ed2:	4818      	ldr	r0, [pc, #96]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002ed4:	f003 feb0 	bl	8006c38 <HAL_TIM_Base_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002ede:	f000 f88f 	bl	8003000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ee8:	f107 0308 	add.w	r3, r7, #8
 8002eec:	4619      	mov	r1, r3
 8002eee:	4811      	ldr	r0, [pc, #68]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002ef0:	f004 fa8c 	bl	800740c <HAL_TIM_ConfigClockSource>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002efa:	f000 f881 	bl	8003000 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002efe:	2108      	movs	r1, #8
 8002f00:	480c      	ldr	r0, [pc, #48]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002f02:	f004 f863 	bl	8006fcc <HAL_TIM_OnePulse_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002f0c:	f000 f878 	bl	8003000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f18:	463b      	mov	r3, r7
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4805      	ldr	r0, [pc, #20]	; (8002f34 <MX_TIM4_Init+0xa4>)
 8002f1e:	f004 fe01 	bl	8007b24 <HAL_TIMEx_MasterConfigSynchronization>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002f28:	f000 f86a 	bl	8003000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f2c:	bf00      	nop
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200005c0 	.word	0x200005c0
 8002f38:	40000800 	.word	0x40000800

08002f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f42:	f107 0310 	add.w	r3, r7, #16
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f56:	f043 0320 	orr.w	r3, r3, #32
 8002f5a:	6193      	str	r3, [r2, #24]
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f68:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6193      	str	r3, [r2, #24]
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f86:	f043 0308 	orr.w	r3, r3, #8
 8002f8a:	6193      	str	r3, [r2, #24]
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <MX_GPIO_Init+0xb4>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	4815      	ldr	r0, [pc, #84]	; (8002ff4 <MX_GPIO_Init+0xb8>)
 8002f9e:	f001 fbda 	bl	8004756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002faa:	2302      	movs	r3, #2
 8002fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	480e      	ldr	r0, [pc, #56]	; (8002ff4 <MX_GPIO_Init+0xb8>)
 8002fba:	f001 fa31 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <MX_GPIO_Init+0xbc>)
 8002fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 0310 	add.w	r3, r7, #16
 8002fce:	4619      	mov	r1, r3
 8002fd0:	480a      	ldr	r0, [pc, #40]	; (8002ffc <MX_GPIO_Init+0xc0>)
 8002fd2:	f001 fa25 	bl	8004420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2007      	movs	r0, #7
 8002fdc:	f000 ff9b 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002fe0:	2007      	movs	r0, #7
 8002fe2:	f000 ffb4 	bl	8003f4e <HAL_NVIC_EnableIRQ>

}
 8002fe6:	bf00      	nop
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40010800 	.word	0x40010800
 8002ff8:	10310000 	.word	0x10310000
 8002ffc:	40010c00 	.word	0x40010c00

08003000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003004:	b672      	cpsid	i
}
 8003006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003008:	e7fe      	b.n	8003008 <Error_Handler+0x8>
	...

0800300c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_MspInit+0x5c>)
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_MspInit+0x5c>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6193      	str	r3, [r2, #24]
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_MspInit+0x5c>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <HAL_MspInit+0x5c>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <HAL_MspInit+0x5c>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_MspInit+0x5c>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_MspInit+0x60>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <HAL_MspInit+0x60>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40021000 	.word	0x40021000
 800306c:	40010000 	.word	0x40010000

08003070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a18      	ldr	r2, [pc, #96]	; (80030ec <HAL_ADC_MspInit+0x7c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d129      	bne.n	80030e4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_ADC_MspInit+0x80>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_ADC_MspInit+0x80>)
 8003096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800309a:	6193      	str	r3, [r2, #24]
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_ADC_MspInit+0x80>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_ADC_MspInit+0x80>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <HAL_ADC_MspInit+0x80>)
 80030ae:	f043 0304 	orr.w	r3, r3, #4
 80030b2:	6193      	str	r3, [r2, #24]
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_ADC_MspInit+0x80>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 80030c0:	2310      	movs	r3, #16
 80030c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c4:	2303      	movs	r3, #3
 80030c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4619      	mov	r1, r3
 80030ce:	4809      	ldr	r0, [pc, #36]	; (80030f4 <HAL_ADC_MspInit+0x84>)
 80030d0:	f001 f9a6 	bl	8004420 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2102      	movs	r1, #2
 80030d8:	2012      	movs	r0, #18
 80030da:	f000 ff1c 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80030de:	2012      	movs	r0, #18
 80030e0:	f000 ff35 	bl	8003f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030e4:	bf00      	nop
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40012400 	.word	0x40012400
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40010800 	.word	0x40010800

080030f8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a09      	ldr	r2, [pc, #36]	; (800312c <HAL_CRC_MspInit+0x34>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10b      	bne.n	8003122 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_CRC_MspInit+0x38>)
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <HAL_CRC_MspInit+0x38>)
 8003110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003114:	6153      	str	r3, [r2, #20]
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_CRC_MspInit+0x38>)
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003122:	bf00      	nop
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	40023000 	.word	0x40023000
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d10c      	bne.n	8003160 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	61d3      	str	r3, [r2, #28]
 8003152:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800315e:	e032      	b.n	80031c6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <HAL_TIM_Base_MspInit+0xa0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d114      	bne.n	8003194 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	61d3      	str	r3, [r2, #28]
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2101      	movs	r1, #1
 8003186:	201d      	movs	r0, #29
 8003188:	f000 fec5 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800318c:	201d      	movs	r0, #29
 800318e:	f000 fede 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 8003192:	e018      	b.n	80031c6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0f      	ldr	r2, [pc, #60]	; (80031d8 <HAL_TIM_Base_MspInit+0xa4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d113      	bne.n	80031c6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_TIM_Base_MspInit+0x9c>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 0304 	and.w	r3, r3, #4
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	201e      	movs	r0, #30
 80031bc:	f000 feab 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031c0:	201e      	movs	r0, #30
 80031c2:	f000 fec4 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800

080031dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d117      	bne.n	800322c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <HAL_TIM_MspPostInit+0x58>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <HAL_TIM_MspPostInit+0x58>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6193      	str	r3, [r2, #24]
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <HAL_TIM_MspPostInit+0x58>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8003214:	2303      	movs	r3, #3
 8003216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	4619      	mov	r1, r3
 8003226:	4804      	ldr	r0, [pc, #16]	; (8003238 <HAL_TIM_MspPostInit+0x5c>)
 8003228:	f001 f8fa 	bl	8004420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800322c:	bf00      	nop
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	40010800 	.word	0x40010800

0800323c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <NMI_Handler+0x4>

08003242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003246:	e7fe      	b.n	8003246 <HardFault_Handler+0x4>

08003248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800324c:	e7fe      	b.n	800324c <MemManage_Handler+0x4>

0800324e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003252:	e7fe      	b.n	8003252 <BusFault_Handler+0x4>

08003254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003258:	e7fe      	b.n	8003258 <UsageFault_Handler+0x4>

0800325a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003282:	f000 f8a5 	bl	80033d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 8003286:	f7fe ffb7 	bl	80021f8 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}

0800328e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 8003292:	2002      	movs	r0, #2
 8003294:	f001 fa78 	bl	8004788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}

0800329c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <ADC1_2_IRQHandler+0x10>)
 80032a2:	f000 fa4b 	bl	800373c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200004f8 	.word	0x200004f8

080032b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80032b6:	f001 fbb0 	bl	8004a1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200012f8 	.word	0x200012f8

080032c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <TIM3_IRQHandler+0x10>)
 80032ca:	f003 fed8 	bl	800707e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000578 	.word	0x20000578

080032d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <TIM4_IRQHandler+0x10>)
 80032de:	f003 fece 	bl	800707e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200005c0 	.word	0x200005c0

080032ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032fa:	490d      	ldr	r1, [pc, #52]	; (8003330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003310:	4c0a      	ldr	r4, [pc, #40]	; (800333c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800331e:	f7ff ffe5 	bl	80032ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003322:	f009 fa4d 	bl	800c7c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003326:	f7ff fc1b 	bl	8002b60 <main>
  bx lr
 800332a:	4770      	bx	lr
  ldr r0, =_sdata
 800332c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003330:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003334:	0800c914 	.word	0x0800c914
  ldr r2, =_sbss
 8003338:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800333c:	20001804 	.word	0x20001804

08003340 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <CAN1_RX1_IRQHandler>
	...

08003344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_Init+0x28>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a07      	ldr	r2, [pc, #28]	; (800336c <HAL_Init+0x28>)
 800334e:	f043 0310 	orr.w	r3, r3, #16
 8003352:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003354:	2003      	movs	r0, #3
 8003356:	f000 fdd3 	bl	8003f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800335a:	2004      	movs	r0, #4
 800335c:	f000 f808 	bl	8003370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003360:	f7ff fe54 	bl	800300c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40022000 	.word	0x40022000

08003370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_InitTick+0x54>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_InitTick+0x58>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4619      	mov	r1, r3
 8003382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003386:	fbb3 f3f1 	udiv	r3, r3, r1
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fdeb 	bl	8003f6a <HAL_SYSTICK_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e00e      	b.n	80033bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b0f      	cmp	r3, #15
 80033a2:	d80a      	bhi.n	80033ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033a4:	2200      	movs	r2, #0
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	f000 fdb3 	bl	8003f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033b0:	4a06      	ldr	r2, [pc, #24]	; (80033cc <HAL_InitTick+0x5c>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000008 	.word	0x20000008
 80033cc:	20000004 	.word	0x20000004

080033d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_IncTick+0x1c>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_IncTick+0x20>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	4a03      	ldr	r2, [pc, #12]	; (80033f0 <HAL_IncTick+0x20>)
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	20000008 	.word	0x20000008
 80033f0:	20000608 	.word	0x20000608

080033f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return uwTick;
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <HAL_GetTick+0x10>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	20000608 	.word	0x20000608

08003408 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0be      	b.n	80035a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fe12 	bl	8003070 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb93 	bl	8003b78 <ADC_ConversionStop_Disable>
 8003452:	4603      	mov	r3, r0
 8003454:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 8099 	bne.w	8003596 <HAL_ADC_Init+0x18e>
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8095 	bne.w	8003596 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003474:	f023 0302 	bic.w	r3, r3, #2
 8003478:	f043 0202 	orr.w	r2, r3, #2
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003488:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7b1b      	ldrb	r3, [r3, #12]
 800348e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003490:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	4313      	orrs	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a0:	d003      	beq.n	80034aa <HAL_ADC_Init+0xa2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_ADC_Init+0xa8>
 80034aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ae:	e000      	b.n	80034b2 <HAL_ADC_Init+0xaa>
 80034b0:	2300      	movs	r3, #0
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7d1b      	ldrb	r3, [r3, #20]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d119      	bne.n	80034f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	7b1b      	ldrb	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	035a      	lsls	r2, r3, #13
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	e00b      	b.n	80034f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_ADC_Init+0x1a8>)
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	68b9      	ldr	r1, [r7, #8]
 8003518:	430b      	orrs	r3, r1
 800351a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003524:	d003      	beq.n	800352e <HAL_ADC_Init+0x126>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d104      	bne.n	8003538 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	3b01      	subs	r3, #1
 8003534:	051b      	lsls	r3, r3, #20
 8003536:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	430a      	orrs	r2, r1
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_ADC_Init+0x1ac>)
 8003554:	4013      	ands	r3, r2
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	429a      	cmp	r2, r3
 800355a:	d10b      	bne.n	8003574 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	f023 0303 	bic.w	r3, r3, #3
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003572:	e018      	b.n	80035a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	f023 0312 	bic.w	r3, r3, #18
 800357c:	f043 0210 	orr.w	r2, r3, #16
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003594:	e007      	b.n	80035a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	f043 0210 	orr.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	ffe1f7fd 	.word	0xffe1f7fd
 80035b4:	ff1f0efe 	.word	0xff1f0efe

080035b8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_Start_IT+0x1a>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0a0      	b.n	8003714 <HAL_ADC_Start_IT+0x15c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa72 	bl	8003ac4 <ADC_Enable>
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 808f 	bne.w	800370a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a45      	ldr	r2, [pc, #276]	; (800371c <HAL_ADC_Start_IT+0x164>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d105      	bne.n	8003616 <HAL_ADC_Start_IT+0x5e>
 800360a:	4b45      	ldr	r3, [pc, #276]	; (8003720 <HAL_ADC_Start_IT+0x168>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d115      	bne.n	8003642 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d026      	beq.n	800367e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003638:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003640:	e01d      	b.n	800367e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a33      	ldr	r2, [pc, #204]	; (8003720 <HAL_ADC_Start_IT+0x168>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_ADC_Start_IT+0xaa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a2f      	ldr	r2, [pc, #188]	; (800371c <HAL_ADC_Start_IT+0x164>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d10d      	bne.n	800367e <HAL_ADC_Start_IT+0xc6>
 8003662:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_ADC_Start_IT+0x168>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003676:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d006      	beq.n	8003698 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	f023 0206 	bic.w	r2, r3, #6
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
 8003696:	e002      	b.n	800369e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0202 	mvn.w	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0220 	orr.w	r2, r2, #32
 80036be:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036ce:	d113      	bne.n	80036f8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036d4:	4a11      	ldr	r2, [pc, #68]	; (800371c <HAL_ADC_Start_IT+0x164>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d105      	bne.n	80036e6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_ADC_Start_IT+0x168>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d108      	bne.n	80036f8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	e00c      	b.n	8003712 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	e003      	b.n	8003712 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40012800 	.word	0x40012800
 8003720:	40012400 	.word	0x40012400

08003724 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b20      	cmp	r3, #32
 8003750:	d140      	bne.n	80037d4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b02      	cmp	r3, #2
 800375e:	d139      	bne.n	80037d4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003782:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003786:	d11d      	bne.n	80037c4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800378c:	2b00      	cmp	r3, #0
 800378e:	d119      	bne.n	80037c4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0220 	bic.w	r2, r2, #32
 800379e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fe fcdb 	bl	8002180 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0212 	mvn.w	r2, #18
 80037d2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d14f      	bne.n	8003882 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d148      	bne.n	8003882 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d105      	bne.n	8003808 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003812:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003816:	d012      	beq.n	800383e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003822:	2b00      	cmp	r3, #0
 8003824:	d125      	bne.n	8003872 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003830:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003834:	d11d      	bne.n	8003872 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800383a:	2b00      	cmp	r3, #0
 800383c:	d119      	bne.n	8003872 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fa6e 	bl	8003d54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 020c 	mvn.w	r2, #12
 8003880:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d114      	bne.n	80038ba <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d10d      	bne.n	80038ba <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f809 	bl	80038c2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0201 	mvn.w	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x20>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e0dc      	b.n	8003aae <HAL_ADC_ConfigChannel+0x1da>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d81c      	bhi.n	800393e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	3b05      	subs	r3, #5
 8003916:	221f      	movs	r2, #31
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	4019      	ands	r1, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	3b05      	subs	r3, #5
 8003930:	fa00 f203 	lsl.w	r2, r0, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	635a      	str	r2, [r3, #52]	; 0x34
 800393c:	e03c      	b.n	80039b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d81c      	bhi.n	8003980 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	3b23      	subs	r3, #35	; 0x23
 8003958:	221f      	movs	r2, #31
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	4019      	ands	r1, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	3b23      	subs	r3, #35	; 0x23
 8003972:	fa00 f203 	lsl.w	r2, r0, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
 800397e:	e01b      	b.n	80039b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	3b41      	subs	r3, #65	; 0x41
 8003992:	221f      	movs	r2, #31
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	4019      	ands	r1, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	3b41      	subs	r3, #65	; 0x41
 80039ac:	fa00 f203 	lsl.w	r2, r0, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d91c      	bls.n	80039fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	3b1e      	subs	r3, #30
 80039d2:	2207      	movs	r2, #7
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	4019      	ands	r1, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6898      	ldr	r0, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	3b1e      	subs	r3, #30
 80039ec:	fa00 f203 	lsl.w	r2, r0, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	e019      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6919      	ldr	r1, [r3, #16]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	2207      	movs	r2, #7
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	4019      	ands	r1, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6898      	ldr	r0, [r3, #8]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	fa00 f203 	lsl.w	r2, r0, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d003      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a3a:	2b11      	cmp	r3, #17
 8003a3c:	d132      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d125      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d126      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a64:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d11a      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <HAL_ADC_ConfigChannel+0x1e8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a13      	ldr	r2, [pc, #76]	; (8003ac0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	0c9a      	lsrs	r2, r3, #18
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a84:	e002      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f9      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x1b2>
 8003a92:	e007      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012400 	.word	0x40012400
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	431bde83 	.word	0x431bde83

08003ac4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d040      	beq.n	8003b64 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003af2:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <ADC_Enable+0xac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <ADC_Enable+0xb0>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	0c9b      	lsrs	r3, r3, #18
 8003afe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b00:	e002      	b.n	8003b08 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f9      	bne.n	8003b02 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b0e:	f7ff fc71 	bl	80033f4 <HAL_GetTick>
 8003b12:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b14:	e01f      	b.n	8003b56 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b16:	f7ff fc6d 	bl	80033f4 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d918      	bls.n	8003b56 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d011      	beq.n	8003b56 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f043 0201 	orr.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e007      	b.n	8003b66 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d1d8      	bne.n	8003b16 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000000 	.word	0x20000000
 8003b74:	431bde83 	.word	0x431bde83

08003b78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d12e      	bne.n	8003bf0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ba2:	f7ff fc27 	bl	80033f4 <HAL_GetTick>
 8003ba6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ba8:	e01b      	b.n	8003be2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003baa:	f7ff fc23 	bl	80033f4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d914      	bls.n	8003be2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10d      	bne.n	8003be2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	f043 0210 	orr.w	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e007      	b.n	8003bf2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d0dc      	beq.n	8003baa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_ADCEx_Calibration_Start+0x1e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e095      	b.n	8003d46 <HAL_ADCEx_Calibration_Start+0x14a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ffa8 	bl	8003b78 <ADC_ConversionStop_Disable>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 8084 	bne.w	8003d3c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c3c:	f023 0302 	bic.w	r3, r3, #2
 8003c40:	f043 0202 	orr.w	r2, r3, #2
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c48:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <HAL_ADCEx_Calibration_Start+0x154>)
 8003c4a:	681c      	ldr	r4, [r3, #0]
 8003c4c:	2002      	movs	r0, #2
 8003c4e:	f002 ff33 	bl	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c52:	4603      	mov	r3, r0
 8003c54:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c58:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003c5a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003c5c:	e002      	b.n	8003c64 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f9      	bne.n	8003c5e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ff2a 	bl	8003ac4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003c80:	f7ff fbb8 	bl	80033f4 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c86:	e01b      	b.n	8003cc0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c88:	f7ff fbb4 	bl	80033f4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b0a      	cmp	r3, #10
 8003c94:	d914      	bls.n	8003cc0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	f023 0312 	bic.w	r3, r3, #18
 8003cac:	f043 0210 	orr.w	r2, r3, #16
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e042      	b.n	8003d46 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1dc      	bne.n	8003c88 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0204 	orr.w	r2, r2, #4
 8003cdc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cde:	f7ff fb89 	bl	80033f4 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ce4:	e01b      	b.n	8003d1e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ce6:	f7ff fb85 	bl	80033f4 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b0a      	cmp	r3, #10
 8003cf2:	d914      	bls.n	8003d1e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f023 0312 	bic.w	r3, r3, #18
 8003d0a:	f043 0210 	orr.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e013      	b.n	8003d46 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1dc      	bne.n	8003ce6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	f023 0303 	bic.w	r3, r3, #3
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000000 	.word	0x20000000

08003d54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
	...

08003d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d84:	4013      	ands	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	60d3      	str	r3, [r2, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 0307 	and.w	r3, r3, #7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db0b      	blt.n	8003df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	f003 021f 	and.w	r2, r3, #31
 8003de4:	4906      	ldr	r1, [pc, #24]	; (8003e00 <__NVIC_EnableIRQ+0x34>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2001      	movs	r0, #1
 8003dee:	fa00 f202 	lsl.w	r2, r0, r2
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	e000e100 	.word	0xe000e100

08003e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	db0a      	blt.n	8003e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	490c      	ldr	r1, [pc, #48]	; (8003e50 <__NVIC_SetPriority+0x4c>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	0112      	lsls	r2, r2, #4
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	440b      	add	r3, r1
 8003e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e2c:	e00a      	b.n	8003e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <__NVIC_SetPriority+0x50>)
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	3b04      	subs	r3, #4
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	440b      	add	r3, r1
 8003e42:	761a      	strb	r2, [r3, #24]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000e100 	.word	0xe000e100
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f1c3 0307 	rsb	r3, r3, #7
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf28      	it	cs
 8003e76:	2304      	movcs	r3, #4
 8003e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d902      	bls.n	8003e88 <NVIC_EncodePriority+0x30>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3b03      	subs	r3, #3
 8003e86:	e000      	b.n	8003e8a <NVIC_EncodePriority+0x32>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	43d9      	mvns	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	4313      	orrs	r3, r2
         );
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ecc:	d301      	bcc.n	8003ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <SysTick_Config+0x40>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eda:	210f      	movs	r1, #15
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	f7ff ff90 	bl	8003e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <SysTick_Config+0x40>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <SysTick_Config+0x40>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	e000e010 	.word	0xe000e010

08003f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff2d 	bl	8003d68 <__NVIC_SetPriorityGrouping>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f28:	f7ff ff42 	bl	8003db0 <__NVIC_GetPriorityGrouping>
 8003f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	6978      	ldr	r0, [r7, #20]
 8003f34:	f7ff ff90 	bl	8003e58 <NVIC_EncodePriority>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff5f 	bl	8003e04 <__NVIC_SetPriority>
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff35 	bl	8003dcc <__NVIC_EnableIRQ>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ffa2 	bl	8003ebc <SysTick_Config>
 8003f78:	4603      	mov	r3, r0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e00e      	b.n	8003fb2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	795b      	ldrb	r3, [r3, #5]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff f8a7 	bl	80030f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	e00a      	b.n	8003ffc <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	441a      	add	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d3f0      	bcc.n	8003fe6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004012:	693b      	ldr	r3, [r7, #16]
}
 8004014:	4618      	mov	r0, r3
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
	...

08004020 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800403a:	4b2f      	ldr	r3, [pc, #188]	; (80040f8 <HAL_FLASH_Program+0xd8>)
 800403c:	7e1b      	ldrb	r3, [r3, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_FLASH_Program+0x26>
 8004042:	2302      	movs	r3, #2
 8004044:	e054      	b.n	80040f0 <HAL_FLASH_Program+0xd0>
 8004046:	4b2c      	ldr	r3, [pc, #176]	; (80040f8 <HAL_FLASH_Program+0xd8>)
 8004048:	2201      	movs	r2, #1
 800404a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800404c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004050:	f000 f8a8 	bl	80041a4 <FLASH_WaitForLastOperation>
 8004054:	4603      	mov	r3, r0
 8004056:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d144      	bne.n	80040e8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d102      	bne.n	800406a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004064:	2301      	movs	r3, #1
 8004066:	757b      	strb	r3, [r7, #21]
 8004068:	e007      	b.n	800407a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d102      	bne.n	8004076 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004070:	2302      	movs	r3, #2
 8004072:	757b      	strb	r3, [r7, #21]
 8004074:	e001      	b.n	800407a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004076:	2304      	movs	r3, #4
 8004078:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800407a:	2300      	movs	r3, #0
 800407c:	75bb      	strb	r3, [r7, #22]
 800407e:	e02d      	b.n	80040dc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004080:	7dbb      	ldrb	r3, [r7, #22]
 8004082:	005a      	lsls	r2, r3, #1
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	eb02 0c03 	add.w	ip, r2, r3
 800408a:	7dbb      	ldrb	r3, [r7, #22]
 800408c:	0119      	lsls	r1, r3, #4
 800408e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004092:	f1c1 0620 	rsb	r6, r1, #32
 8004096:	f1a1 0020 	sub.w	r0, r1, #32
 800409a:	fa22 f401 	lsr.w	r4, r2, r1
 800409e:	fa03 f606 	lsl.w	r6, r3, r6
 80040a2:	4334      	orrs	r4, r6
 80040a4:	fa23 f000 	lsr.w	r0, r3, r0
 80040a8:	4304      	orrs	r4, r0
 80040aa:	fa23 f501 	lsr.w	r5, r3, r1
 80040ae:	b2a3      	uxth	r3, r4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4660      	mov	r0, ip
 80040b4:	f000 f85a 	bl	800416c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040bc:	f000 f872 	bl	80041a4 <FLASH_WaitForLastOperation>
 80040c0:	4603      	mov	r3, r0
 80040c2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <HAL_FLASH_Program+0xdc>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <HAL_FLASH_Program+0xdc>)
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d107      	bne.n	80040e6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80040d6:	7dbb      	ldrb	r3, [r7, #22]
 80040d8:	3301      	adds	r3, #1
 80040da:	75bb      	strb	r3, [r7, #22]
 80040dc:	7dba      	ldrb	r2, [r7, #22]
 80040de:	7d7b      	ldrb	r3, [r7, #21]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d3cd      	bcc.n	8004080 <HAL_FLASH_Program+0x60>
 80040e4:	e000      	b.n	80040e8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80040e6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_FLASH_Program+0xd8>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	761a      	strb	r2, [r3, #24]

  return status;
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f8:	20000610 	.word	0x20000610
 80040fc:	40022000 	.word	0x40022000

08004100 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_FLASH_Unlock+0x40>)
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004116:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <HAL_FLASH_Unlock+0x40>)
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <HAL_FLASH_Unlock+0x44>)
 800411a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_FLASH_Unlock+0x40>)
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <HAL_FLASH_Unlock+0x48>)
 8004120:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_FLASH_Unlock+0x40>)
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004132:	79fb      	ldrb	r3, [r7, #7]
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40022000 	.word	0x40022000
 8004144:	45670123 	.word	0x45670123
 8004148:	cdef89ab 	.word	0xcdef89ab

0800414c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_FLASH_Lock+0x1c>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <HAL_FLASH_Lock+0x1c>)
 8004156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40022000 	.word	0x40022000

0800416c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <FLASH_Program_HalfWord+0x30>)
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <FLASH_Program_HalfWord+0x34>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <FLASH_Program_HalfWord+0x34>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	887a      	ldrh	r2, [r7, #2]
 800418e:	801a      	strh	r2, [r3, #0]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000610 	.word	0x20000610
 80041a0:	40022000 	.word	0x40022000

080041a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff f922 	bl	80033f4 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041b2:	e010      	b.n	80041d6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d00c      	beq.n	80041d6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <FLASH_WaitForLastOperation+0x2e>
 80041c2:	f7ff f917 	bl	80033f4 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d201      	bcs.n	80041d6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e025      	b.n	8004222 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <FLASH_WaitForLastOperation+0x88>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e8      	bne.n	80041b4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <FLASH_WaitForLastOperation+0x88>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <FLASH_WaitForLastOperation+0x88>)
 80041f0:	2220      	movs	r2, #32
 80041f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <FLASH_WaitForLastOperation+0x88>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <FLASH_WaitForLastOperation+0x88>)
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <FLASH_WaitForLastOperation+0x88>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004218:	f000 f80a 	bl	8004230 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40022000 	.word	0x40022000

08004230 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <FLASH_SetErrorCode+0x98>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <FLASH_SetErrorCode+0x9c>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <FLASH_SetErrorCode+0x9c>)
 8004250:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f043 0310 	orr.w	r3, r3, #16
 8004258:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <FLASH_SetErrorCode+0x98>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004266:	4b19      	ldr	r3, [pc, #100]	; (80042cc <FLASH_SetErrorCode+0x9c>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	4a17      	ldr	r2, [pc, #92]	; (80042cc <FLASH_SetErrorCode+0x9c>)
 8004270:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f043 0304 	orr.w	r3, r3, #4
 8004278:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <FLASH_SetErrorCode+0x98>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <FLASH_SetErrorCode+0x9c>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f043 0304 	orr.w	r3, r3, #4
 800428e:	4a0f      	ldr	r2, [pc, #60]	; (80042cc <FLASH_SetErrorCode+0x9c>)
 8004290:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <FLASH_SetErrorCode+0x98>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <FLASH_SetErrorCode+0x98>)
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f240 1201 	movw	r2, #257	; 0x101
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d106      	bne.n	80042b6 <FLASH_SetErrorCode+0x86>
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <FLASH_SetErrorCode+0x98>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	4a06      	ldr	r2, [pc, #24]	; (80042c8 <FLASH_SetErrorCode+0x98>)
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	61d3      	str	r3, [r2, #28]
}  
 80042b4:	e002      	b.n	80042bc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042b6:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <FLASH_SetErrorCode+0x98>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60d3      	str	r3, [r2, #12]
}  
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40022000 	.word	0x40022000
 80042cc:	20000610 	.word	0x20000610

080042d0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042e2:	4b2f      	ldr	r3, [pc, #188]	; (80043a0 <HAL_FLASHEx_Erase+0xd0>)
 80042e4:	7e1b      	ldrb	r3, [r3, #24]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_FLASHEx_Erase+0x1e>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e053      	b.n	8004396 <HAL_FLASHEx_Erase+0xc6>
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <HAL_FLASHEx_Erase+0xd0>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d116      	bne.n	800432a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80042fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004300:	f7ff ff50 	bl	80041a4 <FLASH_WaitForLastOperation>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d141      	bne.n	800438e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800430a:	2001      	movs	r0, #1
 800430c:	f000 f84c 	bl	80043a8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004310:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004314:	f7ff ff46 	bl	80041a4 <FLASH_WaitForLastOperation>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_FLASHEx_Erase+0xd4>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <HAL_FLASHEx_Erase+0xd4>)
 8004322:	f023 0304 	bic.w	r3, r3, #4
 8004326:	6113      	str	r3, [r2, #16]
 8004328:	e031      	b.n	800438e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800432a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800432e:	f7ff ff39 	bl	80041a4 <FLASH_WaitForLastOperation>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d12a      	bne.n	800438e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f04f 32ff 	mov.w	r2, #4294967295
 800433e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	e019      	b.n	800437c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004348:	68b8      	ldr	r0, [r7, #8]
 800434a:	f000 f849 	bl	80043e0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800434e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004352:	f7ff ff27 	bl	80041a4 <FLASH_WaitForLastOperation>
 8004356:	4603      	mov	r3, r0
 8004358:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <HAL_FLASHEx_Erase+0xd4>)
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <HAL_FLASHEx_Erase+0xd4>)
 8004360:	f023 0302 	bic.w	r3, r3, #2
 8004364:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	601a      	str	r2, [r3, #0]
            break;
 8004372:	e00c      	b.n	800438e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800437a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	029a      	lsls	r2, r3, #10
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d3dc      	bcc.n	8004348 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <HAL_FLASHEx_Erase+0xd0>)
 8004390:	2200      	movs	r2, #0
 8004392:	761a      	strb	r2, [r3, #24]

  return status;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000610 	.word	0x20000610
 80043a4:	40022000 	.word	0x40022000

080043a8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <FLASH_MassErase+0x30>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <FLASH_MassErase+0x34>)
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	4a08      	ldr	r2, [pc, #32]	; (80043dc <FLASH_MassErase+0x34>)
 80043bc:	f043 0304 	orr.w	r3, r3, #4
 80043c0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <FLASH_MassErase+0x34>)
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	4a05      	ldr	r2, [pc, #20]	; (80043dc <FLASH_MassErase+0x34>)
 80043c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043cc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	20000610 	.word	0x20000610
 80043dc:	40022000 	.word	0x40022000

080043e0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <FLASH_PageErase+0x38>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80043ee:	4b0b      	ldr	r3, [pc, #44]	; (800441c <FLASH_PageErase+0x3c>)
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <FLASH_PageErase+0x3c>)
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80043fa:	4a08      	ldr	r2, [pc, #32]	; (800441c <FLASH_PageErase+0x3c>)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <FLASH_PageErase+0x3c>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	4a05      	ldr	r2, [pc, #20]	; (800441c <FLASH_PageErase+0x3c>)
 8004406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	20000610 	.word	0x20000610
 800441c:	40022000 	.word	0x40022000

08004420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004420:	b480      	push	{r7}
 8004422:	b08b      	sub	sp, #44	; 0x2c
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800442e:	2300      	movs	r3, #0
 8004430:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004432:	e169      	b.n	8004708 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004434:	2201      	movs	r2, #1
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	429a      	cmp	r2, r3
 800444e:	f040 8158 	bne.w	8004702 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4a9a      	ldr	r2, [pc, #616]	; (80046c0 <HAL_GPIO_Init+0x2a0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d05e      	beq.n	800451a <HAL_GPIO_Init+0xfa>
 800445c:	4a98      	ldr	r2, [pc, #608]	; (80046c0 <HAL_GPIO_Init+0x2a0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d875      	bhi.n	800454e <HAL_GPIO_Init+0x12e>
 8004462:	4a98      	ldr	r2, [pc, #608]	; (80046c4 <HAL_GPIO_Init+0x2a4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d058      	beq.n	800451a <HAL_GPIO_Init+0xfa>
 8004468:	4a96      	ldr	r2, [pc, #600]	; (80046c4 <HAL_GPIO_Init+0x2a4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d86f      	bhi.n	800454e <HAL_GPIO_Init+0x12e>
 800446e:	4a96      	ldr	r2, [pc, #600]	; (80046c8 <HAL_GPIO_Init+0x2a8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d052      	beq.n	800451a <HAL_GPIO_Init+0xfa>
 8004474:	4a94      	ldr	r2, [pc, #592]	; (80046c8 <HAL_GPIO_Init+0x2a8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d869      	bhi.n	800454e <HAL_GPIO_Init+0x12e>
 800447a:	4a94      	ldr	r2, [pc, #592]	; (80046cc <HAL_GPIO_Init+0x2ac>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d04c      	beq.n	800451a <HAL_GPIO_Init+0xfa>
 8004480:	4a92      	ldr	r2, [pc, #584]	; (80046cc <HAL_GPIO_Init+0x2ac>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d863      	bhi.n	800454e <HAL_GPIO_Init+0x12e>
 8004486:	4a92      	ldr	r2, [pc, #584]	; (80046d0 <HAL_GPIO_Init+0x2b0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d046      	beq.n	800451a <HAL_GPIO_Init+0xfa>
 800448c:	4a90      	ldr	r2, [pc, #576]	; (80046d0 <HAL_GPIO_Init+0x2b0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d85d      	bhi.n	800454e <HAL_GPIO_Init+0x12e>
 8004492:	2b12      	cmp	r3, #18
 8004494:	d82a      	bhi.n	80044ec <HAL_GPIO_Init+0xcc>
 8004496:	2b12      	cmp	r3, #18
 8004498:	d859      	bhi.n	800454e <HAL_GPIO_Init+0x12e>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_GPIO_Init+0x80>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	0800451b 	.word	0x0800451b
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	08004507 	.word	0x08004507
 80044ac:	08004549 	.word	0x08004549
 80044b0:	0800454f 	.word	0x0800454f
 80044b4:	0800454f 	.word	0x0800454f
 80044b8:	0800454f 	.word	0x0800454f
 80044bc:	0800454f 	.word	0x0800454f
 80044c0:	0800454f 	.word	0x0800454f
 80044c4:	0800454f 	.word	0x0800454f
 80044c8:	0800454f 	.word	0x0800454f
 80044cc:	0800454f 	.word	0x0800454f
 80044d0:	0800454f 	.word	0x0800454f
 80044d4:	0800454f 	.word	0x0800454f
 80044d8:	0800454f 	.word	0x0800454f
 80044dc:	0800454f 	.word	0x0800454f
 80044e0:	0800454f 	.word	0x0800454f
 80044e4:	080044fd 	.word	0x080044fd
 80044e8:	08004511 	.word	0x08004511
 80044ec:	4a79      	ldr	r2, [pc, #484]	; (80046d4 <HAL_GPIO_Init+0x2b4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044f2:	e02c      	b.n	800454e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	623b      	str	r3, [r7, #32]
          break;
 80044fa:	e029      	b.n	8004550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	3304      	adds	r3, #4
 8004502:	623b      	str	r3, [r7, #32]
          break;
 8004504:	e024      	b.n	8004550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	3308      	adds	r3, #8
 800450c:	623b      	str	r3, [r7, #32]
          break;
 800450e:	e01f      	b.n	8004550 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	330c      	adds	r3, #12
 8004516:	623b      	str	r3, [r7, #32]
          break;
 8004518:	e01a      	b.n	8004550 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004522:	2304      	movs	r3, #4
 8004524:	623b      	str	r3, [r7, #32]
          break;
 8004526:	e013      	b.n	8004550 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004530:	2308      	movs	r3, #8
 8004532:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	611a      	str	r2, [r3, #16]
          break;
 800453a:	e009      	b.n	8004550 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800453c:	2308      	movs	r3, #8
 800453e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	615a      	str	r2, [r3, #20]
          break;
 8004546:	e003      	b.n	8004550 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004548:	2300      	movs	r3, #0
 800454a:	623b      	str	r3, [r7, #32]
          break;
 800454c:	e000      	b.n	8004550 <HAL_GPIO_Init+0x130>
          break;
 800454e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2bff      	cmp	r3, #255	; 0xff
 8004554:	d801      	bhi.n	800455a <HAL_GPIO_Init+0x13a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	e001      	b.n	800455e <HAL_GPIO_Init+0x13e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3304      	adds	r3, #4
 800455e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2bff      	cmp	r3, #255	; 0xff
 8004564:	d802      	bhi.n	800456c <HAL_GPIO_Init+0x14c>
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	e002      	b.n	8004572 <HAL_GPIO_Init+0x152>
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	3b08      	subs	r3, #8
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	210f      	movs	r1, #15
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	401a      	ands	r2, r3
 8004584:	6a39      	ldr	r1, [r7, #32]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	fa01 f303 	lsl.w	r3, r1, r3
 800458c:	431a      	orrs	r2, r3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80b1 	beq.w	8004702 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045a0:	4b4d      	ldr	r3, [pc, #308]	; (80046d8 <HAL_GPIO_Init+0x2b8>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	4a4c      	ldr	r2, [pc, #304]	; (80046d8 <HAL_GPIO_Init+0x2b8>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6193      	str	r3, [r2, #24]
 80045ac:	4b4a      	ldr	r3, [pc, #296]	; (80046d8 <HAL_GPIO_Init+0x2b8>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045b8:	4a48      	ldr	r2, [pc, #288]	; (80046dc <HAL_GPIO_Init+0x2bc>)
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	089b      	lsrs	r3, r3, #2
 80045be:	3302      	adds	r3, #2
 80045c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	220f      	movs	r2, #15
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a40      	ldr	r2, [pc, #256]	; (80046e0 <HAL_GPIO_Init+0x2c0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d013      	beq.n	800460c <HAL_GPIO_Init+0x1ec>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a3f      	ldr	r2, [pc, #252]	; (80046e4 <HAL_GPIO_Init+0x2c4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00d      	beq.n	8004608 <HAL_GPIO_Init+0x1e8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a3e      	ldr	r2, [pc, #248]	; (80046e8 <HAL_GPIO_Init+0x2c8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d007      	beq.n	8004604 <HAL_GPIO_Init+0x1e4>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a3d      	ldr	r2, [pc, #244]	; (80046ec <HAL_GPIO_Init+0x2cc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_GPIO_Init+0x1e0>
 80045fc:	2303      	movs	r3, #3
 80045fe:	e006      	b.n	800460e <HAL_GPIO_Init+0x1ee>
 8004600:	2304      	movs	r3, #4
 8004602:	e004      	b.n	800460e <HAL_GPIO_Init+0x1ee>
 8004604:	2302      	movs	r3, #2
 8004606:	e002      	b.n	800460e <HAL_GPIO_Init+0x1ee>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <HAL_GPIO_Init+0x1ee>
 800460c:	2300      	movs	r3, #0
 800460e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004610:	f002 0203 	and.w	r2, r2, #3
 8004614:	0092      	lsls	r2, r2, #2
 8004616:	4093      	lsls	r3, r2
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800461e:	492f      	ldr	r1, [pc, #188]	; (80046dc <HAL_GPIO_Init+0x2bc>)
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	089b      	lsrs	r3, r3, #2
 8004624:	3302      	adds	r3, #2
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004638:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	492c      	ldr	r1, [pc, #176]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]
 8004644:	e006      	b.n	8004654 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004646:	4b2a      	ldr	r3, [pc, #168]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	43db      	mvns	r3, r3
 800464e:	4928      	ldr	r1, [pc, #160]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 8004650:	4013      	ands	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d006      	beq.n	800466e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4922      	ldr	r1, [pc, #136]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	e006      	b.n	800467c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	43db      	mvns	r3, r3
 8004676:	491e      	ldr	r1, [pc, #120]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 8004678:	4013      	ands	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	4918      	ldr	r1, [pc, #96]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
 8004694:	e006      	b.n	80046a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004696:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	43db      	mvns	r3, r3
 800469e:	4914      	ldr	r1, [pc, #80]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d021      	beq.n	80046f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	490e      	ldr	r1, [pc, #56]	; (80046f0 <HAL_GPIO_Init+0x2d0>)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
 80046bc:	e021      	b.n	8004702 <HAL_GPIO_Init+0x2e2>
 80046be:	bf00      	nop
 80046c0:	10320000 	.word	0x10320000
 80046c4:	10310000 	.word	0x10310000
 80046c8:	10220000 	.word	0x10220000
 80046cc:	10210000 	.word	0x10210000
 80046d0:	10120000 	.word	0x10120000
 80046d4:	10110000 	.word	0x10110000
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40010800 	.word	0x40010800
 80046e4:	40010c00 	.word	0x40010c00
 80046e8:	40011000 	.word	0x40011000
 80046ec:	40011400 	.word	0x40011400
 80046f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_GPIO_Init+0x304>)
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	4909      	ldr	r1, [pc, #36]	; (8004724 <HAL_GPIO_Init+0x304>)
 80046fe:	4013      	ands	r3, r2
 8004700:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	3301      	adds	r3, #1
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	fa22 f303 	lsr.w	r3, r2, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	f47f ae8e 	bne.w	8004434 <HAL_GPIO_Init+0x14>
  }
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	372c      	adds	r7, #44	; 0x2c
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	40010400 	.word	0x40010400

08004728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	887b      	ldrh	r3, [r7, #2]
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	e001      	b.n	800474a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	807b      	strh	r3, [r7, #2]
 8004762:	4613      	mov	r3, r2
 8004764:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004766:	787b      	ldrb	r3, [r7, #1]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800476c:	887a      	ldrh	r2, [r7, #2]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004772:	e003      	b.n	800477c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	041a      	lsls	r2, r3, #16
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	611a      	str	r2, [r3, #16]
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr
	...

08004788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800479e:	4a05      	ldr	r2, [pc, #20]	; (80047b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fd fd18 	bl	80021dc <HAL_GPIO_EXTI_Callback>
  }
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40010400 	.word	0x40010400

080047b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ba:	b08b      	sub	sp, #44	; 0x2c
 80047bc:	af06      	add	r7, sp, #24
 80047be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0fd      	b.n	80049c6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f007 fd44 	bl	800c26c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2203      	movs	r2, #3
 80047e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f003 fa2d 	bl	8007c50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	687e      	ldr	r6, [r7, #4]
 80047fe:	466d      	mov	r5, sp
 8004800:	f106 0410 	add.w	r4, r6, #16
 8004804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	1d33      	adds	r3, r6, #4
 800480e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004810:	6838      	ldr	r0, [r7, #0]
 8004812:	f003 f9f7 	bl	8007c04 <USB_CoreInit>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0ce      	b.n	80049c6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f003 fa28 	bl	8007c84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e04c      	b.n	80048d4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	440b      	add	r3, r1
 800484a:	3301      	adds	r3, #1
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	440b      	add	r3, r1
 8004860:	7bfa      	ldrb	r2, [r7, #15]
 8004862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004864:	7bfa      	ldrb	r2, [r7, #15]
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	b298      	uxth	r0, r3
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	440b      	add	r3, r1
 8004876:	3336      	adds	r3, #54	; 0x36
 8004878:	4602      	mov	r2, r0
 800487a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	440b      	add	r3, r1
 800488c:	3303      	adds	r3, #3
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	440b      	add	r3, r1
 80048a0:	3338      	adds	r3, #56	; 0x38
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	440b      	add	r3, r1
 80048b4:	333c      	adds	r3, #60	; 0x3c
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	440b      	add	r3, r1
 80048c8:	3340      	adds	r3, #64	; 0x40
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	3301      	adds	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	7bfa      	ldrb	r2, [r7, #15]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d3ad      	bcc.n	800483a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	e044      	b.n	800496e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048e4:	7bfa      	ldrb	r2, [r7, #15]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	440b      	add	r3, r1
 80048f2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048fa:	7bfa      	ldrb	r2, [r7, #15]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	440b      	add	r3, r1
 8004908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004910:	7bfa      	ldrb	r2, [r7, #15]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	440b      	add	r3, r1
 800491e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800493c:	7bfa      	ldrb	r2, [r7, #15]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	440b      	add	r3, r1
 800494a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	440b      	add	r3, r1
 8004960:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	3301      	adds	r3, #1
 800496c:	73fb      	strb	r3, [r7, #15]
 800496e:	7bfa      	ldrb	r2, [r7, #15]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d3b5      	bcc.n	80048e4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	687e      	ldr	r6, [r7, #4]
 8004980:	466d      	mov	r5, sp
 8004982:	f106 0410 	add.w	r4, r6, #16
 8004986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	1d33      	adds	r3, r6, #4
 8004990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004992:	6838      	ldr	r0, [r7, #0]
 8004994:	f003 f982 	bl	8007c9c <USB_DevInit>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2202      	movs	r2, #2
 80049a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e00d      	b.n	80049c6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f005 fe34 	bl	800a62c <USB_DevDisconnect>

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_PCD_Start+0x16>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e016      	b.n	8004a12 <HAL_PCD_Start+0x44>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 f917 	bl	8007c24 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80049f6:	2101      	movs	r1, #1
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f007 feaa 	bl	800c752 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f005 fe08 	bl	800a618 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b088      	sub	sp, #32
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f005 fe0a 	bl	800a640 <USB_ReadInterrupts>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a36:	d102      	bne.n	8004a3e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fb5f 	bl	80050fc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f005 fdfc 	bl	800a640 <USB_ReadInterrupts>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a52:	d112      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a66:	b292      	uxth	r2, r2
 8004a68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f007 fc78 	bl	800c362 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004a72:	2100      	movs	r1, #0
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f923 	bl	8004cc0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f005 fdde 	bl	800a640 <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8e:	d10b      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f005 fdc7 	bl	800a640 <USB_ReadInterrupts>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abc:	d10b      	bne.n	8004ad6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f005 fdb0 	bl	800a640 <USB_ReadInterrupts>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aea:	d126      	bne.n	8004b3a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0204 	bic.w	r2, r2, #4
 8004afe:	b292      	uxth	r2, r2
 8004b00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0208 	bic.w	r2, r2, #8
 8004b16:	b292      	uxth	r2, r2
 8004b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f007 fc59 	bl	800c3d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b34:	b292      	uxth	r2, r2
 8004b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f005 fd7e 	bl	800a640 <USB_ReadInterrupts>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4e:	f040 8082 	bne.w	8004c56 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e010      	b.n	8004b7a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	7ffb      	ldrb	r3, [r7, #31]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	7ffb      	ldrb	r3, [r7, #31]
 8004b66:	8812      	ldrh	r2, [r2, #0]
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	443b      	add	r3, r7
 8004b70:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
 8004b76:	3301      	adds	r3, #1
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	7ffb      	ldrb	r3, [r7, #31]
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d9eb      	bls.n	8004b58 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	b292      	uxth	r2, r2
 8004b94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	b292      	uxth	r2, r2
 8004bac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004bb0:	bf00      	nop
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f6      	beq.n	8004bb2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd6:	b292      	uxth	r2, r2
 8004bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e00f      	b.n	8004c02 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004be2:	7ffb      	ldrb	r3, [r7, #31]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	4611      	mov	r1, r2
 8004bea:	7ffa      	ldrb	r2, [r7, #31]
 8004bec:	0092      	lsls	r2, r2, #2
 8004bee:	440a      	add	r2, r1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	3320      	adds	r3, #32
 8004bf4:	443b      	add	r3, r7
 8004bf6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004bfa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004bfc:	7ffb      	ldrb	r3, [r7, #31]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	7ffb      	ldrb	r3, [r7, #31]
 8004c04:	2b07      	cmp	r3, #7
 8004c06:	d9ec      	bls.n	8004be2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0208 	orr.w	r2, r2, #8
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c32:	b292      	uxth	r2, r2
 8004c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0204 	orr.w	r2, r2, #4
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f007 fba5 	bl	800c3a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f005 fcf0 	bl	800a640 <USB_ReadInterrupts>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6a:	d10e      	bne.n	8004c8a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f007 fb5e 	bl	800c346 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f005 fcd6 	bl	800a640 <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cb2:	b292      	uxth	r2, r2
 8004cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004cb8:	bf00      	nop
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_PCD_SetAddress+0x1a>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e013      	b.n	8004d02 <HAL_PCD_SetAddress+0x42>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f005 fc7d 	bl	800a5f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	4608      	mov	r0, r1
 8004d14:	4611      	mov	r1, r2
 8004d16:	461a      	mov	r2, r3
 8004d18:	4603      	mov	r3, r0
 8004d1a:	70fb      	strb	r3, [r7, #3]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	803b      	strh	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da0e      	bge.n	8004d4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	705a      	strb	r2, [r3, #1]
 8004d4c:	e00e      	b.n	8004d6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	f003 0207 	and.w	r2, r3, #7
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d78:	883a      	ldrh	r2, [r7, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	78ba      	ldrb	r2, [r7, #2]
 8004d82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d96:	78bb      	ldrb	r3, [r7, #2]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d102      	bne.n	8004da2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_PCD_EP_Open+0xa6>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e00e      	b.n	8004dce <HAL_PCD_EP_Open+0xc4>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f002 ff8c 	bl	8007cdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da0e      	bge.n	8004e08 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	705a      	strb	r2, [r3, #1]
 8004e06:	e00e      	b.n	8004e26 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	f003 0207 	and.w	r2, r3, #7
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_PCD_EP_Close+0x6a>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e00e      	b.n	8004e5e <HAL_PCD_EP_Close+0x88>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 faae 	bl	80083b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	460b      	mov	r3, r1
 8004e74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e76:	7afb      	ldrb	r3, [r7, #11]
 8004e78:	f003 0207 	and.w	r2, r3, #7
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea6:	7afb      	ldrb	r3, [r7, #11]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6979      	ldr	r1, [r7, #20]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f003 fc60 	bl	8008788 <USB_EPStartXfer>
 8004ec8:	e005      	b.n	8004ed6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6979      	ldr	r1, [r7, #20]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f003 fc59 	bl	8008788 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	f003 0207 	and.w	r2, r3, #7
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	440b      	add	r3, r1
 8004efe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f02:	681b      	ldr	r3, [r3, #0]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b086      	sub	sp, #24
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f1e:	7afb      	ldrb	r3, [r7, #11]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2200      	movs	r2, #0
 8004f52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2201      	movs	r2, #1
 8004f58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f5a:	7afb      	ldrb	r3, [r7, #11]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f66:	7afb      	ldrb	r3, [r7, #11]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6979      	ldr	r1, [r7, #20]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f003 fc06 	bl	8008788 <USB_EPStartXfer>
 8004f7c:	e005      	b.n	8004f8a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6979      	ldr	r1, [r7, #20]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f003 fbff 	bl	8008788 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	f003 0207 	and.w	r2, r3, #7
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d901      	bls.n	8004fb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e04c      	b.n	800504c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	da0e      	bge.n	8004fd8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	705a      	strb	r2, [r3, #1]
 8004fd6:	e00c      	b.n	8004ff2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_PCD_EP_SetStall+0x7e>
 800500e:	2302      	movs	r3, #2
 8005010:	e01c      	b.n	800504c <HAL_PCD_EP_SetStall+0xb8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	4618      	mov	r0, r3
 8005022:	f005 f9e9 	bl	800a3f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	2b00      	cmp	r3, #0
 800502e:	d108      	bne.n	8005042 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f005 fb0e 	bl	800a65e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	f003 020f 	and.w	r2, r3, #15
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d901      	bls.n	8005072 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e040      	b.n	80050f4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005076:	2b00      	cmp	r3, #0
 8005078:	da0e      	bge.n	8005098 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	705a      	strb	r2, [r3, #1]
 8005096:	e00e      	b.n	80050b6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	f003 0207 	and.w	r2, r3, #7
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_PCD_EP_ClrStall+0x82>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e00e      	b.n	80050f4 <HAL_PCD_EP_ClrStall+0xa0>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f005 f9d7 	bl	800a498 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08e      	sub	sp, #56	; 0x38
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005104:	e2ec      	b.n	80056e0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800510e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800511c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 8161 	bne.w	80053e8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005126:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	d152      	bne.n	80051d6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800513c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005140:	81fb      	strh	r3, [r7, #14]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	89fb      	ldrh	r3, [r7, #14]
 8005148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005150:	b29b      	uxth	r3, r3
 8005152:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3328      	adds	r3, #40	; 0x28
 8005158:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	3302      	adds	r3, #2
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	441a      	add	r2, r3
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005194:	2100      	movs	r1, #0
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f007 f8bb 	bl	800c312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 829b 	beq.w	80056e0 <PCD_EP_ISR_Handler+0x5e4>
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f040 8296 	bne.w	80056e0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	b292      	uxth	r2, r2
 80051c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051d4:	e284      	b.n	80056e0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80051e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d034      	beq.n	800525a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	3306      	adds	r3, #6
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800522e:	b29b      	uxth	r3, r3
 8005230:	f005 fa65 	bl	800a6fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29a      	uxth	r2, r3
 800523c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005240:	4013      	ands	r3, r2
 8005242:	823b      	strh	r3, [r7, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	8a3a      	ldrh	r2, [r7, #16]
 800524a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800524e:	b292      	uxth	r2, r2
 8005250:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f007 f830 	bl	800c2b8 <HAL_PCD_SetupStageCallback>
 8005258:	e242      	b.n	80056e0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800525a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800525e:	2b00      	cmp	r3, #0
 8005260:	f280 823e 	bge.w	80056e0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29a      	uxth	r2, r3
 800526c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005270:	4013      	ands	r3, r2
 8005272:	83bb      	strh	r3, [r7, #28]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	8bba      	ldrh	r2, [r7, #28]
 800527a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800527e:	b292      	uxth	r2, r2
 8005280:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	3306      	adds	r3, #6
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d019      	beq.n	80052ea <PCD_EP_ISR_Handler+0x1ee>
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	6959      	ldr	r1, [r3, #20]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f005 fa15 	bl	800a6fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	441a      	add	r2, r3
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80052e2:	2100      	movs	r1, #0
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f006 fff9 	bl	800c2dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 81f2 	bne.w	80056e0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530a:	b29b      	uxth	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	4413      	add	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d112      	bne.n	800534a <PCD_EP_ISR_Handler+0x24e>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800532e:	b29a      	uxth	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005342:	b29a      	uxth	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e02f      	b.n	80053aa <PCD_EP_ISR_Handler+0x2ae>
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b3e      	cmp	r3, #62	; 0x3e
 8005350:	d813      	bhi.n	800537a <PCD_EP_ISR_Handler+0x27e>
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	633b      	str	r3, [r7, #48]	; 0x30
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <PCD_EP_ISR_Handler+0x270>
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	3301      	adds	r3, #1
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29a      	uxth	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e017      	b.n	80053aa <PCD_EP_ISR_Handler+0x2ae>
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2b00      	cmp	r3, #0
 800538c:	d102      	bne.n	8005394 <PCD_EP_ISR_Handler+0x298>
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	3b01      	subs	r3, #1
 8005392:	633b      	str	r3, [r7, #48]	; 0x30
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	b29b      	uxth	r3, r3
 8005398:	029b      	lsls	r3, r3, #10
 800539a:	b29b      	uxth	r3, r3
 800539c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	827b      	strh	r3, [r7, #18]
 80053bc:	8a7b      	ldrh	r3, [r7, #18]
 80053be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053c2:	827b      	strh	r3, [r7, #18]
 80053c4:	8a7b      	ldrh	r3, [r7, #18]
 80053c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053ca:	827b      	strh	r3, [r7, #18]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	8a7b      	ldrh	r3, [r7, #18]
 80053d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8013      	strh	r3, [r2, #0]
 80053e6:	e17b      	b.n	80056e0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f280 80ea 	bge.w	80055d8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29a      	uxth	r2, r3
 8005416:	f640 738f 	movw	r3, #3983	; 0xf8f
 800541a:	4013      	ands	r3, r2
 800541c:	853b      	strh	r3, [r7, #40]	; 0x28
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800542e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005432:	b292      	uxth	r2, r2
 8005434:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005436:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	7b1b      	ldrb	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d122      	bne.n	800549a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545c:	b29b      	uxth	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	3306      	adds	r3, #6
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800547c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800547e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8087 	beq.w	8005594 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	6959      	ldr	r1, [r3, #20]
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	88da      	ldrh	r2, [r3, #6]
 8005492:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005494:	f005 f933 	bl	800a6fe <USB_ReadPMA>
 8005498:	e07c      	b.n	8005594 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d108      	bne.n	80054b4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054a4:	461a      	mov	r2, r3
 80054a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f927 	bl	80056fc <HAL_PCD_EP_DB_Receive>
 80054ae:	4603      	mov	r3, r0
 80054b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054b2:	e06f      	b.n	8005594 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d021      	beq.n	8005552 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005516:	b29b      	uxth	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	4413      	add	r3, r2
 8005522:	3302      	adds	r3, #2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005536:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005538:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800553a:	2b00      	cmp	r3, #0
 800553c:	d02a      	beq.n	8005594 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	6959      	ldr	r1, [r3, #20]
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	891a      	ldrh	r2, [r3, #8]
 800554a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800554c:	f005 f8d7 	bl	800a6fe <USB_ReadPMA>
 8005550:	e020      	b.n	8005594 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	3306      	adds	r3, #6
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6812      	ldr	r2, [r2, #0]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800557c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	6959      	ldr	r1, [r3, #20]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	895a      	ldrh	r2, [r3, #10]
 800558e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005590:	f005 f8b5 	bl	800a6fe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800559a:	441a      	add	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055a6:	441a      	add	r2, r3
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <PCD_EP_ISR_Handler+0x4c2>
 80055b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d206      	bcs.n	80055cc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f006 fe89 	bl	800c2dc <HAL_PCD_DataOutStageCallback>
 80055ca:	e005      	b.n	80055d8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f003 f8d8 	bl	8008788 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80055d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d07e      	beq.n	80056e0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80055e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	4413      	add	r3, r2
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800560c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005610:	843b      	strh	r3, [r7, #32]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	441a      	add	r2, r3
 8005620:	8c3b      	ldrh	r3, [r7, #32]
 8005622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562a:	b29b      	uxth	r3, r3
 800562c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	78db      	ldrb	r3, [r3, #3]
 8005632:	2b03      	cmp	r3, #3
 8005634:	d00c      	beq.n	8005650 <PCD_EP_ISR_Handler+0x554>
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	78db      	ldrb	r3, [r3, #3]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005642:	2b02      	cmp	r3, #2
 8005644:	d146      	bne.n	80056d4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005646:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d141      	bne.n	80056d4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005658:	b29b      	uxth	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4413      	add	r3, r2
 8005664:	3302      	adds	r3, #2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005678:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	8bfb      	ldrh	r3, [r7, #30]
 8005680:	429a      	cmp	r2, r3
 8005682:	d906      	bls.n	8005692 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	8bfb      	ldrh	r3, [r7, #30]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	619a      	str	r2, [r3, #24]
 8005690:	e002      	b.n	8005698 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	2200      	movs	r2, #0
 8005696:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d106      	bne.n	80056ae <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f006 fe33 	bl	800c312 <HAL_PCD_DataInStageCallback>
 80056ac:	e018      	b.n	80056e0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	8bfb      	ldrh	r3, [r7, #30]
 80056b4:	441a      	add	r2, r3
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	69da      	ldr	r2, [r3, #28]
 80056be:	8bfb      	ldrh	r3, [r7, #30]
 80056c0:	441a      	add	r2, r3
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056cc:	4618      	mov	r0, r3
 80056ce:	f003 f85b 	bl	8008788 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80056d2:	e005      	b.n	80056e0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056d6:	461a      	mov	r2, r3
 80056d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f91b 	bl	8005916 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f6ff ad0a 	blt.w	8005106 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3738      	adds	r7, #56	; 0x38
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d07e      	beq.n	8005812 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571c:	b29b      	uxth	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	3302      	adds	r3, #2
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800573c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	8b7b      	ldrh	r3, [r7, #26]
 8005744:	429a      	cmp	r2, r3
 8005746:	d306      	bcc.n	8005756 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	8b7b      	ldrh	r3, [r7, #26]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	619a      	str	r2, [r3, #24]
 8005754:	e002      	b.n	800575c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2200      	movs	r2, #0
 800575a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d123      	bne.n	80057ac <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	833b      	strh	r3, [r7, #24]
 8005780:	8b3b      	ldrh	r3, [r7, #24]
 8005782:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005786:	833b      	strh	r3, [r7, #24]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	8b3b      	ldrh	r3, [r7, #24]
 8005798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800579c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01f      	beq.n	80057f6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	82fb      	strh	r3, [r7, #22]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	441a      	add	r2, r3
 80057e0:	8afb      	ldrh	r3, [r7, #22]
 80057e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80057f6:	8b7b      	ldrh	r3, [r7, #26]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8087 	beq.w	800590c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6959      	ldr	r1, [r3, #20]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	891a      	ldrh	r2, [r3, #8]
 800580a:	8b7b      	ldrh	r3, [r7, #26]
 800580c:	f004 ff77 	bl	800a6fe <USB_ReadPMA>
 8005810:	e07c      	b.n	800590c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581a:	b29b      	uxth	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	4413      	add	r3, r2
 8005826:	3306      	adds	r3, #6
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800583a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	8b7b      	ldrh	r3, [r7, #26]
 8005842:	429a      	cmp	r2, r3
 8005844:	d306      	bcc.n	8005854 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	8b7b      	ldrh	r3, [r7, #26]
 800584c:	1ad2      	subs	r2, r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	619a      	str	r2, [r3, #24]
 8005852:	e002      	b.n	800585a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d123      	bne.n	80058aa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587c:	83fb      	strh	r3, [r7, #30]
 800587e:	8bfb      	ldrh	r3, [r7, #30]
 8005880:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005884:	83fb      	strh	r3, [r7, #30]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	441a      	add	r2, r3
 8005894:	8bfb      	ldrh	r3, [r7, #30]
 8005896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800589e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11f      	bne.n	80058f4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	83bb      	strh	r3, [r7, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	441a      	add	r2, r3
 80058de:	8bbb      	ldrh	r3, [r7, #28]
 80058e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80058f4:	8b7b      	ldrh	r3, [r7, #26]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6959      	ldr	r1, [r3, #20]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	895a      	ldrh	r2, [r3, #10]
 8005906:	8b7b      	ldrh	r3, [r7, #26]
 8005908:	f004 fef9 	bl	800a6fe <USB_ReadPMA>
    }
  }

  return count;
 800590c:	8b7b      	ldrh	r3, [r7, #26]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b0a2      	sub	sp, #136	; 0x88
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	4613      	mov	r3, r2
 8005922:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 81c7 	beq.w	8005cbe <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005938:	b29b      	uxth	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	3302      	adds	r3, #2
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005958:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005964:	429a      	cmp	r2, r3
 8005966:	d907      	bls.n	8005978 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005970:	1ad2      	subs	r2, r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	619a      	str	r2, [r3, #24]
 8005976:	e002      	b.n	800597e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2200      	movs	r2, #0
 800597c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 80b9 	bne.w	8005afa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d126      	bne.n	80059de <HAL_PCD_EP_DB_Transmit+0xc8>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599e:	b29b      	uxth	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	4413      	add	r3, r2
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	011a      	lsls	r2, r3, #4
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	801a      	strh	r2, [r3, #0]
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e01a      	b.n	8005a14 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	785b      	ldrb	r3, [r3, #1]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d116      	bne.n	8005a14 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	4413      	add	r3, r2
 80059fc:	633b      	str	r3, [r7, #48]	; 0x30
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	011a      	lsls	r2, r3, #4
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	2200      	movs	r2, #0
 8005a12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d126      	bne.n	8005a70 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	4413      	add	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	011a      	lsls	r2, r3, #4
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	4413      	add	r3, r2
 8005a44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e017      	b.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d113      	bne.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	4413      	add	r3, r2
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	011a      	lsls	r2, r3, #4
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	4413      	add	r3, r2
 8005a94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f006 fc33 	bl	800c312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 82d4 	beq.w	8006060 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	827b      	strh	r3, [r7, #18]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	8a7b      	ldrh	r3, [r7, #18]
 8005ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
 8005af8:	e2b2      	b.n	8006060 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d021      	beq.n	8005b48 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	441a      	add	r2, r3
 8005b30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	f040 8286 	bne.w	8006060 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b6a:	441a      	add	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6a1a      	ldr	r2, [r3, #32]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d309      	bcc.n	8005b90 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b88:	1ad2      	subs	r2, r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	621a      	str	r2, [r3, #32]
 8005b8e:	e015      	b.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005ba6:	e009      	b.n	8005bbc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d155      	bne.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd8:	4413      	add	r3, r2
 8005bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	011a      	lsls	r2, r3, #4
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	4413      	add	r3, r2
 8005be6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
 8005bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d112      	bne.n	8005c18 <HAL_PCD_EP_DB_Transmit+0x302>
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e047      	b.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c1c:	d811      	bhi.n	8005c42 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c30:	3301      	adds	r3, #1
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e032      	b.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <HAL_PCD_EP_DB_Transmit+0x342>
 8005c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c54:	3b01      	subs	r3, #1
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	029b      	lsls	r3, r3, #10
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	e01b      	b.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d117      	bne.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8c:	4413      	add	r3, r2
 8005c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	011a      	lsls	r2, r3, #4
 8005c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6959      	ldr	r1, [r3, #20]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	891a      	ldrh	r2, [r3, #8]
 8005cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f004 fcdc 	bl	800a674 <USB_WritePMA>
 8005cbc:	e1d0      	b.n	8006060 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3306      	adds	r3, #6
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d307      	bcc.n	8005d06 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	619a      	str	r2, [r3, #24]
 8005d04:	e002      	b.n	8005d0c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f040 80c4 	bne.w	8005e9e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d126      	bne.n	8005d6c <HAL_PCD_EP_DB_Transmit+0x456>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d32:	4413      	add	r3, r2
 8005d34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	011a      	lsls	r2, r3, #4
 8005d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3e:	4413      	add	r3, r2
 8005d40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e01a      	b.n	8005da2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d116      	bne.n	8005da2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	677b      	str	r3, [r7, #116]	; 0x74
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d88:	4413      	add	r3, r2
 8005d8a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	011a      	lsls	r2, r3, #4
 8005d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d94:	4413      	add	r3, r2
 8005d96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d9e:	2200      	movs	r2, #0
 8005da0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d12f      	bne.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dc8:	4413      	add	r3, r2
 8005dca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	011a      	lsls	r2, r3, #4
 8005dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e017      	b.n	8005e40 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d113      	bne.n	8005e40 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e26:	4413      	add	r3, r2
 8005e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	011a      	lsls	r2, r3, #4
 8005e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	4619      	mov	r1, r3
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f006 fa63 	bl	800c312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 8104 	bne.w	8006060 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	441a      	add	r2, r3
 8005e84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	8013      	strh	r3, [r2, #0]
 8005e9c:	e0e0      	b.n	8006060 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e9e:	88fb      	ldrh	r3, [r7, #6]
 8005ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d121      	bne.n	8005eec <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	f040 80b4 	bne.w	8006060 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f00:	441a      	add	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	69da      	ldr	r2, [r3, #28]
 8005f0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f0e:	441a      	add	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6a1a      	ldr	r2, [r3, #32]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d309      	bcc.n	8005f34 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6a1a      	ldr	r2, [r3, #32]
 8005f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2c:	1ad2      	subs	r2, r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	621a      	str	r2, [r3, #32]
 8005f32:	e015      	b.n	8005f60 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d107      	bne.n	8005f4c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f4a:	e009      	b.n	8005f60 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2200      	movs	r2, #0
 8005f56:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	667b      	str	r3, [r7, #100]	; 0x64
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d155      	bne.n	800601a <HAL_PCD_EP_DB_Transmit+0x704>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f82:	4413      	add	r3, r2
 8005f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	011a      	lsls	r2, r3, #4
 8005f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d112      	bne.n	8005fc2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	e044      	b.n	800604c <HAL_PCD_EP_DB_Transmit+0x736>
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fc6:	d811      	bhi.n	8005fec <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8005fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fda:	3301      	adds	r3, #1
 8005fdc:	657b      	str	r3, [r7, #84]	; 0x54
 8005fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	029b      	lsls	r3, r3, #10
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	e02f      	b.n	800604c <HAL_PCD_EP_DB_Transmit+0x736>
 8005fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fee:	095b      	lsrs	r3, r3, #5
 8005ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffe:	3b01      	subs	r3, #1
 8006000:	657b      	str	r3, [r7, #84]	; 0x54
 8006002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006004:	b29b      	uxth	r3, r3
 8006006:	029b      	lsls	r3, r3, #10
 8006008:	b29b      	uxth	r3, r3
 800600a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006012:	b29a      	uxth	r2, r3
 8006014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	e018      	b.n	800604c <HAL_PCD_EP_DB_Transmit+0x736>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	785b      	ldrb	r3, [r3, #1]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d114      	bne.n	800604c <HAL_PCD_EP_DB_Transmit+0x736>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006030:	4413      	add	r3, r2
 8006032:	667b      	str	r3, [r7, #100]	; 0x64
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	011a      	lsls	r2, r3, #4
 800603a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800603c:	4413      	add	r3, r2
 800603e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006042:	663b      	str	r3, [r7, #96]	; 0x60
 8006044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006046:	b29a      	uxth	r2, r3
 8006048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800604a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6959      	ldr	r1, [r3, #20]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	895a      	ldrh	r2, [r3, #10]
 8006058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	f004 fb0a 	bl	800a674 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607a:	823b      	strh	r3, [r7, #16]
 800607c:	8a3b      	ldrh	r3, [r7, #16]
 800607e:	f083 0310 	eor.w	r3, r3, #16
 8006082:	823b      	strh	r3, [r7, #16]
 8006084:	8a3b      	ldrh	r3, [r7, #16]
 8006086:	f083 0320 	eor.w	r3, r3, #32
 800608a:	823b      	strh	r3, [r7, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	8a3b      	ldrh	r3, [r7, #16]
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3788      	adds	r7, #136	; 0x88
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b087      	sub	sp, #28
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	817b      	strh	r3, [r7, #10]
 80060c8:	4613      	mov	r3, r2
 80060ca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060cc:	897b      	ldrh	r3, [r7, #10]
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d8:	897b      	ldrh	r3, [r7, #10]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e009      	b.n	8006104 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060f0:	897a      	ldrh	r2, [r7, #10]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006104:	893b      	ldrh	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d107      	bne.n	800611a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	b29a      	uxth	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	80da      	strh	r2, [r3, #6]
 8006118:	e00b      	b.n	8006132 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2201      	movs	r2, #1
 800611e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	b29a      	uxth	r2, r3
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	0c1b      	lsrs	r3, r3, #16
 800612c:	b29a      	uxth	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr
	...

08006140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e272      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8087 	beq.w	800626e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006160:	4b92      	ldr	r3, [pc, #584]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f003 030c 	and.w	r3, r3, #12
 8006168:	2b04      	cmp	r3, #4
 800616a:	d00c      	beq.n	8006186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800616c:	4b8f      	ldr	r3, [pc, #572]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f003 030c 	and.w	r3, r3, #12
 8006174:	2b08      	cmp	r3, #8
 8006176:	d112      	bne.n	800619e <HAL_RCC_OscConfig+0x5e>
 8006178:	4b8c      	ldr	r3, [pc, #560]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006184:	d10b      	bne.n	800619e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006186:	4b89      	ldr	r3, [pc, #548]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d06c      	beq.n	800626c <HAL_RCC_OscConfig+0x12c>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d168      	bne.n	800626c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e24c      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a6:	d106      	bne.n	80061b6 <HAL_RCC_OscConfig+0x76>
 80061a8:	4b80      	ldr	r3, [pc, #512]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a7f      	ldr	r2, [pc, #508]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	e02e      	b.n	8006214 <HAL_RCC_OscConfig+0xd4>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10c      	bne.n	80061d8 <HAL_RCC_OscConfig+0x98>
 80061be:	4b7b      	ldr	r3, [pc, #492]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a7a      	ldr	r2, [pc, #488]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	4b78      	ldr	r3, [pc, #480]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a77      	ldr	r2, [pc, #476]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e01d      	b.n	8006214 <HAL_RCC_OscConfig+0xd4>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0xbc>
 80061e2:	4b72      	ldr	r3, [pc, #456]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a71      	ldr	r2, [pc, #452]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4b6f      	ldr	r3, [pc, #444]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a6e      	ldr	r2, [pc, #440]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e00b      	b.n	8006214 <HAL_RCC_OscConfig+0xd4>
 80061fc:	4b6b      	ldr	r3, [pc, #428]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a6a      	ldr	r2, [pc, #424]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4b68      	ldr	r3, [pc, #416]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a67      	ldr	r2, [pc, #412]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 800620e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d013      	beq.n	8006244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fd f8ea 	bl	80033f4 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006224:	f7fd f8e6 	bl	80033f4 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b64      	cmp	r3, #100	; 0x64
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e200      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006236:	4b5d      	ldr	r3, [pc, #372]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0xe4>
 8006242:	e014      	b.n	800626e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fd f8d6 	bl	80033f4 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800624c:	f7fd f8d2 	bl	80033f4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b64      	cmp	r3, #100	; 0x64
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e1ec      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800625e:	4b53      	ldr	r3, [pc, #332]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x10c>
 800626a:	e000      	b.n	800626e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800626c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d063      	beq.n	8006342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800627a:	4b4c      	ldr	r3, [pc, #304]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006286:	4b49      	ldr	r3, [pc, #292]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f003 030c 	and.w	r3, r3, #12
 800628e:	2b08      	cmp	r3, #8
 8006290:	d11c      	bne.n	80062cc <HAL_RCC_OscConfig+0x18c>
 8006292:	4b46      	ldr	r3, [pc, #280]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d116      	bne.n	80062cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629e:	4b43      	ldr	r3, [pc, #268]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_RCC_OscConfig+0x176>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d001      	beq.n	80062b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e1c0      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b6:	4b3d      	ldr	r3, [pc, #244]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	4939      	ldr	r1, [pc, #228]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ca:	e03a      	b.n	8006342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d020      	beq.n	8006316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d4:	4b36      	ldr	r3, [pc, #216]	; (80063b0 <HAL_RCC_OscConfig+0x270>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062da:	f7fd f88b 	bl	80033f4 <HAL_GetTick>
 80062de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e0:	e008      	b.n	80062f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e2:	f7fd f887 	bl	80033f4 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d901      	bls.n	80062f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e1a1      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006300:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4927      	ldr	r1, [pc, #156]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006310:	4313      	orrs	r3, r2
 8006312:	600b      	str	r3, [r1, #0]
 8006314:	e015      	b.n	8006342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006316:	4b26      	ldr	r3, [pc, #152]	; (80063b0 <HAL_RCC_OscConfig+0x270>)
 8006318:	2200      	movs	r2, #0
 800631a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800631c:	f7fd f86a 	bl	80033f4 <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006324:	f7fd f866 	bl	80033f4 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e180      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d03a      	beq.n	80063c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d019      	beq.n	800638a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006356:	4b17      	ldr	r3, [pc, #92]	; (80063b4 <HAL_RCC_OscConfig+0x274>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800635c:	f7fd f84a 	bl	80033f4 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006364:	f7fd f846 	bl	80033f4 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e160      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006376:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <HAL_RCC_OscConfig+0x26c>)
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006382:	2001      	movs	r0, #1
 8006384:	f000 fac4 	bl	8006910 <RCC_Delay>
 8006388:	e01c      	b.n	80063c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800638a:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <HAL_RCC_OscConfig+0x274>)
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006390:	f7fd f830 	bl	80033f4 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006396:	e00f      	b.n	80063b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006398:	f7fd f82c 	bl	80033f4 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d908      	bls.n	80063b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e146      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
 80063aa:	bf00      	nop
 80063ac:	40021000 	.word	0x40021000
 80063b0:	42420000 	.word	0x42420000
 80063b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b8:	4b92      	ldr	r3, [pc, #584]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e9      	bne.n	8006398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80a6 	beq.w	800651e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063d6:	4b8b      	ldr	r3, [pc, #556]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10d      	bne.n	80063fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063e2:	4b88      	ldr	r3, [pc, #544]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	4a87      	ldr	r2, [pc, #540]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80063e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ec:	61d3      	str	r3, [r2, #28]
 80063ee:	4b85      	ldr	r3, [pc, #532]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f6:	60bb      	str	r3, [r7, #8]
 80063f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063fe:	4b82      	ldr	r3, [pc, #520]	; (8006608 <HAL_RCC_OscConfig+0x4c8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d118      	bne.n	800643c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800640a:	4b7f      	ldr	r3, [pc, #508]	; (8006608 <HAL_RCC_OscConfig+0x4c8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a7e      	ldr	r2, [pc, #504]	; (8006608 <HAL_RCC_OscConfig+0x4c8>)
 8006410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006416:	f7fc ffed 	bl	80033f4 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641e:	f7fc ffe9 	bl	80033f4 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b64      	cmp	r3, #100	; 0x64
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e103      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006430:	4b75      	ldr	r3, [pc, #468]	; (8006608 <HAL_RCC_OscConfig+0x4c8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d106      	bne.n	8006452 <HAL_RCC_OscConfig+0x312>
 8006444:	4b6f      	ldr	r3, [pc, #444]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	4a6e      	ldr	r2, [pc, #440]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	6213      	str	r3, [r2, #32]
 8006450:	e02d      	b.n	80064ae <HAL_RCC_OscConfig+0x36e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0x334>
 800645a:	4b6a      	ldr	r3, [pc, #424]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	4a69      	ldr	r2, [pc, #420]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	6213      	str	r3, [r2, #32]
 8006466:	4b67      	ldr	r3, [pc, #412]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	4a66      	ldr	r2, [pc, #408]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800646c:	f023 0304 	bic.w	r3, r3, #4
 8006470:	6213      	str	r3, [r2, #32]
 8006472:	e01c      	b.n	80064ae <HAL_RCC_OscConfig+0x36e>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	2b05      	cmp	r3, #5
 800647a:	d10c      	bne.n	8006496 <HAL_RCC_OscConfig+0x356>
 800647c:	4b61      	ldr	r3, [pc, #388]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	4a60      	ldr	r2, [pc, #384]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006482:	f043 0304 	orr.w	r3, r3, #4
 8006486:	6213      	str	r3, [r2, #32]
 8006488:	4b5e      	ldr	r3, [pc, #376]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	4a5d      	ldr	r2, [pc, #372]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	6213      	str	r3, [r2, #32]
 8006494:	e00b      	b.n	80064ae <HAL_RCC_OscConfig+0x36e>
 8006496:	4b5b      	ldr	r3, [pc, #364]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	4a5a      	ldr	r2, [pc, #360]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800649c:	f023 0301 	bic.w	r3, r3, #1
 80064a0:	6213      	str	r3, [r2, #32]
 80064a2:	4b58      	ldr	r3, [pc, #352]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	4a57      	ldr	r2, [pc, #348]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80064a8:	f023 0304 	bic.w	r3, r3, #4
 80064ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d015      	beq.n	80064e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b6:	f7fc ff9d 	bl	80033f4 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064bc:	e00a      	b.n	80064d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064be:	f7fc ff99 	bl	80033f4 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e0b1      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d4:	4b4b      	ldr	r3, [pc, #300]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0ee      	beq.n	80064be <HAL_RCC_OscConfig+0x37e>
 80064e0:	e014      	b.n	800650c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064e2:	f7fc ff87 	bl	80033f4 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064e8:	e00a      	b.n	8006500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ea:	f7fc ff83 	bl	80033f4 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e09b      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006500:	4b40      	ldr	r3, [pc, #256]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1ee      	bne.n	80064ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d105      	bne.n	800651e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006512:	4b3c      	ldr	r3, [pc, #240]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	4a3b      	ldr	r2, [pc, #236]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800651c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8087 	beq.w	8006636 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006528:	4b36      	ldr	r3, [pc, #216]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f003 030c 	and.w	r3, r3, #12
 8006530:	2b08      	cmp	r3, #8
 8006532:	d061      	beq.n	80065f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d146      	bne.n	80065ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800653c:	4b33      	ldr	r3, [pc, #204]	; (800660c <HAL_RCC_OscConfig+0x4cc>)
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006542:	f7fc ff57 	bl	80033f4 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800654a:	f7fc ff53 	bl	80033f4 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e06d      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800655c:	4b29      	ldr	r3, [pc, #164]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f0      	bne.n	800654a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006570:	d108      	bne.n	8006584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006572:	4b24      	ldr	r3, [pc, #144]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	4921      	ldr	r1, [pc, #132]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006580:	4313      	orrs	r3, r2
 8006582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006584:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a19      	ldr	r1, [r3, #32]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	430b      	orrs	r3, r1
 8006596:	491b      	ldr	r1, [pc, #108]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 8006598:	4313      	orrs	r3, r2
 800659a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800659c:	4b1b      	ldr	r3, [pc, #108]	; (800660c <HAL_RCC_OscConfig+0x4cc>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a2:	f7fc ff27 	bl	80033f4 <HAL_GetTick>
 80065a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065aa:	f7fc ff23 	bl	80033f4 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e03d      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065bc:	4b11      	ldr	r3, [pc, #68]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f0      	beq.n	80065aa <HAL_RCC_OscConfig+0x46a>
 80065c8:	e035      	b.n	8006636 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ca:	4b10      	ldr	r3, [pc, #64]	; (800660c <HAL_RCC_OscConfig+0x4cc>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d0:	f7fc ff10 	bl	80033f4 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d8:	f7fc ff0c 	bl	80033f4 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e026      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <HAL_RCC_OscConfig+0x4c4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0x498>
 80065f6:	e01e      	b.n	8006636 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e019      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
 8006604:	40021000 	.word	0x40021000
 8006608:	40007000 	.word	0x40007000
 800660c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <HAL_RCC_OscConfig+0x500>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	429a      	cmp	r2, r3
 8006622:	d106      	bne.n	8006632 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800662e:	429a      	cmp	r2, r3
 8006630:	d001      	beq.n	8006636 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40021000 	.word	0x40021000

08006644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0d0      	b.n	80067fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006658:	4b6a      	ldr	r3, [pc, #424]	; (8006804 <HAL_RCC_ClockConfig+0x1c0>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d910      	bls.n	8006688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006666:	4b67      	ldr	r3, [pc, #412]	; (8006804 <HAL_RCC_ClockConfig+0x1c0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f023 0207 	bic.w	r2, r3, #7
 800666e:	4965      	ldr	r1, [pc, #404]	; (8006804 <HAL_RCC_ClockConfig+0x1c0>)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006676:	4b63      	ldr	r3, [pc, #396]	; (8006804 <HAL_RCC_ClockConfig+0x1c0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d001      	beq.n	8006688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0b8      	b.n	80067fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d020      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066a0:	4b59      	ldr	r3, [pc, #356]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	4a58      	ldr	r2, [pc, #352]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80066a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0308 	and.w	r3, r3, #8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066b8:	4b53      	ldr	r3, [pc, #332]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	4a52      	ldr	r2, [pc, #328]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80066be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80066c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c4:	4b50      	ldr	r3, [pc, #320]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	494d      	ldr	r1, [pc, #308]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d040      	beq.n	8006764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d107      	bne.n	80066fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ea:	4b47      	ldr	r3, [pc, #284]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d115      	bne.n	8006722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e07f      	b.n	80067fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d107      	bne.n	8006712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006702:	4b41      	ldr	r3, [pc, #260]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d109      	bne.n	8006722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e073      	b.n	80067fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006712:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e06b      	b.n	80067fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006722:	4b39      	ldr	r3, [pc, #228]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f023 0203 	bic.w	r2, r3, #3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	4936      	ldr	r1, [pc, #216]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 8006730:	4313      	orrs	r3, r2
 8006732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006734:	f7fc fe5e 	bl	80033f4 <HAL_GetTick>
 8006738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673a:	e00a      	b.n	8006752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800673c:	f7fc fe5a 	bl	80033f4 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	; 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e053      	b.n	80067fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006752:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f003 020c 	and.w	r2, r3, #12
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	429a      	cmp	r2, r3
 8006762:	d1eb      	bne.n	800673c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006764:	4b27      	ldr	r3, [pc, #156]	; (8006804 <HAL_RCC_ClockConfig+0x1c0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d210      	bcs.n	8006794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006772:	4b24      	ldr	r3, [pc, #144]	; (8006804 <HAL_RCC_ClockConfig+0x1c0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f023 0207 	bic.w	r2, r3, #7
 800677a:	4922      	ldr	r1, [pc, #136]	; (8006804 <HAL_RCC_ClockConfig+0x1c0>)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b20      	ldr	r3, [pc, #128]	; (8006804 <HAL_RCC_ClockConfig+0x1c0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e032      	b.n	80067fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4916      	ldr	r1, [pc, #88]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067be:	4b12      	ldr	r3, [pc, #72]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	490e      	ldr	r1, [pc, #56]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067d2:	f000 f821 	bl	8006818 <HAL_RCC_GetSysClockFreq>
 80067d6:	4602      	mov	r2, r0
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <HAL_RCC_ClockConfig+0x1c4>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	490a      	ldr	r1, [pc, #40]	; (800680c <HAL_RCC_ClockConfig+0x1c8>)
 80067e4:	5ccb      	ldrb	r3, [r1, r3]
 80067e6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ea:	4a09      	ldr	r2, [pc, #36]	; (8006810 <HAL_RCC_ClockConfig+0x1cc>)
 80067ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067ee:	4b09      	ldr	r3, [pc, #36]	; (8006814 <HAL_RCC_ClockConfig+0x1d0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fc fdbc 	bl	8003370 <HAL_InitTick>

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40022000 	.word	0x40022000
 8006808:	40021000 	.word	0x40021000
 800680c:	0800c8f4 	.word	0x0800c8f4
 8006810:	20000000 	.word	0x20000000
 8006814:	20000004 	.word	0x20000004

08006818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006818:	b490      	push	{r4, r7}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800681e:	4b29      	ldr	r3, [pc, #164]	; (80068c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006820:	1d3c      	adds	r4, r7, #4
 8006822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006828:	f240 2301 	movw	r3, #513	; 0x201
 800682c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	2300      	movs	r3, #0
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006842:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f003 030c 	and.w	r3, r3, #12
 800684e:	2b04      	cmp	r3, #4
 8006850:	d002      	beq.n	8006858 <HAL_RCC_GetSysClockFreq+0x40>
 8006852:	2b08      	cmp	r3, #8
 8006854:	d003      	beq.n	800685e <HAL_RCC_GetSysClockFreq+0x46>
 8006856:	e02b      	b.n	80068b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006858:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800685a:	623b      	str	r3, [r7, #32]
      break;
 800685c:	e02b      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	0c9b      	lsrs	r3, r3, #18
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	3328      	adds	r3, #40	; 0x28
 8006868:	443b      	add	r3, r7
 800686a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800686e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d012      	beq.n	80068a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	0c5b      	lsrs	r3, r3, #17
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	3328      	adds	r3, #40	; 0x28
 8006886:	443b      	add	r3, r7
 8006888:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800688c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4a0e      	ldr	r2, [pc, #56]	; (80068cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8006892:	fb03 f202 	mul.w	r2, r3, r2
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
 800689e:	e004      	b.n	80068aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	4a0b      	ldr	r2, [pc, #44]	; (80068d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068a4:	fb02 f303 	mul.w	r3, r2, r3
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	623b      	str	r3, [r7, #32]
      break;
 80068ae:	e002      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80068b2:	623b      	str	r3, [r7, #32]
      break;
 80068b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068b6:	6a3b      	ldr	r3, [r7, #32]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3728      	adds	r7, #40	; 0x28
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc90      	pop	{r4, r7}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	0800c84c 	.word	0x0800c84c
 80068c8:	40021000 	.word	0x40021000
 80068cc:	007a1200 	.word	0x007a1200
 80068d0:	003d0900 	.word	0x003d0900

080068d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068d8:	4b02      	ldr	r3, [pc, #8]	; (80068e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80068da:	681b      	ldr	r3, [r3, #0]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr
 80068e4:	20000000 	.word	0x20000000

080068e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068ec:	f7ff fff2 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 80068f0:	4602      	mov	r2, r0
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	0adb      	lsrs	r3, r3, #11
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	4903      	ldr	r1, [pc, #12]	; (800690c <HAL_RCC_GetPCLK2Freq+0x24>)
 80068fe:	5ccb      	ldrb	r3, [r1, r3]
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006904:	4618      	mov	r0, r3
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40021000 	.word	0x40021000
 800690c:	0800c904 	.word	0x0800c904

08006910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <RCC_Delay+0x34>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a0a      	ldr	r2, [pc, #40]	; (8006948 <RCC_Delay+0x38>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	0a5b      	lsrs	r3, r3, #9
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800692c:	bf00      	nop
  }
  while (Delay --);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1e5a      	subs	r2, r3, #1
 8006932:	60fa      	str	r2, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f9      	bne.n	800692c <RCC_Delay+0x1c>
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr
 8006944:	20000000 	.word	0x20000000
 8006948:	10624dd3 	.word	0x10624dd3

0800694c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d07d      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006968:	2300      	movs	r3, #0
 800696a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800696c:	4b4f      	ldr	r3, [pc, #316]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006978:	4b4c      	ldr	r3, [pc, #304]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4a4b      	ldr	r2, [pc, #300]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800697e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006982:	61d3      	str	r3, [r2, #28]
 8006984:	4b49      	ldr	r3, [pc, #292]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006990:	2301      	movs	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006994:	4b46      	ldr	r3, [pc, #280]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699c:	2b00      	cmp	r3, #0
 800699e:	d118      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069a0:	4b43      	ldr	r3, [pc, #268]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a42      	ldr	r2, [pc, #264]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ac:	f7fc fd22 	bl	80033f4 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b2:	e008      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b4:	f7fc fd1e 	bl	80033f4 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	2b64      	cmp	r3, #100	; 0x64
 80069c0:	d901      	bls.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e06d      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c6:	4b3a      	ldr	r3, [pc, #232]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d0f0      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069d2:	4b36      	ldr	r3, [pc, #216]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d02e      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d027      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069f0:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069fa:	4b2e      	ldr	r3, [pc, #184]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a00:	4b2c      	ldr	r3, [pc, #176]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a06:	4a29      	ldr	r2, [pc, #164]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d014      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a16:	f7fc fced 	bl	80033f4 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a1c:	e00a      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a1e:	f7fc fce9 	bl	80033f4 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e036      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a34:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0ee      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a40:	4b1a      	ldr	r3, [pc, #104]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4917      	ldr	r1, [pc, #92]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d105      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a70:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	490b      	ldr	r1, [pc, #44]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	4904      	ldr	r1, [pc, #16]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	40007000 	.word	0x40007000
 8006ab4:	42420440 	.word	0x42420440

08006ab8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b08d      	sub	sp, #52	; 0x34
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ac0:	4b58      	ldr	r3, [pc, #352]	; (8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006ac2:	f107 040c 	add.w	r4, r7, #12
 8006ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006acc:	f240 2301 	movw	r3, #513	; 0x201
 8006ad0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ada:	2300      	movs	r3, #0
 8006adc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b10      	cmp	r3, #16
 8006af0:	f200 808e 	bhi.w	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d049      	beq.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d079      	beq.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006b00:	e086      	b.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006b02:	4b49      	ldr	r3, [pc, #292]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006b08:	4b47      	ldr	r3, [pc, #284]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d07f      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	0c9b      	lsrs	r3, r3, #18
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	3330      	adds	r3, #48	; 0x30
 8006b1e:	443b      	add	r3, r7
 8006b20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b24:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d017      	beq.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b30:	4b3d      	ldr	r3, [pc, #244]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	0c5b      	lsrs	r3, r3, #17
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	3330      	adds	r3, #48	; 0x30
 8006b3c:	443b      	add	r3, r7
 8006b3e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006b4e:	4a37      	ldr	r2, [pc, #220]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b5e:	e004      	b.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	4a33      	ldr	r2, [pc, #204]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b64:	fb02 f303 	mul.w	r3, r2, r3
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006b6a:	4b2f      	ldr	r3, [pc, #188]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b76:	d102      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b7c:	e04a      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4a2c      	ldr	r2, [pc, #176]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006b84:	fba2 2303 	umull	r2, r3, r2, r3
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b8c:	e042      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006b8e:	4b26      	ldr	r3, [pc, #152]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9e:	d108      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb0:	e01f      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bbc:	d109      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006bca:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd0:	e00f      	b.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bdc:	d11c      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006bde:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006bea:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006bf0:	e012      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006bf2:	e011      	b.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006bf4:	f7ff fe78 	bl	80068e8 <HAL_RCC_GetPCLK2Freq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	; (8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	0b9b      	lsrs	r3, r3, #14
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	3301      	adds	r3, #1
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c0e:	e004      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c10:	bf00      	nop
 8006c12:	e002      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c14:	bf00      	nop
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c18:	bf00      	nop
    }
  }
  return (frequency);
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3734      	adds	r7, #52	; 0x34
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd90      	pop	{r4, r7, pc}
 8006c24:	0800c85c 	.word	0x0800c85c
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	007a1200 	.word	0x007a1200
 8006c30:	003d0900 	.word	0x003d0900
 8006c34:	aaaaaaab 	.word	0xaaaaaaab

08006c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e041      	b.n	8006cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fc fa68 	bl	8003134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f000 fcb0 	bl	80075dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d001      	beq.n	8006cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e03a      	b.n	8006d66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <HAL_TIM_Base_Start_IT+0x98>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x58>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d009      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x58>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_TIM_Base_Start_IT+0x58>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <HAL_TIM_Base_Start_IT+0xa0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d111      	bne.n	8006d54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b06      	cmp	r3, #6
 8006d40:	d010      	beq.n	8006d64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0201 	orr.w	r2, r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d52:	e007      	b.n	8006d64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0201 	orr.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr
 8006d70:	40012c00 	.word	0x40012c00
 8006d74:	40000400 	.word	0x40000400
 8006d78:	40000800 	.word	0x40000800

08006d7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0201 	bic.w	r2, r2, #1
 8006d92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10f      	bne.n	8006dc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6a1a      	ldr	r2, [r3, #32]
 8006daa:	f240 4344 	movw	r3, #1092	; 0x444
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d107      	bne.n	8006dc4 <HAL_TIM_Base_Stop_IT+0x48>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e041      	b.n	8006e6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f839 	bl	8006e76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f000 fbe0 	bl	80075dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr

08006e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d109      	bne.n	8006eac <HAL_TIM_PWM_Start+0x24>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	bf14      	ite	ne
 8006ea4:	2301      	movne	r3, #1
 8006ea6:	2300      	moveq	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	e022      	b.n	8006ef2 <HAL_TIM_PWM_Start+0x6a>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d109      	bne.n	8006ec6 <HAL_TIM_PWM_Start+0x3e>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	bf14      	ite	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	2300      	moveq	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	e015      	b.n	8006ef2 <HAL_TIM_PWM_Start+0x6a>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d109      	bne.n	8006ee0 <HAL_TIM_PWM_Start+0x58>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	bf14      	ite	ne
 8006ed8:	2301      	movne	r3, #1
 8006eda:	2300      	moveq	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	e008      	b.n	8006ef2 <HAL_TIM_PWM_Start+0x6a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	bf14      	ite	ne
 8006eec:	2301      	movne	r3, #1
 8006eee:	2300      	moveq	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e05e      	b.n	8006fb8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <HAL_TIM_PWM_Start+0x82>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f08:	e013      	b.n	8006f32 <HAL_TIM_PWM_Start+0xaa>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d104      	bne.n	8006f1a <HAL_TIM_PWM_Start+0x92>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f18:	e00b      	b.n	8006f32 <HAL_TIM_PWM_Start+0xaa>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIM_PWM_Start+0xa2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f28:	e003      	b.n	8006f32 <HAL_TIM_PWM_Start+0xaa>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2201      	movs	r2, #1
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fdce 	bl	8007adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <HAL_TIM_PWM_Start+0x138>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d107      	bne.n	8006f5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a18      	ldr	r2, [pc, #96]	; (8006fc0 <HAL_TIM_PWM_Start+0x138>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00e      	beq.n	8006f82 <HAL_TIM_PWM_Start+0xfa>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6c:	d009      	beq.n	8006f82 <HAL_TIM_PWM_Start+0xfa>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a14      	ldr	r2, [pc, #80]	; (8006fc4 <HAL_TIM_PWM_Start+0x13c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d004      	beq.n	8006f82 <HAL_TIM_PWM_Start+0xfa>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <HAL_TIM_PWM_Start+0x140>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d111      	bne.n	8006fa6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b06      	cmp	r3, #6
 8006f92:	d010      	beq.n	8006fb6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa4:	e007      	b.n	8006fb6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	40012c00 	.word	0x40012c00
 8006fc4:	40000400 	.word	0x40000400
 8006fc8:	40000800 	.word	0x40000800

08006fcc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e041      	b.n	8007064 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d106      	bne.n	8006ffa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f839 	bl	800706c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3304      	adds	r3, #4
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f000 fae5 	bl	80075dc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0208 	bic.w	r2, r2, #8
 8007020:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6819      	ldr	r1, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr

0800707e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b082      	sub	sp, #8
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d122      	bne.n	80070da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d11b      	bne.n	80070da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f06f 0202 	mvn.w	r2, #2
 80070aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f003 0303 	and.w	r3, r3, #3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fa70 	bl	80075a6 <HAL_TIM_IC_CaptureCallback>
 80070c6:	e005      	b.n	80070d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fa63 	bl	8007594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa72 	bl	80075b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d122      	bne.n	800712e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d11b      	bne.n	800712e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f06f 0204 	mvn.w	r2, #4
 80070fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fa46 	bl	80075a6 <HAL_TIM_IC_CaptureCallback>
 800711a:	e005      	b.n	8007128 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fa39 	bl	8007594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa48 	bl	80075b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b08      	cmp	r3, #8
 800713a:	d122      	bne.n	8007182 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b08      	cmp	r3, #8
 8007148:	d11b      	bne.n	8007182 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f06f 0208 	mvn.w	r2, #8
 8007152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2204      	movs	r2, #4
 8007158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa1c 	bl	80075a6 <HAL_TIM_IC_CaptureCallback>
 800716e:	e005      	b.n	800717c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa0f 	bl	8007594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa1e 	bl	80075b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	2b10      	cmp	r3, #16
 800718e:	d122      	bne.n	80071d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b10      	cmp	r3, #16
 800719c:	d11b      	bne.n	80071d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f06f 0210 	mvn.w	r2, #16
 80071a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2208      	movs	r2, #8
 80071ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f9f2 	bl	80075a6 <HAL_TIM_IC_CaptureCallback>
 80071c2:	e005      	b.n	80071d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f9e5 	bl	8007594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f9f4 	bl	80075b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d10e      	bne.n	8007202 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d107      	bne.n	8007202 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f06f 0201 	mvn.w	r2, #1
 80071fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7fa ffd1 	bl	80021a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720c:	2b80      	cmp	r3, #128	; 0x80
 800720e:	d10e      	bne.n	800722e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d107      	bne.n	800722e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fce2 	bl	8007bf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007238:	2b40      	cmp	r3, #64	; 0x40
 800723a:	d10e      	bne.n	800725a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d107      	bne.n	800725a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f9b8 	bl	80075ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b20      	cmp	r3, #32
 8007266:	d10e      	bne.n	8007286 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b20      	cmp	r3, #32
 8007274:	d107      	bne.n	8007286 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0220 	mvn.w	r2, #32
 800727e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fcad 	bl	8007be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e0ac      	b.n	8007404 <HAL_TIM_PWM_ConfigChannel+0x174>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b0c      	cmp	r3, #12
 80072b6:	f200 809f 	bhi.w	80073f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072f5 	.word	0x080072f5
 80072c4:	080073f9 	.word	0x080073f9
 80072c8:	080073f9 	.word	0x080073f9
 80072cc:	080073f9 	.word	0x080073f9
 80072d0:	08007335 	.word	0x08007335
 80072d4:	080073f9 	.word	0x080073f9
 80072d8:	080073f9 	.word	0x080073f9
 80072dc:	080073f9 	.word	0x080073f9
 80072e0:	08007377 	.word	0x08007377
 80072e4:	080073f9 	.word	0x080073f9
 80072e8:	080073f9 	.word	0x080073f9
 80072ec:	080073f9 	.word	0x080073f9
 80072f0:	080073b7 	.word	0x080073b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 f9d0 	bl	80076a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0208 	orr.w	r2, r2, #8
 800730e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0204 	bic.w	r2, r2, #4
 800731e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6999      	ldr	r1, [r3, #24]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	619a      	str	r2, [r3, #24]
      break;
 8007332:	e062      	b.n	80073fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fa16 	bl	800776c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800734e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6999      	ldr	r1, [r3, #24]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	021a      	lsls	r2, r3, #8
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	619a      	str	r2, [r3, #24]
      break;
 8007374:	e041      	b.n	80073fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fa5f 	bl	8007840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69da      	ldr	r2, [r3, #28]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f042 0208 	orr.w	r2, r2, #8
 8007390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0204 	bic.w	r2, r2, #4
 80073a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69d9      	ldr	r1, [r3, #28]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	61da      	str	r2, [r3, #28]
      break;
 80073b4:	e021      	b.n	80073fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 faa9 	bl	8007914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69d9      	ldr	r1, [r3, #28]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	021a      	lsls	r2, r3, #8
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	61da      	str	r2, [r3, #28]
      break;
 80073f6:	e000      	b.n	80073fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80073f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_TIM_ConfigClockSource+0x18>
 8007420:	2302      	movs	r3, #2
 8007422:	e0b3      	b.n	800758c <HAL_TIM_ConfigClockSource+0x180>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800744a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800745c:	d03e      	beq.n	80074dc <HAL_TIM_ConfigClockSource+0xd0>
 800745e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007462:	f200 8087 	bhi.w	8007574 <HAL_TIM_ConfigClockSource+0x168>
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	f000 8085 	beq.w	8007578 <HAL_TIM_ConfigClockSource+0x16c>
 800746e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007472:	d87f      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x168>
 8007474:	2b70      	cmp	r3, #112	; 0x70
 8007476:	d01a      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0xa2>
 8007478:	2b70      	cmp	r3, #112	; 0x70
 800747a:	d87b      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x168>
 800747c:	2b60      	cmp	r3, #96	; 0x60
 800747e:	d050      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x116>
 8007480:	2b60      	cmp	r3, #96	; 0x60
 8007482:	d877      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x168>
 8007484:	2b50      	cmp	r3, #80	; 0x50
 8007486:	d03c      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0xf6>
 8007488:	2b50      	cmp	r3, #80	; 0x50
 800748a:	d873      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x168>
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d058      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x136>
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d86f      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x168>
 8007494:	2b30      	cmp	r3, #48	; 0x30
 8007496:	d064      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x156>
 8007498:	2b30      	cmp	r3, #48	; 0x30
 800749a:	d86b      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x168>
 800749c:	2b20      	cmp	r3, #32
 800749e:	d060      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x156>
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d867      	bhi.n	8007574 <HAL_TIM_ConfigClockSource+0x168>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d05c      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x156>
 80074a8:	2b10      	cmp	r3, #16
 80074aa:	d05a      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074ac:	e062      	b.n	8007574 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6899      	ldr	r1, [r3, #8]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f000 faee 	bl	8007a9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	609a      	str	r2, [r3, #8]
      break;
 80074da:	e04e      	b.n	800757a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6899      	ldr	r1, [r3, #8]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f000 fad7 	bl	8007a9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074fe:	609a      	str	r2, [r3, #8]
      break;
 8007500:	e03b      	b.n	800757a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	461a      	mov	r2, r3
 8007510:	f000 fa4e 	bl	80079b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2150      	movs	r1, #80	; 0x50
 800751a:	4618      	mov	r0, r3
 800751c:	f000 faa5 	bl	8007a6a <TIM_ITRx_SetConfig>
      break;
 8007520:	e02b      	b.n	800757a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6859      	ldr	r1, [r3, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	461a      	mov	r2, r3
 8007530:	f000 fa6c 	bl	8007a0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2160      	movs	r1, #96	; 0x60
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fa95 	bl	8007a6a <TIM_ITRx_SetConfig>
      break;
 8007540:	e01b      	b.n	800757a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	461a      	mov	r2, r3
 8007550:	f000 fa2e 	bl	80079b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2140      	movs	r1, #64	; 0x40
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fa85 	bl	8007a6a <TIM_ITRx_SetConfig>
      break;
 8007560:	e00b      	b.n	800757a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f000 fa7c 	bl	8007a6a <TIM_ITRx_SetConfig>
        break;
 8007572:	e002      	b.n	800757a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007574:	bf00      	nop
 8007576:	e000      	b.n	800757a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007578:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a29      	ldr	r2, [pc, #164]	; (8007694 <TIM_Base_SetConfig+0xb8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d00b      	beq.n	800760c <TIM_Base_SetConfig+0x30>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fa:	d007      	beq.n	800760c <TIM_Base_SetConfig+0x30>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a26      	ldr	r2, [pc, #152]	; (8007698 <TIM_Base_SetConfig+0xbc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d003      	beq.n	800760c <TIM_Base_SetConfig+0x30>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a25      	ldr	r2, [pc, #148]	; (800769c <TIM_Base_SetConfig+0xc0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d108      	bne.n	800761e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <TIM_Base_SetConfig+0xb8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00b      	beq.n	800763e <TIM_Base_SetConfig+0x62>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762c:	d007      	beq.n	800763e <TIM_Base_SetConfig+0x62>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a19      	ldr	r2, [pc, #100]	; (8007698 <TIM_Base_SetConfig+0xbc>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d003      	beq.n	800763e <TIM_Base_SetConfig+0x62>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a18      	ldr	r2, [pc, #96]	; (800769c <TIM_Base_SetConfig+0xc0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d108      	bne.n	8007650 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a07      	ldr	r2, [pc, #28]	; (8007694 <TIM_Base_SetConfig+0xb8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d103      	bne.n	8007684 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	615a      	str	r2, [r3, #20]
}
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr
 8007694:	40012c00 	.word	0x40012c00
 8007698:	40000400 	.word	0x40000400
 800769c:	40000800 	.word	0x40000800

080076a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f023 0201 	bic.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f023 0302 	bic.w	r3, r3, #2
 80076e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a1c      	ldr	r2, [pc, #112]	; (8007768 <TIM_OC1_SetConfig+0xc8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d10c      	bne.n	8007716 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f023 0308 	bic.w	r3, r3, #8
 8007702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f023 0304 	bic.w	r3, r3, #4
 8007714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a13      	ldr	r2, [pc, #76]	; (8007768 <TIM_OC1_SetConfig+0xc8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d111      	bne.n	8007742 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800772c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	621a      	str	r2, [r3, #32]
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40012c00 	.word	0x40012c00

0800776c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	f023 0210 	bic.w	r2, r3, #16
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800779a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f023 0320 	bic.w	r3, r3, #32
 80077b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1d      	ldr	r2, [pc, #116]	; (800783c <TIM_OC2_SetConfig+0xd0>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10d      	bne.n	80077e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a14      	ldr	r2, [pc, #80]	; (800783c <TIM_OC2_SetConfig+0xd0>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d113      	bne.n	8007818 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr
 800783c:	40012c00 	.word	0x40012c00

08007840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0303 	bic.w	r3, r3, #3
 8007876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <TIM_OC3_SetConfig+0xd0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d10d      	bne.n	80078ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a14      	ldr	r2, [pc, #80]	; (8007910 <TIM_OC3_SetConfig+0xd0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d113      	bne.n	80078ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	621a      	str	r2, [r3, #32]
}
 8007904:	bf00      	nop
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	bc80      	pop	{r7}
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40012c00 	.word	0x40012c00

08007914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800795e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	031b      	lsls	r3, r3, #12
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a0f      	ldr	r2, [pc, #60]	; (80079ac <TIM_OC4_SetConfig+0x98>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d109      	bne.n	8007988 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800797a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	019b      	lsls	r3, r3, #6
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	621a      	str	r2, [r3, #32]
}
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr
 80079ac:	40012c00 	.word	0x40012c00

080079b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	f023 0201 	bic.w	r2, r3, #1
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f023 030a 	bic.w	r3, r3, #10
 80079ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	621a      	str	r2, [r3, #32]
}
 8007a02:	bf00      	nop
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	f023 0210 	bic.w	r2, r3, #16
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	031b      	lsls	r3, r3, #12
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	621a      	str	r2, [r3, #32]
}
 8007a60:	bf00      	nop
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f043 0307 	orr.w	r3, r3, #7
 8007a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	609a      	str	r2, [r3, #8]
}
 8007a94:	bf00      	nop
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr

08007a9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	021a      	lsls	r2, r3, #8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	609a      	str	r2, [r3, #8]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr

08007adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 031f 	and.w	r3, r3, #31
 8007aee:	2201      	movs	r2, #1
 8007af0:	fa02 f303 	lsl.w	r3, r2, r3
 8007af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a1a      	ldr	r2, [r3, #32]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	43db      	mvns	r3, r3
 8007afe:	401a      	ands	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a1a      	ldr	r2, [r3, #32]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f003 031f 	and.w	r3, r3, #31
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	fa01 f303 	lsl.w	r3, r1, r3
 8007b14:	431a      	orrs	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	621a      	str	r2, [r3, #32]
}
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e046      	b.n	8007bca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00e      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b88:	d009      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a12      	ldr	r2, [pc, #72]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d004      	beq.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a10      	ldr	r2, [pc, #64]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d10c      	bne.n	8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40000400 	.word	0x40000400
 8007bdc:	40000800 	.word	0x40000800

08007be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr

08007c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c04:	b084      	sub	sp, #16
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	f107 0014 	add.w	r0, r7, #20
 8007c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	b004      	add	sp, #16
 8007c22:	4770      	bx	lr

08007c24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr

08007c50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	4013      	ands	r3, r2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	f107 0014 	add.w	r0, r7, #20
 8007caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	b004      	add	sp, #16
 8007cda:	4770      	bx	lr

08007cdc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b09b      	sub	sp, #108	; 0x6c
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	78db      	ldrb	r3, [r3, #3]
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d81f      	bhi.n	8007d4e <USB_ActivateEndpoint+0x72>
 8007d0e:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <USB_ActivateEndpoint+0x38>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007d25 	.word	0x08007d25
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d57 	.word	0x08007d57
 8007d20:	08007d33 	.word	0x08007d33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d2c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d30:	e012      	b.n	8007d58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d36:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d3a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d3e:	e00b      	b.n	8007d58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d4c:	e004      	b.n	8007d58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007d54:	e000      	b.n	8007d58 <USB_ActivateEndpoint+0x7c>
      break;
 8007d56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	441a      	add	r2, r3
 8007d62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	441a      	add	r2, r3
 8007da8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	7b1b      	ldrb	r3, [r3, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 8149 	bne.w	800805c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8084 	beq.w	8007edc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	4413      	add	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	011a      	lsls	r2, r3, #4
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	88db      	ldrh	r3, [r3, #6]
 8007dfc:	085b      	lsrs	r3, r3, #1
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	81fb      	strh	r3, [r7, #14]
 8007e16:	89fb      	ldrh	r3, [r7, #14]
 8007e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01b      	beq.n	8007e58 <USB_ActivateEndpoint+0x17c>
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e36:	81bb      	strh	r3, [r7, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	441a      	add	r2, r3
 8007e42:	89bb      	ldrh	r3, [r7, #12]
 8007e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	78db      	ldrb	r3, [r3, #3]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d020      	beq.n	8007ea2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e76:	813b      	strh	r3, [r7, #8]
 8007e78:	893b      	ldrh	r3, [r7, #8]
 8007e7a:	f083 0320 	eor.w	r3, r3, #32
 8007e7e:	813b      	strh	r3, [r7, #8]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	441a      	add	r2, r3
 8007e8a:	893b      	ldrh	r3, [r7, #8]
 8007e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	8013      	strh	r3, [r2, #0]
 8007ea0:	e27f      	b.n	80083a2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb8:	817b      	strh	r3, [r7, #10]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	441a      	add	r2, r3
 8007ec4:	897b      	ldrh	r3, [r7, #10]
 8007ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	8013      	strh	r3, [r2, #0]
 8007eda:	e262      	b.n	80083a2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eec:	4413      	add	r3, r2
 8007eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	011a      	lsls	r2, r3, #4
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	88db      	ldrh	r3, [r3, #6]
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	4413      	add	r3, r2
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	011a      	lsls	r2, r3, #4
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f32:	623b      	str	r3, [r7, #32]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d112      	bne.n	8007f62 <USB_ActivateEndpoint+0x286>
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	801a      	strh	r2, [r3, #0]
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	801a      	strh	r2, [r3, #0]
 8007f60:	e02f      	b.n	8007fc2 <USB_ActivateEndpoint+0x2e6>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b3e      	cmp	r3, #62	; 0x3e
 8007f68:	d813      	bhi.n	8007f92 <USB_ActivateEndpoint+0x2b6>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	085b      	lsrs	r3, r3, #1
 8007f70:	663b      	str	r3, [r7, #96]	; 0x60
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <USB_ActivateEndpoint+0x2a8>
 8007f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f80:	3301      	adds	r3, #1
 8007f82:	663b      	str	r3, [r7, #96]	; 0x60
 8007f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	029b      	lsls	r3, r3, #10
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	e017      	b.n	8007fc2 <USB_ActivateEndpoint+0x2e6>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	663b      	str	r3, [r7, #96]	; 0x60
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f003 031f 	and.w	r3, r3, #31
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <USB_ActivateEndpoint+0x2d0>
 8007fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	663b      	str	r3, [r7, #96]	; 0x60
 8007fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	029b      	lsls	r3, r3, #10
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	83fb      	strh	r3, [r7, #30]
 8007fd0:	8bfb      	ldrh	r3, [r7, #30]
 8007fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d01b      	beq.n	8008012 <USB_ActivateEndpoint+0x336>
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff0:	83bb      	strh	r3, [r7, #28]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	441a      	add	r2, r3
 8007ffc:	8bbb      	ldrh	r3, [r7, #28]
 8007ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800e:	b29b      	uxth	r3, r3
 8008010:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008028:	837b      	strh	r3, [r7, #26]
 800802a:	8b7b      	ldrh	r3, [r7, #26]
 800802c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008030:	837b      	strh	r3, [r7, #26]
 8008032:	8b7b      	ldrh	r3, [r7, #26]
 8008034:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008038:	837b      	strh	r3, [r7, #26]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	441a      	add	r2, r3
 8008044:	8b7b      	ldrh	r3, [r7, #26]
 8008046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800804e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008056:	b29b      	uxth	r3, r3
 8008058:	8013      	strh	r3, [r2, #0]
 800805a:	e1a2      	b.n	80083a2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008072:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	441a      	add	r2, r3
 8008080:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800808c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008094:	b29b      	uxth	r3, r3
 8008096:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	65bb      	str	r3, [r7, #88]	; 0x58
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080a8:	4413      	add	r3, r2
 80080aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	011a      	lsls	r2, r3, #4
 80080b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ba:	657b      	str	r3, [r7, #84]	; 0x54
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	891b      	ldrh	r3, [r3, #8]
 80080c0:	085b      	lsrs	r3, r3, #1
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	653b      	str	r3, [r7, #80]	; 0x50
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080dc:	4413      	add	r3, r2
 80080de:	653b      	str	r3, [r7, #80]	; 0x50
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	011a      	lsls	r2, r3, #4
 80080e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80080ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	895b      	ldrh	r3, [r3, #10]
 80080f4:	085b      	lsrs	r3, r3, #1
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f040 8091 	bne.w	800822c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008118:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800811a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01b      	beq.n	800815a <USB_ActivateEndpoint+0x47e>
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008138:	877b      	strh	r3, [r7, #58]	; 0x3a
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	441a      	add	r2, r3
 8008144:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800814a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008156:	b29b      	uxth	r3, r3
 8008158:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	873b      	strh	r3, [r7, #56]	; 0x38
 8008168:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800816a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	d01b      	beq.n	80081aa <USB_ActivateEndpoint+0x4ce>
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008188:	86fb      	strh	r3, [r7, #54]	; 0x36
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	441a      	add	r2, r3
 8008194:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800819a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800819e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	441a      	add	r2, r3
 80081dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008208:	867b      	strh	r3, [r7, #50]	; 0x32
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	441a      	add	r2, r3
 8008214:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800821a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800821e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008226:	b29b      	uxth	r3, r3
 8008228:	8013      	strh	r3, [r2, #0]
 800822a:	e0ba      	b.n	80083a2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800823c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01d      	beq.n	8008284 <USB_ActivateEndpoint+0x5a8>
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800825a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	441a      	add	r2, r3
 800826c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800827c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008280:	b29b      	uxth	r3, r3
 8008282:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008294:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01d      	beq.n	80082dc <USB_ActivateEndpoint+0x600>
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	441a      	add	r2, r3
 80082c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80082c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082d8:	b29b      	uxth	r3, r3
 80082da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	78db      	ldrb	r3, [r3, #3]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d024      	beq.n	800832e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80082fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008302:	f083 0320 	eor.w	r3, r3, #32
 8008306:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	441a      	add	r2, r3
 8008314:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008328:	b29b      	uxth	r3, r3
 800832a:	8013      	strh	r3, [r2, #0]
 800832c:	e01d      	b.n	800836a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008344:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	441a      	add	r2, r3
 8008352:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800835e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008366:	b29b      	uxth	r3, r3
 8008368:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	b29b      	uxth	r3, r3
 8008378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800837c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008380:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	441a      	add	r2, r3
 800838c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800838e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839e:	b29b      	uxth	r3, r3
 80083a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80083a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	376c      	adds	r7, #108	; 0x6c
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b08d      	sub	sp, #52	; 0x34
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	7b1b      	ldrb	r3, [r3, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 808e 	bne.w	80084e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d044      	beq.n	8008456 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	81bb      	strh	r3, [r7, #12]
 80083da:	89bb      	ldrh	r3, [r7, #12]
 80083dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01b      	beq.n	800841c <USB_DeactivateEndpoint+0x6c>
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083fa:	817b      	strh	r3, [r7, #10]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	441a      	add	r2, r3
 8008406:	897b      	ldrh	r3, [r7, #10]
 8008408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800840c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008414:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008418:	b29b      	uxth	r3, r3
 800841a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008432:	813b      	strh	r3, [r7, #8]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	441a      	add	r2, r3
 800843e:	893b      	ldrh	r3, [r7, #8]
 8008440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008450:	b29b      	uxth	r3, r3
 8008452:	8013      	strh	r3, [r2, #0]
 8008454:	e192      	b.n	800877c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	827b      	strh	r3, [r7, #18]
 8008464:	8a7b      	ldrh	r3, [r7, #18]
 8008466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01b      	beq.n	80084a6 <USB_DeactivateEndpoint+0xf6>
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b29b      	uxth	r3, r3
 800847c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008484:	823b      	strh	r3, [r7, #16]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	441a      	add	r2, r3
 8008490:	8a3b      	ldrh	r3, [r7, #16]
 8008492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800849a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800849e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084bc:	81fb      	strh	r3, [r7, #14]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	441a      	add	r2, r3
 80084c8:	89fb      	ldrh	r3, [r7, #14]
 80084ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084da:	b29b      	uxth	r3, r3
 80084dc:	8013      	strh	r3, [r2, #0]
 80084de:	e14d      	b.n	800877c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f040 80a5 	bne.w	8008634 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	843b      	strh	r3, [r7, #32]
 80084f8:	8c3b      	ldrh	r3, [r7, #32]
 80084fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d01b      	beq.n	800853a <USB_DeactivateEndpoint+0x18a>
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	b29b      	uxth	r3, r3
 8008510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008518:	83fb      	strh	r3, [r7, #30]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	441a      	add	r2, r3
 8008524:	8bfb      	ldrh	r3, [r7, #30]
 8008526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800852a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800852e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008536:	b29b      	uxth	r3, r3
 8008538:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	83bb      	strh	r3, [r7, #28]
 8008548:	8bbb      	ldrh	r3, [r7, #28]
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d01b      	beq.n	800858a <USB_DeactivateEndpoint+0x1da>
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	b29b      	uxth	r3, r3
 8008560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008568:	837b      	strh	r3, [r7, #26]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	8b7b      	ldrh	r3, [r7, #26]
 8008576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800857a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800857e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008586:	b29b      	uxth	r3, r3
 8008588:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800859c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a0:	833b      	strh	r3, [r7, #24]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	441a      	add	r2, r3
 80085ac:	8b3b      	ldrh	r3, [r7, #24]
 80085ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085be:	b29b      	uxth	r3, r3
 80085c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	4413      	add	r3, r2
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085d8:	82fb      	strh	r3, [r7, #22]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	441a      	add	r2, r3
 80085e4:	8afb      	ldrh	r3, [r7, #22]
 80085e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b29b      	uxth	r3, r3
 8008608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800860c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008610:	82bb      	strh	r3, [r7, #20]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	441a      	add	r2, r3
 800861c:	8abb      	ldrh	r3, [r7, #20]
 800861e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800862a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862e:	b29b      	uxth	r3, r3
 8008630:	8013      	strh	r3, [r2, #0]
 8008632:	e0a3      	b.n	800877c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008642:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01b      	beq.n	8008684 <USB_DeactivateEndpoint+0x2d4>
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	b29b      	uxth	r3, r3
 800865a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800865e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008662:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	441a      	add	r2, r3
 800866e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800867c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008680:	b29b      	uxth	r3, r3
 8008682:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008692:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01b      	beq.n	80086d4 <USB_DeactivateEndpoint+0x324>
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	441a      	add	r2, r3
 80086be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	441a      	add	r2, r3
 80086f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008708:	b29b      	uxth	r3, r3
 800870a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800871e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008722:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	441a      	add	r2, r3
 800872e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008740:	b29b      	uxth	r3, r3
 8008742:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	b29b      	uxth	r3, r3
 8008752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875a:	847b      	strh	r3, [r7, #34]	; 0x22
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	441a      	add	r2, r3
 8008766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800876c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008778:	b29b      	uxth	r3, r3
 800877a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3734      	adds	r7, #52	; 0x34
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr

08008788 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b0cc      	sub	sp, #304	; 0x130
 800878c:	af00      	add	r7, sp, #0
 800878e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008796:	6018      	str	r0, [r3, #0]
 8008798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	785b      	ldrb	r3, [r3, #1]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	f041 817d 	bne.w	8009aae <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80087b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699a      	ldr	r2, [r3, #24]
 80087c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d908      	bls.n	80087e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80087d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80087e0:	e007      	b.n	80087f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80087e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80087f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	7b1b      	ldrb	r3, [r3, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d152      	bne.n	80088a8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6959      	ldr	r1, [r3, #20]
 800880e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	88da      	ldrh	r2, [r3, #6]
 800881a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881e:	b29b      	uxth	r3, r3
 8008820:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008824:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008828:	6800      	ldr	r0, [r0, #0]
 800882a:	f001 ff23 	bl	800a674 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800882e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008832:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008836:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800883a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800883e:	6812      	ldr	r2, [r2, #0]
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008850:	b29b      	uxth	r3, r3
 8008852:	4619      	mov	r1, r3
 8008854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008858:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800885c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008860:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008864:	6812      	ldr	r2, [r2, #0]
 8008866:	440a      	add	r2, r1
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	011a      	lsls	r2, r3, #4
 8008878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4413      	add	r3, r2
 8008884:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008896:	b29a      	uxth	r2, r3
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	801a      	strh	r2, [r3, #0]
 80088a4:	f001 b8b5 	b.w	8009a12 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80088a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	78db      	ldrb	r3, [r3, #3]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	f040 84c6 	bne.w	8009246 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80088ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6a1a      	ldr	r2, [r3, #32]
 80088c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	f240 8443 	bls.w	800915e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80088d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	441a      	add	r2, r3
 800891c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008928:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800892c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008930:	b29b      	uxth	r3, r3
 8008932:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008944:	1ad2      	subs	r2, r2, r3
 8008946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008956:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 823e 	beq.w	8008df6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800897a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800897e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008982:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008986:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	785b      	ldrb	r3, [r3, #1]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f040 809a 	bne.w	8008ad4 <USB_EPStartXfer+0x34c>
 80089a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089ac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089b0:	6812      	ldr	r2, [r2, #0]
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	4619      	mov	r1, r3
 80089c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089d2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	440a      	add	r2, r1
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	011a      	lsls	r2, r3, #4
 80089ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4413      	add	r3, r2
 80089f6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80089fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d122      	bne.n	8008a52 <USB_EPStartXfer+0x2ca>
 8008a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	801a      	strh	r2, [r3, #0]
 8008a50:	e079      	b.n	8008b46 <USB_EPStartXfer+0x3be>
 8008a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a56:	2b3e      	cmp	r3, #62	; 0x3e
 8008a58:	d81b      	bhi.n	8008a92 <USB_EPStartXfer+0x30a>
 8008a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d004      	beq.n	8008a7a <USB_EPStartXfer+0x2f2>
 8008a70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a74:	3301      	adds	r3, #1
 8008a76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	029b      	lsls	r3, r3, #10
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	801a      	strh	r2, [r3, #0]
 8008a90:	e059      	b.n	8008b46 <USB_EPStartXfer+0x3be>
 8008a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d104      	bne.n	8008ab2 <USB_EPStartXfer+0x32a>
 8008aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aac:	3b01      	subs	r3, #1
 8008aae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	029b      	lsls	r3, r3, #10
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	801a      	strh	r2, [r3, #0]
 8008ad2:	e038      	b.n	8008b46 <USB_EPStartXfer+0x3be>
 8008ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	785b      	ldrb	r3, [r3, #1]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d130      	bne.n	8008b46 <USB_EPStartXfer+0x3be>
 8008ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008afe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b02:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	440a      	add	r2, r1
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	011a      	lsls	r2, r3, #4
 8008b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	895b      	ldrh	r3, [r3, #10]
 8008b52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6959      	ldr	r1, [r3, #20]
 8008b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008b70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008b74:	6800      	ldr	r0, [r0, #0]
 8008b76:	f001 fd7d 	bl	800a674 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	695a      	ldr	r2, [r3, #20]
 8008b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8a:	441a      	add	r2, r3
 8008b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6a1a      	ldr	r2, [r3, #32]
 8008ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d90f      	bls.n	8008bd4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6a1a      	ldr	r2, [r3, #32]
 8008bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc4:	1ad2      	subs	r2, r2, r3
 8008bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	621a      	str	r2, [r3, #32]
 8008bd2:	e00e      	b.n	8008bf2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	785b      	ldrb	r3, [r3, #1]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f040 809a 	bne.w	8008d38 <USB_EPStartXfer+0x5b0>
 8008c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c14:	6812      	ldr	r2, [r2, #0]
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	4619      	mov	r1, r3
 8008c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c2e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c36:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	011a      	lsls	r2, r3, #4
 8008c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d122      	bne.n	8008cb6 <USB_EPStartXfer+0x52e>
 8008c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	801a      	strh	r2, [r3, #0]
 8008c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	e083      	b.n	8008dbe <USB_EPStartXfer+0x636>
 8008cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cba:	2b3e      	cmp	r3, #62	; 0x3e
 8008cbc:	d81b      	bhi.n	8008cf6 <USB_EPStartXfer+0x56e>
 8008cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc2:	085b      	lsrs	r3, r3, #1
 8008cc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d004      	beq.n	8008cde <USB_EPStartXfer+0x556>
 8008cd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008cd8:	3301      	adds	r3, #1
 8008cda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008cde:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	029b      	lsls	r3, r3, #10
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	e063      	b.n	8008dbe <USB_EPStartXfer+0x636>
 8008cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfa:	095b      	lsrs	r3, r3, #5
 8008cfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d04:	f003 031f 	and.w	r3, r3, #31
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d104      	bne.n	8008d16 <USB_EPStartXfer+0x58e>
 8008d0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d10:	3b01      	subs	r3, #1
 8008d12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	029b      	lsls	r3, r3, #10
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	801a      	strh	r2, [r3, #0]
 8008d36:	e042      	b.n	8008dbe <USB_EPStartXfer+0x636>
 8008d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	785b      	ldrb	r3, [r3, #1]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d13a      	bne.n	8008dbe <USB_EPStartXfer+0x636>
 8008d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d54:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d58:	6812      	ldr	r2, [r2, #0]
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d7a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	440a      	add	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	011a      	lsls	r2, r3, #4
 8008d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	891b      	ldrh	r3, [r3, #8]
 8008dca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6959      	ldr	r1, [r3, #20]
 8008dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008de4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008de8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008dec:	6800      	ldr	r0, [r0, #0]
 8008dee:	f001 fc41 	bl	800a674 <USB_WritePMA>
 8008df2:	f000 be0e 	b.w	8009a12 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	785b      	ldrb	r3, [r3, #1]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d16d      	bne.n	8008ee2 <USB_EPStartXfer+0x75a>
 8008e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	461a      	mov	r2, r3
 8008e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e26:	4413      	add	r3, r2
 8008e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	011a      	lsls	r2, r3, #4
 8008e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e40:	647b      	str	r3, [r7, #68]	; 0x44
 8008e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d112      	bne.n	8008e70 <USB_EPStartXfer+0x6e8>
 8008e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e58:	801a      	strh	r2, [r3, #0]
 8008e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6c:	801a      	strh	r2, [r3, #0]
 8008e6e:	e063      	b.n	8008f38 <USB_EPStartXfer+0x7b0>
 8008e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e74:	2b3e      	cmp	r3, #62	; 0x3e
 8008e76:	d817      	bhi.n	8008ea8 <USB_EPStartXfer+0x720>
 8008e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d004      	beq.n	8008e98 <USB_EPStartXfer+0x710>
 8008e8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008e92:	3301      	adds	r3, #1
 8008e94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008e98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	029b      	lsls	r3, r3, #10
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ea4:	801a      	strh	r2, [r3, #0]
 8008ea6:	e047      	b.n	8008f38 <USB_EPStartXfer+0x7b0>
 8008ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eac:	095b      	lsrs	r3, r3, #5
 8008eae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb6:	f003 031f 	and.w	r3, r3, #31
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d104      	bne.n	8008ec8 <USB_EPStartXfer+0x740>
 8008ebe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	029b      	lsls	r3, r3, #10
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ede:	801a      	strh	r2, [r3, #0]
 8008ee0:	e02a      	b.n	8008f38 <USB_EPStartXfer+0x7b0>
 8008ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d122      	bne.n	8008f38 <USB_EPStartXfer+0x7b0>
 8008ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	653b      	str	r3, [r7, #80]	; 0x50
 8008efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	461a      	mov	r2, r3
 8008f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f12:	4413      	add	r3, r2
 8008f14:	653b      	str	r3, [r7, #80]	; 0x50
 8008f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	011a      	lsls	r2, r3, #4
 8008f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f26:	4413      	add	r3, r2
 8008f28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	891b      	ldrh	r3, [r3, #8]
 8008f44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6959      	ldr	r1, [r3, #20]
 8008f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f5e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f62:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f66:	6800      	ldr	r0, [r0, #0]
 8008f68:	f001 fb84 	bl	800a674 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	695a      	ldr	r2, [r3, #20]
 8008f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f7c:	441a      	add	r2, r3
 8008f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6a1a      	ldr	r2, [r3, #32]
 8008f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d90f      	bls.n	8008fc6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6a1a      	ldr	r2, [r3, #32]
 8008fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb6:	1ad2      	subs	r2, r2, r3
 8008fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	621a      	str	r2, [r3, #32]
 8008fc4:	e00e      	b.n	8008fe4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	643b      	str	r3, [r7, #64]	; 0x40
 8008ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	785b      	ldrb	r3, [r3, #1]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d16d      	bne.n	80090dc <USB_EPStartXfer+0x954>
 8009000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009004:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	63bb      	str	r3, [r7, #56]	; 0x38
 800900c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800901a:	b29b      	uxth	r3, r3
 800901c:	461a      	mov	r2, r3
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	4413      	add	r3, r2
 8009022:	63bb      	str	r3, [r7, #56]	; 0x38
 8009024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	011a      	lsls	r2, r3, #4
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	4413      	add	r3, r2
 8009036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800903a:	637b      	str	r3, [r7, #52]	; 0x34
 800903c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009040:	2b00      	cmp	r3, #0
 8009042:	d112      	bne.n	800906a <USB_EPStartXfer+0x8e2>
 8009044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29b      	uxth	r3, r3
 800904a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800904e:	b29a      	uxth	r2, r3
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	b29b      	uxth	r3, r3
 800905a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009062:	b29a      	uxth	r2, r3
 8009064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009066:	801a      	strh	r2, [r3, #0]
 8009068:	e05d      	b.n	8009126 <USB_EPStartXfer+0x99e>
 800906a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906e:	2b3e      	cmp	r3, #62	; 0x3e
 8009070:	d817      	bhi.n	80090a2 <USB_EPStartXfer+0x91a>
 8009072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800907c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <USB_EPStartXfer+0x90a>
 8009088:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800908c:	3301      	adds	r3, #1
 800908e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009096:	b29b      	uxth	r3, r3
 8009098:	029b      	lsls	r3, r3, #10
 800909a:	b29a      	uxth	r2, r3
 800909c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909e:	801a      	strh	r2, [r3, #0]
 80090a0:	e041      	b.n	8009126 <USB_EPStartXfer+0x99e>
 80090a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a6:	095b      	lsrs	r3, r3, #5
 80090a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b0:	f003 031f 	and.w	r3, r3, #31
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <USB_EPStartXfer+0x93a>
 80090b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090bc:	3b01      	subs	r3, #1
 80090be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	029b      	lsls	r3, r3, #10
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d8:	801a      	strh	r2, [r3, #0]
 80090da:	e024      	b.n	8009126 <USB_EPStartXfer+0x99e>
 80090dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	785b      	ldrb	r3, [r3, #1]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d11c      	bne.n	8009126 <USB_EPStartXfer+0x99e>
 80090ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	461a      	mov	r2, r3
 80090fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009100:	4413      	add	r3, r2
 8009102:	643b      	str	r3, [r7, #64]	; 0x40
 8009104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	011a      	lsls	r2, r3, #4
 8009112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009114:	4413      	add	r3, r2
 8009116:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800911a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800911c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009120:	b29a      	uxth	r2, r3
 8009122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009124:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	895b      	ldrh	r3, [r3, #10]
 8009132:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6959      	ldr	r1, [r3, #20]
 8009142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009146:	b29b      	uxth	r3, r3
 8009148:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800914c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009150:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009154:	6800      	ldr	r0, [r0, #0]
 8009156:	f001 fa8d 	bl	800a674 <USB_WritePMA>
 800915a:	f000 bc5a 	b.w	8009a12 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800915e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800916e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009172:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800917c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	b29b      	uxth	r3, r3
 800918c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009194:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800919c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	441a      	add	r2, r3
 80091b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80091b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ea:	4413      	add	r3, r2
 80091ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	011a      	lsls	r2, r3, #4
 80091fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091fe:	4413      	add	r3, r2
 8009200:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009204:	65bb      	str	r3, [r7, #88]	; 0x58
 8009206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920a:	b29a      	uxth	r2, r3
 800920c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800920e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	891b      	ldrh	r3, [r3, #8]
 800921c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6959      	ldr	r1, [r3, #20]
 800922c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009230:	b29b      	uxth	r3, r3
 8009232:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009236:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800923a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800923e:	6800      	ldr	r0, [r0, #0]
 8009240:	f001 fa18 	bl	800a674 <USB_WritePMA>
 8009244:	e3e5      	b.n	8009a12 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800926c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009274:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800928e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009296:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800929a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929e:	b29b      	uxth	r3, r3
 80092a0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80092a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6a1a      	ldr	r2, [r3, #32]
 80092ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092b2:	1ad2      	subs	r2, r2, r3
 80092b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 81bc 	beq.w	8009660 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80092e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	785b      	ldrb	r3, [r3, #1]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d16d      	bne.n	80093e2 <USB_EPStartXfer+0xc5a>
 8009306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	67bb      	str	r3, [r7, #120]	; 0x78
 8009312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009320:	b29b      	uxth	r3, r3
 8009322:	461a      	mov	r2, r3
 8009324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009326:	4413      	add	r3, r2
 8009328:	67bb      	str	r3, [r7, #120]	; 0x78
 800932a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800932e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	011a      	lsls	r2, r3, #4
 8009338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800933a:	4413      	add	r3, r2
 800933c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009340:	677b      	str	r3, [r7, #116]	; 0x74
 8009342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d112      	bne.n	8009370 <USB_EPStartXfer+0xbe8>
 800934a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	b29b      	uxth	r3, r3
 8009350:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009354:	b29a      	uxth	r2, r3
 8009356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	b29b      	uxth	r3, r3
 8009360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009368:	b29a      	uxth	r2, r3
 800936a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800936c:	801a      	strh	r2, [r3, #0]
 800936e:	e060      	b.n	8009432 <USB_EPStartXfer+0xcaa>
 8009370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009374:	2b3e      	cmp	r3, #62	; 0x3e
 8009376:	d817      	bhi.n	80093a8 <USB_EPStartXfer+0xc20>
 8009378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800937c:	085b      	lsrs	r3, r3, #1
 800937e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d004      	beq.n	8009398 <USB_EPStartXfer+0xc10>
 800938e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009392:	3301      	adds	r3, #1
 8009394:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009398:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800939c:	b29b      	uxth	r3, r3
 800939e:	029b      	lsls	r3, r3, #10
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093a4:	801a      	strh	r2, [r3, #0]
 80093a6:	e044      	b.n	8009432 <USB_EPStartXfer+0xcaa>
 80093a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ac:	095b      	lsrs	r3, r3, #5
 80093ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <USB_EPStartXfer+0xc40>
 80093be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093c2:	3b01      	subs	r3, #1
 80093c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	029b      	lsls	r3, r3, #10
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093da:	b29a      	uxth	r2, r3
 80093dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093de:	801a      	strh	r2, [r3, #0]
 80093e0:	e027      	b.n	8009432 <USB_EPStartXfer+0xcaa>
 80093e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d11f      	bne.n	8009432 <USB_EPStartXfer+0xcaa>
 80093f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009400:	b29b      	uxth	r3, r3
 8009402:	461a      	mov	r2, r3
 8009404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009408:	4413      	add	r3, r2
 800940a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800940e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	011a      	lsls	r2, r3, #4
 800941c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009420:	4413      	add	r3, r2
 8009422:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009426:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800942c:	b29a      	uxth	r2, r3
 800942e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009430:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	895b      	ldrh	r3, [r3, #10]
 800943e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6959      	ldr	r1, [r3, #20]
 800944e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009452:	b29b      	uxth	r3, r3
 8009454:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009458:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800945c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009460:	6800      	ldr	r0, [r0, #0]
 8009462:	f001 f907 	bl	800a674 <USB_WritePMA>
          ep->xfer_buff += len;
 8009466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009476:	441a      	add	r2, r3
 8009478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6a1a      	ldr	r2, [r3, #32]
 8009490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	429a      	cmp	r2, r3
 800949e:	d90f      	bls.n	80094c0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80094a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b0:	1ad2      	subs	r2, r2, r3
 80094b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	621a      	str	r2, [r3, #32]
 80094be:	e00e      	b.n	80094de <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80094c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80094d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2200      	movs	r2, #0
 80094dc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80094de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 8295 	beq.w	8009a12 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	785b      	ldrb	r3, [r3, #1]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d16d      	bne.n	80095d4 <USB_EPStartXfer+0xe4c>
 80094f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	66bb      	str	r3, [r7, #104]	; 0x68
 8009504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009512:	b29b      	uxth	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009518:	4413      	add	r3, r2
 800951a:	66bb      	str	r3, [r7, #104]	; 0x68
 800951c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	011a      	lsls	r2, r3, #4
 800952a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800952c:	4413      	add	r3, r2
 800952e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009532:	667b      	str	r3, [r7, #100]	; 0x64
 8009534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009538:	2b00      	cmp	r3, #0
 800953a:	d112      	bne.n	8009562 <USB_EPStartXfer+0xdda>
 800953c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009546:	b29a      	uxth	r2, r3
 8009548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	b29b      	uxth	r3, r3
 8009552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800955a:	b29a      	uxth	r2, r3
 800955c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	e063      	b.n	800962a <USB_EPStartXfer+0xea2>
 8009562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009566:	2b3e      	cmp	r3, #62	; 0x3e
 8009568:	d817      	bhi.n	800959a <USB_EPStartXfer+0xe12>
 800956a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956e:	085b      	lsrs	r3, r3, #1
 8009570:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d004      	beq.n	800958a <USB_EPStartXfer+0xe02>
 8009580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009584:	3301      	adds	r3, #1
 8009586:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800958a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958e:	b29b      	uxth	r3, r3
 8009590:	029b      	lsls	r3, r3, #10
 8009592:	b29a      	uxth	r2, r3
 8009594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009596:	801a      	strh	r2, [r3, #0]
 8009598:	e047      	b.n	800962a <USB_EPStartXfer+0xea2>
 800959a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800959e:	095b      	lsrs	r3, r3, #5
 80095a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a8:	f003 031f 	and.w	r3, r3, #31
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d104      	bne.n	80095ba <USB_EPStartXfer+0xe32>
 80095b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095be:	b29b      	uxth	r3, r3
 80095c0:	029b      	lsls	r3, r3, #10
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095d0:	801a      	strh	r2, [r3, #0]
 80095d2:	e02a      	b.n	800962a <USB_EPStartXfer+0xea2>
 80095d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d122      	bne.n	800962a <USB_EPStartXfer+0xea2>
 80095e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	673b      	str	r3, [r7, #112]	; 0x70
 80095f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095fe:	b29b      	uxth	r3, r3
 8009600:	461a      	mov	r2, r3
 8009602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009604:	4413      	add	r3, r2
 8009606:	673b      	str	r3, [r7, #112]	; 0x70
 8009608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	011a      	lsls	r2, r3, #4
 8009616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009618:	4413      	add	r3, r2
 800961a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800961e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009624:	b29a      	uxth	r2, r3
 8009626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009628:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800962a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	891b      	ldrh	r3, [r3, #8]
 8009636:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800963a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6959      	ldr	r1, [r3, #20]
 8009646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800964a:	b29b      	uxth	r3, r3
 800964c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009650:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009654:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009658:	6800      	ldr	r0, [r0, #0]
 800965a:	f001 f80b 	bl	800a674 <USB_WritePMA>
 800965e:	e1d8      	b.n	8009a12 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	785b      	ldrb	r3, [r3, #1]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d178      	bne.n	8009762 <USB_EPStartXfer+0xfda>
 8009670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800967e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800968c:	b29b      	uxth	r3, r3
 800968e:	461a      	mov	r2, r3
 8009690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009694:	4413      	add	r3, r2
 8009696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800969a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800969e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	011a      	lsls	r2, r3, #4
 80096a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096ac:	4413      	add	r3, r2
 80096ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d116      	bne.n	80096ec <USB_EPStartXfer+0xf64>
 80096be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096d0:	801a      	strh	r2, [r3, #0]
 80096d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e8:	801a      	strh	r2, [r3, #0]
 80096ea:	e06b      	b.n	80097c4 <USB_EPStartXfer+0x103c>
 80096ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096f0:	2b3e      	cmp	r3, #62	; 0x3e
 80096f2:	d818      	bhi.n	8009726 <USB_EPStartXfer+0xf9e>
 80096f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096f8:	085b      	lsrs	r3, r3, #1
 80096fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80096fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d004      	beq.n	8009714 <USB_EPStartXfer+0xf8c>
 800970a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800970e:	3301      	adds	r3, #1
 8009710:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009714:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009718:	b29b      	uxth	r3, r3
 800971a:	029b      	lsls	r3, r3, #10
 800971c:	b29a      	uxth	r2, r3
 800971e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	e04e      	b.n	80097c4 <USB_EPStartXfer+0x103c>
 8009726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009734:	f003 031f 	and.w	r3, r3, #31
 8009738:	2b00      	cmp	r3, #0
 800973a:	d104      	bne.n	8009746 <USB_EPStartXfer+0xfbe>
 800973c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009740:	3b01      	subs	r3, #1
 8009742:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009746:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800974a:	b29b      	uxth	r3, r3
 800974c:	029b      	lsls	r3, r3, #10
 800974e:	b29b      	uxth	r3, r3
 8009750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009758:	b29a      	uxth	r2, r3
 800975a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800975e:	801a      	strh	r2, [r3, #0]
 8009760:	e030      	b.n	80097c4 <USB_EPStartXfer+0x103c>
 8009762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b01      	cmp	r3, #1
 8009770:	d128      	bne.n	80097c4 <USB_EPStartXfer+0x103c>
 8009772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800978e:	b29b      	uxth	r3, r3
 8009790:	461a      	mov	r2, r3
 8009792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009796:	4413      	add	r3, r2
 8009798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800979c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	011a      	lsls	r2, r3, #4
 80097aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097ae:	4413      	add	r3, r2
 80097b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097bc:	b29a      	uxth	r2, r3
 80097be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80097c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	891b      	ldrh	r3, [r3, #8]
 80097d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6959      	ldr	r1, [r3, #20]
 80097e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80097ea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80097ee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80097f2:	6800      	ldr	r0, [r0, #0]
 80097f4:	f000 ff3e 	bl	800a674 <USB_WritePMA>
          ep->xfer_buff += len;
 80097f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	695a      	ldr	r2, [r3, #20]
 8009804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009808:	441a      	add	r2, r3
 800980a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800981a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6a1a      	ldr	r2, [r3, #32]
 8009822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	429a      	cmp	r2, r3
 8009830:	d90f      	bls.n	8009852 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6a1a      	ldr	r2, [r3, #32]
 800983e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009842:	1ad2      	subs	r2, r2, r3
 8009844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	621a      	str	r2, [r3, #32]
 8009850:	e00e      	b.n	8009870 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2200      	movs	r2, #0
 800986e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80cc 	beq.w	8009a12 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800987a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800988c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	785b      	ldrb	r3, [r3, #1]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d178      	bne.n	800998a <USB_EPStartXfer+0x1202>
 8009898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	461a      	mov	r2, r3
 80098b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098bc:	4413      	add	r3, r2
 80098be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	011a      	lsls	r2, r3, #4
 80098d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098d4:	4413      	add	r3, r2
 80098d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d116      	bne.n	8009914 <USB_EPStartXfer+0x118c>
 80098e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098f8:	801a      	strh	r2, [r3, #0]
 80098fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098fe:	881b      	ldrh	r3, [r3, #0]
 8009900:	b29b      	uxth	r3, r3
 8009902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800990a:	b29a      	uxth	r2, r3
 800990c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009910:	801a      	strh	r2, [r3, #0]
 8009912:	e064      	b.n	80099de <USB_EPStartXfer+0x1256>
 8009914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009918:	2b3e      	cmp	r3, #62	; 0x3e
 800991a:	d818      	bhi.n	800994e <USB_EPStartXfer+0x11c6>
 800991c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009920:	085b      	lsrs	r3, r3, #1
 8009922:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d004      	beq.n	800993c <USB_EPStartXfer+0x11b4>
 8009932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009936:	3301      	adds	r3, #1
 8009938:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800993c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009940:	b29b      	uxth	r3, r3
 8009942:	029b      	lsls	r3, r3, #10
 8009944:	b29a      	uxth	r2, r3
 8009946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800994a:	801a      	strh	r2, [r3, #0]
 800994c:	e047      	b.n	80099de <USB_EPStartXfer+0x1256>
 800994e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	2b00      	cmp	r3, #0
 8009962:	d104      	bne.n	800996e <USB_EPStartXfer+0x11e6>
 8009964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009968:	3b01      	subs	r3, #1
 800996a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800996e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009972:	b29b      	uxth	r3, r3
 8009974:	029b      	lsls	r3, r3, #10
 8009976:	b29b      	uxth	r3, r3
 8009978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800997c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009980:	b29a      	uxth	r2, r3
 8009982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009986:	801a      	strh	r2, [r3, #0]
 8009988:	e029      	b.n	80099de <USB_EPStartXfer+0x1256>
 800998a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800998e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	785b      	ldrb	r3, [r3, #1]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d121      	bne.n	80099de <USB_EPStartXfer+0x1256>
 800999a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800999e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	461a      	mov	r2, r3
 80099ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099b0:	4413      	add	r3, r2
 80099b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	011a      	lsls	r2, r3, #4
 80099c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099c8:	4413      	add	r3, r2
 80099ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	895b      	ldrh	r3, [r3, #10]
 80099ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6959      	ldr	r1, [r3, #20]
 80099fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a0c:	6800      	ldr	r0, [r0, #0]
 8009a0e:	f000 fe31 	bl	800a674 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a34:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a40:	8013      	strh	r3, [r2, #0]
 8009a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a46:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a4e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a52:	8812      	ldrh	r2, [r2, #0]
 8009a54:	f082 0210 	eor.w	r2, r2, #16
 8009a58:	801a      	strh	r2, [r3, #0]
 8009a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a5e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a66:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a6a:	8812      	ldrh	r2, [r2, #0]
 8009a6c:	f082 0220 	eor.w	r2, r2, #32
 8009a70:	801a      	strh	r2, [r3, #0]
 8009a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	441a      	add	r2, r3
 8009a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a90:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	8013      	strh	r3, [r2, #0]
 8009aaa:	f000 bc9f 	b.w	800a3ec <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	7b1b      	ldrb	r3, [r3, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 80ae 	bne.w	8009c1c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	699a      	ldr	r2, [r3, #24]
 8009acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d917      	bls.n	8009b0c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	699a      	ldr	r2, [r3, #24]
 8009af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009afc:	1ad2      	subs	r2, r2, r3
 8009afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	619a      	str	r2, [r3, #24]
 8009b0a:	e00e      	b.n	8009b2a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2200      	movs	r2, #0
 8009b28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b4e:	4413      	add	r3, r2
 8009b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	011a      	lsls	r2, r3, #4
 8009b62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b66:	4413      	add	r3, r2
 8009b68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d116      	bne.n	8009ba6 <USB_EPStartXfer+0x141e>
 8009b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b8a:	801a      	strh	r2, [r3, #0]
 8009b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ba2:	801a      	strh	r2, [r3, #0]
 8009ba4:	e3e8      	b.n	800a378 <USB_EPStartXfer+0x1bf0>
 8009ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009baa:	2b3e      	cmp	r3, #62	; 0x3e
 8009bac:	d818      	bhi.n	8009be0 <USB_EPStartXfer+0x1458>
 8009bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb2:	085b      	lsrs	r3, r3, #1
 8009bb4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d004      	beq.n	8009bce <USB_EPStartXfer+0x1446>
 8009bc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bc8:	3301      	adds	r3, #1
 8009bca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	029b      	lsls	r3, r3, #10
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bdc:	801a      	strh	r2, [r3, #0]
 8009bde:	e3cb      	b.n	800a378 <USB_EPStartXfer+0x1bf0>
 8009be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009be4:	095b      	lsrs	r3, r3, #5
 8009be6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bee:	f003 031f 	and.w	r3, r3, #31
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d104      	bne.n	8009c00 <USB_EPStartXfer+0x1478>
 8009bf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009c00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	029b      	lsls	r3, r3, #10
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	e3ad      	b.n	800a378 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	78db      	ldrb	r3, [r3, #3]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	f040 8200 	bne.w	800a02e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	785b      	ldrb	r3, [r3, #1]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f040 8091 	bne.w	8009d62 <USB_EPStartXfer+0x15da>
 8009c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c64:	4413      	add	r3, r2
 8009c66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	011a      	lsls	r2, r3, #4
 8009c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d116      	bne.n	8009cc4 <USB_EPStartXfer+0x153c>
 8009c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ca8:	801a      	strh	r2, [r3, #0]
 8009caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cc0:	801a      	strh	r2, [r3, #0]
 8009cc2:	e083      	b.n	8009dcc <USB_EPStartXfer+0x1644>
 8009cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	691b      	ldr	r3, [r3, #16]
 8009cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8009cd2:	d820      	bhi.n	8009d16 <USB_EPStartXfer+0x158e>
 8009cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	085b      	lsrs	r3, r3, #1
 8009ce2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d004      	beq.n	8009d04 <USB_EPStartXfer+0x157c>
 8009cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfe:	3301      	adds	r3, #1
 8009d00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	029b      	lsls	r3, r3, #10
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d12:	801a      	strh	r2, [r3, #0]
 8009d14:	e05a      	b.n	8009dcc <USB_EPStartXfer+0x1644>
 8009d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	095b      	lsrs	r3, r3, #5
 8009d24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	f003 031f 	and.w	r3, r3, #31
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d104      	bne.n	8009d46 <USB_EPStartXfer+0x15be>
 8009d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d40:	3b01      	subs	r3, #1
 8009d42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	029b      	lsls	r3, r3, #10
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d5e:	801a      	strh	r2, [r3, #0]
 8009d60:	e034      	b.n	8009dcc <USB_EPStartXfer+0x1644>
 8009d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d12c      	bne.n	8009dcc <USB_EPStartXfer+0x1644>
 8009d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d96:	4413      	add	r3, r2
 8009d98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	011a      	lsls	r2, r3, #4
 8009daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dae:	4413      	add	r3, r2
 8009db0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009dca:	801a      	strh	r2, [r3, #0]
 8009dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	785b      	ldrb	r3, [r3, #1]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f040 8091 	bne.w	8009f0e <USB_EPStartXfer+0x1786>
 8009dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e10:	4413      	add	r3, r2
 8009e12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	011a      	lsls	r2, r3, #4
 8009e24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e28:	4413      	add	r3, r2
 8009e2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d116      	bne.n	8009e70 <USB_EPStartXfer+0x16e8>
 8009e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e54:	801a      	strh	r2, [r3, #0]
 8009e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e5a:	881b      	ldrh	r3, [r3, #0]
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	e07c      	b.n	8009f6a <USB_EPStartXfer+0x17e2>
 8009e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8009e7e:	d820      	bhi.n	8009ec2 <USB_EPStartXfer+0x173a>
 8009e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	085b      	lsrs	r3, r3, #1
 8009e8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d004      	beq.n	8009eb0 <USB_EPStartXfer+0x1728>
 8009ea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009eaa:	3301      	adds	r3, #1
 8009eac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009eb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	029b      	lsls	r3, r3, #10
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ebe:	801a      	strh	r2, [r3, #0]
 8009ec0:	e053      	b.n	8009f6a <USB_EPStartXfer+0x17e2>
 8009ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	095b      	lsrs	r3, r3, #5
 8009ed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	f003 031f 	and.w	r3, r3, #31
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d104      	bne.n	8009ef2 <USB_EPStartXfer+0x176a>
 8009ee8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009eec:	3b01      	subs	r3, #1
 8009eee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ef2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	029b      	lsls	r3, r3, #10
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f0a:	801a      	strh	r2, [r3, #0]
 8009f0c:	e02d      	b.n	8009f6a <USB_EPStartXfer+0x17e2>
 8009f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	785b      	ldrb	r3, [r3, #1]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d125      	bne.n	8009f6a <USB_EPStartXfer+0x17e2>
 8009f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f34:	4413      	add	r3, r2
 8009f36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	011a      	lsls	r2, r3, #4
 8009f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	69db      	ldr	r3, [r3, #28]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 81fe 	beq.w	800a378 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009f9c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d005      	beq.n	8009fb4 <USB_EPStartXfer+0x182c>
 8009fa8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10d      	bne.n	8009fd0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fb4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f040 81db 	bne.w	800a378 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fc2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f040 81d4 	bne.w	800a378 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8009ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	441a      	add	r2, r3
 800a014:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a01c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a028:	b29b      	uxth	r3, r3
 800a02a:	8013      	strh	r3, [r2, #0]
 800a02c:	e1a4      	b.n	800a378 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a02e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	78db      	ldrb	r3, [r3, #3]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	f040 819a 	bne.w	800a374 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	699a      	ldr	r2, [r3, #24]
 800a04c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d917      	bls.n	800a08c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a05c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	699a      	ldr	r2, [r3, #24]
 800a078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a07c:	1ad2      	subs	r2, r2, r3
 800a07e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	619a      	str	r2, [r3, #24]
 800a08a:	e00e      	b.n	800a0aa <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a08c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a09c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a0aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	785b      	ldrb	r3, [r3, #1]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d178      	bne.n	800a1ac <USB_EPStartXfer+0x1a24>
 800a0ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	461a      	mov	r2, r3
 800a0da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0de:	4413      	add	r3, r2
 800a0e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	011a      	lsls	r2, r3, #4
 800a0f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a104:	2b00      	cmp	r3, #0
 800a106:	d116      	bne.n	800a136 <USB_EPStartXfer+0x19ae>
 800a108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a114:	b29a      	uxth	r2, r3
 800a116:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a11a:	801a      	strh	r2, [r3, #0]
 800a11c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a120:	881b      	ldrh	r3, [r3, #0]
 800a122:	b29b      	uxth	r3, r3
 800a124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a132:	801a      	strh	r2, [r3, #0]
 800a134:	e06b      	b.n	800a20e <USB_EPStartXfer+0x1a86>
 800a136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a13a:	2b3e      	cmp	r3, #62	; 0x3e
 800a13c:	d818      	bhi.n	800a170 <USB_EPStartXfer+0x19e8>
 800a13e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a142:	085b      	lsrs	r3, r3, #1
 800a144:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a14c:	f003 0301 	and.w	r3, r3, #1
 800a150:	2b00      	cmp	r3, #0
 800a152:	d004      	beq.n	800a15e <USB_EPStartXfer+0x19d6>
 800a154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a158:	3301      	adds	r3, #1
 800a15a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a15e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a162:	b29b      	uxth	r3, r3
 800a164:	029b      	lsls	r3, r3, #10
 800a166:	b29a      	uxth	r2, r3
 800a168:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a16c:	801a      	strh	r2, [r3, #0]
 800a16e:	e04e      	b.n	800a20e <USB_EPStartXfer+0x1a86>
 800a170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a174:	095b      	lsrs	r3, r3, #5
 800a176:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a17a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a17e:	f003 031f 	and.w	r3, r3, #31
 800a182:	2b00      	cmp	r3, #0
 800a184:	d104      	bne.n	800a190 <USB_EPStartXfer+0x1a08>
 800a186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a18a:	3b01      	subs	r3, #1
 800a18c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a194:	b29b      	uxth	r3, r3
 800a196:	029b      	lsls	r3, r3, #10
 800a198:	b29b      	uxth	r3, r3
 800a19a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a19e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1a8:	801a      	strh	r2, [r3, #0]
 800a1aa:	e030      	b.n	800a20e <USB_EPStartXfer+0x1a86>
 800a1ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	785b      	ldrb	r3, [r3, #1]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d128      	bne.n	800a20e <USB_EPStartXfer+0x1a86>
 800a1bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	461a      	mov	r2, r3
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	011a      	lsls	r2, r3, #4
 800a1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a1fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a206:	b29a      	uxth	r2, r3
 800a208:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a20c:	801a      	strh	r2, [r3, #0]
 800a20e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a212:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a21c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	785b      	ldrb	r3, [r3, #1]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d178      	bne.n	800a31e <USB_EPStartXfer+0x1b96>
 800a22c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a23a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a23e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a248:	b29b      	uxth	r3, r3
 800a24a:	461a      	mov	r2, r3
 800a24c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a250:	4413      	add	r3, r2
 800a252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a25a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	011a      	lsls	r2, r3, #4
 800a264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a268:	4413      	add	r3, r2
 800a26a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a26e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d116      	bne.n	800a2a8 <USB_EPStartXfer+0x1b20>
 800a27a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	b29b      	uxth	r3, r3
 800a282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a286:	b29a      	uxth	r2, r3
 800a288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a28c:	801a      	strh	r2, [r3, #0]
 800a28e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	b29b      	uxth	r3, r3
 800a296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a29a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2a4:	801a      	strh	r2, [r3, #0]
 800a2a6:	e067      	b.n	800a378 <USB_EPStartXfer+0x1bf0>
 800a2a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a2ae:	d818      	bhi.n	800a2e2 <USB_EPStartXfer+0x1b5a>
 800a2b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2b4:	085b      	lsrs	r3, r3, #1
 800a2b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d004      	beq.n	800a2d0 <USB_EPStartXfer+0x1b48>
 800a2c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	029b      	lsls	r3, r3, #10
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	e04a      	b.n	800a378 <USB_EPStartXfer+0x1bf0>
 800a2e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2e6:	095b      	lsrs	r3, r3, #5
 800a2e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2f0:	f003 031f 	and.w	r3, r3, #31
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d104      	bne.n	800a302 <USB_EPStartXfer+0x1b7a>
 800a2f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a306:	b29b      	uxth	r3, r3
 800a308:	029b      	lsls	r3, r3, #10
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a314:	b29a      	uxth	r2, r3
 800a316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a31a:	801a      	strh	r2, [r3, #0]
 800a31c:	e02c      	b.n	800a378 <USB_EPStartXfer+0x1bf0>
 800a31e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	785b      	ldrb	r3, [r3, #1]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d124      	bne.n	800a378 <USB_EPStartXfer+0x1bf0>
 800a32e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a332:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	461a      	mov	r2, r3
 800a340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a344:	4413      	add	r3, r2
 800a346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a34a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a34e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	011a      	lsls	r2, r3, #4
 800a358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a35c:	4413      	add	r3, r2
 800a35e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a362:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a370:	801a      	strh	r2, [r3, #0]
 800a372:	e001      	b.n	800a378 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e03a      	b.n	800a3ee <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a39e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3a2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	441a      	add	r2, r3
 800a3d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d020      	beq.n	800a44c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a41c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a420:	81bb      	strh	r3, [r7, #12]
 800a422:	89bb      	ldrh	r3, [r7, #12]
 800a424:	f083 0310 	eor.w	r3, r3, #16
 800a428:	81bb      	strh	r3, [r7, #12]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	441a      	add	r2, r3
 800a434:	89bb      	ldrh	r3, [r7, #12]
 800a436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a43a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a43e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a446:	b29b      	uxth	r3, r3
 800a448:	8013      	strh	r3, [r2, #0]
 800a44a:	e01f      	b.n	800a48c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a462:	81fb      	strh	r3, [r7, #14]
 800a464:	89fb      	ldrh	r3, [r7, #14]
 800a466:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a46a:	81fb      	strh	r3, [r7, #14]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	441a      	add	r2, r3
 800a476:	89fb      	ldrh	r3, [r7, #14]
 800a478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a47c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a488:	b29b      	uxth	r3, r3
 800a48a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	bc80      	pop	{r7}
 800a496:	4770      	bx	lr

0800a498 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	7b1b      	ldrb	r3, [r3, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f040 809d 	bne.w	800a5e6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	785b      	ldrb	r3, [r3, #1]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d04c      	beq.n	800a54e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	823b      	strh	r3, [r7, #16]
 800a4c2:	8a3b      	ldrh	r3, [r7, #16]
 800a4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01b      	beq.n	800a504 <USB_EPClearStall+0x6c>
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e2:	81fb      	strh	r3, [r7, #14]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	441a      	add	r2, r3
 800a4ee:	89fb      	ldrh	r3, [r7, #14]
 800a4f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a500:	b29b      	uxth	r3, r3
 800a502:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	78db      	ldrb	r3, [r3, #3]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d06c      	beq.n	800a5e6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a51e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a522:	81bb      	strh	r3, [r7, #12]
 800a524:	89bb      	ldrh	r3, [r7, #12]
 800a526:	f083 0320 	eor.w	r3, r3, #32
 800a52a:	81bb      	strh	r3, [r7, #12]
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	441a      	add	r2, r3
 800a536:	89bb      	ldrh	r3, [r7, #12]
 800a538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a53c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a548:	b29b      	uxth	r3, r3
 800a54a:	8013      	strh	r3, [r2, #0]
 800a54c:	e04b      	b.n	800a5e6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	82fb      	strh	r3, [r7, #22]
 800a55c:	8afb      	ldrh	r3, [r7, #22]
 800a55e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01b      	beq.n	800a59e <USB_EPClearStall+0x106>
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	b29b      	uxth	r3, r3
 800a574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a57c:	82bb      	strh	r3, [r7, #20]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	441a      	add	r2, r3
 800a588:	8abb      	ldrh	r3, [r7, #20]
 800a58a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a58e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b4:	827b      	strh	r3, [r7, #18]
 800a5b6:	8a7b      	ldrh	r3, [r7, #18]
 800a5b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5bc:	827b      	strh	r3, [r7, #18]
 800a5be:	8a7b      	ldrh	r3, [r7, #18]
 800a5c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5c4:	827b      	strh	r3, [r7, #18]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	441a      	add	r2, r3
 800a5d0:	8a7b      	ldrh	r3, [r7, #18]
 800a5d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	371c      	adds	r7, #28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr

0800a5f2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2280      	movs	r2, #128	; 0x80
 800a608:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	bc80      	pop	{r7}
 800a616:	4770      	bx	lr

0800a618 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	bc80      	pop	{r7}
 800a62a:	4770      	bx	lr

0800a62c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bc80      	pop	{r7}
 800a63e:	4770      	bx	lr

0800a640 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a64e:	b29b      	uxth	r3, r3
 800a650:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a652:	68fb      	ldr	r3, [r7, #12]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	bc80      	pop	{r7}
 800a65c:	4770      	bx	lr

0800a65e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a65e:	b480      	push	{r7}
 800a660:	b083      	sub	sp, #12
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	bc80      	pop	{r7}
 800a672:	4770      	bx	lr

0800a674 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a674:	b480      	push	{r7}
 800a676:	b08d      	sub	sp, #52	; 0x34
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	4611      	mov	r1, r2
 800a680:	461a      	mov	r2, r3
 800a682:	460b      	mov	r3, r1
 800a684:	80fb      	strh	r3, [r7, #6]
 800a686:	4613      	mov	r3, r2
 800a688:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a68a:	88bb      	ldrh	r3, [r7, #4]
 800a68c:	3301      	adds	r3, #1
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a69a:	88fb      	ldrh	r3, [r7, #6]
 800a69c:	005a      	lsls	r2, r3, #1
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6a6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ac:	e01e      	b.n	800a6ec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	021b      	lsls	r3, r3, #8
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	3302      	adds	r3, #2
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	3302      	adds	r3, #2
 800a6de:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1dd      	bne.n	800a6ae <USB_WritePMA+0x3a>
  }
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	3734      	adds	r7, #52	; 0x34
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bc80      	pop	{r7}
 800a6fc:	4770      	bx	lr

0800a6fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b08b      	sub	sp, #44	; 0x2c
 800a702:	af00      	add	r7, sp, #0
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	4611      	mov	r1, r2
 800a70a:	461a      	mov	r2, r3
 800a70c:	460b      	mov	r3, r1
 800a70e:	80fb      	strh	r3, [r7, #6]
 800a710:	4613      	mov	r3, r2
 800a712:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a714:	88bb      	ldrh	r3, [r7, #4]
 800a716:	085b      	lsrs	r3, r3, #1
 800a718:	b29b      	uxth	r3, r3
 800a71a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a724:	88fb      	ldrh	r3, [r7, #6]
 800a726:	005a      	lsls	r2, r3, #1
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a730:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
 800a736:	e01b      	b.n	800a770 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	3302      	adds	r3, #2
 800a744:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	3301      	adds	r3, #1
 800a752:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	0a1b      	lsrs	r3, r3, #8
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	3301      	adds	r3, #1
 800a762:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	3302      	adds	r3, #2
 800a768:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	3b01      	subs	r3, #1
 800a76e:	627b      	str	r3, [r7, #36]	; 0x24
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1e0      	bne.n	800a738 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a776:	88bb      	ldrh	r3, [r7, #4]
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d007      	beq.n	800a792 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	b29b      	uxth	r3, r3
 800a788:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	701a      	strb	r2, [r3, #0]
  }
}
 800a792:	bf00      	nop
 800a794:	372c      	adds	r7, #44	; 0x2c
 800a796:	46bd      	mov	sp, r7
 800a798:	bc80      	pop	{r7}
 800a79a:	4770      	bx	lr

0800a79c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	7c1b      	ldrb	r3, [r3, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d115      	bne.n	800a7e0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	2181      	movs	r1, #129	; 0x81
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f001 fe8c 	bl	800c4da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	2101      	movs	r1, #1
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 fe82 	bl	800c4da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a7de:	e012      	b.n	800a806 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	2181      	movs	r1, #129	; 0x81
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f001 fe77 	bl	800c4da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f001 fe6e 	bl	800c4da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a806:	2308      	movs	r3, #8
 800a808:	2203      	movs	r2, #3
 800a80a:	2182      	movs	r1, #130	; 0x82
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 fe64 	bl	800c4da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a818:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a81c:	f001 ff84 	bl	800c728 <USBD_static_malloc>
 800a820:	4602      	mov	r2, r0
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d102      	bne.n	800a838 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a832:	2301      	movs	r3, #1
 800a834:	73fb      	strb	r3, [r7, #15]
 800a836:	e026      	b.n	800a886 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2200      	movs	r2, #0
 800a856:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	7c1b      	ldrb	r3, [r3, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d109      	bne.n	800a876 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a86c:	2101      	movs	r1, #1
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 ff24 	bl	800c6bc <USBD_LL_PrepareReceive>
 800a874:	e007      	b.n	800a886 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a87c:	2340      	movs	r3, #64	; 0x40
 800a87e:	2101      	movs	r1, #1
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f001 ff1b 	bl	800c6bc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a886:	7bfb      	ldrb	r3, [r7, #15]
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8a0:	2181      	movs	r1, #129	; 0x81
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fe3f 	bl	800c526 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 fe38 	bl	800c526 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8be:	2182      	movs	r1, #130	; 0x82
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 fe30 	bl	800c526 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00e      	beq.n	800a8f4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f001 ff2a 	bl	800c740 <USBD_static_free>
    pdev->pClassData = NULL;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b086      	sub	sp, #24
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a914:	2300      	movs	r3, #0
 800a916:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a924:	2b00      	cmp	r3, #0
 800a926:	d039      	beq.n	800a99c <USBD_CDC_Setup+0x9e>
 800a928:	2b20      	cmp	r3, #32
 800a92a:	d17f      	bne.n	800aa2c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	88db      	ldrh	r3, [r3, #6]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d029      	beq.n	800a988 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da11      	bge.n	800a962 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a94a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	88d2      	ldrh	r2, [r2, #6]
 800a950:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a952:	6939      	ldr	r1, [r7, #16]
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	88db      	ldrh	r3, [r3, #6]
 800a958:	461a      	mov	r2, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f001 fa09 	bl	800bd72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a960:	e06b      	b.n	800aa3a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	785a      	ldrb	r2, [r3, #1]
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	88db      	ldrh	r3, [r3, #6]
 800a970:	b2da      	uxtb	r2, r3
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a978:	6939      	ldr	r1, [r7, #16]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	88db      	ldrh	r3, [r3, #6]
 800a97e:	461a      	mov	r2, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 fa24 	bl	800bdce <USBD_CtlPrepareRx>
      break;
 800a986:	e058      	b.n	800aa3a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	7850      	ldrb	r0, [r2, #1]
 800a994:	2200      	movs	r2, #0
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	4798      	blx	r3
      break;
 800a99a:	e04e      	b.n	800aa3a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	785b      	ldrb	r3, [r3, #1]
 800a9a0:	2b0b      	cmp	r3, #11
 800a9a2:	d02e      	beq.n	800aa02 <USBD_CDC_Setup+0x104>
 800a9a4:	2b0b      	cmp	r3, #11
 800a9a6:	dc38      	bgt.n	800aa1a <USBD_CDC_Setup+0x11c>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <USBD_CDC_Setup+0xb4>
 800a9ac:	2b0a      	cmp	r3, #10
 800a9ae:	d014      	beq.n	800a9da <USBD_CDC_Setup+0xdc>
 800a9b0:	e033      	b.n	800aa1a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d107      	bne.n	800a9cc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a9bc:	f107 030c 	add.w	r3, r7, #12
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f001 f9d4 	bl	800bd72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9ca:	e02e      	b.n	800aa2a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f001 f965 	bl	800bc9e <USBD_CtlError>
            ret = USBD_FAIL;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	75fb      	strb	r3, [r7, #23]
          break;
 800a9d8:	e027      	b.n	800aa2a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e0:	2b03      	cmp	r3, #3
 800a9e2:	d107      	bne.n	800a9f4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a9e4:	f107 030f 	add.w	r3, r7, #15
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 f9c0 	bl	800bd72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9f2:	e01a      	b.n	800aa2a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 f951 	bl	800bc9e <USBD_CtlError>
            ret = USBD_FAIL;
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	75fb      	strb	r3, [r7, #23]
          break;
 800aa00:	e013      	b.n	800aa2a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d00d      	beq.n	800aa28 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 f945 	bl	800bc9e <USBD_CtlError>
            ret = USBD_FAIL;
 800aa14:	2302      	movs	r3, #2
 800aa16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa18:	e006      	b.n	800aa28 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 f93e 	bl	800bc9e <USBD_CtlError>
          ret = USBD_FAIL;
 800aa22:	2302      	movs	r3, #2
 800aa24:	75fb      	strb	r3, [r7, #23]
          break;
 800aa26:	e000      	b.n	800aa2a <USBD_CDC_Setup+0x12c>
          break;
 800aa28:	bf00      	nop
      }
      break;
 800aa2a:	e006      	b.n	800aa3a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 f935 	bl	800bc9e <USBD_CtlError>
      ret = USBD_FAIL;
 800aa34:	2302      	movs	r3, #2
 800aa36:	75fb      	strb	r3, [r7, #23]
      break;
 800aa38:	bf00      	nop
  }

  return ret;
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa56:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa5e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d03a      	beq.n	800aae0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	331c      	adds	r3, #28
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d029      	beq.n	800aad4 <USBD_CDC_DataIn+0x90>
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4613      	mov	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4413      	add	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	331c      	adds	r3, #28
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	78f9      	ldrb	r1, [r7, #3]
 800aa94:	68b8      	ldr	r0, [r7, #8]
 800aa96:	460b      	mov	r3, r1
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	4403      	add	r3, r0
 800aaa0:	3338      	adds	r3, #56	; 0x38
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	fbb2 f1f3 	udiv	r1, r2, r3
 800aaa8:	fb01 f303 	mul.w	r3, r1, r3
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d110      	bne.n	800aad4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aab2:	78fa      	ldrb	r2, [r7, #3]
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	440b      	add	r3, r1
 800aac0:	331c      	adds	r3, #28
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aac6:	78f9      	ldrb	r1, [r7, #3]
 800aac8:	2300      	movs	r3, #0
 800aaca:	2200      	movs	r2, #0
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f001 fdd2 	bl	800c676 <USBD_LL_Transmit>
 800aad2:	e003      	b.n	800aadc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800aadc:	2300      	movs	r3, #0
 800aade:	e000      	b.n	800aae2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800aae0:	2302      	movs	r3, #2
  }
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b084      	sub	sp, #16
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aafc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aafe:	78fb      	ldrb	r3, [r7, #3]
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 fdfd 	bl	800c702 <USBD_LL_GetRxDataSize>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00d      	beq.n	800ab36 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4798      	blx	r3

    return USBD_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	e000      	b.n	800ab38 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ab36:	2302      	movs	r3, #2
  }
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d015      	beq.n	800ab86 <USBD_CDC_EP0_RxReady+0x46>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab60:	2bff      	cmp	r3, #255	; 0xff
 800ab62:	d010      	beq.n	800ab86 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ab72:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab7a:	b292      	uxth	r2, r2
 800ab7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	22ff      	movs	r2, #255	; 0xff
 800ab82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2243      	movs	r2, #67	; 0x43
 800ab9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ab9e:	4b03      	ldr	r3, [pc, #12]	; (800abac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bc80      	pop	{r7}
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000094 	.word	0x20000094

0800abb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2243      	movs	r2, #67	; 0x43
 800abbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800abbe:	4b03      	ldr	r3, [pc, #12]	; (800abcc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bc80      	pop	{r7}
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	20000050 	.word	0x20000050

0800abd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2243      	movs	r2, #67	; 0x43
 800abdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800abde:	4b03      	ldr	r3, [pc, #12]	; (800abec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bc80      	pop	{r7}
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	200000d8 	.word	0x200000d8

0800abf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	220a      	movs	r2, #10
 800abfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800abfe:	4b03      	ldr	r3, [pc, #12]	; (800ac0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	2000000c 	.word	0x2000000c

0800ac10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bc80      	pop	{r7}
 800ac3a:	4770      	bx	lr

0800ac3c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac50:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac5a:	88fa      	ldrh	r2, [r7, #6]
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	371c      	adds	r7, #28
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bc80      	pop	{r7}
 800ac6c:	4770      	bx	lr

0800ac6e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bc80      	pop	{r7}
 800ac92:	4770      	bx	lr

0800ac94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01c      	beq.n	800ace8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d115      	bne.n	800ace4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2201      	movs	r2, #1
 800acbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	2181      	movs	r1, #129	; 0x81
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 fccb 	bl	800c676 <USBD_LL_Transmit>

      return USBD_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	e002      	b.n	800acea <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e000      	b.n	800acea <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ace8:	2302      	movs	r3, #2
  }
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad00:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d017      	beq.n	800ad3c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	7c1b      	ldrb	r3, [r3, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d109      	bne.n	800ad28 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad1e:	2101      	movs	r1, #1
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f001 fccb 	bl	800c6bc <USBD_LL_PrepareReceive>
 800ad26:	e007      	b.n	800ad38 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad2e:	2340      	movs	r3, #64	; 0x40
 800ad30:	2101      	movs	r1, #1
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 fcc2 	bl	800c6bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e000      	b.n	800ad3e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ad3c:	2302      	movs	r3, #2
  }
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	60f8      	str	r0, [r7, #12]
 800ad4e:	60b9      	str	r1, [r7, #8]
 800ad50:	4613      	mov	r3, r2
 800ad52:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	e01a      	b.n	800ad94 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d003      	beq.n	800ad70 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d003      	beq.n	800ad7e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	79fa      	ldrb	r2, [r7, #7]
 800ad8a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f001 fb2f 	bl	800c3f0 <USBD_LL_Init>

  return USBD_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d006      	beq.n	800adbe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
 800adbc:	e001      	b.n	800adc2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800adbe:	2302      	movs	r3, #2
 800adc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	bc80      	pop	{r7}
 800adcc:	4770      	bx	lr

0800adce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f001 fb64 	bl	800c4a4 <USBD_LL_Start>

  return USBD_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b083      	sub	sp, #12
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr

0800adfa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	460b      	mov	r3, r1
 800ae04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae06:	2302      	movs	r3, #2
 800ae08:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00c      	beq.n	800ae2e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	78fa      	ldrb	r2, [r7, #3]
 800ae1e:	4611      	mov	r1, r2
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	78fa      	ldrb	r2, [r7, #3]
 800ae4e:	4611      	mov	r1, r2
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	4798      	blx	r3

  return USBD_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 fed8 	bl	800bc26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae84:	461a      	mov	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae92:	f003 031f 	and.w	r3, r3, #31
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d016      	beq.n	800aec8 <USBD_LL_SetupStage+0x6a>
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d81c      	bhi.n	800aed8 <USBD_LL_SetupStage+0x7a>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <USBD_LL_SetupStage+0x4a>
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d008      	beq.n	800aeb8 <USBD_LL_SetupStage+0x5a>
 800aea6:	e017      	b.n	800aed8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f9cb 	bl	800b24c <USBD_StdDevReq>
      break;
 800aeb6:	e01a      	b.n	800aeee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fa2d 	bl	800b320 <USBD_StdItfReq>
      break;
 800aec6:	e012      	b.n	800aeee <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fa6d 	bl	800b3b0 <USBD_StdEPReq>
      break;
 800aed6:	e00a      	b.n	800aeee <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aede:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 fb3c 	bl	800c564 <USBD_LL_StallEP>
      break;
 800aeec:	bf00      	nop
  }

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	460b      	mov	r3, r1
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af06:	7afb      	ldrb	r3, [r7, #11]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d14b      	bne.n	800afa4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800af12:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d134      	bne.n	800af88 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	68da      	ldr	r2, [r3, #12]
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	429a      	cmp	r2, r3
 800af28:	d919      	bls.n	800af5e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	1ad2      	subs	r2, r2, r3
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af40:	429a      	cmp	r2, r3
 800af42:	d203      	bcs.n	800af4c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800af48:	b29b      	uxth	r3, r3
 800af4a:	e002      	b.n	800af52 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af50:	b29b      	uxth	r3, r3
 800af52:	461a      	mov	r2, r3
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 ff57 	bl	800be0a <USBD_CtlContinueRx>
 800af5c:	e038      	b.n	800afd0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00a      	beq.n	800af80 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af70:	2b03      	cmp	r3, #3
 800af72:	d105      	bne.n	800af80 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 ff54 	bl	800be2e <USBD_CtlSendStatus>
 800af86:	e023      	b.n	800afd0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af8e:	2b05      	cmp	r3, #5
 800af90:	d11e      	bne.n	800afd0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800af9a:	2100      	movs	r1, #0
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f001 fae1 	bl	800c564 <USBD_LL_StallEP>
 800afa2:	e015      	b.n	800afd0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00d      	beq.n	800afcc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d108      	bne.n	800afcc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	7afa      	ldrb	r2, [r7, #11]
 800afc4:	4611      	mov	r1, r2
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	4798      	blx	r3
 800afca:	e001      	b.n	800afd0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800afcc:	2302      	movs	r3, #2
 800afce:	e000      	b.n	800afd2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b086      	sub	sp, #24
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	460b      	mov	r3, r1
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800afe8:	7afb      	ldrb	r3, [r7, #11]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d17f      	bne.n	800b0ee <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3314      	adds	r3, #20
 800aff2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800affa:	2b02      	cmp	r3, #2
 800affc:	d15c      	bne.n	800b0b8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	68da      	ldr	r2, [r3, #12]
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	429a      	cmp	r2, r3
 800b008:	d915      	bls.n	800b036 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	68da      	ldr	r2, [r3, #12]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	1ad2      	subs	r2, r2, r3
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	461a      	mov	r2, r3
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f000 fec1 	bl	800bdaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b028:	2300      	movs	r3, #0
 800b02a:	2200      	movs	r2, #0
 800b02c:	2100      	movs	r1, #0
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f001 fb44 	bl	800c6bc <USBD_LL_PrepareReceive>
 800b034:	e04e      	b.n	800b0d4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	6912      	ldr	r2, [r2, #16]
 800b03e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b042:	fb01 f202 	mul.w	r2, r1, r2
 800b046:	1a9b      	subs	r3, r3, r2
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11c      	bne.n	800b086 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	689a      	ldr	r2, [r3, #8]
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b054:	429a      	cmp	r2, r3
 800b056:	d316      	bcc.n	800b086 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	689a      	ldr	r2, [r3, #8]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b062:	429a      	cmp	r2, r3
 800b064:	d20f      	bcs.n	800b086 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b066:	2200      	movs	r2, #0
 800b068:	2100      	movs	r1, #0
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 fe9d 	bl	800bdaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b078:	2300      	movs	r3, #0
 800b07a:	2200      	movs	r2, #0
 800b07c:	2100      	movs	r1, #0
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f001 fb1c 	bl	800c6bc <USBD_LL_PrepareReceive>
 800b084:	e026      	b.n	800b0d4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d105      	bne.n	800b0a8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b0a8:	2180      	movs	r1, #128	; 0x80
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f001 fa5a 	bl	800c564 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 fecf 	bl	800be54 <USBD_CtlReceiveStatus>
 800b0b6:	e00d      	b.n	800b0d4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d004      	beq.n	800b0cc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d103      	bne.n	800b0d4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b0cc:	2180      	movs	r1, #128	; 0x80
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f001 fa48 	bl	800c564 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d11d      	bne.n	800b11a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f7ff fe81 	bl	800ade6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b0ec:	e015      	b.n	800b11a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f4:	695b      	ldr	r3, [r3, #20]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00d      	beq.n	800b116 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b100:	2b03      	cmp	r3, #3
 800b102:	d108      	bne.n	800b116 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	7afa      	ldrb	r2, [r7, #11]
 800b10e:	4611      	mov	r1, r2
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	4798      	blx	r3
 800b114:	e001      	b.n	800b11a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b116:	2302      	movs	r3, #2
 800b118:	e000      	b.n	800b11c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b12c:	2340      	movs	r3, #64	; 0x40
 800b12e:	2200      	movs	r2, #0
 800b130:	2100      	movs	r1, #0
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f001 f9d1 	bl	800c4da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2240      	movs	r2, #64	; 0x40
 800b144:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b148:	2340      	movs	r3, #64	; 0x40
 800b14a:	2200      	movs	r2, #0
 800b14c:	2180      	movs	r1, #128	; 0x80
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f001 f9c3 	bl	800c4da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2240      	movs	r2, #64	; 0x40
 800b15e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b184:	2b00      	cmp	r3, #0
 800b186:	d009      	beq.n	800b19c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	6852      	ldr	r2, [r2, #4]
 800b194:	b2d2      	uxtb	r2, r2
 800b196:	4611      	mov	r1, r2
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	4798      	blx	r3
  }

  return USBD_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b083      	sub	sp, #12
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc80      	pop	{r7}
 800b1c2:	4770      	bx	lr

0800b1c4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2204      	movs	r2, #4
 800b1dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	370c      	adds	r7, #12
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bc80      	pop	{r7}
 800b1ea:	4770      	bx	lr

0800b1ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	d105      	bne.n	800b20a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	bc80      	pop	{r7}
 800b214:	4770      	bx	lr

0800b216 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b224:	2b03      	cmp	r3, #3
 800b226:	d10b      	bne.n	800b240 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b23a:	69db      	ldr	r3, [r3, #28]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
	...

0800b24c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b262:	2b40      	cmp	r3, #64	; 0x40
 800b264:	d005      	beq.n	800b272 <USBD_StdDevReq+0x26>
 800b266:	2b40      	cmp	r3, #64	; 0x40
 800b268:	d84f      	bhi.n	800b30a <USBD_StdDevReq+0xbe>
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d009      	beq.n	800b282 <USBD_StdDevReq+0x36>
 800b26e:	2b20      	cmp	r3, #32
 800b270:	d14b      	bne.n	800b30a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	6839      	ldr	r1, [r7, #0]
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	4798      	blx	r3
      break;
 800b280:	e048      	b.n	800b314 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	785b      	ldrb	r3, [r3, #1]
 800b286:	2b09      	cmp	r3, #9
 800b288:	d839      	bhi.n	800b2fe <USBD_StdDevReq+0xb2>
 800b28a:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <USBD_StdDevReq+0x44>)
 800b28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b290:	0800b2e1 	.word	0x0800b2e1
 800b294:	0800b2f5 	.word	0x0800b2f5
 800b298:	0800b2ff 	.word	0x0800b2ff
 800b29c:	0800b2eb 	.word	0x0800b2eb
 800b2a0:	0800b2ff 	.word	0x0800b2ff
 800b2a4:	0800b2c3 	.word	0x0800b2c3
 800b2a8:	0800b2b9 	.word	0x0800b2b9
 800b2ac:	0800b2ff 	.word	0x0800b2ff
 800b2b0:	0800b2d7 	.word	0x0800b2d7
 800b2b4:	0800b2cd 	.word	0x0800b2cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f9dc 	bl	800b678 <USBD_GetDescriptor>
          break;
 800b2c0:	e022      	b.n	800b308 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fb3f 	bl	800b948 <USBD_SetAddress>
          break;
 800b2ca:	e01d      	b.n	800b308 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fb7e 	bl	800b9d0 <USBD_SetConfig>
          break;
 800b2d4:	e018      	b.n	800b308 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2d6:	6839      	ldr	r1, [r7, #0]
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fc07 	bl	800baec <USBD_GetConfig>
          break;
 800b2de:	e013      	b.n	800b308 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fc37 	bl	800bb56 <USBD_GetStatus>
          break;
 800b2e8:	e00e      	b.n	800b308 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fc65 	bl	800bbbc <USBD_SetFeature>
          break;
 800b2f2:	e009      	b.n	800b308 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fc74 	bl	800bbe4 <USBD_ClrFeature>
          break;
 800b2fc:	e004      	b.n	800b308 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fccc 	bl	800bc9e <USBD_CtlError>
          break;
 800b306:	bf00      	nop
      }
      break;
 800b308:	e004      	b.n	800b314 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fcc6 	bl	800bc9e <USBD_CtlError>
      break;
 800b312:	bf00      	nop
  }

  return ret;
 800b314:	7bfb      	ldrb	r3, [r7, #15]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop

0800b320 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b336:	2b40      	cmp	r3, #64	; 0x40
 800b338:	d005      	beq.n	800b346 <USBD_StdItfReq+0x26>
 800b33a:	2b40      	cmp	r3, #64	; 0x40
 800b33c:	d82e      	bhi.n	800b39c <USBD_StdItfReq+0x7c>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <USBD_StdItfReq+0x26>
 800b342:	2b20      	cmp	r3, #32
 800b344:	d12a      	bne.n	800b39c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b34c:	3b01      	subs	r3, #1
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d81d      	bhi.n	800b38e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	889b      	ldrh	r3, [r3, #4]
 800b356:	b2db      	uxtb	r3, r3
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d813      	bhi.n	800b384 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	4798      	blx	r3
 800b36a:	4603      	mov	r3, r0
 800b36c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	88db      	ldrh	r3, [r3, #6]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d110      	bne.n	800b398 <USBD_StdItfReq+0x78>
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10d      	bne.n	800b398 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fd56 	bl	800be2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b382:	e009      	b.n	800b398 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fc89 	bl	800bc9e <USBD_CtlError>
          break;
 800b38c:	e004      	b.n	800b398 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fc84 	bl	800bc9e <USBD_CtlError>
          break;
 800b396:	e000      	b.n	800b39a <USBD_StdItfReq+0x7a>
          break;
 800b398:	bf00      	nop
      }
      break;
 800b39a:	e004      	b.n	800b3a6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fc7d 	bl	800bc9e <USBD_CtlError>
      break;
 800b3a4:	bf00      	nop
  }

  return USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	889b      	ldrh	r3, [r3, #4]
 800b3c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3cc:	2b40      	cmp	r3, #64	; 0x40
 800b3ce:	d007      	beq.n	800b3e0 <USBD_StdEPReq+0x30>
 800b3d0:	2b40      	cmp	r3, #64	; 0x40
 800b3d2:	f200 8146 	bhi.w	800b662 <USBD_StdEPReq+0x2b2>
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00a      	beq.n	800b3f0 <USBD_StdEPReq+0x40>
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	f040 8141 	bne.w	800b662 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	4798      	blx	r3
      break;
 800b3ee:	e13d      	b.n	800b66c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3f8:	2b20      	cmp	r3, #32
 800b3fa:	d10a      	bne.n	800b412 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	4798      	blx	r3
 800b40a:	4603      	mov	r3, r0
 800b40c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
 800b410:	e12d      	b.n	800b66e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	785b      	ldrb	r3, [r3, #1]
 800b416:	2b03      	cmp	r3, #3
 800b418:	d007      	beq.n	800b42a <USBD_StdEPReq+0x7a>
 800b41a:	2b03      	cmp	r3, #3
 800b41c:	f300 811b 	bgt.w	800b656 <USBD_StdEPReq+0x2a6>
 800b420:	2b00      	cmp	r3, #0
 800b422:	d072      	beq.n	800b50a <USBD_StdEPReq+0x15a>
 800b424:	2b01      	cmp	r3, #1
 800b426:	d03a      	beq.n	800b49e <USBD_StdEPReq+0xee>
 800b428:	e115      	b.n	800b656 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b430:	2b02      	cmp	r3, #2
 800b432:	d002      	beq.n	800b43a <USBD_StdEPReq+0x8a>
 800b434:	2b03      	cmp	r3, #3
 800b436:	d015      	beq.n	800b464 <USBD_StdEPReq+0xb4>
 800b438:	e02b      	b.n	800b492 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b43a:	7bbb      	ldrb	r3, [r7, #14]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00c      	beq.n	800b45a <USBD_StdEPReq+0xaa>
 800b440:	7bbb      	ldrb	r3, [r7, #14]
 800b442:	2b80      	cmp	r3, #128	; 0x80
 800b444:	d009      	beq.n	800b45a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b446:	7bbb      	ldrb	r3, [r7, #14]
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 f88a 	bl	800c564 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b450:	2180      	movs	r1, #128	; 0x80
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 f886 	bl	800c564 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b458:	e020      	b.n	800b49c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fc1e 	bl	800bc9e <USBD_CtlError>
              break;
 800b462:	e01b      	b.n	800b49c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	885b      	ldrh	r3, [r3, #2]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10e      	bne.n	800b48a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00b      	beq.n	800b48a <USBD_StdEPReq+0xda>
 800b472:	7bbb      	ldrb	r3, [r7, #14]
 800b474:	2b80      	cmp	r3, #128	; 0x80
 800b476:	d008      	beq.n	800b48a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	88db      	ldrh	r3, [r3, #6]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d104      	bne.n	800b48a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f001 f86d 	bl	800c564 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fccf 	bl	800be2e <USBD_CtlSendStatus>

              break;
 800b490:	e004      	b.n	800b49c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fc02 	bl	800bc9e <USBD_CtlError>
              break;
 800b49a:	bf00      	nop
          }
          break;
 800b49c:	e0e0      	b.n	800b660 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d002      	beq.n	800b4ae <USBD_StdEPReq+0xfe>
 800b4a8:	2b03      	cmp	r3, #3
 800b4aa:	d015      	beq.n	800b4d8 <USBD_StdEPReq+0x128>
 800b4ac:	e026      	b.n	800b4fc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00c      	beq.n	800b4ce <USBD_StdEPReq+0x11e>
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
 800b4b6:	2b80      	cmp	r3, #128	; 0x80
 800b4b8:	d009      	beq.n	800b4ce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f001 f850 	bl	800c564 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4c4:	2180      	movs	r1, #128	; 0x80
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f001 f84c 	bl	800c564 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4cc:	e01c      	b.n	800b508 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fbe4 	bl	800bc9e <USBD_CtlError>
              break;
 800b4d6:	e017      	b.n	800b508 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	885b      	ldrh	r3, [r3, #2]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d112      	bne.n	800b506 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b4ea:	7bbb      	ldrb	r3, [r7, #14]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f001 f857 	bl	800c5a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fc9a 	bl	800be2e <USBD_CtlSendStatus>
              }
              break;
 800b4fa:	e004      	b.n	800b506 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fbcd 	bl	800bc9e <USBD_CtlError>
              break;
 800b504:	e000      	b.n	800b508 <USBD_StdEPReq+0x158>
              break;
 800b506:	bf00      	nop
          }
          break;
 800b508:	e0aa      	b.n	800b660 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b510:	2b02      	cmp	r3, #2
 800b512:	d002      	beq.n	800b51a <USBD_StdEPReq+0x16a>
 800b514:	2b03      	cmp	r3, #3
 800b516:	d032      	beq.n	800b57e <USBD_StdEPReq+0x1ce>
 800b518:	e097      	b.n	800b64a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b51a:	7bbb      	ldrb	r3, [r7, #14]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d007      	beq.n	800b530 <USBD_StdEPReq+0x180>
 800b520:	7bbb      	ldrb	r3, [r7, #14]
 800b522:	2b80      	cmp	r3, #128	; 0x80
 800b524:	d004      	beq.n	800b530 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fbb8 	bl	800bc9e <USBD_CtlError>
                break;
 800b52e:	e091      	b.n	800b654 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b534:	2b00      	cmp	r3, #0
 800b536:	da0b      	bge.n	800b550 <USBD_StdEPReq+0x1a0>
 800b538:	7bbb      	ldrb	r3, [r7, #14]
 800b53a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	3310      	adds	r3, #16
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	4413      	add	r3, r2
 800b54c:	3304      	adds	r3, #4
 800b54e:	e00b      	b.n	800b568 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b550:	7bbb      	ldrb	r3, [r7, #14]
 800b552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b556:	4613      	mov	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4413      	add	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	4413      	add	r3, r2
 800b566:	3304      	adds	r3, #4
 800b568:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2200      	movs	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2202      	movs	r2, #2
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fbfb 	bl	800bd72 <USBD_CtlSendData>
              break;
 800b57c:	e06a      	b.n	800b654 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b57e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b582:	2b00      	cmp	r3, #0
 800b584:	da11      	bge.n	800b5aa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b586:	7bbb      	ldrb	r3, [r7, #14]
 800b588:	f003 020f 	and.w	r2, r3, #15
 800b58c:	6879      	ldr	r1, [r7, #4]
 800b58e:	4613      	mov	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4413      	add	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	440b      	add	r3, r1
 800b598:	3318      	adds	r3, #24
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d117      	bne.n	800b5d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5a0:	6839      	ldr	r1, [r7, #0]
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fb7b 	bl	800bc9e <USBD_CtlError>
                  break;
 800b5a8:	e054      	b.n	800b654 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5aa:	7bbb      	ldrb	r3, [r7, #14]
 800b5ac:	f003 020f 	and.w	r2, r3, #15
 800b5b0:	6879      	ldr	r1, [r7, #4]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	440b      	add	r3, r1
 800b5bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d104      	bne.n	800b5d0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fb68 	bl	800bc9e <USBD_CtlError>
                  break;
 800b5ce:	e041      	b.n	800b654 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	da0b      	bge.n	800b5f0 <USBD_StdEPReq+0x240>
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	3310      	adds	r3, #16
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	e00b      	b.n	800b608 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5f0:	7bbb      	ldrb	r3, [r7, #14]
 800b5f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	4413      	add	r3, r2
 800b606:	3304      	adds	r3, #4
 800b608:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <USBD_StdEPReq+0x266>
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b80      	cmp	r3, #128	; 0x80
 800b614:	d103      	bne.n	800b61e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	e00e      	b.n	800b63c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 ffdc 	bl	800c5e0 <USBD_LL_IsStallEP>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2201      	movs	r2, #1
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	e002      	b.n	800b63c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2202      	movs	r2, #2
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fb95 	bl	800bd72 <USBD_CtlSendData>
              break;
 800b648:	e004      	b.n	800b654 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fb26 	bl	800bc9e <USBD_CtlError>
              break;
 800b652:	bf00      	nop
          }
          break;
 800b654:	e004      	b.n	800b660 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fb20 	bl	800bc9e <USBD_CtlError>
          break;
 800b65e:	bf00      	nop
      }
      break;
 800b660:	e004      	b.n	800b66c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fb1a 	bl	800bc9e <USBD_CtlError>
      break;
 800b66a:	bf00      	nop
  }

  return ret;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b686:	2300      	movs	r3, #0
 800b688:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	885b      	ldrh	r3, [r3, #2]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	b29b      	uxth	r3, r3
 800b696:	3b01      	subs	r3, #1
 800b698:	2b06      	cmp	r3, #6
 800b69a:	f200 8128 	bhi.w	800b8ee <USBD_GetDescriptor+0x276>
 800b69e:	a201      	add	r2, pc, #4	; (adr r2, 800b6a4 <USBD_GetDescriptor+0x2c>)
 800b6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a4:	0800b6c1 	.word	0x0800b6c1
 800b6a8:	0800b6d9 	.word	0x0800b6d9
 800b6ac:	0800b719 	.word	0x0800b719
 800b6b0:	0800b8ef 	.word	0x0800b8ef
 800b6b4:	0800b8ef 	.word	0x0800b8ef
 800b6b8:	0800b88f 	.word	0x0800b88f
 800b6bc:	0800b8bb 	.word	0x0800b8bb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	7c12      	ldrb	r2, [r2, #16]
 800b6cc:	f107 0108 	add.w	r1, r7, #8
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	4798      	blx	r3
 800b6d4:	60f8      	str	r0, [r7, #12]
      break;
 800b6d6:	e112      	b.n	800b8fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7c1b      	ldrb	r3, [r3, #16]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10d      	bne.n	800b6fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e8:	f107 0208 	add.w	r2, r7, #8
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3
 800b6f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b6fa:	e100      	b.n	800b8fe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b704:	f107 0208 	add.w	r2, r7, #8
 800b708:	4610      	mov	r0, r2
 800b70a:	4798      	blx	r3
 800b70c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3301      	adds	r3, #1
 800b712:	2202      	movs	r2, #2
 800b714:	701a      	strb	r2, [r3, #0]
      break;
 800b716:	e0f2      	b.n	800b8fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	885b      	ldrh	r3, [r3, #2]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b05      	cmp	r3, #5
 800b720:	f200 80ac 	bhi.w	800b87c <USBD_GetDescriptor+0x204>
 800b724:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <USBD_GetDescriptor+0xb4>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b745 	.word	0x0800b745
 800b730:	0800b779 	.word	0x0800b779
 800b734:	0800b7ad 	.word	0x0800b7ad
 800b738:	0800b7e1 	.word	0x0800b7e1
 800b73c:	0800b815 	.word	0x0800b815
 800b740:	0800b849 	.word	0x0800b849
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00b      	beq.n	800b768 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	7c12      	ldrb	r2, [r2, #16]
 800b75c:	f107 0108 	add.w	r1, r7, #8
 800b760:	4610      	mov	r0, r2
 800b762:	4798      	blx	r3
 800b764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b766:	e091      	b.n	800b88c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fa97 	bl	800bc9e <USBD_CtlError>
            err++;
 800b770:	7afb      	ldrb	r3, [r7, #11]
 800b772:	3301      	adds	r3, #1
 800b774:	72fb      	strb	r3, [r7, #11]
          break;
 800b776:	e089      	b.n	800b88c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00b      	beq.n	800b79c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	7c12      	ldrb	r2, [r2, #16]
 800b790:	f107 0108 	add.w	r1, r7, #8
 800b794:	4610      	mov	r0, r2
 800b796:	4798      	blx	r3
 800b798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b79a:	e077      	b.n	800b88c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fa7d 	bl	800bc9e <USBD_CtlError>
            err++;
 800b7a4:	7afb      	ldrb	r3, [r7, #11]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7aa:	e06f      	b.n	800b88c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00b      	beq.n	800b7d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	7c12      	ldrb	r2, [r2, #16]
 800b7c4:	f107 0108 	add.w	r1, r7, #8
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
 800b7cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ce:	e05d      	b.n	800b88c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fa63 	bl	800bc9e <USBD_CtlError>
            err++;
 800b7d8:	7afb      	ldrb	r3, [r7, #11]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7de:	e055      	b.n	800b88c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00b      	beq.n	800b804 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	7c12      	ldrb	r2, [r2, #16]
 800b7f8:	f107 0108 	add.w	r1, r7, #8
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	4798      	blx	r3
 800b800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b802:	e043      	b.n	800b88c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fa49 	bl	800bc9e <USBD_CtlError>
            err++;
 800b80c:	7afb      	ldrb	r3, [r7, #11]
 800b80e:	3301      	adds	r3, #1
 800b810:	72fb      	strb	r3, [r7, #11]
          break;
 800b812:	e03b      	b.n	800b88c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00b      	beq.n	800b838 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b826:	695b      	ldr	r3, [r3, #20]
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	7c12      	ldrb	r2, [r2, #16]
 800b82c:	f107 0108 	add.w	r1, r7, #8
 800b830:	4610      	mov	r0, r2
 800b832:	4798      	blx	r3
 800b834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b836:	e029      	b.n	800b88c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fa2f 	bl	800bc9e <USBD_CtlError>
            err++;
 800b840:	7afb      	ldrb	r3, [r7, #11]
 800b842:	3301      	adds	r3, #1
 800b844:	72fb      	strb	r3, [r7, #11]
          break;
 800b846:	e021      	b.n	800b88c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00b      	beq.n	800b86c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	7c12      	ldrb	r2, [r2, #16]
 800b860:	f107 0108 	add.w	r1, r7, #8
 800b864:	4610      	mov	r0, r2
 800b866:	4798      	blx	r3
 800b868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b86a:	e00f      	b.n	800b88c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fa15 	bl	800bc9e <USBD_CtlError>
            err++;
 800b874:	7afb      	ldrb	r3, [r7, #11]
 800b876:	3301      	adds	r3, #1
 800b878:	72fb      	strb	r3, [r7, #11]
          break;
 800b87a:	e007      	b.n	800b88c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fa0d 	bl	800bc9e <USBD_CtlError>
          err++;
 800b884:	7afb      	ldrb	r3, [r7, #11]
 800b886:	3301      	adds	r3, #1
 800b888:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b88a:	e038      	b.n	800b8fe <USBD_GetDescriptor+0x286>
 800b88c:	e037      	b.n	800b8fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	7c1b      	ldrb	r3, [r3, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d109      	bne.n	800b8aa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b89e:	f107 0208 	add.w	r2, r7, #8
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	4798      	blx	r3
 800b8a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8a8:	e029      	b.n	800b8fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f9f6 	bl	800bc9e <USBD_CtlError>
        err++;
 800b8b2:	7afb      	ldrb	r3, [r7, #11]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	72fb      	strb	r3, [r7, #11]
      break;
 800b8b8:	e021      	b.n	800b8fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	7c1b      	ldrb	r3, [r3, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10d      	bne.n	800b8de <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ca:	f107 0208 	add.w	r2, r7, #8
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	4798      	blx	r3
 800b8d2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	2207      	movs	r2, #7
 800b8da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8dc:	e00f      	b.n	800b8fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f9dc 	bl	800bc9e <USBD_CtlError>
        err++;
 800b8e6:	7afb      	ldrb	r3, [r7, #11]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b8ec:	e007      	b.n	800b8fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f9d4 	bl	800bc9e <USBD_CtlError>
      err++;
 800b8f6:	7afb      	ldrb	r3, [r7, #11]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b8fc:	bf00      	nop
  }

  if (err != 0U)
 800b8fe:	7afb      	ldrb	r3, [r7, #11]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d11c      	bne.n	800b93e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b904:	893b      	ldrh	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d011      	beq.n	800b92e <USBD_GetDescriptor+0x2b6>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	88db      	ldrh	r3, [r3, #6]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00d      	beq.n	800b92e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	88da      	ldrh	r2, [r3, #6]
 800b916:	893b      	ldrh	r3, [r7, #8]
 800b918:	4293      	cmp	r3, r2
 800b91a:	bf28      	it	cs
 800b91c:	4613      	movcs	r3, r2
 800b91e:	b29b      	uxth	r3, r3
 800b920:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b922:	893b      	ldrh	r3, [r7, #8]
 800b924:	461a      	mov	r2, r3
 800b926:	68f9      	ldr	r1, [r7, #12]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fa22 	bl	800bd72 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	88db      	ldrh	r3, [r3, #6]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d104      	bne.n	800b940 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 fa79 	bl	800be2e <USBD_CtlSendStatus>
 800b93c:	e000      	b.n	800b940 <USBD_GetDescriptor+0x2c8>
    return;
 800b93e:	bf00      	nop
    }
  }
}
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop

0800b948 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	889b      	ldrh	r3, [r3, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d130      	bne.n	800b9bc <USBD_SetAddress+0x74>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	88db      	ldrh	r3, [r3, #6]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d12c      	bne.n	800b9bc <USBD_SetAddress+0x74>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	885b      	ldrh	r3, [r3, #2]
 800b966:	2b7f      	cmp	r3, #127	; 0x7f
 800b968:	d828      	bhi.n	800b9bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	885b      	ldrh	r3, [r3, #2]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b974:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d104      	bne.n	800b98a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f98b 	bl	800bc9e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b988:	e01d      	b.n	800b9c6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	7bfa      	ldrb	r2, [r7, #15]
 800b98e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	4619      	mov	r1, r3
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fe4e 	bl	800c638 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fa46 	bl	800be2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d004      	beq.n	800b9b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b0:	e009      	b.n	800b9c6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ba:	e004      	b.n	800b9c6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f96d 	bl	800bc9e <USBD_CtlError>
  }
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	885b      	ldrh	r3, [r3, #2]
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	4b41      	ldr	r3, [pc, #260]	; (800bae8 <USBD_SetConfig+0x118>)
 800b9e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b9e4:	4b40      	ldr	r3, [pc, #256]	; (800bae8 <USBD_SetConfig+0x118>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d904      	bls.n	800b9f6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f955 	bl	800bc9e <USBD_CtlError>
 800b9f4:	e075      	b.n	800bae2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d002      	beq.n	800ba06 <USBD_SetConfig+0x36>
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	d023      	beq.n	800ba4c <USBD_SetConfig+0x7c>
 800ba04:	e062      	b.n	800bacc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba06:	4b38      	ldr	r3, [pc, #224]	; (800bae8 <USBD_SetConfig+0x118>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d01a      	beq.n	800ba44 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba0e:	4b36      	ldr	r3, [pc, #216]	; (800bae8 <USBD_SetConfig+0x118>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2203      	movs	r2, #3
 800ba1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba20:	4b31      	ldr	r3, [pc, #196]	; (800bae8 <USBD_SetConfig+0x118>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff f9e7 	bl	800adfa <USBD_SetClassConfig>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d104      	bne.n	800ba3c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f932 	bl	800bc9e <USBD_CtlError>
            return;
 800ba3a:	e052      	b.n	800bae2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f9f6 	bl	800be2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba42:	e04e      	b.n	800bae2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f9f2 	bl	800be2e <USBD_CtlSendStatus>
        break;
 800ba4a:	e04a      	b.n	800bae2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba4c:	4b26      	ldr	r3, [pc, #152]	; (800bae8 <USBD_SetConfig+0x118>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d112      	bne.n	800ba7a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2202      	movs	r2, #2
 800ba58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ba5c:	4b22      	ldr	r3, [pc, #136]	; (800bae8 <USBD_SetConfig+0x118>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	461a      	mov	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ba66:	4b20      	ldr	r3, [pc, #128]	; (800bae8 <USBD_SetConfig+0x118>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff f9e3 	bl	800ae38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f9db 	bl	800be2e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba78:	e033      	b.n	800bae2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ba7a:	4b1b      	ldr	r3, [pc, #108]	; (800bae8 <USBD_SetConfig+0x118>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d01d      	beq.n	800bac4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7ff f9d1 	bl	800ae38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ba96:	4b14      	ldr	r3, [pc, #80]	; (800bae8 <USBD_SetConfig+0x118>)
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800baa0:	4b11      	ldr	r3, [pc, #68]	; (800bae8 <USBD_SetConfig+0x118>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	4619      	mov	r1, r3
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff f9a7 	bl	800adfa <USBD_SetClassConfig>
 800baac:	4603      	mov	r3, r0
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d104      	bne.n	800babc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f8f2 	bl	800bc9e <USBD_CtlError>
            return;
 800baba:	e012      	b.n	800bae2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f9b6 	bl	800be2e <USBD_CtlSendStatus>
        break;
 800bac2:	e00e      	b.n	800bae2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f9b2 	bl	800be2e <USBD_CtlSendStatus>
        break;
 800baca:	e00a      	b.n	800bae2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f8e5 	bl	800bc9e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bad4:	4b04      	ldr	r3, [pc, #16]	; (800bae8 <USBD_SetConfig+0x118>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	4619      	mov	r1, r3
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7ff f9ac 	bl	800ae38 <USBD_ClrClassConfig>
        break;
 800bae0:	bf00      	nop
    }
  }
}
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	20000630 	.word	0x20000630

0800baec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	88db      	ldrh	r3, [r3, #6]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d004      	beq.n	800bb08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f8cc 	bl	800bc9e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb06:	e022      	b.n	800bb4e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	dc02      	bgt.n	800bb18 <USBD_GetConfig+0x2c>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dc03      	bgt.n	800bb1e <USBD_GetConfig+0x32>
 800bb16:	e015      	b.n	800bb44 <USBD_GetConfig+0x58>
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d00b      	beq.n	800bb34 <USBD_GetConfig+0x48>
 800bb1c:	e012      	b.n	800bb44 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	3308      	adds	r3, #8
 800bb28:	2201      	movs	r2, #1
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f920 	bl	800bd72 <USBD_CtlSendData>
        break;
 800bb32:	e00c      	b.n	800bb4e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3304      	adds	r3, #4
 800bb38:	2201      	movs	r2, #1
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 f918 	bl	800bd72 <USBD_CtlSendData>
        break;
 800bb42:	e004      	b.n	800bb4e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb44:	6839      	ldr	r1, [r7, #0]
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f8a9 	bl	800bc9e <USBD_CtlError>
        break;
 800bb4c:	bf00      	nop
}
 800bb4e:	bf00      	nop
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b082      	sub	sp, #8
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb66:	3b01      	subs	r3, #1
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d81e      	bhi.n	800bbaa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	88db      	ldrh	r3, [r3, #6]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d004      	beq.n	800bb7e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f891 	bl	800bc9e <USBD_CtlError>
        break;
 800bb7c:	e01a      	b.n	800bbb4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d005      	beq.n	800bb9a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	f043 0202 	orr.w	r2, r3, #2
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	330c      	adds	r3, #12
 800bb9e:	2202      	movs	r2, #2
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f8e5 	bl	800bd72 <USBD_CtlSendData>
      break;
 800bba8:	e004      	b.n	800bbb4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f876 	bl	800bc9e <USBD_CtlError>
      break;
 800bbb2:	bf00      	nop
  }
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	885b      	ldrh	r3, [r3, #2]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d106      	bne.n	800bbdc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f929 	bl	800be2e <USBD_CtlSendStatus>
  }
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d80b      	bhi.n	800bc12 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	885b      	ldrh	r3, [r3, #2]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d10c      	bne.n	800bc1c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f90f 	bl	800be2e <USBD_CtlSendStatus>
      }
      break;
 800bc10:	e004      	b.n	800bc1c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 f842 	bl	800bc9e <USBD_CtlError>
      break;
 800bc1a:	e000      	b.n	800bc1e <USBD_ClrFeature+0x3a>
      break;
 800bc1c:	bf00      	nop
  }
}
 800bc1e:	bf00      	nop
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	781a      	ldrb	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	785a      	ldrb	r2, [r3, #1]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	3302      	adds	r3, #2
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	3303      	adds	r3, #3
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	021b      	lsls	r3, r3, #8
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	4413      	add	r3, r2
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	3305      	adds	r3, #5
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	021b      	lsls	r3, r3, #8
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	4413      	add	r3, r2
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	3306      	adds	r3, #6
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	3307      	adds	r3, #7
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	021b      	lsls	r3, r3, #8
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	80da      	strh	r2, [r3, #6]

}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bc80      	pop	{r7}
 800bc9c:	4770      	bx	lr

0800bc9e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bca8:	2180      	movs	r1, #128	; 0x80
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fc5a 	bl	800c564 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fc56 	bl	800c564 <USBD_LL_StallEP>
}
 800bcb8:	bf00      	nop
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bccc:	2300      	movs	r3, #0
 800bcce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d032      	beq.n	800bd3c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 f834 	bl	800bd44 <USBD_GetLen>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	3301      	adds	r3, #1
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	b29a      	uxth	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	75fa      	strb	r2, [r7, #23]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	7812      	ldrb	r2, [r2, #0]
 800bcfa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	75fa      	strb	r2, [r7, #23]
 800bd02:	461a      	mov	r2, r3
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	4413      	add	r3, r2
 800bd08:	2203      	movs	r2, #3
 800bd0a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd0c:	e012      	b.n	800bd34 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	60fa      	str	r2, [r7, #12]
 800bd14:	7dfa      	ldrb	r2, [r7, #23]
 800bd16:	1c51      	adds	r1, r2, #1
 800bd18:	75f9      	strb	r1, [r7, #23]
 800bd1a:	4611      	mov	r1, r2
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	440a      	add	r2, r1
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	1c5a      	adds	r2, r3, #1
 800bd28:	75fa      	strb	r2, [r7, #23]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	4413      	add	r3, r2
 800bd30:	2200      	movs	r2, #0
 800bd32:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e8      	bne.n	800bd0e <USBD_GetString+0x4e>
    }
  }
}
 800bd3c:	bf00      	nop
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd50:	e005      	b.n	800bd5e <USBD_GetLen+0x1a>
  {
    len++;
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
 800bd54:	3301      	adds	r3, #1
 800bd56:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d1f5      	bne.n	800bd52 <USBD_GetLen+0xe>
  }

  return len;
 800bd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bc80      	pop	{r7}
 800bd70:	4770      	bx	lr

0800bd72 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b084      	sub	sp, #16
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	60f8      	str	r0, [r7, #12]
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2202      	movs	r2, #2
 800bd84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bd88:	88fa      	ldrh	r2, [r7, #6]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bd8e:	88fa      	ldrh	r2, [r7, #6]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd94:	88fb      	ldrh	r3, [r7, #6]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	2100      	movs	r1, #0
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f000 fc6b 	bl	800c676 <USBD_LL_Transmit>

  return USBD_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b084      	sub	sp, #16
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdb8:	88fb      	ldrh	r3, [r7, #6]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 fc59 	bl	800c676 <USBD_LL_Transmit>

  return USBD_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	60f8      	str	r0, [r7, #12]
 800bdd6:	60b9      	str	r1, [r7, #8]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2203      	movs	r2, #3
 800bde0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bde4:	88fa      	ldrh	r2, [r7, #6]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bdec:	88fa      	ldrh	r2, [r7, #6]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bdf4:	88fb      	ldrh	r3, [r7, #6]
 800bdf6:	68ba      	ldr	r2, [r7, #8]
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fc5e 	bl	800c6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b084      	sub	sp, #16
 800be0e:	af00      	add	r7, sp, #0
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	60b9      	str	r1, [r7, #8]
 800be14:	4613      	mov	r3, r2
 800be16:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be18:	88fb      	ldrh	r3, [r7, #6]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	2100      	movs	r1, #0
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f000 fc4c 	bl	800c6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2204      	movs	r2, #4
 800be3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be3e:	2300      	movs	r3, #0
 800be40:	2200      	movs	r2, #0
 800be42:	2100      	movs	r1, #0
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fc16 	bl	800c676 <USBD_LL_Transmit>

  return USBD_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2205      	movs	r2, #5
 800be60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be64:	2300      	movs	r3, #0
 800be66:	2200      	movs	r2, #0
 800be68:	2100      	movs	r1, #0
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fc26 	bl	800c6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be80:	2200      	movs	r2, #0
 800be82:	4912      	ldr	r1, [pc, #72]	; (800becc <MX_USB_DEVICE_Init+0x50>)
 800be84:	4812      	ldr	r0, [pc, #72]	; (800bed0 <MX_USB_DEVICE_Init+0x54>)
 800be86:	f7fe ff5e 	bl	800ad46 <USBD_Init>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be90:	f7f7 f8b6 	bl	8003000 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be94:	490f      	ldr	r1, [pc, #60]	; (800bed4 <MX_USB_DEVICE_Init+0x58>)
 800be96:	480e      	ldr	r0, [pc, #56]	; (800bed0 <MX_USB_DEVICE_Init+0x54>)
 800be98:	f7fe ff80 	bl	800ad9c <USBD_RegisterClass>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bea2:	f7f7 f8ad 	bl	8003000 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bea6:	490c      	ldr	r1, [pc, #48]	; (800bed8 <MX_USB_DEVICE_Init+0x5c>)
 800bea8:	4809      	ldr	r0, [pc, #36]	; (800bed0 <MX_USB_DEVICE_Init+0x54>)
 800beaa:	f7fe feb1 	bl	800ac10 <USBD_CDC_RegisterInterface>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d001      	beq.n	800beb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800beb4:	f7f7 f8a4 	bl	8003000 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800beb8:	4805      	ldr	r0, [pc, #20]	; (800bed0 <MX_USB_DEVICE_Init+0x54>)
 800beba:	f7fe ff88 	bl	800adce <USBD_Start>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bec4:	f7f7 f89c 	bl	8003000 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bec8:	bf00      	nop
 800beca:	bd80      	pop	{r7, pc}
 800becc:	2000012c 	.word	0x2000012c
 800bed0:	20000634 	.word	0x20000634
 800bed4:	20000018 	.word	0x20000018
 800bed8:	2000011c 	.word	0x2000011c

0800bedc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bee0:	2200      	movs	r2, #0
 800bee2:	4905      	ldr	r1, [pc, #20]	; (800bef8 <CDC_Init_FS+0x1c>)
 800bee4:	4805      	ldr	r0, [pc, #20]	; (800befc <CDC_Init_FS+0x20>)
 800bee6:	f7fe fea9 	bl	800ac3c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800beea:	4905      	ldr	r1, [pc, #20]	; (800bf00 <CDC_Init_FS+0x24>)
 800beec:	4803      	ldr	r0, [pc, #12]	; (800befc <CDC_Init_FS+0x20>)
 800beee:	f7fe febe 	bl	800ac6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bef2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	20000cf8 	.word	0x20000cf8
 800befc:	20000634 	.word	0x20000634
 800bf00:	200008f8 	.word	0x200008f8

0800bf04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf04:	b480      	push	{r7}
 800bf06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bc80      	pop	{r7}
 800bf10:	4770      	bx	lr
	...

0800bf14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	71fb      	strb	r3, [r7, #7]
 800bf20:	4613      	mov	r3, r2
 800bf22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	2b23      	cmp	r3, #35	; 0x23
 800bf28:	d84a      	bhi.n	800bfc0 <CDC_Control_FS+0xac>
 800bf2a:	a201      	add	r2, pc, #4	; (adr r2, 800bf30 <CDC_Control_FS+0x1c>)
 800bf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf30:	0800bfc1 	.word	0x0800bfc1
 800bf34:	0800bfc1 	.word	0x0800bfc1
 800bf38:	0800bfc1 	.word	0x0800bfc1
 800bf3c:	0800bfc1 	.word	0x0800bfc1
 800bf40:	0800bfc1 	.word	0x0800bfc1
 800bf44:	0800bfc1 	.word	0x0800bfc1
 800bf48:	0800bfc1 	.word	0x0800bfc1
 800bf4c:	0800bfc1 	.word	0x0800bfc1
 800bf50:	0800bfc1 	.word	0x0800bfc1
 800bf54:	0800bfc1 	.word	0x0800bfc1
 800bf58:	0800bfc1 	.word	0x0800bfc1
 800bf5c:	0800bfc1 	.word	0x0800bfc1
 800bf60:	0800bfc1 	.word	0x0800bfc1
 800bf64:	0800bfc1 	.word	0x0800bfc1
 800bf68:	0800bfc1 	.word	0x0800bfc1
 800bf6c:	0800bfc1 	.word	0x0800bfc1
 800bf70:	0800bfc1 	.word	0x0800bfc1
 800bf74:	0800bfc1 	.word	0x0800bfc1
 800bf78:	0800bfc1 	.word	0x0800bfc1
 800bf7c:	0800bfc1 	.word	0x0800bfc1
 800bf80:	0800bfc1 	.word	0x0800bfc1
 800bf84:	0800bfc1 	.word	0x0800bfc1
 800bf88:	0800bfc1 	.word	0x0800bfc1
 800bf8c:	0800bfc1 	.word	0x0800bfc1
 800bf90:	0800bfc1 	.word	0x0800bfc1
 800bf94:	0800bfc1 	.word	0x0800bfc1
 800bf98:	0800bfc1 	.word	0x0800bfc1
 800bf9c:	0800bfc1 	.word	0x0800bfc1
 800bfa0:	0800bfc1 	.word	0x0800bfc1
 800bfa4:	0800bfc1 	.word	0x0800bfc1
 800bfa8:	0800bfc1 	.word	0x0800bfc1
 800bfac:	0800bfc1 	.word	0x0800bfc1
 800bfb0:	0800bfc1 	.word	0x0800bfc1
 800bfb4:	0800bfc1 	.word	0x0800bfc1
 800bfb8:	0800bfc1 	.word	0x0800bfc1
 800bfbc:	0800bfc1 	.word	0x0800bfc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfc0:	bf00      	nop
  }

  return (USBD_OK);
 800bfc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bc80      	pop	{r7}
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop

0800bfd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bfda:	6879      	ldr	r1, [r7, #4]
 800bfdc:	4808      	ldr	r0, [pc, #32]	; (800c000 <CDC_Receive_FS+0x30>)
 800bfde:	f7fe fe46 	bl	800ac6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bfe2:	4807      	ldr	r0, [pc, #28]	; (800c000 <CDC_Receive_FS+0x30>)
 800bfe4:	f7fe fe85 	bl	800acf2 <USBD_CDC_ReceivePacket>
  USB_Packet_Received(&Buf[0], Len[0]);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7f5 fcaa 	bl	8001948 <USB_Packet_Received>
  return (USBD_OK);
 800bff4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	20000634 	.word	0x20000634

0800c004 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	460b      	mov	r3, r1
 800c00e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c014:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <CDC_Transmit_FS+0x48>)
 800c016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c01a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c026:	2301      	movs	r3, #1
 800c028:	e00b      	b.n	800c042 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c02a:	887b      	ldrh	r3, [r7, #2]
 800c02c:	461a      	mov	r2, r3
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	4806      	ldr	r0, [pc, #24]	; (800c04c <CDC_Transmit_FS+0x48>)
 800c032:	f7fe fe03 	bl	800ac3c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c036:	4805      	ldr	r0, [pc, #20]	; (800c04c <CDC_Transmit_FS+0x48>)
 800c038:	f7fe fe2c 	bl	800ac94 <USBD_CDC_TransmitPacket>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c040:	7bfb      	ldrb	r3, [r7, #15]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20000634 	.word	0x20000634

0800c050 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	6039      	str	r1, [r7, #0]
 800c05a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	2212      	movs	r2, #18
 800c060:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c062:	4b03      	ldr	r3, [pc, #12]	; (800c070 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c064:	4618      	mov	r0, r3
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	bc80      	pop	{r7}
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	20000148 	.word	0x20000148

0800c074 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	6039      	str	r1, [r7, #0]
 800c07e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2204      	movs	r2, #4
 800c084:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c086:	4b03      	ldr	r3, [pc, #12]	; (800c094 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c088:	4618      	mov	r0, r3
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bc80      	pop	{r7}
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	2000015c 	.word	0x2000015c

0800c098 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	4603      	mov	r3, r0
 800c0a0:	6039      	str	r1, [r7, #0]
 800c0a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0a4:	79fb      	ldrb	r3, [r7, #7]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d105      	bne.n	800c0b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	4907      	ldr	r1, [pc, #28]	; (800c0cc <USBD_FS_ProductStrDescriptor+0x34>)
 800c0ae:	4808      	ldr	r0, [pc, #32]	; (800c0d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0b0:	f7ff fe06 	bl	800bcc0 <USBD_GetString>
 800c0b4:	e004      	b.n	800c0c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	4904      	ldr	r1, [pc, #16]	; (800c0cc <USBD_FS_ProductStrDescriptor+0x34>)
 800c0ba:	4805      	ldr	r0, [pc, #20]	; (800c0d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0bc:	f7ff fe00 	bl	800bcc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0c0:	4b02      	ldr	r3, [pc, #8]	; (800c0cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	200010f8 	.word	0x200010f8
 800c0d0:	0800c86c 	.word	0x0800c86c

0800c0d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	6039      	str	r1, [r7, #0]
 800c0de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	4904      	ldr	r1, [pc, #16]	; (800c0f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c0e4:	4804      	ldr	r0, [pc, #16]	; (800c0f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c0e6:	f7ff fdeb 	bl	800bcc0 <USBD_GetString>
  return USBD_StrDesc;
 800c0ea:	4b02      	ldr	r3, [pc, #8]	; (800c0f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200010f8 	.word	0x200010f8
 800c0f8:	0800c880 	.word	0x0800c880

0800c0fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	6039      	str	r1, [r7, #0]
 800c106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	221a      	movs	r2, #26
 800c10c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c10e:	f000 f843 	bl	800c198 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c112:	4b02      	ldr	r3, [pc, #8]	; (800c11c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	20000160 	.word	0x20000160

0800c120 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	4603      	mov	r3, r0
 800c128:	6039      	str	r1, [r7, #0]
 800c12a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c12c:	79fb      	ldrb	r3, [r7, #7]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d105      	bne.n	800c13e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	4907      	ldr	r1, [pc, #28]	; (800c154 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c136:	4808      	ldr	r0, [pc, #32]	; (800c158 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c138:	f7ff fdc2 	bl	800bcc0 <USBD_GetString>
 800c13c:	e004      	b.n	800c148 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c13e:	683a      	ldr	r2, [r7, #0]
 800c140:	4904      	ldr	r1, [pc, #16]	; (800c154 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c142:	4805      	ldr	r0, [pc, #20]	; (800c158 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c144:	f7ff fdbc 	bl	800bcc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c148:	4b02      	ldr	r3, [pc, #8]	; (800c154 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3708      	adds	r7, #8
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	200010f8 	.word	0x200010f8
 800c158:	0800c894 	.word	0x0800c894

0800c15c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	6039      	str	r1, [r7, #0]
 800c166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c168:	79fb      	ldrb	r3, [r7, #7]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d105      	bne.n	800c17a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	4907      	ldr	r1, [pc, #28]	; (800c190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c172:	4808      	ldr	r0, [pc, #32]	; (800c194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c174:	f7ff fda4 	bl	800bcc0 <USBD_GetString>
 800c178:	e004      	b.n	800c184 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	4904      	ldr	r1, [pc, #16]	; (800c190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c17e:	4805      	ldr	r0, [pc, #20]	; (800c194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c180:	f7ff fd9e 	bl	800bcc0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c184:	4b02      	ldr	r3, [pc, #8]	; (800c190 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	200010f8 	.word	0x200010f8
 800c194:	0800c8a0 	.word	0x0800c8a0

0800c198 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c19e:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <Get_SerialNum+0x44>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1a4:	4b0e      	ldr	r3, [pc, #56]	; (800c1e0 <Get_SerialNum+0x48>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1aa:	4b0e      	ldr	r3, [pc, #56]	; (800c1e4 <Get_SerialNum+0x4c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d009      	beq.n	800c1d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1be:	2208      	movs	r2, #8
 800c1c0:	4909      	ldr	r1, [pc, #36]	; (800c1e8 <Get_SerialNum+0x50>)
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f000 f814 	bl	800c1f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1c8:	2204      	movs	r2, #4
 800c1ca:	4908      	ldr	r1, [pc, #32]	; (800c1ec <Get_SerialNum+0x54>)
 800c1cc:	68b8      	ldr	r0, [r7, #8]
 800c1ce:	f000 f80f 	bl	800c1f0 <IntToUnicode>
  }
}
 800c1d2:	bf00      	nop
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	1ffff7e8 	.word	0x1ffff7e8
 800c1e0:	1ffff7ec 	.word	0x1ffff7ec
 800c1e4:	1ffff7f0 	.word	0x1ffff7f0
 800c1e8:	20000162 	.word	0x20000162
 800c1ec:	20000172 	.word	0x20000172

0800c1f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c202:	2300      	movs	r3, #0
 800c204:	75fb      	strb	r3, [r7, #23]
 800c206:	e027      	b.n	800c258 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	0f1b      	lsrs	r3, r3, #28
 800c20c:	2b09      	cmp	r3, #9
 800c20e:	d80b      	bhi.n	800c228 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	0f1b      	lsrs	r3, r3, #28
 800c214:	b2da      	uxtb	r2, r3
 800c216:	7dfb      	ldrb	r3, [r7, #23]
 800c218:	005b      	lsls	r3, r3, #1
 800c21a:	4619      	mov	r1, r3
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	440b      	add	r3, r1
 800c220:	3230      	adds	r2, #48	; 0x30
 800c222:	b2d2      	uxtb	r2, r2
 800c224:	701a      	strb	r2, [r3, #0]
 800c226:	e00a      	b.n	800c23e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	0f1b      	lsrs	r3, r3, #28
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4619      	mov	r1, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	440b      	add	r3, r1
 800c238:	3237      	adds	r2, #55	; 0x37
 800c23a:	b2d2      	uxtb	r2, r2
 800c23c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	011b      	lsls	r3, r3, #4
 800c242:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c244:	7dfb      	ldrb	r3, [r7, #23]
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	3301      	adds	r3, #1
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	4413      	add	r3, r2
 800c24e:	2200      	movs	r2, #0
 800c250:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	3301      	adds	r3, #1
 800c256:	75fb      	strb	r3, [r7, #23]
 800c258:	7dfa      	ldrb	r2, [r7, #23]
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d3d3      	bcc.n	800c208 <IntToUnicode+0x18>
  }
}
 800c260:	bf00      	nop
 800c262:	bf00      	nop
 800c264:	371c      	adds	r7, #28
 800c266:	46bd      	mov	sp, r7
 800c268:	bc80      	pop	{r7}
 800c26a:	4770      	bx	lr

0800c26c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a0d      	ldr	r2, [pc, #52]	; (800c2b0 <HAL_PCD_MspInit+0x44>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d113      	bne.n	800c2a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c27e:	4b0d      	ldr	r3, [pc, #52]	; (800c2b4 <HAL_PCD_MspInit+0x48>)
 800c280:	69db      	ldr	r3, [r3, #28]
 800c282:	4a0c      	ldr	r2, [pc, #48]	; (800c2b4 <HAL_PCD_MspInit+0x48>)
 800c284:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c288:	61d3      	str	r3, [r2, #28]
 800c28a:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <HAL_PCD_MspInit+0x48>)
 800c28c:	69db      	ldr	r3, [r3, #28]
 800c28e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800c296:	2200      	movs	r2, #0
 800c298:	2103      	movs	r1, #3
 800c29a:	2014      	movs	r0, #20
 800c29c:	f7f7 fe3b 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c2a0:	2014      	movs	r0, #20
 800c2a2:	f7f7 fe54 	bl	8003f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c2a6:	bf00      	nop
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	40005c00 	.word	0x40005c00
 800c2b4:	40021000 	.word	0x40021000

0800c2b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	4610      	mov	r0, r2
 800c2d0:	f7fe fdc5 	bl	800ae5e <USBD_LL_SetupStage>
}
 800c2d4:	bf00      	nop
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c2ee:	78fa      	ldrb	r2, [r7, #3]
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4413      	add	r3, r2
 800c2f8:	00db      	lsls	r3, r3, #3
 800c2fa:	440b      	add	r3, r1
 800c2fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	78fb      	ldrb	r3, [r7, #3]
 800c304:	4619      	mov	r1, r3
 800c306:	f7fe fdf7 	bl	800aef8 <USBD_LL_DataOutStage>
}
 800c30a:	bf00      	nop
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	460b      	mov	r3, r1
 800c31c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c324:	78fa      	ldrb	r2, [r7, #3]
 800c326:	6879      	ldr	r1, [r7, #4]
 800c328:	4613      	mov	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	00db      	lsls	r3, r3, #3
 800c330:	440b      	add	r3, r1
 800c332:	333c      	adds	r3, #60	; 0x3c
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	78fb      	ldrb	r3, [r7, #3]
 800c338:	4619      	mov	r1, r3
 800c33a:	f7fe fe4e 	bl	800afda <USBD_LL_DataInStage>
}
 800c33e:	bf00      	nop
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b082      	sub	sp, #8
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c354:	4618      	mov	r0, r3
 800c356:	f7fe ff5e 	bl	800b216 <USBD_LL_SOF>
}
 800c35a:	bf00      	nop
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b084      	sub	sp, #16
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c36a:	2301      	movs	r3, #1
 800c36c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d001      	beq.n	800c37a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c376:	f7f6 fe43 	bl	8003000 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c380:	7bfa      	ldrb	r2, [r7, #15]
 800c382:	4611      	mov	r1, r2
 800c384:	4618      	mov	r0, r3
 800c386:	f7fe ff0e 	bl	800b1a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe fec7 	bl	800b124 <USBD_LL_Reset>
}
 800c396:	bf00      	nop
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
	...

0800c3a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe ff08 	bl	800b1c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d005      	beq.n	800c3c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3bc:	4b04      	ldr	r3, [pc, #16]	; (800c3d0 <HAL_PCD_SuspendCallback+0x30>)
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	4a03      	ldr	r2, [pc, #12]	; (800c3d0 <HAL_PCD_SuspendCallback+0x30>)
 800c3c2:	f043 0306 	orr.w	r3, r3, #6
 800c3c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3c8:	bf00      	nop
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	e000ed00 	.word	0xe000ed00

0800c3d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe ff02 	bl	800b1ec <USBD_LL_Resume>
}
 800c3e8:	bf00      	nop
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c3f8:	4a28      	ldr	r2, [pc, #160]	; (800c49c <USBD_LL_Init+0xac>)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a26      	ldr	r2, [pc, #152]	; (800c49c <USBD_LL_Init+0xac>)
 800c404:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c408:	4b24      	ldr	r3, [pc, #144]	; (800c49c <USBD_LL_Init+0xac>)
 800c40a:	4a25      	ldr	r2, [pc, #148]	; (800c4a0 <USBD_LL_Init+0xb0>)
 800c40c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c40e:	4b23      	ldr	r3, [pc, #140]	; (800c49c <USBD_LL_Init+0xac>)
 800c410:	2208      	movs	r2, #8
 800c412:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c414:	4b21      	ldr	r3, [pc, #132]	; (800c49c <USBD_LL_Init+0xac>)
 800c416:	2202      	movs	r2, #2
 800c418:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c41a:	4b20      	ldr	r3, [pc, #128]	; (800c49c <USBD_LL_Init+0xac>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c420:	4b1e      	ldr	r3, [pc, #120]	; (800c49c <USBD_LL_Init+0xac>)
 800c422:	2200      	movs	r2, #0
 800c424:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c426:	4b1d      	ldr	r3, [pc, #116]	; (800c49c <USBD_LL_Init+0xac>)
 800c428:	2200      	movs	r2, #0
 800c42a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c42c:	481b      	ldr	r0, [pc, #108]	; (800c49c <USBD_LL_Init+0xac>)
 800c42e:	f7f8 f9c3 	bl	80047b8 <HAL_PCD_Init>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c438:	f7f6 fde2 	bl	8003000 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c442:	2318      	movs	r3, #24
 800c444:	2200      	movs	r2, #0
 800c446:	2100      	movs	r1, #0
 800c448:	f7f9 fe37 	bl	80060ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c452:	2358      	movs	r3, #88	; 0x58
 800c454:	2200      	movs	r2, #0
 800c456:	2180      	movs	r1, #128	; 0x80
 800c458:	f7f9 fe2f 	bl	80060ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c462:	23c0      	movs	r3, #192	; 0xc0
 800c464:	2200      	movs	r2, #0
 800c466:	2181      	movs	r1, #129	; 0x81
 800c468:	f7f9 fe27 	bl	80060ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c472:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c476:	2200      	movs	r2, #0
 800c478:	2101      	movs	r1, #1
 800c47a:	f7f9 fe1e 	bl	80060ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c484:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c488:	2200      	movs	r2, #0
 800c48a:	2182      	movs	r1, #130	; 0x82
 800c48c:	f7f9 fe15 	bl	80060ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	200012f8 	.word	0x200012f8
 800c4a0:	40005c00 	.word	0x40005c00

0800c4a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7f8 fa87 	bl	80049ce <HAL_PCD_Start>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 f94e 	bl	800c768 <USBD_Get_USB_Status>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b084      	sub	sp, #16
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	70fb      	strb	r3, [r7, #3]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70bb      	strb	r3, [r7, #2]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c502:	78bb      	ldrb	r3, [r7, #2]
 800c504:	883a      	ldrh	r2, [r7, #0]
 800c506:	78f9      	ldrb	r1, [r7, #3]
 800c508:	f7f8 fbff 	bl	8004d0a <HAL_PCD_EP_Open>
 800c50c:	4603      	mov	r3, r0
 800c50e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c510:	7bfb      	ldrb	r3, [r7, #15]
 800c512:	4618      	mov	r0, r3
 800c514:	f000 f928 	bl	800c768 <USBD_Get_USB_Status>
 800c518:	4603      	mov	r3, r0
 800c51a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c51c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	460b      	mov	r3, r1
 800c530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c540:	78fa      	ldrb	r2, [r7, #3]
 800c542:	4611      	mov	r1, r2
 800c544:	4618      	mov	r0, r3
 800c546:	f7f8 fc46 	bl	8004dd6 <HAL_PCD_EP_Close>
 800c54a:	4603      	mov	r3, r0
 800c54c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c54e:	7bfb      	ldrb	r3, [r7, #15]
 800c550:	4618      	mov	r0, r3
 800c552:	f000 f909 	bl	800c768 <USBD_Get_USB_Status>
 800c556:	4603      	mov	r3, r0
 800c558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c57e:	78fa      	ldrb	r2, [r7, #3]
 800c580:	4611      	mov	r1, r2
 800c582:	4618      	mov	r0, r3
 800c584:	f7f8 fd06 	bl	8004f94 <HAL_PCD_EP_SetStall>
 800c588:	4603      	mov	r3, r0
 800c58a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 f8ea 	bl	800c768 <USBD_Get_USB_Status>
 800c594:	4603      	mov	r3, r0
 800c596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c598:	7bbb      	ldrb	r3, [r7, #14]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b084      	sub	sp, #16
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5bc:	78fa      	ldrb	r2, [r7, #3]
 800c5be:	4611      	mov	r1, r2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7f8 fd47 	bl	8005054 <HAL_PCD_EP_ClrStall>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 f8cb 	bl	800c768 <USBD_Get_USB_Status>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c5f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	da0c      	bge.n	800c616 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c5fc:	78fb      	ldrb	r3, [r7, #3]
 800c5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c602:	68f9      	ldr	r1, [r7, #12]
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	4613      	mov	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	00db      	lsls	r3, r3, #3
 800c60e:	440b      	add	r3, r1
 800c610:	3302      	adds	r3, #2
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	e00b      	b.n	800c62e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c616:	78fb      	ldrb	r3, [r7, #3]
 800c618:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c61c:	68f9      	ldr	r1, [r7, #12]
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	440b      	add	r3, r1
 800c628:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c62c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	bc80      	pop	{r7}
 800c636:	4770      	bx	lr

0800c638 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c648:	2300      	movs	r3, #0
 800c64a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c652:	78fa      	ldrb	r2, [r7, #3]
 800c654:	4611      	mov	r1, r2
 800c656:	4618      	mov	r0, r3
 800c658:	f7f8 fb32 	bl	8004cc0 <HAL_PCD_SetAddress>
 800c65c:	4603      	mov	r3, r0
 800c65e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c660:	7bfb      	ldrb	r3, [r7, #15]
 800c662:	4618      	mov	r0, r3
 800c664:	f000 f880 	bl	800c768 <USBD_Get_USB_Status>
 800c668:	4603      	mov	r3, r0
 800c66a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c66c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b086      	sub	sp, #24
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	60f8      	str	r0, [r7, #12]
 800c67e:	607a      	str	r2, [r7, #4]
 800c680:	461a      	mov	r2, r3
 800c682:	460b      	mov	r3, r1
 800c684:	72fb      	strb	r3, [r7, #11]
 800c686:	4613      	mov	r3, r2
 800c688:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c698:	893b      	ldrh	r3, [r7, #8]
 800c69a:	7af9      	ldrb	r1, [r7, #11]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	f7f8 fc36 	bl	8004f0e <HAL_PCD_EP_Transmit>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 f85d 	bl	800c768 <USBD_Get_USB_Status>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	607a      	str	r2, [r7, #4]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	72fb      	strb	r3, [r7, #11]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6de:	893b      	ldrh	r3, [r7, #8]
 800c6e0:	7af9      	ldrb	r1, [r7, #11]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	f7f8 fbbf 	bl	8004e66 <HAL_PCD_EP_Receive>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f000 f83a 	bl	800c768 <USBD_Get_USB_Status>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b082      	sub	sp, #8
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	460b      	mov	r3, r1
 800c70c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c714:	78fa      	ldrb	r2, [r7, #3]
 800c716:	4611      	mov	r1, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f7f8 fbe1 	bl	8004ee0 <HAL_PCD_EP_GetRxCount>
 800c71e:	4603      	mov	r3, r0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c730:	4b02      	ldr	r3, [pc, #8]	; (800c73c <USBD_static_malloc+0x14>)
}
 800c732:	4618      	mov	r0, r3
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	bc80      	pop	{r7}
 800c73a:	4770      	bx	lr
 800c73c:	200015e4 	.word	0x200015e4

0800c740 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]

}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bc80      	pop	{r7}
 800c750:	4770      	bx	lr

0800c752 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c752:	b480      	push	{r7}
 800c754:	b083      	sub	sp, #12
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	460b      	mov	r3, r1
 800c75c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c75e:	bf00      	nop
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	bc80      	pop	{r7}
 800c766:	4770      	bx	lr

0800c768 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4603      	mov	r3, r0
 800c770:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c776:	79fb      	ldrb	r3, [r7, #7]
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d817      	bhi.n	800c7ac <USBD_Get_USB_Status+0x44>
 800c77c:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <USBD_Get_USB_Status+0x1c>)
 800c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c782:	bf00      	nop
 800c784:	0800c795 	.word	0x0800c795
 800c788:	0800c79b 	.word	0x0800c79b
 800c78c:	0800c7a1 	.word	0x0800c7a1
 800c790:	0800c7a7 	.word	0x0800c7a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
    break;
 800c798:	e00b      	b.n	800c7b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c79a:	2302      	movs	r3, #2
 800c79c:	73fb      	strb	r3, [r7, #15]
    break;
 800c79e:	e008      	b.n	800c7b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a4:	e005      	b.n	800c7b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7aa:	e002      	b.n	800c7b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b0:	bf00      	nop
  }
  return usb_status;
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bc80      	pop	{r7}
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop

0800c7c0 <__libc_init_array>:
 800c7c0:	b570      	push	{r4, r5, r6, lr}
 800c7c2:	2600      	movs	r6, #0
 800c7c4:	4d0c      	ldr	r5, [pc, #48]	; (800c7f8 <__libc_init_array+0x38>)
 800c7c6:	4c0d      	ldr	r4, [pc, #52]	; (800c7fc <__libc_init_array+0x3c>)
 800c7c8:	1b64      	subs	r4, r4, r5
 800c7ca:	10a4      	asrs	r4, r4, #2
 800c7cc:	42a6      	cmp	r6, r4
 800c7ce:	d109      	bne.n	800c7e4 <__libc_init_array+0x24>
 800c7d0:	f000 f830 	bl	800c834 <_init>
 800c7d4:	2600      	movs	r6, #0
 800c7d6:	4d0a      	ldr	r5, [pc, #40]	; (800c800 <__libc_init_array+0x40>)
 800c7d8:	4c0a      	ldr	r4, [pc, #40]	; (800c804 <__libc_init_array+0x44>)
 800c7da:	1b64      	subs	r4, r4, r5
 800c7dc:	10a4      	asrs	r4, r4, #2
 800c7de:	42a6      	cmp	r6, r4
 800c7e0:	d105      	bne.n	800c7ee <__libc_init_array+0x2e>
 800c7e2:	bd70      	pop	{r4, r5, r6, pc}
 800c7e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7e8:	4798      	blx	r3
 800c7ea:	3601      	adds	r6, #1
 800c7ec:	e7ee      	b.n	800c7cc <__libc_init_array+0xc>
 800c7ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7f2:	4798      	blx	r3
 800c7f4:	3601      	adds	r6, #1
 800c7f6:	e7f2      	b.n	800c7de <__libc_init_array+0x1e>
 800c7f8:	0800c90c 	.word	0x0800c90c
 800c7fc:	0800c90c 	.word	0x0800c90c
 800c800:	0800c90c 	.word	0x0800c90c
 800c804:	0800c910 	.word	0x0800c910

0800c808 <memcpy>:
 800c808:	440a      	add	r2, r1
 800c80a:	4291      	cmp	r1, r2
 800c80c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c810:	d100      	bne.n	800c814 <memcpy+0xc>
 800c812:	4770      	bx	lr
 800c814:	b510      	push	{r4, lr}
 800c816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c81a:	4291      	cmp	r1, r2
 800c81c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c820:	d1f9      	bne.n	800c816 <memcpy+0xe>
 800c822:	bd10      	pop	{r4, pc}

0800c824 <memset>:
 800c824:	4603      	mov	r3, r0
 800c826:	4402      	add	r2, r0
 800c828:	4293      	cmp	r3, r2
 800c82a:	d100      	bne.n	800c82e <memset+0xa>
 800c82c:	4770      	bx	lr
 800c82e:	f803 1b01 	strb.w	r1, [r3], #1
 800c832:	e7f9      	b.n	800c828 <memset+0x4>

0800c834 <_init>:
 800c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c836:	bf00      	nop
 800c838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83a:	bc08      	pop	{r3}
 800c83c:	469e      	mov	lr, r3
 800c83e:	4770      	bx	lr

0800c840 <_fini>:
 800c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c842:	bf00      	nop
 800c844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c846:	bc08      	pop	{r3}
 800c848:	469e      	mov	lr, r3
 800c84a:	4770      	bx	lr
