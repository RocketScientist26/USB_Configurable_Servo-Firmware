
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800ca00  0800ca00  0001ca00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca7c  0800ca7c  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca7c  0800ca7c  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca7c  0800ca7c  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca7c  0800ca7c  0001ca7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca80  0800ca80  0001ca80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800ca84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014cc  200001a8  0800cc28  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800cc28  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b66  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049fb  00000000  00000000  00038d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003d730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  0003eca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d474  00000000  00000000  0003ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d3ad  00000000  00000000  0005d444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ee1  00000000  00000000  0007a7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e6d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005760  00000000  00000000  0010e724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a8 	.word	0x200001a8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c9e8 	.word	0x0800c9e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ac 	.word	0x200001ac
 800014c:	0800c9e8 	.word	0x0800c9e8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_frsub>:
 80009fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	e002      	b.n	8000a08 <__addsf3>
 8000a02:	bf00      	nop

08000a04 <__aeabi_fsub>:
 8000a04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a08 <__addsf3>:
 8000a08:	0042      	lsls	r2, r0, #1
 8000a0a:	bf1f      	itttt	ne
 8000a0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a10:	ea92 0f03 	teqne	r2, r3
 8000a14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a1c:	d06a      	beq.n	8000af4 <__addsf3+0xec>
 8000a1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a26:	bfc1      	itttt	gt
 8000a28:	18d2      	addgt	r2, r2, r3
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	4048      	eorgt	r0, r1
 8000a2e:	4041      	eorgt	r1, r0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	2b19      	cmp	r3, #25
 8000a36:	bf88      	it	hi
 8000a38:	4770      	bxhi	lr
 8000a3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4249      	negne	r1, r1
 8000a5a:	ea92 0f03 	teq	r2, r3
 8000a5e:	d03f      	beq.n	8000ae0 <__addsf3+0xd8>
 8000a60:	f1a2 0201 	sub.w	r2, r2, #1
 8000a64:	fa41 fc03 	asr.w	ip, r1, r3
 8000a68:	eb10 000c 	adds.w	r0, r0, ip
 8000a6c:	f1c3 0320 	rsb	r3, r3, #32
 8000a70:	fa01 f103 	lsl.w	r1, r1, r3
 8000a74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__addsf3+0x78>
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a84:	d313      	bcc.n	8000aae <__addsf3+0xa6>
 8000a86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8a:	d306      	bcc.n	8000a9a <__addsf3+0x92>
 8000a8c:	0840      	lsrs	r0, r0, #1
 8000a8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a92:	f102 0201 	add.w	r2, r2, #1
 8000a96:	2afe      	cmp	r2, #254	; 0xfe
 8000a98:	d251      	bcs.n	8000b3e <__addsf3+0x136>
 8000a9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa2:	bf08      	it	eq
 8000aa4:	f020 0001 	biceq.w	r0, r0, #1
 8000aa8:	ea40 0003 	orr.w	r0, r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	0049      	lsls	r1, r1, #1
 8000ab0:	eb40 0000 	adc.w	r0, r0, r0
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000abc:	d2ed      	bcs.n	8000a9a <__addsf3+0x92>
 8000abe:	fab0 fc80 	clz	ip, r0
 8000ac2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ace:	bfaa      	itet	ge
 8000ad0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad4:	4252      	neglt	r2, r2
 8000ad6:	4318      	orrge	r0, r3
 8000ad8:	bfbc      	itt	lt
 8000ada:	40d0      	lsrlt	r0, r2
 8000adc:	4318      	orrlt	r0, r3
 8000ade:	4770      	bx	lr
 8000ae0:	f092 0f00 	teq	r2, #0
 8000ae4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae8:	bf06      	itte	eq
 8000aea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aee:	3201      	addeq	r2, #1
 8000af0:	3b01      	subne	r3, #1
 8000af2:	e7b5      	b.n	8000a60 <__addsf3+0x58>
 8000af4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000afc:	bf18      	it	ne
 8000afe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b02:	d021      	beq.n	8000b48 <__addsf3+0x140>
 8000b04:	ea92 0f03 	teq	r2, r3
 8000b08:	d004      	beq.n	8000b14 <__addsf3+0x10c>
 8000b0a:	f092 0f00 	teq	r2, #0
 8000b0e:	bf08      	it	eq
 8000b10:	4608      	moveq	r0, r1
 8000b12:	4770      	bx	lr
 8000b14:	ea90 0f01 	teq	r0, r1
 8000b18:	bf1c      	itt	ne
 8000b1a:	2000      	movne	r0, #0
 8000b1c:	4770      	bxne	lr
 8000b1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b22:	d104      	bne.n	8000b2e <__addsf3+0x126>
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	bf28      	it	cs
 8000b28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	4770      	bx	lr
 8000b2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b32:	bf3c      	itt	cc
 8000b34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bxcc	lr
 8000b3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b4c:	bf16      	itet	ne
 8000b4e:	4608      	movne	r0, r1
 8000b50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b54:	4601      	movne	r1, r0
 8000b56:	0242      	lsls	r2, r0, #9
 8000b58:	bf06      	itte	eq
 8000b5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5e:	ea90 0f01 	teqeq	r0, r1
 8000b62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_ui2f>:
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e004      	b.n	8000b78 <__aeabi_i2f+0x8>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_i2f>:
 8000b70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b74:	bf48      	it	mi
 8000b76:	4240      	negmi	r0, r0
 8000b78:	ea5f 0c00 	movs.w	ip, r0
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b84:	4601      	mov	r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	e01c      	b.n	8000bc6 <__aeabi_l2f+0x2a>

08000b8c <__aeabi_ul2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e00a      	b.n	8000bb0 <__aeabi_l2f+0x14>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_l2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__aeabi_l2f+0x14>
 8000baa:	4240      	negs	r0, r0
 8000bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb0:	ea5f 0c01 	movs.w	ip, r1
 8000bb4:	bf02      	ittt	eq
 8000bb6:	4684      	moveq	ip, r0
 8000bb8:	4601      	moveq	r1, r0
 8000bba:	2000      	moveq	r0, #0
 8000bbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bca:	fabc f28c 	clz	r2, ip
 8000bce:	3a08      	subs	r2, #8
 8000bd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd4:	db10      	blt.n	8000bf8 <__aeabi_l2f+0x5c>
 8000bd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bda:	4463      	add	r3, ip
 8000bdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f102 0220 	add.w	r2, r2, #32
 8000bfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c08:	fa21 f202 	lsr.w	r2, r1, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_fmul>:
 8000c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c20:	bf1e      	ittt	ne
 8000c22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c26:	ea92 0f0c 	teqne	r2, ip
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d06f      	beq.n	8000d10 <__aeabi_fmul+0xf8>
 8000c30:	441a      	add	r2, r3
 8000c32:	ea80 0c01 	eor.w	ip, r0, r1
 8000c36:	0240      	lsls	r0, r0, #9
 8000c38:	bf18      	it	ne
 8000c3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3e:	d01e      	beq.n	8000c7e <__aeabi_fmul+0x66>
 8000c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c58:	bf3e      	ittt	cc
 8000c5a:	0049      	lslcc	r1, r1, #1
 8000c5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c60:	005b      	lslcc	r3, r3, #1
 8000c62:	ea40 0001 	orr.w	r0, r0, r1
 8000c66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c6a:	2afd      	cmp	r2, #253	; 0xfd
 8000c6c:	d81d      	bhi.n	8000caa <__aeabi_fmul+0x92>
 8000c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c86:	bf08      	it	eq
 8000c88:	0249      	lsleq	r1, r1, #9
 8000c8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	bfc2      	ittt	gt
 8000c96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9e:	4770      	bxgt	lr
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	dc5d      	bgt.n	8000d68 <__aeabi_fmul+0x150>
 8000cac:	f112 0f19 	cmn.w	r2, #25
 8000cb0:	bfdc      	itt	le
 8000cb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bxle	lr
 8000cb8:	f1c2 0200 	rsb	r2, r2, #0
 8000cbc:	0041      	lsls	r1, r0, #1
 8000cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000cc2:	f1c2 0220 	rsb	r2, r2, #32
 8000cc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cce:	f140 0000 	adc.w	r0, r0, #0
 8000cd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd6:	bf08      	it	eq
 8000cd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cdc:	4770      	bx	lr
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0040      	lsleq	r0, r0, #1
 8000cea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cee:	3a01      	subeq	r2, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fmul+0xce>
 8000cf2:	ea40 000c 	orr.w	r0, r0, ip
 8000cf6:	f093 0f00 	teq	r3, #0
 8000cfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0049      	lsleq	r1, r1, #1
 8000d02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d06:	3b01      	subeq	r3, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xe6>
 8000d0a:	ea41 010c 	orr.w	r1, r1, ip
 8000d0e:	e78f      	b.n	8000c30 <__aeabi_fmul+0x18>
 8000d10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	bf18      	it	ne
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d00a      	beq.n	8000d36 <__aeabi_fmul+0x11e>
 8000d20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d24:	bf18      	it	ne
 8000d26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	d1d8      	bne.n	8000cde <__aeabi_fmul+0xc6>
 8000d2c:	ea80 0001 	eor.w	r0, r0, r1
 8000d30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	bf17      	itett	ne
 8000d3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d40:	4608      	moveq	r0, r1
 8000d42:	f091 0f00 	teqne	r1, #0
 8000d46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d4a:	d014      	beq.n	8000d76 <__aeabi_fmul+0x15e>
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fmul+0x13e>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d10f      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d56:	ea93 0f0c 	teq	r3, ip
 8000d5a:	d103      	bne.n	8000d64 <__aeabi_fmul+0x14c>
 8000d5c:	024b      	lsls	r3, r1, #9
 8000d5e:	bf18      	it	ne
 8000d60:	4608      	movne	r0, r1
 8000d62:	d108      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fdiv>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d069      	beq.n	8000e6c <__aeabi_fdiv+0xec>
 8000d98:	eba2 0203 	sub.w	r2, r2, r3
 8000d9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000da0:	0249      	lsls	r1, r1, #9
 8000da2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da6:	d037      	beq.n	8000e18 <__aeabi_fdiv+0x98>
 8000da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	428b      	cmp	r3, r1
 8000dba:	bf38      	it	cc
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	bf24      	itt	cs
 8000dca:	1a5b      	subcs	r3, r3, r1
 8000dcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd4:	bf24      	itt	cs
 8000dd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000de2:	bf24      	itt	cs
 8000de4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df0:	bf24      	itt	cs
 8000df2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	bf18      	it	ne
 8000dfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e02:	d1e0      	bne.n	8000dc6 <__aeabi_fdiv+0x46>
 8000e04:	2afd      	cmp	r2, #253	; 0xfd
 8000e06:	f63f af50 	bhi.w	8000caa <__aeabi_fmul+0x92>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e20:	327f      	adds	r2, #127	; 0x7f
 8000e22:	bfc2      	ittt	gt
 8000e24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2c:	4770      	bxgt	lr
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	3a01      	subs	r2, #1
 8000e38:	e737      	b.n	8000caa <__aeabi_fmul+0x92>
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fdiv+0xc2>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xda>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e795      	b.n	8000d98 <__aeabi_fdiv+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d108      	bne.n	8000e88 <__aeabi_fdiv+0x108>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	f47f af7d 	bne.w	8000d76 <__aeabi_fmul+0x15e>
 8000e7c:	ea93 0f0c 	teq	r3, ip
 8000e80:	f47f af70 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e776      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e88:	ea93 0f0c 	teq	r3, ip
 8000e8c:	d104      	bne.n	8000e98 <__aeabi_fdiv+0x118>
 8000e8e:	024b      	lsls	r3, r1, #9
 8000e90:	f43f af4c 	beq.w	8000d2c <__aeabi_fmul+0x114>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e76e      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1ca      	bne.n	8000e3a <__aeabi_fdiv+0xba>
 8000ea4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea8:	f47f af5c 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000eac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb0:	f47f af3c 	bne.w	8000d2c <__aeabi_fmul+0x114>
 8000eb4:	e75f      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000eb6:	bf00      	nop

08000eb8 <__gesf2>:
 8000eb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ebc:	e006      	b.n	8000ecc <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__lesf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	e002      	b.n	8000ecc <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__cmpsf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	bf18      	it	ne
 8000ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ee2:	d011      	beq.n	8000f08 <__cmpsf2+0x40>
 8000ee4:	b001      	add	sp, #4
 8000ee6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eea:	bf18      	it	ne
 8000eec:	ea90 0f01 	teqne	r0, r1
 8000ef0:	bf58      	it	pl
 8000ef2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef6:	bf88      	it	hi
 8000ef8:	17c8      	asrhi	r0, r1, #31
 8000efa:	bf38      	it	cc
 8000efc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f00:	bf18      	it	ne
 8000f02:	f040 0001 	orrne.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__cmpsf2+0x4c>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d105      	bne.n	8000f20 <__cmpsf2+0x58>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d1e4      	bne.n	8000ee4 <__cmpsf2+0x1c>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d0e1      	beq.n	8000ee4 <__cmpsf2+0x1c>
 8000f20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__aeabi_cfrcmple>:
 8000f28:	4684      	mov	ip, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4661      	mov	r1, ip
 8000f2e:	e7ff      	b.n	8000f30 <__aeabi_cfcmpeq>

08000f30 <__aeabi_cfcmpeq>:
 8000f30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f32:	f7ff ffc9 	bl	8000ec8 <__cmpsf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	bf48      	it	mi
 8000f3a:	f110 0f00 	cmnmi.w	r0, #0
 8000f3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f40 <__aeabi_fcmpeq>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff fff4 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f48:	bf0c      	ite	eq
 8000f4a:	2001      	moveq	r0, #1
 8000f4c:	2000      	movne	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmplt>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffea 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f5c:	bf34      	ite	cc
 8000f5e:	2001      	movcc	r0, #1
 8000f60:	2000      	movcs	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmple>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffe0 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f70:	bf94      	ite	ls
 8000f72:	2001      	movls	r0, #1
 8000f74:	2000      	movhi	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmpge>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffd2 	bl	8000f28 <__aeabi_cfrcmple>
 8000f84:	bf94      	ite	ls
 8000f86:	2001      	movls	r0, #1
 8000f88:	2000      	movhi	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmpgt>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffc8 	bl	8000f28 <__aeabi_cfrcmple>
 8000f98:	bf34      	ite	cc
 8000f9a:	2001      	movcc	r0, #1
 8000f9c:	2000      	movcs	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2iz>:
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30f      	bcc.n	8000fce <__aeabi_f2iz+0x2a>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d90d      	bls.n	8000fd4 <__aeabi_f2iz+0x30>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	bf18      	it	ne
 8000fca:	4240      	negne	r0, r0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2iz+0x3a>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d105      	bne.n	8000fea <__aeabi_f2iz+0x46>
 8000fde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe2:	bf08      	it	eq
 8000fe4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr

08000ff0 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <Potentiometer_Ready+0x80>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <Potentiometer_Ready+0x84>)
 8000ffa:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <Potentiometer_Ready+0x88>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d133      	bne.n	800106c <Potentiometer_Ready+0x7c>
		if(motor_running){
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <Potentiometer_Ready+0x8c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02f      	beq.n	800106c <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <Potentiometer_Ready+0x90>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fdad 	bl	8000b70 <__aeabi_i2f>
 8001016:	4602      	mov	r2, r0
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <Potentiometer_Ready+0x80>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f7ff ffac 	bl	8000f7c <__aeabi_fcmpge>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <Potentiometer_Ready+0x4c>
 800102a:	f000 fb1f 	bl	800166c <Motor_Get>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	da03      	bge.n	800103c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 fab1 	bl	800159c <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800103a:	e017      	b.n	800106c <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <Potentiometer_Ready+0x94>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fd95 	bl	8000b70 <__aeabi_i2f>
 8001046:	4602      	mov	r2, r0
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <Potentiometer_Ready+0x80>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f7ff ff8a 	bl	8000f68 <__aeabi_fcmple>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d100      	bne.n	800105c <Potentiometer_Ready+0x6c>
}
 800105a:	e007      	b.n	800106c <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800105c:	f000 fb06 	bl	800166c <Motor_Get>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	dd02      	ble.n	800106c <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 fa98 	bl	800159c <Motor_Set>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200001f8 	.word	0x200001f8
 8001074:	200001dc 	.word	0x200001dc
 8001078:	200001d8 	.word	0x200001d8
 800107c:	200001c8 	.word	0x200001c8
 8001080:	200001ec 	.word	0x200001ec
 8001084:	200001ee 	.word	0x200001ee

08001088 <PID_Ready>:
void PID_Ready(float output){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff87 	bl	8000fa4 <__aeabi_f2iz>
 8001096:	4603      	mov	r3, r0
 8001098:	b21b      	sxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa7e 	bl	800159c <Motor_Set>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <App_Init>:

void App_Init(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	Settings_Read();
 80010ac:	f000 fde0 	bl	8001c70 <Settings_Read>
	USB_Init();
 80010b0:	f001 fb84 	bl	80027bc <USB_Init>
	Signal_Init();
 80010b4:	f001 fb2c 	bl	8002710 <Signal_Init>
	Potentiometer_Init();
 80010b8:	f000 fdc2 	bl	8001c40 <Potentiometer_Init>
	Motor_Init();
 80010bc:	f000 fb14 	bl	80016e8 <Motor_Init>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <App_Loop>:
void App_Loop(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	switch(usb_rq){
 80010c8:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <App_Loop+0xf8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d002      	beq.n	80010d6 <App_Loop+0x12>
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d019      	beq.n	8001108 <App_Loop+0x44>
 80010d4:	e06e      	b.n	80011b4 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <App_Loop+0xfc>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d105      	bne.n	80010ea <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 80010de:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <App_Loop+0xfc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 80010e4:	f000 fdc4 	bl	8001c70 <Settings_Read>
 80010e8:	e008      	b.n	80010fc <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <App_Loop+0xfc>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d104      	bne.n	80010fc <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <App_Loop+0xfc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 80010f8:	f001 f890 	bl	800221c <Settings_Write>
			}
			USB_Send_Config();
 80010fc:	f001 fbf0 	bl	80028e0 <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <App_Loop+0xf8>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
		break;
 8001106:	e055      	b.n	80011b4 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <App_Loop+0x100>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d033      	beq.n	8001178 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <App_Loop+0x100>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d112      	bne.n	800113e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <App_Loop+0x104>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd27 	bl	8000b70 <__aeabi_i2f>
 8001122:	4602      	mov	r2, r0
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <App_Loop+0x108>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f7ff ff12 	bl	8000f54 <__aeabi_fcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01a      	beq.n	800116c <App_Loop+0xa8>
						Motor_Set(-1000);
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <App_Loop+0x10c>)
 8001138:	f000 fa30 	bl	800159c <Motor_Set>
 800113c:	e016      	b.n	800116c <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <App_Loop+0x100>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d112      	bne.n	800116c <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <App_Loop+0x110>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fd10 	bl	8000b70 <__aeabi_i2f>
 8001150:	4602      	mov	r2, r0
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <App_Loop+0x108>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff19 	bl	8000f90 <__aeabi_fcmpgt>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <App_Loop+0xa8>
						Motor_Set(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f000 fa18 	bl	800159c <Motor_Set>
					}
				}
				motor_systick = 0;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <App_Loop+0x114>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <App_Loop+0x100>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <App_Loop+0x118>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d109      	bne.n	8001194 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <App_Loop+0x118>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <App_Loop+0x11c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <App_Loop+0xe4>
					PID_Start();
 800118e:	f000 fce9 	bl	8001b64 <PID_Start>
 8001192:	e009      	b.n	80011a8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <App_Loop+0x120>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <App_Loop+0xe4>
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <App_Loop+0x11c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <App_Loop+0xe4>
				PID_Stop();
 80011a4:	f000 fd00 	bl	8001ba8 <PID_Stop>
			}
			USB_Send_Status();
 80011a8:	f001 fd68 	bl	8002c7c <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <App_Loop+0xf8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
		break;
 80011b2:	bf00      	nop
	}
	LED_Update();
 80011b4:	f000 f992 	bl	80014dc <LED_Update>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000250 	.word	0x20000250
 80011c0:	20000251 	.word	0x20000251
 80011c4:	20000252 	.word	0x20000252
 80011c8:	200001ec 	.word	0x200001ec
 80011cc:	200001f8 	.word	0x200001f8
 80011d0:	fffffc18 	.word	0xfffffc18
 80011d4:	200001ee 	.word	0x200001ee
 80011d8:	200001c9 	.word	0x200001c9
 80011dc:	20000253 	.word	0x20000253
 80011e0:	200001d8 	.word	0x200001d8
 80011e4:	2000023c 	.word	0x2000023c

080011e8 <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
	while(i != length){
 80011f8:	e00b      	b.n	8001212 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4413      	add	r3, r2
 8001200:	4619      	mov	r1, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	780a      	ldrb	r2, [r1, #0]
 800120a:	701a      	strb	r2, [r3, #0]
		i++;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d1ef      	bne.n	80011fa <Flash_Read+0x12>
	}
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8001226:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8001244:	f003 f846 	bl	80042d4 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8001248:	f107 0210 	add.w	r2, r7, #16
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f926 	bl	80044a4 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	b29a      	uxth	r2, r3
 8001262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	b29b      	uxth	r3, r3
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8001270:	e027      	b.n	80012c2 <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 8001272:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 8001278:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800127a:	3303      	adds	r3, #3
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 8001284:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001286:	3302      	adds	r3, #2
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	440b      	add	r3, r1
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 8001290:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 8001292:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001294:	3301      	adds	r3, #1
 8001296:	68f9      	ldr	r1, [r7, #12]
 8001298:	440b      	add	r3, r1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 800129e:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80012a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012a2:	68f9      	ldr	r1, [r7, #12]
 80012a4:	440a      	add	r2, r1
 80012a6:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80012a8:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80012aa:	2200      	movs	r2, #0
 80012ac:	4698      	mov	r8, r3
 80012ae:	4691      	mov	r9, r2
 80012b0:	4642      	mov	r2, r8
 80012b2:	464b      	mov	r3, r9
 80012b4:	4601      	mov	r1, r0
 80012b6:	2002      	movs	r0, #2
 80012b8:	f002 ff9c 	bl	80041f4 <HAL_FLASH_Program>
		);
		i+=4;
 80012bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012be:	3304      	adds	r3, #4
 80012c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80012c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d1d2      	bne.n	8001272 <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 80012cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d03f      	beq.n	8001352 <Flash_Write+0x12c>
		uint32_t wdata = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 80012d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d114      	bne.n	8001306 <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 80012dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012de:	3302      	adds	r3, #2
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	061a      	lsls	r2, r3, #24
 80012e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012ea:	3301      	adds	r3, #1
 80012ec:	68f9      	ldr	r1, [r7, #12]
 80012ee:	440b      	add	r3, r1
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	431a      	orrs	r2, r3
 80012f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	440b      	add	r3, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4313      	orrs	r3, r2
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
 8001304:	e019      	b.n	800133a <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 8001306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001308:	2b02      	cmp	r3, #2
 800130a:	d10d      	bne.n	8001328 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 800130c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800130e:	3301      	adds	r3, #1
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	061a      	lsls	r2, r3, #24
 8001318:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	440b      	add	r3, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	041b      	lsls	r3, r3, #16
 8001322:	4313      	orrs	r3, r2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
 8001326:	e008      	b.n	800133a <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8001328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800132a:	2b01      	cmp	r3, #1
 800132c:	d105      	bne.n	800133a <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 800132e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	061b      	lsls	r3, r3, #24
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 800133a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	18d1      	adds	r1, r2, r3
 8001340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001342:	2200      	movs	r2, #0
 8001344:	461c      	mov	r4, r3
 8001346:	4615      	mov	r5, r2
 8001348:	4622      	mov	r2, r4
 800134a:	462b      	mov	r3, r5
 800134c:	2002      	movs	r0, #2
 800134e:	f002 ff51 	bl	80041f4 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8001352:	f002 ffe5 	bl	8004320 <HAL_FLASH_Lock>
}
 8001356:	bf00      	nop
 8001358:	3730      	adds	r7, #48	; 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001360 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 800136e:	e00b      	b.n	8001388 <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	4619      	mov	r1, r3
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	780a      	ldrb	r2, [r1, #0]
 8001380:	701a      	strb	r2, [r3, #0]
		i++;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	3301      	adds	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b04      	cmp	r3, #4
 800138c:	d1f0      	bne.n	8001370 <General_Copy_32_Bit+0x10>
	}
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 80013a8:	e00b      	b.n	80013c2 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	780a      	ldrb	r2, [r1, #0]
 80013ba:	701a      	strb	r2, [r3, #0]
		i++;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	3301      	adds	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d1f0      	bne.n	80013aa <General_Copy_16_Bit+0x10>
	}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <HAL_ADC_ConvCpltCallback>:
#include "motor.h"
#include "signal.h"
#include "usb.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_ADC_ConvCpltCallback+0x20>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 80013e6:	f000 fbef 	bl	8001bc8 <Potentiometer_ADC_Interrupt>
    }
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40012400 	.word	0x40012400

080013f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d102      	bne.n	8001410 <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_Timer_Interrupt();
 800140a:	f000 f995 	bl	8001738 <PID_Timer_Interrupt>
	}
	else if(htim->Instance == TIM4){
		Signal_Timer_Interrupt();
	}
}
 800140e:	e006      	b.n	800141e <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim->Instance == TIM4){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0x26>
		Signal_Timer_Interrupt();
 800141a:	f001 f81d 	bl	8002458 <Signal_Timer_Interrupt>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40000400 	.word	0x40000400
 800142c:	40000800 	.word	0x40000800

08001430 <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8001434:	f000 f890 	bl	8001558 <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 8001438:	f000 ffd2 	bl	80023e0 <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 800143c:	f000 f818 	bl	8001470 <LED_SysTick_Interrupt>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d003      	beq.n	800145c <HAL_GPIO_EXTI_Callback+0x18>
 8001454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_EXTI_Callback+0x1e>
		break;
		case USB_DET_Pin:
			USB_Det_Interrupt();
		break;
	}
}
 800145a:	e005      	b.n	8001468 <HAL_GPIO_EXTI_Callback+0x24>
			Signal_Interrupt();
 800145c:	f001 f808 	bl	8002470 <Signal_Interrupt>
		break;
 8001460:	e002      	b.n	8001468 <HAL_GPIO_EXTI_Callback+0x24>
			USB_Det_Interrupt();
 8001462:	f001 f991 	bl	8002788 <USB_Det_Interrupt>
		break;
 8001466:	bf00      	nop
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <LED_SysTick_Interrupt>:

uint8_t led_mode = 0;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <LED_SysTick_Interrupt+0x30>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d10f      	bne.n	800149c <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <LED_SysTick_Interrupt+0x34>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <LED_SysTick_Interrupt+0x34>)
 8001486:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <LED_SysTick_Interrupt+0x34>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b13      	cmp	r3, #19
 800148e:	d905      	bls.n	800149c <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8001490:	2000      	movs	r0, #0
 8001492:	f000 f809 	bl	80014a8 <LED_Set>
			led_systick = 0;
 8001496:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <LED_SysTick_Interrupt+0x34>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200001c4 	.word	0x200001c4
 80014a4:	200001c6 	.word	0x200001c6

080014a8 <LED_Set>:

void LED_Set(uint8_t state){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <LED_Set+0x30>)
 80014be:	f003 fa34 	bl	800492a <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 80014c2:	e004      	b.n	80014ce <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <LED_Set+0x30>)
 80014ca:	f003 fa2e 	bl	800492a <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40010800 	.word	0x40010800

080014dc <LED_Update>:
void LED_Update(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	switch(led_mode){
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <LED_Update+0x6c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d82a      	bhi.n	800153e <LED_Update+0x62>
 80014e8:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <LED_Update+0x14>)
 80014ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ee:	bf00      	nop
 80014f0:	08001501 	.word	0x08001501
 80014f4:	08001509 	.word	0x08001509
 80014f8:	08001511 	.word	0x08001511
 80014fc:	08001529 	.word	0x08001529
		case LED_MODE_OFF:
			LED_Set(OFF);
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff ffd1 	bl	80014a8 <LED_Set>
		break;
 8001506:	e01a      	b.n	800153e <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff ffcd 	bl	80014a8 <LED_Set>
		break;
 800150e:	e016      	b.n	800153e <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <LED_Update+0x70>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <LED_Update+0x44>
				LED_Set(ON);
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff ffc5 	bl	80014a8 <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 800151e:	e00e      	b.n	800153e <LED_Update+0x62>
				LED_Set(OFF);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ffc1 	bl	80014a8 <LED_Set>
		break;
 8001526:	e00a      	b.n	800153e <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <LED_Update+0x74>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <LED_Update+0x60>
				led_systick = 0;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <LED_Update+0x78>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff ffb6 	bl	80014a8 <LED_Set>
			}
		break;
 800153c:	bf00      	nop
	}
	led_position_changed = 0;
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <LED_Update+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200001c4 	.word	0x200001c4
 800154c:	200001d8 	.word	0x200001d8
 8001550:	200001c5 	.word	0x200001c5
 8001554:	200001c6 	.word	0x200001c6

08001558 <Motor_SysTick_Interrupt>:
uint8_t motor_invert = MOTOR_NORMAL;
uint16_t motor_max_power = 1000;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	if(!pid_running){
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <Motor_SysTick_Interrupt+0x38>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d113      	bne.n	800158c <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <Motor_SysTick_Interrupt+0x3c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00f      	beq.n	800158c <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <Motor_SysTick_Interrupt+0x40>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <Motor_SysTick_Interrupt+0x40>)
 8001576:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <Motor_SysTick_Interrupt+0x40>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b64      	cmp	r3, #100	; 0x64
 800157e:	d105      	bne.n	800158c <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8001580:	2000      	movs	r0, #0
 8001582:	f000 f80b 	bl	800159c <Motor_Set>
				motor_systick = 0;
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <Motor_SysTick_Interrupt+0x40>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001d8 	.word	0x200001d8
 8001594:	200001c8 	.word	0x200001c8
 8001598:	200001c9 	.word	0x200001c9

0800159c <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <Motor_Set+0xc0>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d103      	bne.n	80015b6 <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	425b      	negs	r3, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 80015b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d110      	bne.n	80015e0 <Motor_Set+0x44>
		TIM2 -> CCR1 = 1000;
 80015be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 80015c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <Motor_Set+0xc4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <Motor_Set+0xc8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
		TIM2 -> CCR2 = 1000;
		motor_running = 1;
	}
}
 80015de:	e038      	b.n	8001652 <Motor_Set+0xb6>
	}else if(strength < 0){
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da18      	bge.n	800161a <Motor_Set+0x7e>
		TIM2 -> CCR1 = 1000;
 80015e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000 + (strength / (1000 / motor_max_power));
 80015f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <Motor_Set+0xcc>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001600:	fb93 f3f1 	sdiv	r3, r3, r1
 8001604:	fb92 f3f3 	sdiv	r3, r2, r3
 8001608:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800160c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <Motor_Set+0xc4>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
}
 8001618:	e01b      	b.n	8001652 <Motor_Set+0xb6>
	}else if(strength > 0){
 800161a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161e:	2b00      	cmp	r3, #0
 8001620:	dd17      	ble.n	8001652 <Motor_Set+0xb6>
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
 8001622:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <Motor_Set+0xcc>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001630:	fb93 f3f1 	sdiv	r3, r3, r1
 8001634:	fb92 f3f3 	sdiv	r3, r2, r3
 8001638:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 800163c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001640:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8001642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <Motor_Set+0xc4>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	200001c7 	.word	0x200001c7
 8001660:	200001c8 	.word	0x200001c8
 8001664:	200001c9 	.word	0x200001c9
 8001668:	20000000 	.word	0x20000000

0800166c <Motor_Get>:
int16_t Motor_Get(){
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	if(TIM2 -> CCR1 != 1000){
 8001670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167a:	d013      	beq.n	80016a4 <Motor_Get+0x38>
		return (1000 - (int16_t)(TIM2 -> CCR1)) * (1000 / motor_max_power);
 800167c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001682:	b21b      	sxth	r3, r3
 8001684:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001688:	b29b      	uxth	r3, r3
 800168a:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <Motor_Get+0x78>)
 800168c:	8812      	ldrh	r2, [r2, #0]
 800168e:	4611      	mov	r1, r2
 8001690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001694:	fb92 f2f1 	sdiv	r2, r2, r1
 8001698:	b292      	uxth	r2, r2
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	e01a      	b.n	80016da <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 80016a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ae:	d013      	beq.n	80016d8 <Motor_Get+0x6c>
		return ((int16_t)(TIM2 -> CCR2) - 1000) * (1000 / motor_max_power);
 80016b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <Motor_Get+0x78>)
 80016c0:	8812      	ldrh	r2, [r2, #0]
 80016c2:	4611      	mov	r1, r2
 80016c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c8:	fb92 f2f1 	sdiv	r2, r2, r1
 80016cc:	b292      	uxth	r2, r2
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	e000      	b.n	80016da <Motor_Get+0x6e>
	}
	return 0;
 80016d8:	2300      	movs	r3, #0
} 
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000000 	.word	0x20000000

080016e8 <Motor_Init>:
void Motor_Init(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80016ec:	2100      	movs	r1, #0
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <Motor_Init+0x18>)
 80016f0:	f005 fcfe 	bl	80070f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016f4:	2104      	movs	r1, #4
 80016f6:	4802      	ldr	r0, [pc, #8]	; (8001700 <Motor_Init+0x18>)
 80016f8:	f005 fcfa 	bl	80070f0 <HAL_TIM_PWM_Start>
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200003d0 	.word	0x200003d0

08001704 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <PID_Timer_Stop+0x10>)
 800170a:	f005 fc6b 	bl	8006fe4 <HAL_TIM_Base_Stop_IT>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000418 	.word	0x20000418

08001718 <PID_Timer_Restart>:
void PID_Timer_Restart(){
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <PID_Timer_Restart+0x1c>)
 800171e:	f005 fc61 	bl	8006fe4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <PID_Timer_Restart+0x1c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 800172a:	4802      	ldr	r0, [pc, #8]	; (8001734 <PID_Timer_Restart+0x1c>)
 800172c:	f005 fc08 	bl	8006f40 <HAL_TIM_Base_Start_IT>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000418 	.word	0x20000418

08001738 <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	PID_Compute();
 800173c:	f000 f838 	bl	80017b0 <PID_Compute>
	PID_Ready(pid_output);
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <PID_Timer_Interrupt+0x1c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fc9f 	bl	8001088 <PID_Ready>
	PID_Timer_Restart();
 800174a:	f7ff ffe5 	bl	8001718 <PID_Timer_Restart>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001e0 	.word	0x200001e0

08001758 <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <PID_Get_Sampling_Time+0x1c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <PID_Get_Sampling_Time+0x20>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	095b      	lsrs	r3, r3, #5
 800176a:	b29b      	uxth	r3, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000418 	.word	0x20000418
 8001778:	51eb851f 	.word	0x51eb851f

0800177c <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	2264      	movs	r2, #100	; 0x64
 800178a:	fb03 f202 	mul.w	r2, r3, r2
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <PID_Set_Sampling_Time+0x30>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	2264      	movs	r2, #100	; 0x64
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	461a      	mov	r2, r3
 800179e:	4b03      	ldr	r3, [pc, #12]	; (80017ac <PID_Set_Sampling_Time+0x30>)
 80017a0:	60da      	str	r2, [r3, #12]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	20000418 	.word	0x20000418

080017b0 <PID_Compute>:
void PID_Compute(){
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
	float input = pid_input;
 80017b6:	4b94      	ldr	r3, [pc, #592]	; (8001a08 <PID_Compute+0x258>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60bb      	str	r3, [r7, #8]
	float error = pid_setpoint - input;
 80017bc:	4b93      	ldr	r3, [pc, #588]	; (8001a0c <PID_Compute+0x25c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f91e 	bl	8000a04 <__aeabi_fsub>
 80017c8:	4603      	mov	r3, r0
 80017ca:	607b      	str	r3, [r7, #4]
	float input_d = (input - pid_last_input);
 80017cc:	4b90      	ldr	r3, [pc, #576]	; (8001a10 <PID_Compute+0x260>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7ff f916 	bl	8000a04 <__aeabi_fsub>
 80017d8:	4603      	mov	r3, r0
 80017da:	603b      	str	r3, [r7, #0]
	float output = 0;
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]

	if(error >= pid_split_1){
 80017e2:	4b8c      	ldr	r3, [pc, #560]	; (8001a14 <PID_Compute+0x264>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f9c2 	bl	8000b70 <__aeabi_i2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fbc3 	bl	8000f7c <__aeabi_fcmpge>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d074      	beq.n	80018e6 <PID_Compute+0x136>
		pid_output_sum += pid_ki_1 * error;
 80017fc:	4b86      	ldr	r3, [pc, #536]	; (8001a18 <PID_Compute+0x268>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fa08 	bl	8000c18 <__aeabi_fmul>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <PID_Compute+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	4610      	mov	r0, r2
 8001814:	f7ff f8f8 	bl	8000a08 <__addsf3>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <PID_Compute+0x26c>)
 800181e:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001820:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <PID_Compute+0x270>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d110      	bne.n	800184a <PID_Compute+0x9a>
			pid_output_sum -= pid_kp_1 * input_d;
 8001828:	4b7c      	ldr	r3, [pc, #496]	; (8001a1c <PID_Compute+0x26c>)
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <PID_Compute+0x274>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f9f0 	bl	8000c18 <__aeabi_fmul>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff f8e1 	bl	8000a04 <__aeabi_fsub>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <PID_Compute+0x26c>)
 8001848:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 800184a:	4b74      	ldr	r3, [pc, #464]	; (8001a1c <PID_Compute+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4976      	ldr	r1, [pc, #472]	; (8001a28 <PID_Compute+0x278>)
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fb9d 	bl	8000f90 <__aeabi_fcmpgt>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <PID_Compute+0xb4>
			pid_output_sum = 1000.0f;
 800185c:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <PID_Compute+0x26c>)
 800185e:	4a72      	ldr	r2, [pc, #456]	; (8001a28 <PID_Compute+0x278>)
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e00b      	b.n	800187c <PID_Compute+0xcc>
		}else if(pid_output_sum < -1000.0f){
 8001864:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <PID_Compute+0x26c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4970      	ldr	r1, [pc, #448]	; (8001a2c <PID_Compute+0x27c>)
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fb72 	bl	8000f54 <__aeabi_fcmplt>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <PID_Compute+0xcc>
			pid_output_sum = -1000.0f;
 8001876:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <PID_Compute+0x26c>)
 8001878:	4a6c      	ldr	r2, [pc, #432]	; (8001a2c <PID_Compute+0x27c>)
 800187a:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <PID_Compute+0x270>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d107      	bne.n	8001894 <PID_Compute+0xe4>
			output = pid_kp_1 * error;
 8001884:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <PID_Compute+0x274>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff f9c4 	bl	8000c18 <__aeabi_fmul>
 8001890:	4603      	mov	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_1 * input_d;
 8001894:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <PID_Compute+0x26c>)
 8001896:	681c      	ldr	r4, [r3, #0]
 8001898:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <PID_Compute+0x280>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f9ba 	bl	8000c18 <__aeabi_fmul>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7ff f8ab 	bl	8000a04 <__aeabi_fsub>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff f8a8 	bl	8000a08 <__addsf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 80018bc:	495a      	ldr	r1, [pc, #360]	; (8001a28 <PID_Compute+0x278>)
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff fb66 	bl	8000f90 <__aeabi_fcmpgt>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <PID_Compute+0x120>
			output = 1000.0f;
 80018ca:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <PID_Compute+0x278>)
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e12c      	b.n	8001b2a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 80018d0:	4956      	ldr	r1, [pc, #344]	; (8001a2c <PID_Compute+0x27c>)
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff fb3e 	bl	8000f54 <__aeabi_fcmplt>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8125 	beq.w	8001b2a <PID_Compute+0x37a>
			output = -1000.0f;
 80018e0:	4b52      	ldr	r3, [pc, #328]	; (8001a2c <PID_Compute+0x27c>)
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e121      	b.n	8001b2a <PID_Compute+0x37a>
		}
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 80018e6:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <PID_Compute+0x264>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f940 	bl	8000b70 <__aeabi_i2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4619      	mov	r1, r3
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fb2d 	bl	8000f54 <__aeabi_fcmplt>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80a1 	beq.w	8001a44 <PID_Compute+0x294>
 8001902:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <PID_Compute+0x284>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f932 	bl	8000b70 <__aeabi_i2f>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fb33 	bl	8000f7c <__aeabi_fcmpge>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 8093 	beq.w	8001a44 <PID_Compute+0x294>
		pid_output_sum += pid_ki_2 * error;
 800191e:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <PID_Compute+0x288>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff f977 	bl	8000c18 <__aeabi_fmul>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <PID_Compute+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f7ff f867 	bl	8000a08 <__addsf3>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <PID_Compute+0x26c>)
 8001940:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <PID_Compute+0x270>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d110      	bne.n	800196c <PID_Compute+0x1bc>
			pid_output_sum -= pid_kp_2 * input_d;
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <PID_Compute+0x26c>)
 800194c:	681c      	ldr	r4, [r3, #0]
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <PID_Compute+0x28c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f95f 	bl	8000c18 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff f850 	bl	8000a04 <__aeabi_fsub>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <PID_Compute+0x26c>)
 800196a:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <PID_Compute+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	492d      	ldr	r1, [pc, #180]	; (8001a28 <PID_Compute+0x278>)
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fb0c 	bl	8000f90 <__aeabi_fcmpgt>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <PID_Compute+0x1d6>
			pid_output_sum = 1000.0f;
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <PID_Compute+0x26c>)
 8001980:	4a29      	ldr	r2, [pc, #164]	; (8001a28 <PID_Compute+0x278>)
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e00b      	b.n	800199e <PID_Compute+0x1ee>
		}else if(pid_output_sum < -1000.0f){
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <PID_Compute+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4928      	ldr	r1, [pc, #160]	; (8001a2c <PID_Compute+0x27c>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fae1 	bl	8000f54 <__aeabi_fcmplt>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <PID_Compute+0x1ee>
			pid_output_sum = -1000.0f;
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <PID_Compute+0x26c>)
 800199a:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <PID_Compute+0x27c>)
 800199c:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <PID_Compute+0x270>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <PID_Compute+0x206>
			output = pid_kp_2 * error;
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <PID_Compute+0x28c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4619      	mov	r1, r3
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff f933 	bl	8000c18 <__aeabi_fmul>
 80019b2:	4603      	mov	r3, r0
 80019b4:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_2 * input_d;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <PID_Compute+0x26c>)
 80019b8:	681c      	ldr	r4, [r3, #0]
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <PID_Compute+0x290>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f929 	bl	8000c18 <__aeabi_fmul>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff f81a 	bl	8000a04 <__aeabi_fsub>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4619      	mov	r1, r3
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff f817 	bl	8000a08 <__addsf3>
 80019da:	4603      	mov	r3, r0
 80019dc:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 80019de:	4912      	ldr	r1, [pc, #72]	; (8001a28 <PID_Compute+0x278>)
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff fad5 	bl	8000f90 <__aeabi_fcmpgt>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <PID_Compute+0x242>
			output = 1000.0f;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <PID_Compute+0x278>)
 80019ee:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 80019f0:	e09b      	b.n	8001b2a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 80019f2:	490e      	ldr	r1, [pc, #56]	; (8001a2c <PID_Compute+0x27c>)
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff faad 	bl	8000f54 <__aeabi_fcmplt>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <PID_Compute+0x252>
		if(output > 1000.0f){
 8001a00:	e093      	b.n	8001b2a <PID_Compute+0x37a>
			output = -1000.0f;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <PID_Compute+0x27c>)
 8001a04:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001a06:	e090      	b.n	8001b2a <PID_Compute+0x37a>
 8001a08:	200001dc 	.word	0x200001dc
 8001a0c:	20000024 	.word	0x20000024
 8001a10:	200001e4 	.word	0x200001e4
 8001a14:	2000001c 	.word	0x2000001c
 8001a18:	200001cc 	.word	0x200001cc
 8001a1c:	200001e8 	.word	0x200001e8
 8001a20:	20000020 	.word	0x20000020
 8001a24:	20000004 	.word	0x20000004
 8001a28:	447a0000 	.word	0x447a0000
 8001a2c:	c47a0000 	.word	0xc47a0000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	2000001e 	.word	0x2000001e
 8001a38:	200001d0 	.word	0x200001d0
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20000010 	.word	0x20000010
		}
	}else{
		pid_output_sum += pid_ki_3 * error;
 8001a44:	4b3e      	ldr	r3, [pc, #248]	; (8001b40 <PID_Compute+0x390>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f8e4 	bl	8000c18 <__aeabi_fmul>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <PID_Compute+0x394>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f7fe ffd4 	bl	8000a08 <__addsf3>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <PID_Compute+0x394>)
 8001a66:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001a68:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <PID_Compute+0x398>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d110      	bne.n	8001a92 <PID_Compute+0x2e2>
			pid_output_sum -= pid_kp_3 * input_d;
 8001a70:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <PID_Compute+0x394>)
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <PID_Compute+0x39c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f8cc 	bl	8000c18 <__aeabi_fmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4619      	mov	r1, r3
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7fe ffbd 	bl	8000a04 <__aeabi_fsub>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <PID_Compute+0x394>)
 8001a90:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <PID_Compute+0x394>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	492e      	ldr	r1, [pc, #184]	; (8001b50 <PID_Compute+0x3a0>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa79 	bl	8000f90 <__aeabi_fcmpgt>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <PID_Compute+0x2fc>
			pid_output_sum = 1000.0f;
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <PID_Compute+0x394>)
 8001aa6:	4a2a      	ldr	r2, [pc, #168]	; (8001b50 <PID_Compute+0x3a0>)
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e00b      	b.n	8001ac4 <PID_Compute+0x314>
		}else if(pid_output_sum < -1000.0f){
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <PID_Compute+0x394>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4928      	ldr	r1, [pc, #160]	; (8001b54 <PID_Compute+0x3a4>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fa4e 	bl	8000f54 <__aeabi_fcmplt>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <PID_Compute+0x314>
			pid_output_sum = -1000.0f;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <PID_Compute+0x394>)
 8001ac0:	4a24      	ldr	r2, [pc, #144]	; (8001b54 <PID_Compute+0x3a4>)
 8001ac2:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <PID_Compute+0x398>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d107      	bne.n	8001adc <PID_Compute+0x32c>
			output = pid_kp_3 * error;
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <PID_Compute+0x39c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff f8a0 	bl	8000c18 <__aeabi_fmul>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_3 * input_d;
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <PID_Compute+0x394>)
 8001ade:	681c      	ldr	r4, [r3, #0]
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <PID_Compute+0x3a8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f896 	bl	8000c18 <__aeabi_fmul>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7fe ff87 	bl	8000a04 <__aeabi_fsub>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4619      	mov	r1, r3
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7fe ff84 	bl	8000a08 <__addsf3>
 8001b00:	4603      	mov	r3, r0
 8001b02:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001b04:	4912      	ldr	r1, [pc, #72]	; (8001b50 <PID_Compute+0x3a0>)
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fa42 	bl	8000f90 <__aeabi_fcmpgt>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <PID_Compute+0x368>
			output = 1000.0f;
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <PID_Compute+0x3a0>)
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e008      	b.n	8001b2a <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001b18:	490e      	ldr	r1, [pc, #56]	; (8001b54 <PID_Compute+0x3a4>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fa1a 	bl	8000f54 <__aeabi_fcmplt>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <PID_Compute+0x37a>
			output = -1000.0f;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <PID_Compute+0x3a4>)
 8001b28:	60fb      	str	r3, [r7, #12]
		}
	}

	pid_output = output;
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <PID_Compute+0x3ac>)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <PID_Compute+0x3b0>)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200001d4 	.word	0x200001d4
 8001b44:	200001e8 	.word	0x200001e8
 8001b48:	20000020 	.word	0x20000020
 8001b4c:	20000014 	.word	0x20000014
 8001b50:	447a0000 	.word	0x447a0000
 8001b54:	c47a0000 	.word	0xc47a0000
 8001b58:	20000018 	.word	0x20000018
 8001b5c:	200001e0 	.word	0x200001e0
 8001b60:	200001e4 	.word	0x200001e4

08001b64 <PID_Start>:
void PID_Start(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <PID_Start+0x30>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <PID_Start+0x34>)
 8001b6e:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <PID_Start+0x38>)
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
    PID_Set_Sampling_Time(pid_sampling_time);
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <PID_Start+0x3c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fdfc 	bl	800177c <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 8001b84:	f7ff fdc8 	bl	8001718 <PID_Timer_Restart>
	pid_running = 1;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <PID_Start+0x40>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200001dc 	.word	0x200001dc
 8001b98:	200001e4 	.word	0x200001e4
 8001b9c:	200001e8 	.word	0x200001e8
 8001ba0:	20000002 	.word	0x20000002
 8001ba4:	200001d8 	.word	0x200001d8

08001ba8 <PID_Stop>:
void PID_Stop(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 8001bac:	f7ff fdaa 	bl	8001704 <PID_Timer_Stop>
	PID_Ready(0);
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	f7ff fa68 	bl	8001088 <PID_Ready>
	pid_running = 0;
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <PID_Stop+0x1c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200001d8 	.word	0x200001d8

08001bc8 <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 8001bcc:	4816      	ldr	r0, [pc, #88]	; (8001c28 <Potentiometer_ADC_Interrupt+0x60>)
 8001bce:	f001 fe93 	bl	80038f8 <HAL_ADC_GetValue>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <Potentiometer_ADC_Interrupt+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <Potentiometer_ADC_Interrupt+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]
	potentiometer_adccnt++;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <Potentiometer_ADC_Interrupt+0x68>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <Potentiometer_ADC_Interrupt+0x68>)
 8001be8:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <Potentiometer_ADC_Interrupt+0x68>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d115      	bne.n	8001c1e <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <Potentiometer_ADC_Interrupt+0x64>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe ffb6 	bl	8000b68 <__aeabi_ui2f>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	490d      	ldr	r1, [pc, #52]	; (8001c34 <Potentiometer_ADC_Interrupt+0x6c>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f8bd 	bl	8000d80 <__aeabi_fdiv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <Potentiometer_ADC_Interrupt+0x70>)
 8001c0c:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 8001c0e:	f7ff f9ef 	bl	8000ff0 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <Potentiometer_ADC_Interrupt+0x68>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <Potentiometer_ADC_Interrupt+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <Potentiometer_ADC_Interrupt+0x74>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000398 	.word	0x20000398
 8001c2c:	200001f0 	.word	0x200001f0
 8001c30:	200001f4 	.word	0x200001f4
 8001c34:	42c80000 	.word	0x42c80000
 8001c38:	200001f8 	.word	0x200001f8
 8001c3c:	200001f6 	.word	0x200001f6

08001c40 <Potentiometer_Init>:

void Potentiometer_Init(){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001c44:	bf00      	nop
 8001c46:	4808      	ldr	r0, [pc, #32]	; (8001c68 <Potentiometer_Init+0x28>)
 8001c48:	f002 f8c2 	bl	8003dd0 <HAL_ADCEx_Calibration_Start>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f9      	bne.n	8001c46 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <Potentiometer_Init+0x28>)
 8001c54:	f001 fd9a 	bl	800378c <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 8001c58:	bf00      	nop
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <Potentiometer_Init+0x2c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0fb      	beq.n	8001c5a <Potentiometer_Init+0x1a>
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000398 	.word	0x20000398
 8001c6c:	200001f6 	.word	0x200001f6

08001c70 <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	49a1      	ldr	r1, [pc, #644]	; (8001f00 <Settings_Read+0x290>)
 8001c7a:	48a2      	ldr	r0, [pc, #648]	; (8001f04 <Settings_Read+0x294>)
 8001c7c:	f7ff fab4 	bl	80011e8 <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[SETTINGS_TOTAL_LENGTH - 4]);
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4aa0      	ldr	r2, [pc, #640]	; (8001f08 <Settings_Read+0x298>)
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fb68 	bl	8001360 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 8001c90:	220f      	movs	r2, #15
 8001c92:	499c      	ldr	r1, [pc, #624]	; (8001f04 <Settings_Read+0x294>)
 8001c94:	489d      	ldr	r0, [pc, #628]	; (8001f0c <Settings_Read+0x29c>)
 8001c96:	f002 fa7a 	bl	800418e <HAL_CRC_Calculate>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	f040 823d 	bne.w	800211e <Settings_Read+0x4ae>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 8001ca4:	4b9a      	ldr	r3, [pc, #616]	; (8001f10 <Settings_Read+0x2a0>)
 8001ca6:	4a97      	ldr	r2, [pc, #604]	; (8001f04 <Settings_Read+0x294>)
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fb75 	bl	800139a <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 8001cb0:	4b98      	ldr	r3, [pc, #608]	; (8001f14 <Settings_Read+0x2a4>)
 8001cb2:	4a99      	ldr	r2, [pc, #612]	; (8001f18 <Settings_Read+0x2a8>)
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fb6f 	bl	800139a <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 8001cbc:	4b97      	ldr	r3, [pc, #604]	; (8001f1c <Settings_Read+0x2ac>)
 8001cbe:	4a98      	ldr	r2, [pc, #608]	; (8001f20 <Settings_Read+0x2b0>)
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fb69 	bl	800139a <General_Copy_16_Bit>
		motor_invert = settings[6];
 8001cc8:	4b8e      	ldr	r3, [pc, #568]	; (8001f04 <Settings_Read+0x294>)
 8001cca:	799a      	ldrb	r2, [r3, #6]
 8001ccc:	4b95      	ldr	r3, [pc, #596]	; (8001f24 <Settings_Read+0x2b4>)
 8001cce:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <Settings_Read+0x294>)
 8001cd2:	79da      	ldrb	r2, [r3, #7]
 8001cd4:	4b94      	ldr	r3, [pc, #592]	; (8001f28 <Settings_Read+0x2b8>)
 8001cd6:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&settings[8]);
 8001cd8:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <Settings_Read+0x2bc>)
 8001cda:	4a95      	ldr	r2, [pc, #596]	; (8001f30 <Settings_Read+0x2c0>)
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fb3e 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[12]);
 8001ce4:	4b93      	ldr	r3, [pc, #588]	; (8001f34 <Settings_Read+0x2c4>)
 8001ce6:	4a94      	ldr	r2, [pc, #592]	; (8001f38 <Settings_Read+0x2c8>)
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fb38 	bl	8001360 <General_Copy_32_Bit>
		led_mode = settings[16];
 8001cf0:	4b84      	ldr	r3, [pc, #528]	; (8001f04 <Settings_Read+0x294>)
 8001cf2:	7c1a      	ldrb	r2, [r3, #16]
 8001cf4:	4b91      	ldr	r3, [pc, #580]	; (8001f3c <Settings_Read+0x2cc>)
 8001cf6:	701a      	strb	r2, [r3, #0]
		pid_on = settings[17];
 8001cf8:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <Settings_Read+0x294>)
 8001cfa:	7c5a      	ldrb	r2, [r3, #17]
 8001cfc:	4b90      	ldr	r3, [pc, #576]	; (8001f40 <Settings_Read+0x2d0>)
 8001cfe:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[18]);
 8001d00:	4b90      	ldr	r3, [pc, #576]	; (8001f44 <Settings_Read+0x2d4>)
 8001d02:	4a91      	ldr	r2, [pc, #580]	; (8001f48 <Settings_Read+0x2d8>)
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fb2a 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[22]);
 8001d0c:	4b8f      	ldr	r3, [pc, #572]	; (8001f4c <Settings_Read+0x2dc>)
 8001d0e:	4a90      	ldr	r2, [pc, #576]	; (8001f50 <Settings_Read+0x2e0>)
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fb24 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[26]);
 8001d18:	4b8e      	ldr	r3, [pc, #568]	; (8001f54 <Settings_Read+0x2e4>)
 8001d1a:	4a8f      	ldr	r2, [pc, #572]	; (8001f58 <Settings_Read+0x2e8>)
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fb1e 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[30]);
 8001d24:	4b8d      	ldr	r3, [pc, #564]	; (8001f5c <Settings_Read+0x2ec>)
 8001d26:	4a8e      	ldr	r2, [pc, #568]	; (8001f60 <Settings_Read+0x2f0>)
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fb18 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[34]);
 8001d30:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <Settings_Read+0x2f4>)
 8001d32:	4a8d      	ldr	r2, [pc, #564]	; (8001f68 <Settings_Read+0x2f8>)
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fb12 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[38]);
 8001d3c:	4b8b      	ldr	r3, [pc, #556]	; (8001f6c <Settings_Read+0x2fc>)
 8001d3e:	4a8c      	ldr	r2, [pc, #560]	; (8001f70 <Settings_Read+0x300>)
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fb0c 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[42]);
 8001d48:	4b8a      	ldr	r3, [pc, #552]	; (8001f74 <Settings_Read+0x304>)
 8001d4a:	4a8b      	ldr	r2, [pc, #556]	; (8001f78 <Settings_Read+0x308>)
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fb06 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[46]);
 8001d54:	4b89      	ldr	r3, [pc, #548]	; (8001f7c <Settings_Read+0x30c>)
 8001d56:	4a8a      	ldr	r2, [pc, #552]	; (8001f80 <Settings_Read+0x310>)
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fb00 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[50]);
 8001d60:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <Settings_Read+0x314>)
 8001d62:	4a89      	ldr	r2, [pc, #548]	; (8001f88 <Settings_Read+0x318>)
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fafa 	bl	8001360 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[54]);
 8001d6c:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <Settings_Read+0x31c>)
 8001d6e:	4a88      	ldr	r2, [pc, #544]	; (8001f90 <Settings_Read+0x320>)
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fb11 	bl	800139a <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[56]);
 8001d78:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <Settings_Read+0x324>)
 8001d7a:	4a87      	ldr	r2, [pc, #540]	; (8001f98 <Settings_Read+0x328>)
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fb0b 	bl	800139a <General_Copy_16_Bit>
		pid_sampling_time = settings[58];
 8001d84:	4b5f      	ldr	r3, [pc, #380]	; (8001f04 <Settings_Read+0x294>)
 8001d86:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8001d8a:	4b84      	ldr	r3, [pc, #528]	; (8001f9c <Settings_Read+0x32c>)
 8001d8c:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 8001d8e:	4b60      	ldr	r3, [pc, #384]	; (8001f10 <Settings_Read+0x2a0>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 8001d96:	d302      	bcc.n	8001d9e <Settings_Read+0x12e>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 8001d98:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <Settings_Read+0x2a0>)
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <Settings_Read+0x2a4>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	2b7f      	cmp	r3, #127	; 0x7f
 8001da4:	d904      	bls.n	8001db0 <Settings_Read+0x140>
 8001da6:	4b5b      	ldr	r3, [pc, #364]	; (8001f14 <Settings_Read+0x2a4>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dae:	d303      	bcc.n	8001db8 <Settings_Read+0x148>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <Settings_Read+0x2a4>)
 8001db2:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001db6:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 8001db8:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <Settings_Read+0x2ac>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dc0:	d903      	bls.n	8001dca <Settings_Read+0x15a>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 8001dc2:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <Settings_Read+0x2ac>)
 8001dc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dc8:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 8001dca:	4b56      	ldr	r3, [pc, #344]	; (8001f24 <Settings_Read+0x2b4>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <Settings_Read+0x170>
 8001dd2:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <Settings_Read+0x2b4>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d002      	beq.n	8001de0 <Settings_Read+0x170>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001dda:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <Settings_Read+0x2b4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 8001de0:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <Settings_Read+0x2b8>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d006      	beq.n	8001df6 <Settings_Read+0x186>
 8001de8:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <Settings_Read+0x2b8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <Settings_Read+0x186>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <Settings_Read+0x2b8>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
		}
		if((signal_length < SETTINGS_DEF_SIGNAL_LENGTH_MIN)||(signal_length > SETTINGS_DEF_SIGNAL_LENGTH_MAX)){
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <Settings_Read+0x2bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f8a8 	bl	8000f54 <__aeabi_fcmplt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <Settings_Read+0x1ac>
 8001e0a:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <Settings_Read+0x2bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4964      	ldr	r1, [pc, #400]	; (8001fa0 <Settings_Read+0x330>)
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f8bd 	bl	8000f90 <__aeabi_fcmpgt>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <Settings_Read+0x1b4>
			signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <Settings_Read+0x2bc>)
 8001e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e22:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001e24:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <Settings_Read+0x2c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d903      	bls.n	8001e34 <Settings_Read+0x1c4>
 8001e2c:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <Settings_Read+0x2c4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2bc8      	cmp	r3, #200	; 0xc8
 8001e32:	d902      	bls.n	8001e3a <Settings_Read+0x1ca>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001e34:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <Settings_Read+0x2c4>)
 8001e36:	2219      	movs	r2, #25
 8001e38:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 8001e3a:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <Settings_Read+0x2cc>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00e      	beq.n	8001e60 <Settings_Read+0x1f0>
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <Settings_Read+0x2cc>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d00a      	beq.n	8001e60 <Settings_Read+0x1f0>
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <Settings_Read+0x2cc>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d006      	beq.n	8001e60 <Settings_Read+0x1f0>
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <Settings_Read+0x2cc>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d002      	beq.n	8001e60 <Settings_Read+0x1f0>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <Settings_Read+0x2cc>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 8001e60:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <Settings_Read+0x2d0>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <Settings_Read+0x206>
 8001e68:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <Settings_Read+0x2d0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d002      	beq.n	8001e76 <Settings_Read+0x206>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 8001e70:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <Settings_Read+0x2d0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 8001e76:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <Settings_Read+0x2d4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f868 	bl	8000f54 <__aeabi_fcmplt>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d108      	bne.n	8001e9c <Settings_Read+0x22c>
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <Settings_Read+0x2d4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4945      	ldr	r1, [pc, #276]	; (8001fa4 <Settings_Read+0x334>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff f87d 	bl	8000f90 <__aeabi_fcmpgt>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <Settings_Read+0x234>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <Settings_Read+0x2d4>)
 8001e9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ea2:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <Settings_Read+0x2dc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 0100 	mov.w	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f851 	bl	8000f54 <__aeabi_fcmplt>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d108      	bne.n	8001eca <Settings_Read+0x25a>
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <Settings_Read+0x2dc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4939      	ldr	r1, [pc, #228]	; (8001fa4 <Settings_Read+0x334>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f866 	bl	8000f90 <__aeabi_fcmpgt>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <Settings_Read+0x262>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <Settings_Read+0x2dc>)
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <Settings_Read+0x2e4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f83a 	bl	8000f54 <__aeabi_fcmplt>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <Settings_Read+0x288>
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <Settings_Read+0x2e4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	492e      	ldr	r1, [pc, #184]	; (8001fa4 <Settings_Read+0x334>)
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f84f 	bl	8000f90 <__aeabi_fcmpgt>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d059      	beq.n	8001fac <Settings_Read+0x33c>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <Settings_Read+0x2e4>)
 8001efa:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <Settings_Read+0x338>)
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e055      	b.n	8001fac <Settings_Read+0x33c>
 8001f00:	0800fc00 	.word	0x0800fc00
 8001f04:	200001fc 	.word	0x200001fc
 8001f08:	20000238 	.word	0x20000238
 8001f0c:	200003c8 	.word	0x200003c8
 8001f10:	200001ec 	.word	0x200001ec
 8001f14:	200001ee 	.word	0x200001ee
 8001f18:	200001fe 	.word	0x200001fe
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000200 	.word	0x20000200
 8001f24:	200001c7 	.word	0x200001c7
 8001f28:	2000023c 	.word	0x2000023c
 8001f2c:	20000240 	.word	0x20000240
 8001f30:	20000204 	.word	0x20000204
 8001f34:	20000244 	.word	0x20000244
 8001f38:	20000208 	.word	0x20000208
 8001f3c:	200001c4 	.word	0x200001c4
 8001f40:	20000020 	.word	0x20000020
 8001f44:	20000004 	.word	0x20000004
 8001f48:	2000020e 	.word	0x2000020e
 8001f4c:	200001cc 	.word	0x200001cc
 8001f50:	20000212 	.word	0x20000212
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000216 	.word	0x20000216
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	2000021a 	.word	0x2000021a
 8001f64:	200001d0 	.word	0x200001d0
 8001f68:	2000021e 	.word	0x2000021e
 8001f6c:	20000010 	.word	0x20000010
 8001f70:	20000222 	.word	0x20000222
 8001f74:	20000014 	.word	0x20000014
 8001f78:	20000226 	.word	0x20000226
 8001f7c:	200001d4 	.word	0x200001d4
 8001f80:	2000022a 	.word	0x2000022a
 8001f84:	20000018 	.word	0x20000018
 8001f88:	2000022e 	.word	0x2000022e
 8001f8c:	2000001c 	.word	0x2000001c
 8001f90:	20000232 	.word	0x20000232
 8001f94:	2000001e 	.word	0x2000001e
 8001f98:	20000234 	.word	0x20000234
 8001f9c:	20000002 	.word	0x20000002
 8001fa0:	40a00000 	.word	0x40a00000
 8001fa4:	42c80000 	.word	0x42c80000
 8001fa8:	40400000 	.word	0x40400000
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 8001fac:	4b83      	ldr	r3, [pc, #524]	; (80021bc <Settings_Read+0x54c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f04f 0100 	mov.w	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe ffcd 	bl	8000f54 <__aeabi_fcmplt>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d108      	bne.n	8001fd2 <Settings_Read+0x362>
 8001fc0:	4b7e      	ldr	r3, [pc, #504]	; (80021bc <Settings_Read+0x54c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	497e      	ldr	r1, [pc, #504]	; (80021c0 <Settings_Read+0x550>)
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe ffe2 	bl	8000f90 <__aeabi_fcmpgt>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <Settings_Read+0x36a>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8001fd2:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <Settings_Read+0x54c>)
 8001fd4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fd8:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 8001fda:	4b7a      	ldr	r3, [pc, #488]	; (80021c4 <Settings_Read+0x554>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe ffb6 	bl	8000f54 <__aeabi_fcmplt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <Settings_Read+0x390>
 8001fee:	4b75      	ldr	r3, [pc, #468]	; (80021c4 <Settings_Read+0x554>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4973      	ldr	r1, [pc, #460]	; (80021c0 <Settings_Read+0x550>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe ffcb 	bl	8000f90 <__aeabi_fcmpgt>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <Settings_Read+0x398>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8002000:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <Settings_Read+0x554>)
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 8002008:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <Settings_Read+0x558>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe ff9f 	bl	8000f54 <__aeabi_fcmplt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d108      	bne.n	800202e <Settings_Read+0x3be>
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <Settings_Read+0x558>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4967      	ldr	r1, [pc, #412]	; (80021c0 <Settings_Read+0x550>)
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe ffb4 	bl	8000f90 <__aeabi_fcmpgt>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <Settings_Read+0x3c4>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 800202e:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <Settings_Read+0x558>)
 8002030:	4a66      	ldr	r2, [pc, #408]	; (80021cc <Settings_Read+0x55c>)
 8002032:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 8002034:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <Settings_Read+0x560>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe ff89 	bl	8000f54 <__aeabi_fcmplt>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d108      	bne.n	800205a <Settings_Read+0x3ea>
 8002048:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <Settings_Read+0x560>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	495c      	ldr	r1, [pc, #368]	; (80021c0 <Settings_Read+0x550>)
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe ff9e 	bl	8000f90 <__aeabi_fcmpgt>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <Settings_Read+0x3f2>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <Settings_Read+0x560>)
 800205c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002060:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <Settings_Read+0x564>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe ff72 	bl	8000f54 <__aeabi_fcmplt>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <Settings_Read+0x418>
 8002076:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <Settings_Read+0x564>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4951      	ldr	r1, [pc, #324]	; (80021c0 <Settings_Read+0x550>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ff87 	bl	8000f90 <__aeabi_fcmpgt>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <Settings_Read+0x420>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 8002088:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <Settings_Read+0x564>)
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 8002090:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <Settings_Read+0x568>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe ff5b 	bl	8000f54 <__aeabi_fcmplt>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d108      	bne.n	80020b6 <Settings_Read+0x446>
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <Settings_Read+0x568>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4945      	ldr	r1, [pc, #276]	; (80021c0 <Settings_Read+0x550>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe ff70 	bl	8000f90 <__aeabi_fcmpgt>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <Settings_Read+0x44c>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 80020b6:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <Settings_Read+0x568>)
 80020b8:	4a44      	ldr	r2, [pc, #272]	; (80021cc <Settings_Read+0x55c>)
 80020ba:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 80020bc:	4b47      	ldr	r3, [pc, #284]	; (80021dc <Settings_Read+0x56c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c4:	d303      	bcc.n	80020ce <Settings_Read+0x45e>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 80020c6:	4b45      	ldr	r3, [pc, #276]	; (80021dc <Settings_Read+0x56c>)
 80020c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020cc:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 80020ce:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <Settings_Read+0x570>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d6:	d303      	bcc.n	80020e0 <Settings_Read+0x470>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 80020d8:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <Settings_Read+0x570>)
 80020da:	f640 32fc 	movw	r2, #3068	; 0xbfc
 80020de:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 80020e0:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <Settings_Read+0x574>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fd43 	bl	8000b70 <__aeabi_i2f>
 80020ea:	4603      	mov	r3, r0
 80020ec:	493e      	ldr	r1, [pc, #248]	; (80021e8 <Settings_Read+0x578>)
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe ff30 	bl	8000f54 <__aeabi_fcmplt>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <Settings_Read+0x4a6>
 80020fa:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <Settings_Read+0x574>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fd36 	bl	8000b70 <__aeabi_i2f>
 8002104:	4603      	mov	r3, r0
 8002106:	492e      	ldr	r1, [pc, #184]	; (80021c0 <Settings_Read+0x550>)
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ff41 	bl	8000f90 <__aeabi_fcmpgt>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d100      	bne.n	8002116 <Settings_Read+0x4a6>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 8002114:	e04d      	b.n	80021b2 <Settings_Read+0x542>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <Settings_Read+0x574>)
 8002118:	2205      	movs	r2, #5
 800211a:	701a      	strb	r2, [r3, #0]
}
 800211c:	e049      	b.n	80021b2 <Settings_Read+0x542>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <Settings_Read+0x57c>)
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <Settings_Read+0x580>)
 8002126:	f640 727f 	movw	r2, #3967	; 0xf7f
 800212a:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 800212c:	4b31      	ldr	r3, [pc, #196]	; (80021f4 <Settings_Read+0x584>)
 800212e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002132:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8002134:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <Settings_Read+0x588>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <Settings_Read+0x58c>)
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
		signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8002140:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <Settings_Read+0x590>)
 8002142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002146:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <Settings_Read+0x594>)
 800214a:	2219      	movs	r2, #25
 800214c:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <Settings_Read+0x598>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <Settings_Read+0x59c>)
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <Settings_Read+0x5a0>)
 800215c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002160:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 8002162:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <Settings_Read+0x5a4>)
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 800216a:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <Settings_Read+0x5a8>)
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <Settings_Read+0x55c>)
 800216e:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <Settings_Read+0x54c>)
 8002172:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002176:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <Settings_Read+0x554>)
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <Settings_Read+0x558>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <Settings_Read+0x55c>)
 8002184:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <Settings_Read+0x560>)
 8002188:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800218c:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <Settings_Read+0x564>)
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <Settings_Read+0x568>)
 8002198:	4a0c      	ldr	r2, [pc, #48]	; (80021cc <Settings_Read+0x55c>)
 800219a:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <Settings_Read+0x56c>)
 800219e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80021a2:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <Settings_Read+0x570>)
 80021a6:	f640 32fc 	movw	r2, #3068	; 0xbfc
 80021aa:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <Settings_Read+0x574>)
 80021ae:	2205      	movs	r2, #5
 80021b0:	701a      	strb	r2, [r3, #0]
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	42c80000 	.word	0x42c80000
 80021c4:	200001d0 	.word	0x200001d0
 80021c8:	20000010 	.word	0x20000010
 80021cc:	40400000 	.word	0x40400000
 80021d0:	20000014 	.word	0x20000014
 80021d4:	200001d4 	.word	0x200001d4
 80021d8:	20000018 	.word	0x20000018
 80021dc:	2000001c 	.word	0x2000001c
 80021e0:	2000001e 	.word	0x2000001e
 80021e4:	20000002 	.word	0x20000002
 80021e8:	40a00000 	.word	0x40a00000
 80021ec:	200001ec 	.word	0x200001ec
 80021f0:	200001ee 	.word	0x200001ee
 80021f4:	20000000 	.word	0x20000000
 80021f8:	200001c7 	.word	0x200001c7
 80021fc:	2000023c 	.word	0x2000023c
 8002200:	20000240 	.word	0x20000240
 8002204:	20000244 	.word	0x20000244
 8002208:	200001c4 	.word	0x200001c4
 800220c:	20000020 	.word	0x20000020
 8002210:	20000004 	.word	0x20000004
 8002214:	200001cc 	.word	0x200001cc
 8002218:	20000008 	.word	0x20000008

0800221c <Settings_Write>:
void Settings_Write(){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <Settings_Write+0x124>)
 8002224:	4a47      	ldr	r2, [pc, #284]	; (8002344 <Settings_Write+0x128>)
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f8b6 	bl	800139a <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 800222e:	4b46      	ldr	r3, [pc, #280]	; (8002348 <Settings_Write+0x12c>)
 8002230:	4a46      	ldr	r2, [pc, #280]	; (800234c <Settings_Write+0x130>)
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f8b0 	bl	800139a <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 800223a:	4b45      	ldr	r3, [pc, #276]	; (8002350 <Settings_Write+0x134>)
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <Settings_Write+0x138>)
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f8aa 	bl	800139a <General_Copy_16_Bit>
	settings[6] = motor_invert;
 8002246:	4b44      	ldr	r3, [pc, #272]	; (8002358 <Settings_Write+0x13c>)
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <Settings_Write+0x124>)
 800224c:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 800224e:	4b43      	ldr	r3, [pc, #268]	; (800235c <Settings_Write+0x140>)
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <Settings_Write+0x124>)
 8002254:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_length);
 8002256:	4b42      	ldr	r3, [pc, #264]	; (8002360 <Settings_Write+0x144>)
 8002258:	4a42      	ldr	r2, [pc, #264]	; (8002364 <Settings_Write+0x148>)
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f87f 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_timeout);
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <Settings_Write+0x14c>)
 8002264:	4a41      	ldr	r2, [pc, #260]	; (800236c <Settings_Write+0x150>)
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff f879 	bl	8001360 <General_Copy_32_Bit>
	settings[16] = led_mode;
 800226e:	4b40      	ldr	r3, [pc, #256]	; (8002370 <Settings_Write+0x154>)
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <Settings_Write+0x124>)
 8002274:	741a      	strb	r2, [r3, #16]
	settings[17] = pid_on;
 8002276:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <Settings_Write+0x158>)
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <Settings_Write+0x124>)
 800227c:	745a      	strb	r2, [r3, #17]
	General_Copy_32_Bit((uint32_t)&settings[18], (uint32_t)&pid_kp_1);
 800227e:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <Settings_Write+0x15c>)
 8002280:	4a3e      	ldr	r2, [pc, #248]	; (800237c <Settings_Write+0x160>)
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f86b 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_ki_1);
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <Settings_Write+0x164>)
 800228c:	4a3d      	ldr	r2, [pc, #244]	; (8002384 <Settings_Write+0x168>)
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f865 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_kd_1);
 8002296:	4b3c      	ldr	r3, [pc, #240]	; (8002388 <Settings_Write+0x16c>)
 8002298:	4a3c      	ldr	r2, [pc, #240]	; (800238c <Settings_Write+0x170>)
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff f85f 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kp_2);
 80022a2:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <Settings_Write+0x174>)
 80022a4:	4a3b      	ldr	r2, [pc, #236]	; (8002394 <Settings_Write+0x178>)
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f859 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_ki_2);
 80022ae:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <Settings_Write+0x17c>)
 80022b0:	4a3a      	ldr	r2, [pc, #232]	; (800239c <Settings_Write+0x180>)
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f853 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_kd_2);
 80022ba:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <Settings_Write+0x184>)
 80022bc:	4a39      	ldr	r2, [pc, #228]	; (80023a4 <Settings_Write+0x188>)
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff f84d 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kp_3);
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <Settings_Write+0x18c>)
 80022c8:	4a38      	ldr	r2, [pc, #224]	; (80023ac <Settings_Write+0x190>)
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f847 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_ki_3);
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <Settings_Write+0x194>)
 80022d4:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <Settings_Write+0x198>)
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff f841 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_kd_3);
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <Settings_Write+0x19c>)
 80022e0:	4a36      	ldr	r2, [pc, #216]	; (80023bc <Settings_Write+0x1a0>)
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f83b 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[54], (uint32_t)&pid_split_1);
 80022ea:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <Settings_Write+0x1a4>)
 80022ec:	4a35      	ldr	r2, [pc, #212]	; (80023c4 <Settings_Write+0x1a8>)
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f852 	bl	800139a <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[56], (uint32_t)&pid_split_2);
 80022f6:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <Settings_Write+0x1ac>)
 80022f8:	4a34      	ldr	r2, [pc, #208]	; (80023cc <Settings_Write+0x1b0>)
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f84c 	bl	800139a <General_Copy_16_Bit>
	settings[58] = pid_sampling_time;
 8002302:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <Settings_Write+0x1b4>)
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <Settings_Write+0x124>)
 8002308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	settings[59] = SETTINGS_CRC_PADDING;
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <Settings_Write+0x124>)
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 8002314:	220f      	movs	r2, #15
 8002316:	490a      	ldr	r1, [pc, #40]	; (8002340 <Settings_Write+0x124>)
 8002318:	482e      	ldr	r0, [pc, #184]	; (80023d4 <Settings_Write+0x1b8>)
 800231a:	f001 ff38 	bl	800418e <HAL_CRC_Calculate>
 800231e:	4603      	mov	r3, r0
 8002320:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[60], (uint32_t)&crc);
 8002322:	4a2d      	ldr	r2, [pc, #180]	; (80023d8 <Settings_Write+0x1bc>)
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f7ff f819 	bl	8001360 <General_Copy_32_Bit>
	Flash_Write(settings, SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	492a      	ldr	r1, [pc, #168]	; (80023dc <Settings_Write+0x1c0>)
 8002332:	4803      	ldr	r0, [pc, #12]	; (8002340 <Settings_Write+0x124>)
 8002334:	f7fe ff77 	bl	8001226 <Flash_Write>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	200001fc 	.word	0x200001fc
 8002344:	200001ec 	.word	0x200001ec
 8002348:	200001fe 	.word	0x200001fe
 800234c:	200001ee 	.word	0x200001ee
 8002350:	20000200 	.word	0x20000200
 8002354:	20000000 	.word	0x20000000
 8002358:	200001c7 	.word	0x200001c7
 800235c:	2000023c 	.word	0x2000023c
 8002360:	20000204 	.word	0x20000204
 8002364:	20000240 	.word	0x20000240
 8002368:	20000208 	.word	0x20000208
 800236c:	20000244 	.word	0x20000244
 8002370:	200001c4 	.word	0x200001c4
 8002374:	20000020 	.word	0x20000020
 8002378:	2000020e 	.word	0x2000020e
 800237c:	20000004 	.word	0x20000004
 8002380:	20000212 	.word	0x20000212
 8002384:	200001cc 	.word	0x200001cc
 8002388:	20000216 	.word	0x20000216
 800238c:	20000008 	.word	0x20000008
 8002390:	2000021a 	.word	0x2000021a
 8002394:	2000000c 	.word	0x2000000c
 8002398:	2000021e 	.word	0x2000021e
 800239c:	200001d0 	.word	0x200001d0
 80023a0:	20000222 	.word	0x20000222
 80023a4:	20000010 	.word	0x20000010
 80023a8:	20000226 	.word	0x20000226
 80023ac:	20000014 	.word	0x20000014
 80023b0:	2000022a 	.word	0x2000022a
 80023b4:	200001d4 	.word	0x200001d4
 80023b8:	2000022e 	.word	0x2000022e
 80023bc:	20000018 	.word	0x20000018
 80023c0:	20000232 	.word	0x20000232
 80023c4:	2000001c 	.word	0x2000001c
 80023c8:	20000234 	.word	0x20000234
 80023cc:	2000001e 	.word	0x2000001e
 80023d0:	20000002 	.word	0x20000002
 80023d4:	200003c8 	.word	0x200003c8
 80023d8:	20000238 	.word	0x20000238
 80023dc:	0800fc00 	.word	0x0800fc00

080023e0 <Signal_SysTick_Interrupt>:
uint32_t signal_timeout;

uint8_t signal_present = 0;
uint32_t signal_timeout_passed_ms = 0;

void Signal_SysTick_Interrupt(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	if(signal_present){
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <Signal_SysTick_Interrupt+0x5c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d024      	beq.n	8002436 <Signal_SysTick_Interrupt+0x56>
		if(signal_timeout_passed_ms >= signal_timeout){
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <Signal_SysTick_Interrupt+0x60>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <Signal_SysTick_Interrupt+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d319      	bcc.n	800242c <Signal_SysTick_Interrupt+0x4c>
			signal_present = 0;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <Signal_SysTick_Interrupt+0x5c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
			if(!signal_ignore || (signal_ignore && (!usb_present))){
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <Signal_SysTick_Interrupt+0x68>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <Signal_SysTick_Interrupt+0x36>
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <Signal_SysTick_Interrupt+0x68>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d013      	beq.n	8002436 <Signal_SysTick_Interrupt+0x56>
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <Signal_SysTick_Interrupt+0x6c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <Signal_SysTick_Interrupt+0x56>
				if(pid_running){
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <Signal_SysTick_Interrupt+0x70>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <Signal_SysTick_Interrupt+0x42>
					PID_Stop();
 800241e:	f7ff fbc3 	bl	8001ba8 <PID_Stop>
				}
				pid_setpoint = 0;
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <Signal_SysTick_Interrupt+0x74>)
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
			}
		}else{
			signal_timeout_passed_ms++;
		}
	}
}
 800242a:	e004      	b.n	8002436 <Signal_SysTick_Interrupt+0x56>
			signal_timeout_passed_ms++;
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <Signal_SysTick_Interrupt+0x60>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3301      	adds	r3, #1
 8002432:	4a03      	ldr	r2, [pc, #12]	; (8002440 <Signal_SysTick_Interrupt+0x60>)
 8002434:	6013      	str	r3, [r2, #0]
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000248 	.word	0x20000248
 8002440:	2000024c 	.word	0x2000024c
 8002444:	20000244 	.word	0x20000244
 8002448:	2000023c 	.word	0x2000023c
 800244c:	20000254 	.word	0x20000254
 8002450:	200001d8 	.word	0x200001d8
 8002454:	20000024 	.word	0x20000024

08002458 <Signal_Timer_Interrupt>:
void Signal_Timer_Interrupt(){
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	signal_present = 0;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <Signal_Timer_Interrupt+0x14>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000248 	.word	0x20000248

08002470 <Signal_Interrupt>:
void Signal_Interrupt(){
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
	uint32_t cnt = Signal_Read_Timer();
 8002476:	f000 f903 	bl	8002680 <Signal_Read_Timer>
 800247a:	60f8      	str	r0, [r7, #12]
	if(Signal_Read() == SIGNAL_HIGH){
 800247c:	f000 f918 	bl	80026b0 <Signal_Read>
 8002480:	4603      	mov	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <Signal_Interrupt+0x28>
		Signal_Timer_Reset();
 8002486:	f000 f907 	bl	8002698 <Signal_Timer_Reset>
		signal_present = 1;
 800248a:	4b71      	ldr	r3, [pc, #452]	; (8002650 <Signal_Interrupt+0x1e0>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
		signal_timeout_passed_ms = 0;
 8002490:	4b70      	ldr	r3, [pc, #448]	; (8002654 <Signal_Interrupt+0x1e4>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 8002496:	e0d1      	b.n	800263c <Signal_Interrupt+0x1cc>
	}else if(signal_present){
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <Signal_Interrupt+0x1e0>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80cd 	beq.w	800263c <Signal_Interrupt+0x1cc>
		if(!usb_present || (!signal_ignore && usb_present)){
 80024a2:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <Signal_Interrupt+0x1e8>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <Signal_Interrupt+0x4e>
 80024aa:	4b6c      	ldr	r3, [pc, #432]	; (800265c <Signal_Interrupt+0x1ec>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80c4 	bne.w	800263c <Signal_Interrupt+0x1cc>
 80024b4:	4b68      	ldr	r3, [pc, #416]	; (8002658 <Signal_Interrupt+0x1e8>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80bf 	beq.w	800263c <Signal_Interrupt+0x1cc>
			float received_length_ms  = (float)((uint32_t)cnt + (uint32_t)1) / 12000.0f;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fb50 	bl	8000b68 <__aeabi_ui2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4965      	ldr	r1, [pc, #404]	; (8002660 <Signal_Interrupt+0x1f0>)
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fc57 	bl	8000d80 <__aeabi_fdiv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	60bb      	str	r3, [r7, #8]
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <Signal_Interrupt+0x1f4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f7fe fd43 	bl	8000f68 <__aeabi_fcmple>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 809e 	beq.w	8002626 <Signal_Interrupt+0x1b6>
 80024ea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80024ee:	68b8      	ldr	r0, [r7, #8]
 80024f0:	f7fe fd44 	bl	8000f7c <__aeabi_fcmpge>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8095 	beq.w	8002626 <Signal_Interrupt+0x1b6>
				float new_pid_setpoint = (((float)potentiometer_max - (float)potentiometer_min) * ((received_length_ms - 1.0f) / (signal_length - 1.0f))) + (float)potentiometer_min;
 80024fc:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <Signal_Interrupt+0x1f8>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fb31 	bl	8000b68 <__aeabi_ui2f>
 8002506:	4604      	mov	r4, r0
 8002508:	4b58      	ldr	r3, [pc, #352]	; (800266c <Signal_Interrupt+0x1fc>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fb2b 	bl	8000b68 <__aeabi_ui2f>
 8002512:	4603      	mov	r3, r0
 8002514:	4619      	mov	r1, r3
 8002516:	4620      	mov	r0, r4
 8002518:	f7fe fa74 	bl	8000a04 <__aeabi_fsub>
 800251c:	4603      	mov	r3, r0
 800251e:	461c      	mov	r4, r3
 8002520:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002524:	68b8      	ldr	r0, [r7, #8]
 8002526:	f7fe fa6d 	bl	8000a04 <__aeabi_fsub>
 800252a:	4603      	mov	r3, r0
 800252c:	461d      	mov	r5, r3
 800252e:	4b4d      	ldr	r3, [pc, #308]	; (8002664 <Signal_Interrupt+0x1f4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fa64 	bl	8000a04 <__aeabi_fsub>
 800253c:	4603      	mov	r3, r0
 800253e:	4619      	mov	r1, r3
 8002540:	4628      	mov	r0, r5
 8002542:	f7fe fc1d 	bl	8000d80 <__aeabi_fdiv>
 8002546:	4603      	mov	r3, r0
 8002548:	4619      	mov	r1, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f7fe fb64 	bl	8000c18 <__aeabi_fmul>
 8002550:	4603      	mov	r3, r0
 8002552:	461c      	mov	r4, r3
 8002554:	4b45      	ldr	r3, [pc, #276]	; (800266c <Signal_Interrupt+0x1fc>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fb05 	bl	8000b68 <__aeabi_ui2f>
 800255e:	4603      	mov	r3, r0
 8002560:	4619      	mov	r1, r3
 8002562:	4620      	mov	r0, r4
 8002564:	f7fe fa50 	bl	8000a08 <__addsf3>
 8002568:	4603      	mov	r3, r0
 800256a:	607b      	str	r3, [r7, #4]
					fabs((new_pid_setpoint - (float)potentiometer_min) - (pid_setpoint - (float)potentiometer_min)) / (((float)potentiometer_max - (float)potentiometer_min) / 100.0f)
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <Signal_Interrupt+0x1fc>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe faf9 	bl	8000b68 <__aeabi_ui2f>
 8002576:	4603      	mov	r3, r0
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fa42 	bl	8000a04 <__aeabi_fsub>
 8002580:	4603      	mov	r3, r0
 8002582:	461d      	mov	r5, r3
 8002584:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <Signal_Interrupt+0x200>)
 8002586:	681c      	ldr	r4, [r3, #0]
 8002588:	4b38      	ldr	r3, [pc, #224]	; (800266c <Signal_Interrupt+0x1fc>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe faeb 	bl	8000b68 <__aeabi_ui2f>
 8002592:	4603      	mov	r3, r0
 8002594:	4619      	mov	r1, r3
 8002596:	4620      	mov	r0, r4
 8002598:	f7fe fa34 	bl	8000a04 <__aeabi_fsub>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	4628      	mov	r0, r5
 80025a2:	f7fe fa2f 	bl	8000a04 <__aeabi_fsub>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ff33 	bl	8000418 <__aeabi_f2d>
 80025b2:	4604      	mov	r4, r0
 80025b4:	460d      	mov	r5, r1
 80025b6:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <Signal_Interrupt+0x1f8>)
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fad4 	bl	8000b68 <__aeabi_ui2f>
 80025c0:	4606      	mov	r6, r0
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <Signal_Interrupt+0x1fc>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe face 	bl	8000b68 <__aeabi_ui2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4619      	mov	r1, r3
 80025d0:	4630      	mov	r0, r6
 80025d2:	f7fe fa17 	bl	8000a04 <__aeabi_fsub>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4926      	ldr	r1, [pc, #152]	; (8002674 <Signal_Interrupt+0x204>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fbd0 	bl	8000d80 <__aeabi_fdiv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff18 	bl	8000418 <__aeabi_f2d>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fe f894 	bl	800071c <__aeabi_ddiv>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
				if(
 80025fc:	a312      	add	r3, pc, #72	; (adr r3, 8002648 <Signal_Interrupt+0x1d8>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fe f9e7 	bl	80009d4 <__aeabi_dcmpge>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <Signal_Interrupt+0x1a2>
					led_position_changed = 1;
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <Signal_Interrupt+0x208>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 8002612:	4a17      	ldr	r2, [pc, #92]	; (8002670 <Signal_Interrupt+0x200>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <Signal_Interrupt+0x20c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10c      	bne.n	800263a <Signal_Interrupt+0x1ca>
					PID_Start();
 8002620:	f7ff faa0 	bl	8001b64 <PID_Start>
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8002624:	e009      	b.n	800263a <Signal_Interrupt+0x1ca>
				signal_present = 0;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <Signal_Interrupt+0x1e0>)
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
				if(pid_running){
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <Signal_Interrupt+0x20c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <Signal_Interrupt+0x1cc>
					PID_Stop();
 8002634:	f7ff fab8 	bl	8001ba8 <PID_Stop>
}
 8002638:	e000      	b.n	800263c <Signal_Interrupt+0x1cc>
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 800263a:	bf00      	nop
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002644:	f3af 8000 	nop.w
 8002648:	a0000000 	.word	0xa0000000
 800264c:	3fb99999 	.word	0x3fb99999
 8002650:	20000248 	.word	0x20000248
 8002654:	2000024c 	.word	0x2000024c
 8002658:	20000254 	.word	0x20000254
 800265c:	2000023c 	.word	0x2000023c
 8002660:	463b8000 	.word	0x463b8000
 8002664:	20000240 	.word	0x20000240
 8002668:	200001ee 	.word	0x200001ee
 800266c:	200001ec 	.word	0x200001ec
 8002670:	20000024 	.word	0x20000024
 8002674:	42c80000 	.word	0x42c80000
 8002678:	200001c5 	.word	0x200001c5
 800267c:	200001d8 	.word	0x200001d8

08002680 <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <Signal_Read_Timer+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000460 	.word	0x20000460

08002698 <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <Signal_Timer_Reset+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	20000460 	.word	0x20000460

080026b0 <Signal_Read>:
uint8_t Signal_Read(){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 80026be:	e01d      	b.n	80026fc <Signal_Read+0x4c>
		i = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 80026c4:	2102      	movs	r1, #2
 80026c6:	4811      	ldr	r0, [pc, #68]	; (800270c <Signal_Read+0x5c>)
 80026c8:	f002 f918 	bl	80048fc <HAL_GPIO_ReadPin>
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 80026d0:	e011      	b.n	80026f6 <Signal_Read+0x46>
			i++;
 80026d2:	797b      	ldrb	r3, [r7, #5]
 80026d4:	3301      	adds	r3, #1
 80026d6:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 80026d8:	2102      	movs	r1, #2
 80026da:	480c      	ldr	r0, [pc, #48]	; (800270c <Signal_Read+0x5c>)
 80026dc:	f002 f90e 	bl	80048fc <HAL_GPIO_ReadPin>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d000      	beq.n	80026ec <Signal_Read+0x3c>
				break;
 80026ea:	e007      	b.n	80026fc <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 80026ec:	797b      	ldrb	r3, [r7, #5]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d101      	bne.n	80026f6 <Signal_Read+0x46>
				d = 1;
 80026f2:	2301      	movs	r3, #1
 80026f4:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 80026f6:	797b      	ldrb	r3, [r7, #5]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d1ea      	bne.n	80026d2 <Signal_Read+0x22>
	while(d != 1){
 80026fc:	79bb      	ldrb	r3, [r7, #6]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d1de      	bne.n	80026c0 <Signal_Read+0x10>
			}
		}
	}
	return level;
 8002702:	79fb      	ldrb	r3, [r7, #7]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40010c00 	.word	0x40010c00

08002710 <Signal_Init>:

void Signal_Init(){
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <Signal_Init+0x10>)
 8002716:	f004 fbc9 	bl	8006eac <HAL_TIM_Base_Start>
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000460 	.word	0x20000460

08002724 <USB_Det_Read>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

uint8_t USB_Det_Read(){
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8002732:	e01f      	b.n	8002774 <USB_Det_Read+0x50>
		i = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8002738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800273c:	4811      	ldr	r0, [pc, #68]	; (8002784 <USB_Det_Read+0x60>)
 800273e:	f002 f8dd 	bl	80048fc <HAL_GPIO_ReadPin>
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8002746:	e012      	b.n	800276e <USB_Det_Read+0x4a>
			i++;
 8002748:	797b      	ldrb	r3, [r7, #5]
 800274a:	3301      	adds	r3, #1
 800274c:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 800274e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002752:	480c      	ldr	r0, [pc, #48]	; (8002784 <USB_Det_Read+0x60>)
 8002754:	f002 f8d2 	bl	80048fc <HAL_GPIO_ReadPin>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4293      	cmp	r3, r2
 8002760:	d000      	beq.n	8002764 <USB_Det_Read+0x40>
				break;
 8002762:	e007      	b.n	8002774 <USB_Det_Read+0x50>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8002764:	797b      	ldrb	r3, [r7, #5]
 8002766:	2b05      	cmp	r3, #5
 8002768:	d101      	bne.n	800276e <USB_Det_Read+0x4a>
				d = 1;
 800276a:	2301      	movs	r3, #1
 800276c:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 800276e:	797b      	ldrb	r3, [r7, #5]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d1e9      	bne.n	8002748 <USB_Det_Read+0x24>
	while(d != 1){
 8002774:	79bb      	ldrb	r3, [r7, #6]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d1dc      	bne.n	8002734 <USB_Det_Read+0x10>
			}
		}
	}
	return level;
 800277a:	79fb      	ldrb	r3, [r7, #7]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40010c00 	.word	0x40010c00

08002788 <USB_Det_Interrupt>:
void USB_Det_Interrupt(){
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 800278c:	f7ff ffca 	bl	8002724 <USB_Det_Read>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	d103      	bne.n	800279e <USB_Det_Interrupt+0x16>
		usb_present = 1;
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <USB_Det_Interrupt+0x2c>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e002      	b.n	80027a4 <USB_Det_Interrupt+0x1c>
	}else{
		usb_present = 0;
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <USB_Det_Interrupt+0x2c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
	}
	if(pid_running){
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <USB_Det_Interrupt+0x30>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <USB_Det_Interrupt+0x28>
		PID_Stop();
 80027ac:	f7ff f9fc 	bl	8001ba8 <PID_Stop>
	}
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000254 	.word	0x20000254
 80027b8:	200001d8 	.word	0x200001d8

080027bc <USB_Init>:
void USB_Init(){
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 80027c0:	f7ff ffb0 	bl	8002724 <USB_Det_Read>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d103      	bne.n	80027d2 <USB_Init+0x16>
		usb_present = 1;
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <USB_Init+0x20>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
	}else{
		usb_present = 0;
	}
}
 80027d0:	e002      	b.n	80027d8 <USB_Init+0x1c>
		usb_present = 0;
 80027d2:	4b02      	ldr	r3, [pc, #8]	; (80027dc <USB_Init+0x20>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000254 	.word	0x20000254

080027e0 <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3301      	adds	r3, #1
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d11c      	bne.n	800282e <USB_Packet_Received+0x4e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d116      	bne.n	800282e <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3b01      	subs	r3, #1
 8002806:	461a      	mov	r2, r3
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4829      	ldr	r0, [pc, #164]	; (80028b0 <USB_Packet_Received+0xd0>)
 800280c:	f001 fcbf 	bl	800418e <HAL_CRC_Calculate>
 8002810:	4601      	mov	r1, r0
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	3b04      	subs	r3, #4
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4299      	cmp	r1, r3
 800281e:	d143      	bne.n	80028a8 <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f84d 	bl	80028c0 <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 8002826:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <USB_Packet_Received+0xd4>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 800282c:	e03c      	b.n	80028a8 <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3301      	adds	r3, #1
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d108      	bne.n	800284a <USB_Packet_Received+0x6a>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d105      	bne.n	800284a <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	481d      	ldr	r0, [pc, #116]	; (80028b8 <USB_Packet_Received+0xd8>)
 8002844:	f00a f8ba 	bl	800c9bc <memcpy>
 8002848:	e02e      	b.n	80028a8 <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <USB_Packet_Received+0xd8>)
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d126      	bne.n	80028a0 <USB_Packet_Received+0xc0>
 8002852:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <USB_Packet_Received+0xd8>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	3340      	adds	r3, #64	; 0x40
 800285c:	429a      	cmp	r2, r3
 800285e:	d11f      	bne.n	80028a0 <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4815      	ldr	r0, [pc, #84]	; (80028bc <USB_Packet_Received+0xdc>)
 8002866:	f00a f8a9 	bl	800c9bc <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3340      	adds	r3, #64	; 0x40
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3b01      	subs	r3, #1
 8002872:	461a      	mov	r2, r3
 8002874:	4910      	ldr	r1, [pc, #64]	; (80028b8 <USB_Packet_Received+0xd8>)
 8002876:	480e      	ldr	r0, [pc, #56]	; (80028b0 <USB_Packet_Received+0xd0>)
 8002878:	f001 fc89 	bl	800418e <HAL_CRC_Calculate>
 800287c:	4602      	mov	r2, r0
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	333c      	adds	r3, #60	; 0x3c
 8002882:	490d      	ldr	r1, [pc, #52]	; (80028b8 <USB_Packet_Received+0xd8>)
 8002884:	440b      	add	r3, r1
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d105      	bne.n	8002898 <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 800288c:	480a      	ldr	r0, [pc, #40]	; (80028b8 <USB_Packet_Received+0xd8>)
 800288e:	f000 f8ff 	bl	8002a90 <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <USB_Packet_Received+0xd4>)
 8002894:	2202      	movs	r2, #2
 8002896:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <USB_Packet_Received+0xd8>)
 800289a:	22ff      	movs	r2, #255	; 0xff
 800289c:	705a      	strb	r2, [r3, #1]
 800289e:	e003      	b.n	80028a8 <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <USB_Packet_Received+0xd8>)
 80028a2:	22ff      	movs	r2, #255	; 0xff
 80028a4:	705a      	strb	r2, [r3, #1]
	}
}
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	200003c8 	.word	0x200003c8
 80028b4:	20000250 	.word	0x20000250
 80028b8:	20000298 	.word	0x20000298
 80028bc:	200002d8 	.word	0x200002d8

080028c0 <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	789a      	ldrb	r2, [r3, #2]
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <USB_Parse_Config+0x1c>)
 80028ce:	701a      	strb	r2, [r3, #0]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000251 	.word	0x20000251

080028e0 <USB_Send_Config>:
void USB_Send_Config(){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 80028e6:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <USB_Send_Config+0x128>)
 80028e8:	2240      	movs	r2, #64	; 0x40
 80028ea:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 80028ec:	4b46      	ldr	r3, [pc, #280]	; (8002a08 <USB_Send_Config+0x128>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <USB_Send_Config+0x12c>)
 80028f4:	4a46      	ldr	r2, [pc, #280]	; (8002a10 <USB_Send_Config+0x130>)
 80028f6:	8812      	ldrh	r2, [r2, #0]
 80028f8:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <USB_Send_Config+0x134>)
 80028fc:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <USB_Send_Config+0x138>)
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 8002902:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <USB_Send_Config+0x13c>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	4a46      	ldr	r2, [pc, #280]	; (8002a20 <USB_Send_Config+0x140>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	b29b      	uxth	r3, r3
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <USB_Send_Config+0x128>)
 8002914:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 8002916:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <USB_Send_Config+0x144>)
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <USB_Send_Config+0x128>)
 800291c:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 800291e:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <USB_Send_Config+0x148>)
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <USB_Send_Config+0x128>)
 8002924:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_length);
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <USB_Send_Config+0x14c>)
 8002928:	4a41      	ldr	r2, [pc, #260]	; (8002a30 <USB_Send_Config+0x150>)
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fd17 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_timeout);
 8002932:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <USB_Send_Config+0x154>)
 8002934:	4a40      	ldr	r2, [pc, #256]	; (8002a38 <USB_Send_Config+0x158>)
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fd11 	bl	8001360 <General_Copy_32_Bit>
	usb_tx_buffer[17] = led_mode;
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <USB_Send_Config+0x15c>)
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <USB_Send_Config+0x128>)
 8002944:	745a      	strb	r2, [r3, #17]
	usb_tx_buffer[18] = pid_on;
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <USB_Send_Config+0x160>)
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <USB_Send_Config+0x128>)
 800294c:	749a      	strb	r2, [r3, #18]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[19], (uint32_t)&pid_kp_1);
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <USB_Send_Config+0x164>)
 8002950:	4a3d      	ldr	r2, [pc, #244]	; (8002a48 <USB_Send_Config+0x168>)
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fd03 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_ki_1);
 800295a:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <USB_Send_Config+0x16c>)
 800295c:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <USB_Send_Config+0x170>)
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fcfd 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_kd_1);
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <USB_Send_Config+0x174>)
 8002968:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <USB_Send_Config+0x178>)
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fcf7 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kp_1);
 8002972:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <USB_Send_Config+0x17c>)
 8002974:	4a34      	ldr	r2, [pc, #208]	; (8002a48 <USB_Send_Config+0x168>)
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fcf1 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_ki_1);
 800297e:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <USB_Send_Config+0x180>)
 8002980:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <USB_Send_Config+0x170>)
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fceb 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_kd_1);
 800298a:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <USB_Send_Config+0x184>)
 800298c:	4a32      	ldr	r2, [pc, #200]	; (8002a58 <USB_Send_Config+0x178>)
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fce5 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kp_1);
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <USB_Send_Config+0x188>)
 8002998:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <USB_Send_Config+0x168>)
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fcdf 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_ki_1);
 80029a2:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <USB_Send_Config+0x18c>)
 80029a4:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <USB_Send_Config+0x170>)
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe fcd9 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_kd_1);
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <USB_Send_Config+0x190>)
 80029b0:	4a29      	ldr	r2, [pc, #164]	; (8002a58 <USB_Send_Config+0x178>)
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fcd3 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_split_1);
 80029ba:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <USB_Send_Config+0x194>)
 80029bc:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <USB_Send_Config+0x198>)
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fcea 	bl	800139a <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[57], (uint32_t)&pid_split_2);
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <USB_Send_Config+0x19c>)
 80029c8:	4a2d      	ldr	r2, [pc, #180]	; (8002a80 <USB_Send_Config+0x1a0>)
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fce4 	bl	800139a <General_Copy_16_Bit>
	usb_tx_buffer[59] = pid_sampling_time;
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <USB_Send_Config+0x1a4>)
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <USB_Send_Config+0x128>)
 80029d8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 80029dc:	220f      	movs	r2, #15
 80029de:	490a      	ldr	r1, [pc, #40]	; (8002a08 <USB_Send_Config+0x128>)
 80029e0:	4829      	ldr	r0, [pc, #164]	; (8002a88 <USB_Send_Config+0x1a8>)
 80029e2:	f001 fbd4 	bl	800418e <HAL_CRC_Calculate>
 80029e6:	4603      	mov	r3, r0
 80029e8:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[60], (uint32_t)&crc);
 80029ea:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <USB_Send_Config+0x1ac>)
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7fe fcb5 	bl	8001360 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 80029f6:	2140      	movs	r1, #64	; 0x40
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <USB_Send_Config+0x128>)
 80029fa:	f009 fbdd 	bl	800c1b8 <CDC_Transmit_FS>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000258 	.word	0x20000258
 8002a0c:	2000025a 	.word	0x2000025a
 8002a10:	200001ec 	.word	0x200001ec
 8002a14:	2000025c 	.word	0x2000025c
 8002a18:	200001ee 	.word	0x200001ee
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	cccccccd 	.word	0xcccccccd
 8002a24:	200001c7 	.word	0x200001c7
 8002a28:	2000023c 	.word	0x2000023c
 8002a2c:	20000261 	.word	0x20000261
 8002a30:	20000240 	.word	0x20000240
 8002a34:	20000265 	.word	0x20000265
 8002a38:	20000244 	.word	0x20000244
 8002a3c:	200001c4 	.word	0x200001c4
 8002a40:	20000020 	.word	0x20000020
 8002a44:	2000026b 	.word	0x2000026b
 8002a48:	20000004 	.word	0x20000004
 8002a4c:	2000026f 	.word	0x2000026f
 8002a50:	200001cc 	.word	0x200001cc
 8002a54:	20000273 	.word	0x20000273
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000277 	.word	0x20000277
 8002a60:	2000027b 	.word	0x2000027b
 8002a64:	2000027f 	.word	0x2000027f
 8002a68:	20000283 	.word	0x20000283
 8002a6c:	20000287 	.word	0x20000287
 8002a70:	2000028b 	.word	0x2000028b
 8002a74:	2000028f 	.word	0x2000028f
 8002a78:	2000001c 	.word	0x2000001c
 8002a7c:	20000291 	.word	0x20000291
 8002a80:	2000001e 	.word	0x2000001e
 8002a84:	20000002 	.word	0x20000002
 8002a88:	200003c8 	.word	0x200003c8
 8002a8c:	20000294 	.word	0x20000294

08002a90 <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	885a      	ldrh	r2, [r3, #2]
 8002a9c:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <USB_Parse_Status+0x188>)
 8002a9e:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	889a      	ldrh	r2, [r3, #4]
 8002aa4:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <USB_Parse_Status+0x18c>)
 8002aa6:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3306      	adds	r3, #6
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <USB_Parse_Status+0x190>)
 8002abc:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	79da      	ldrb	r2, [r3, #7]
 8002ac2:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <USB_Parse_Status+0x194>)
 8002ac4:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7a1a      	ldrb	r2, [r3, #8]
 8002aca:	4b57      	ldr	r3, [pc, #348]	; (8002c28 <USB_Parse_Status+0x198>)
 8002acc:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&data[9]);
 8002ace:	4a57      	ldr	r2, [pc, #348]	; (8002c2c <USB_Parse_Status+0x19c>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3309      	adds	r3, #9
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f7fe fc42 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[13]);
 8002adc:	4a54      	ldr	r2, [pc, #336]	; (8002c30 <USB_Parse_Status+0x1a0>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	330d      	adds	r3, #13
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	f7fe fc3b 	bl	8001360 <General_Copy_32_Bit>
	led_mode = data[17];
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7c5a      	ldrb	r2, [r3, #17]
 8002aee:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <USB_Parse_Status+0x1a4>)
 8002af0:	701a      	strb	r2, [r3, #0]
	pid_on = data[18];
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7c9a      	ldrb	r2, [r3, #18]
 8002af6:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <USB_Parse_Status+0x1a8>)
 8002af8:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[19]);
 8002afa:	4a50      	ldr	r2, [pc, #320]	; (8002c3c <USB_Parse_Status+0x1ac>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3313      	adds	r3, #19
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7fe fc2c 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[23]);
 8002b08:	4a4d      	ldr	r2, [pc, #308]	; (8002c40 <USB_Parse_Status+0x1b0>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3317      	adds	r3, #23
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4610      	mov	r0, r2
 8002b12:	f7fe fc25 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[27]);
 8002b16:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <USB_Parse_Status+0x1b4>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	331b      	adds	r3, #27
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f7fe fc1e 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[31]);
 8002b24:	4a48      	ldr	r2, [pc, #288]	; (8002c48 <USB_Parse_Status+0x1b8>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	331f      	adds	r3, #31
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f7fe fc17 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[35]);
 8002b32:	4a46      	ldr	r2, [pc, #280]	; (8002c4c <USB_Parse_Status+0x1bc>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3323      	adds	r3, #35	; 0x23
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f7fe fc10 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[39]);
 8002b40:	4a43      	ldr	r2, [pc, #268]	; (8002c50 <USB_Parse_Status+0x1c0>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3327      	adds	r3, #39	; 0x27
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f7fe fc09 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[43]);
 8002b4e:	4a41      	ldr	r2, [pc, #260]	; (8002c54 <USB_Parse_Status+0x1c4>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	332b      	adds	r3, #43	; 0x2b
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f7fe fc02 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[47]);
 8002b5c:	4a3e      	ldr	r2, [pc, #248]	; (8002c58 <USB_Parse_Status+0x1c8>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	332f      	adds	r3, #47	; 0x2f
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7fe fbfb 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[51]);
 8002b6a:	4a3c      	ldr	r2, [pc, #240]	; (8002c5c <USB_Parse_Status+0x1cc>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3333      	adds	r3, #51	; 0x33
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f7fe fbf4 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[55]);
 8002b78:	4a39      	ldr	r2, [pc, #228]	; (8002c60 <USB_Parse_Status+0x1d0>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3337      	adds	r3, #55	; 0x37
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f7fe fc0a 	bl	800139a <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[57]);
 8002b86:	4a37      	ldr	r2, [pc, #220]	; (8002c64 <USB_Parse_Status+0x1d4>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3339      	adds	r3, #57	; 0x39
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f7fe fc03 	bl	800139a <General_Copy_16_Bit>
	pid_sampling_time = data[59];
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8002b9a:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <USB_Parse_Status+0x1d8>)
 8002b9c:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 8002b9e:	f7fe fddb 	bl	8001758 <PID_Get_Sampling_Time>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <USB_Parse_Status+0x1d8>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d005      	beq.n	8002bbc <USB_Parse_Status+0x12c>
		PID_Set_Sampling_Time(pid_sampling_time);
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <USB_Parse_Status+0x1d8>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fde0 	bl	800177c <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[60]);
 8002bc2:	f107 020c 	add.w	r2, r7, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	333c      	adds	r3, #60	; 0x3c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f7fe fbc7 	bl	8001360 <General_Copy_32_Bit>
	if(signal_ignore){
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <USB_Parse_Status+0x198>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00f      	beq.n	8002bfa <USB_Parse_Status+0x16a>
		if(pid_setpoint != new_pid_setpoint){
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <USB_Parse_Status+0x1dc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f9ac 	bl	8000f40 <__aeabi_fcmpeq>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <USB_Parse_Status+0x164>
			led_position_changed = 1;
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <USB_Parse_Status+0x1e0>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <USB_Parse_Status+0x1dc>)
 8002bf8:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[64];
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <USB_Parse_Status+0x1e4>)
 8002c02:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[65];
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <USB_Parse_Status+0x1e8>)
 8002c0c:	701a      	strb	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200001ec 	.word	0x200001ec
 8002c1c:	200001ee 	.word	0x200001ee
 8002c20:	20000000 	.word	0x20000000
 8002c24:	200001c7 	.word	0x200001c7
 8002c28:	2000023c 	.word	0x2000023c
 8002c2c:	20000240 	.word	0x20000240
 8002c30:	20000244 	.word	0x20000244
 8002c34:	200001c4 	.word	0x200001c4
 8002c38:	20000020 	.word	0x20000020
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	200001cc 	.word	0x200001cc
 8002c44:	20000008 	.word	0x20000008
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	200001d0 	.word	0x200001d0
 8002c50:	20000010 	.word	0x20000010
 8002c54:	20000014 	.word	0x20000014
 8002c58:	200001d4 	.word	0x200001d4
 8002c5c:	20000018 	.word	0x20000018
 8002c60:	2000001c 	.word	0x2000001c
 8002c64:	2000001e 	.word	0x2000001e
 8002c68:	20000002 	.word	0x20000002
 8002c6c:	20000024 	.word	0x20000024
 8002c70:	200001c5 	.word	0x200001c5
 8002c74:	20000253 	.word	0x20000253
 8002c78:	20000252 	.word	0x20000252

08002c7c <USB_Send_Status>:
void USB_Send_Status(){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <USB_Send_Status+0x84>)
 8002c84:	2214      	movs	r2, #20
 8002c86:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <USB_Send_Status+0x84>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <USB_Send_Status+0x88>)
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <USB_Send_Status+0x84>)
 8002c94:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <USB_Send_Status+0x8c>)
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <USB_Send_Status+0x90>)
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fb5f 	bl	8001360 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <USB_Send_Status+0x94>)
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <USB_Send_Status+0x98>)
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fb59 	bl	8001360 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 8002cae:	f7fe fcdd 	bl	800166c <Motor_Get>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <USB_Send_Status+0x9c>)
 8002cb8:	1dbb      	adds	r3, r7, #6
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	f7fe fb6c 	bl	800139a <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <USB_Send_Status+0x84>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <USB_Send_Status+0x84>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <USB_Send_Status+0x84>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	490a      	ldr	r1, [pc, #40]	; (8002d00 <USB_Send_Status+0x84>)
 8002cd8:	4810      	ldr	r0, [pc, #64]	; (8002d1c <USB_Send_Status+0xa0>)
 8002cda:	f001 fa58 	bl	800418e <HAL_CRC_Calculate>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 8002ce2:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <USB_Send_Status+0xa4>)
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f7fe fb39 	bl	8001360 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 8002cee:	2114      	movs	r1, #20
 8002cf0:	4803      	ldr	r0, [pc, #12]	; (8002d00 <USB_Send_Status+0x84>)
 8002cf2:	f009 fa61 	bl	800c1b8 <CDC_Transmit_FS>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000258 	.word	0x20000258
 8002d04:	200001d8 	.word	0x200001d8
 8002d08:	2000025b 	.word	0x2000025b
 8002d0c:	20000024 	.word	0x20000024
 8002d10:	2000025f 	.word	0x2000025f
 8002d14:	200001f8 	.word	0x200001f8
 8002d18:	20000263 	.word	0x20000263
 8002d1c:	200003c8 	.word	0x200003c8
 8002d20:	20000268 	.word	0x20000268

08002d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d28:	f000 fbf6 	bl	8003518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d2c:	f000 f813 	bl	8002d56 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d30:	f000 f9de 	bl	80030f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002d34:	f000 f86c 	bl	8002e10 <MX_ADC1_Init>
  MX_CRC_Init();
 8002d38:	f000 f8a8 	bl	8002e8c <MX_CRC_Init>
  MX_TIM2_Init();
 8002d3c:	f000 f8ba 	bl	8002eb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d40:	f000 f93a 	bl	8002fb8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d44:	f000 f986 	bl	8003054 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002d48:	f009 f972 	bl	800c030 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 8002d4c:	f7fe f9ac 	bl	80010a8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 8002d50:	f7fe f9b8 	bl	80010c4 <App_Loop>
 8002d54:	e7fc      	b.n	8002d50 <main+0x2c>

08002d56 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b094      	sub	sp, #80	; 0x50
 8002d5a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d60:	2228      	movs	r2, #40	; 0x28
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f009 fe37 	bl	800c9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	60da      	str	r2, [r3, #12]
 8002d78:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d86:	2301      	movs	r3, #1
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002d90:	2300      	movs	r3, #0
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d94:	2301      	movs	r3, #1
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002da2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 fab1 	bl	8006314 <HAL_RCC_OscConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002db8:	f000 fa04 	bl	80031c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dcc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fd1d 	bl	8006818 <HAL_RCC_ClockConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002de4:	f000 f9ee 	bl	80031c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002de8:	2312      	movs	r3, #18
 8002dea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fe91 	bl	8006b20 <HAL_RCCEx_PeriphCLKConfig>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002e04:	f000 f9de 	bl	80031c4 <Error_Handler>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3750      	adds	r7, #80	; 0x50
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e22:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <MX_ADC1_Init+0x78>)
 8002e24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002e3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e4c:	480d      	ldr	r0, [pc, #52]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e4e:	f000 fbc5 	bl	80035dc <HAL_ADC_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002e58:	f000 f9b4 	bl	80031c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002e64:	2307      	movs	r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <MX_ADC1_Init+0x74>)
 8002e6e:	f000 fe1b 	bl	8003aa8 <HAL_ADC_ConfigChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002e78:	f000 f9a4 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000398 	.word	0x20000398
 8002e88:	40012400 	.word	0x40012400

08002e8c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <MX_CRC_Init+0x20>)
 8002e92:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <MX_CRC_Init+0x24>)
 8002e94:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	; (8002eac <MX_CRC_Init+0x20>)
 8002e98:	f001 f95d 	bl	8004156 <HAL_CRC_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002ea2:	f000 f98f 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200003c8 	.word	0x200003c8
 8002eb0:	40023000 	.word	0x40023000

08002eb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 0320 	add.w	r3, r7, #32
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
 8002ee0:	615a      	str	r2, [r3, #20]
 8002ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ee4:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002ee6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002eee:	2207      	movs	r2, #7
 8002ef0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002efe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f0c:	4829      	ldr	r0, [pc, #164]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002f0e:	f003 ff7d 	bl	8006e0c <HAL_TIM_Base_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002f18:	f000 f954 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f26:	4619      	mov	r1, r3
 8002f28:	4822      	ldr	r0, [pc, #136]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002f2a:	f004 fb49 	bl	80075c0 <HAL_TIM_ConfigClockSource>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002f34:	f000 f946 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f38:	481e      	ldr	r0, [pc, #120]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002f3a:	f004 f881 	bl	8007040 <HAL_TIM_PWM_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002f44:	f000 f93e 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f50:	f107 0320 	add.w	r3, r7, #32
 8002f54:	4619      	mov	r1, r3
 8002f56:	4817      	ldr	r0, [pc, #92]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002f58:	f004 febe 	bl	8007cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002f62:	f000 f92f 	bl	80031c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f66:	2360      	movs	r3, #96	; 0x60
 8002f68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002f70:	2302      	movs	r3, #2
 8002f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002f80:	f004 fa60 	bl	8007444 <HAL_TIM_PWM_ConfigChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002f8a:	f000 f91b 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	2204      	movs	r2, #4
 8002f92:	4619      	mov	r1, r3
 8002f94:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002f96:	f004 fa55 	bl	8007444 <HAL_TIM_PWM_ConfigChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002fa0:	f000 f910 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002fa4:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <MX_TIM2_Init+0x100>)
 8002fa6:	f000 f9fb 	bl	80033a0 <HAL_TIM_MspPostInit>

}
 8002faa:	bf00      	nop
 8002fac:	3738      	adds	r7, #56	; 0x38
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200003d0 	.word	0x200003d0

08002fb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fbe:	f107 0308 	add.w	r3, r7, #8
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fcc:	463b      	mov	r3, r7
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <MX_TIM3_Init+0x94>)
 8002fd6:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <MX_TIM3_Init+0x98>)
 8002fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <MX_TIM3_Init+0x94>)
 8002fdc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002fe0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <MX_TIM3_Init+0x94>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <MX_TIM3_Init+0x94>)
 8002fea:	22c7      	movs	r2, #199	; 0xc7
 8002fec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <MX_TIM3_Init+0x94>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <MX_TIM3_Init+0x94>)
 8002ff6:	2280      	movs	r2, #128	; 0x80
 8002ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ffa:	4814      	ldr	r0, [pc, #80]	; (800304c <MX_TIM3_Init+0x94>)
 8002ffc:	f003 ff06 	bl	8006e0c <HAL_TIM_Base_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003006:	f000 f8dd 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800300e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003010:	f107 0308 	add.w	r3, r7, #8
 8003014:	4619      	mov	r1, r3
 8003016:	480d      	ldr	r0, [pc, #52]	; (800304c <MX_TIM3_Init+0x94>)
 8003018:	f004 fad2 	bl	80075c0 <HAL_TIM_ConfigClockSource>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003022:	f000 f8cf 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800302e:	463b      	mov	r3, r7
 8003030:	4619      	mov	r1, r3
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <MX_TIM3_Init+0x94>)
 8003034:	f004 fe50 	bl	8007cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800303e:	f000 f8c1 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000418 	.word	0x20000418
 8003050:	40000400 	.word	0x40000400

08003054 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305a:	f107 0308 	add.w	r3, r7, #8
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003068:	463b      	mov	r3, r7
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <MX_TIM4_Init+0x94>)
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <MX_TIM4_Init+0x98>)
 8003074:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5;
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <MX_TIM4_Init+0x94>)
 8003078:	2205      	movs	r2, #5
 800307a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <MX_TIM4_Init+0x94>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <MX_TIM4_Init+0x94>)
 8003084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003088:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308a:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <MX_TIM4_Init+0x94>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <MX_TIM4_Init+0x94>)
 8003092:	2200      	movs	r2, #0
 8003094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003096:	4814      	ldr	r0, [pc, #80]	; (80030e8 <MX_TIM4_Init+0x94>)
 8003098:	f003 feb8 	bl	8006e0c <HAL_TIM_Base_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80030a2:	f000 f88f 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	4619      	mov	r1, r3
 80030b2:	480d      	ldr	r0, [pc, #52]	; (80030e8 <MX_TIM4_Init+0x94>)
 80030b4:	f004 fa84 	bl	80075c0 <HAL_TIM_ConfigClockSource>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80030be:	f000 f881 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030ca:	463b      	mov	r3, r7
 80030cc:	4619      	mov	r1, r3
 80030ce:	4806      	ldr	r0, [pc, #24]	; (80030e8 <MX_TIM4_Init+0x94>)
 80030d0:	f004 fe02 	bl	8007cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80030da:	f000 f873 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000460 	.word	0x20000460
 80030ec:	40000800 	.word	0x40000800

080030f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f6:	f107 0310 	add.w	r3, r7, #16
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <MX_GPIO_Init+0xc4>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a2a      	ldr	r2, [pc, #168]	; (80031b4 <MX_GPIO_Init+0xc4>)
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	6193      	str	r3, [r2, #24]
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <MX_GPIO_Init+0xc4>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <MX_GPIO_Init+0xc4>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <MX_GPIO_Init+0xc4>)
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	6193      	str	r3, [r2, #24]
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <MX_GPIO_Init+0xc4>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <MX_GPIO_Init+0xc4>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <MX_GPIO_Init+0xc4>)
 800313a:	f043 0308 	orr.w	r3, r3, #8
 800313e:	6193      	str	r3, [r2, #24]
 8003140:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <MX_GPIO_Init+0xc4>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800314c:	2200      	movs	r2, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	4819      	ldr	r0, [pc, #100]	; (80031b8 <MX_GPIO_Init+0xc8>)
 8003152:	f001 fbea 	bl	800492a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003156:	2380      	movs	r3, #128	; 0x80
 8003158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315a:	2301      	movs	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800315e:	2302      	movs	r3, #2
 8003160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003162:	2303      	movs	r3, #3
 8003164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003166:	f107 0310 	add.w	r3, r7, #16
 800316a:	4619      	mov	r1, r3
 800316c:	4812      	ldr	r0, [pc, #72]	; (80031b8 <MX_GPIO_Init+0xc8>)
 800316e:	f001 fa41 	bl	80045f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_Pin USB_DET_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|USB_DET_Pin;
 8003172:	f240 2302 	movw	r3, #514	; 0x202
 8003176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <MX_GPIO_Init+0xcc>)
 800317a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800317c:	2302      	movs	r3, #2
 800317e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4619      	mov	r1, r3
 8003186:	480e      	ldr	r0, [pc, #56]	; (80031c0 <MX_GPIO_Init+0xd0>)
 8003188:	f001 fa34 	bl	80045f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2100      	movs	r1, #0
 8003190:	2007      	movs	r0, #7
 8003192:	f000 ffaa 	bl	80040ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003196:	2007      	movs	r0, #7
 8003198:	f000 ffc3 	bl	8004122 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2105      	movs	r1, #5
 80031a0:	2017      	movs	r0, #23
 80031a2:	f000 ffa2 	bl	80040ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031a6:	2017      	movs	r0, #23
 80031a8:	f000 ffbb 	bl	8004122 <HAL_NVIC_EnableIRQ>

}
 80031ac:	bf00      	nop
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40010800 	.word	0x40010800
 80031bc:	10310000 	.word	0x10310000
 80031c0:	40010c00 	.word	0x40010c00

080031c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c8:	b672      	cpsid	i
}
 80031ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031cc:	e7fe      	b.n	80031cc <Error_Handler+0x8>
	...

080031d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <HAL_MspInit+0x5c>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <HAL_MspInit+0x5c>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6193      	str	r3, [r2, #24]
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_MspInit+0x5c>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_MspInit+0x5c>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_MspInit+0x5c>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	61d3      	str	r3, [r2, #28]
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_MspInit+0x5c>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_MspInit+0x60>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_MspInit+0x60>)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	40021000 	.word	0x40021000
 8003230:	40010000 	.word	0x40010000

08003234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 0310 	add.w	r3, r7, #16
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_ADC_MspInit+0x7c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d129      	bne.n	80032a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <HAL_ADC_MspInit+0x80>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_ADC_MspInit+0x80>)
 800325a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325e:	6193      	str	r3, [r2, #24]
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <HAL_ADC_MspInit+0x80>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_ADC_MspInit+0x80>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <HAL_ADC_MspInit+0x80>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6193      	str	r3, [r2, #24]
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_ADC_MspInit+0x80>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8003284:	2310      	movs	r3, #16
 8003286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003288:	2303      	movs	r3, #3
 800328a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4619      	mov	r1, r3
 8003292:	4809      	ldr	r0, [pc, #36]	; (80032b8 <HAL_ADC_MspInit+0x84>)
 8003294:	f001 f9ae 	bl	80045f4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8003298:	2200      	movs	r2, #0
 800329a:	2102      	movs	r1, #2
 800329c:	2012      	movs	r0, #18
 800329e:	f000 ff24 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80032a2:	2012      	movs	r0, #18
 80032a4:	f000 ff3d 	bl	8004122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032a8:	bf00      	nop
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012400 	.word	0x40012400
 80032b4:	40021000 	.word	0x40021000
 80032b8:	40010800 	.word	0x40010800

080032bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_CRC_MspInit+0x34>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10b      	bne.n	80032e6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_CRC_MspInit+0x38>)
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <HAL_CRC_MspInit+0x38>)
 80032d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d8:	6153      	str	r3, [r2, #20]
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_CRC_MspInit+0x38>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40023000 	.word	0x40023000
 80032f4:	40021000 	.word	0x40021000

080032f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d10c      	bne.n	8003324 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	61d3      	str	r3, [r2, #28]
 8003316:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003322:	e032      	b.n	800338a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1b      	ldr	r2, [pc, #108]	; (8003398 <HAL_TIM_Base_MspInit+0xa0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d114      	bne.n	8003358 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	61d3      	str	r3, [r2, #28]
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2101      	movs	r1, #1
 800334a:	201d      	movs	r0, #29
 800334c:	f000 fecd 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003350:	201d      	movs	r0, #29
 8003352:	f000 fee6 	bl	8004122 <HAL_NVIC_EnableIRQ>
}
 8003356:	e018      	b.n	800338a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0f      	ldr	r2, [pc, #60]	; (800339c <HAL_TIM_Base_MspInit+0xa4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d113      	bne.n	800338a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	61d3      	str	r3, [r2, #28]
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_TIM_Base_MspInit+0x9c>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	201e      	movs	r0, #30
 8003380:	f000 feb3 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003384:	201e      	movs	r0, #30
 8003386:	f000 fecc 	bl	8004122 <HAL_NVIC_EnableIRQ>
}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800

080033a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033be:	d117      	bne.n	80033f0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c0:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <HAL_TIM_MspPostInit+0x58>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <HAL_TIM_MspPostInit+0x58>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6193      	str	r3, [r2, #24]
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_TIM_MspPostInit+0x58>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 80033d8:	2303      	movs	r3, #3
 80033da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033e0:	2303      	movs	r3, #3
 80033e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	4619      	mov	r1, r3
 80033ea:	4804      	ldr	r0, [pc, #16]	; (80033fc <HAL_TIM_MspPostInit+0x5c>)
 80033ec:	f001 f902 	bl	80045f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033f0:	bf00      	nop
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010800 	.word	0x40010800

08003400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <NMI_Handler+0x4>

08003406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340a:	e7fe      	b.n	800340a <HardFault_Handler+0x4>

0800340c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <MemManage_Handler+0x4>

08003412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003416:	e7fe      	b.n	8003416 <BusFault_Handler+0x4>

08003418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800341c:	e7fe      	b.n	800341c <UsageFault_Handler+0x4>

0800341e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003436:	b480      	push	{r7}
 8003438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003446:	f000 f8ad 	bl	80035a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 800344a:	f7fd fff1 	bl	8001430 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}

08003452 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 8003456:	2002      	movs	r0, #2
 8003458:	f001 fa80 	bl	800495c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}

08003460 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <ADC1_2_IRQHandler+0x10>)
 8003466:	f000 fa53 	bl	8003910 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000398 	.word	0x20000398

08003474 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800347a:	f001 fbb8 	bl	8004bee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20001168 	.word	0x20001168

08003488 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_DET_Pin);
 800348c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003490:	f001 fa64 	bl	800495c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <TIM3_IRQHandler+0x10>)
 800349e:	f003 fec9 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000418 	.word	0x20000418

080034ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034b0:	4802      	ldr	r0, [pc, #8]	; (80034bc <TIM4_IRQHandler+0x10>)
 80034b2:	f003 febf 	bl	8007234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000460 	.word	0x20000460

080034c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034cc:	480c      	ldr	r0, [pc, #48]	; (8003500 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034ce:	490d      	ldr	r1, [pc, #52]	; (8003504 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034d0:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d4:	e002      	b.n	80034dc <LoopCopyDataInit>

080034d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034da:	3304      	adds	r3, #4

080034dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e0:	d3f9      	bcc.n	80034d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034e4:	4c0a      	ldr	r4, [pc, #40]	; (8003510 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e8:	e001      	b.n	80034ee <LoopFillZerobss>

080034ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034ec:	3204      	adds	r2, #4

080034ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f0:	d3fb      	bcc.n	80034ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034f2:	f7ff ffe5 	bl	80034c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034f6:	f009 fa3d 	bl	800c974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034fa:	f7ff fc13 	bl	8002d24 <main>
  bx lr
 80034fe:	4770      	bx	lr
  ldr r0, =_sdata
 8003500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003504:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003508:	0800ca84 	.word	0x0800ca84
  ldr r2, =_sbss
 800350c:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8003510:	20001674 	.word	0x20001674

08003514 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003514:	e7fe      	b.n	8003514 <CAN1_RX1_IRQHandler>
	...

08003518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_Init+0x28>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_Init+0x28>)
 8003522:	f043 0310 	orr.w	r3, r3, #16
 8003526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003528:	2003      	movs	r0, #3
 800352a:	f000 fdd3 	bl	80040d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800352e:	2004      	movs	r0, #4
 8003530:	f000 f808 	bl	8003544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003534:	f7ff fe4c 	bl	80031d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40022000 	.word	0x40022000

08003544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_InitTick+0x54>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_InitTick+0x58>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	4619      	mov	r1, r3
 8003556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355a:	fbb3 f3f1 	udiv	r3, r3, r1
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fdeb 	bl	800413e <HAL_SYSTICK_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e00e      	b.n	8003590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b0f      	cmp	r3, #15
 8003576:	d80a      	bhi.n	800358e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003578:	2200      	movs	r2, #0
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	f000 fdb3 	bl	80040ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003584:	4a06      	ldr	r2, [pc, #24]	; (80035a0 <HAL_InitTick+0x5c>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000028 	.word	0x20000028
 800359c:	20000030 	.word	0x20000030
 80035a0:	2000002c 	.word	0x2000002c

080035a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_IncTick+0x1c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_IncTick+0x20>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	4a03      	ldr	r2, [pc, #12]	; (80035c4 <HAL_IncTick+0x20>)
 80035b6:	6013      	str	r3, [r2, #0]
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	20000030 	.word	0x20000030
 80035c4:	200004a8 	.word	0x200004a8

080035c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return uwTick;
 80035cc:	4b02      	ldr	r3, [pc, #8]	; (80035d8 <HAL_GetTick+0x10>)
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	200004a8 	.word	0x200004a8

080035dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0be      	b.n	800377c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fe0a 	bl	8003234 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fb93 	bl	8003d4c <ADC_ConversionStop_Disable>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 8099 	bne.w	800376a <HAL_ADC_Init+0x18e>
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 8095 	bne.w	800376a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003648:	f023 0302 	bic.w	r3, r3, #2
 800364c:	f043 0202 	orr.w	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800365c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7b1b      	ldrb	r3, [r3, #12]
 8003662:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003664:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	4313      	orrs	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	d003      	beq.n	800367e <HAL_ADC_Init+0xa2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d102      	bne.n	8003684 <HAL_ADC_Init+0xa8>
 800367e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003682:	e000      	b.n	8003686 <HAL_ADC_Init+0xaa>
 8003684:	2300      	movs	r3, #0
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	7d1b      	ldrb	r3, [r3, #20]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d119      	bne.n	80036c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7b1b      	ldrb	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	035a      	lsls	r2, r3, #13
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	e00b      	b.n	80036c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	f043 0201 	orr.w	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_ADC_Init+0x1a8>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f8:	d003      	beq.n	8003702 <HAL_ADC_Init+0x126>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d104      	bne.n	800370c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	3b01      	subs	r3, #1
 8003708:	051b      	lsls	r3, r3, #20
 800370a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	430a      	orrs	r2, r1
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	4b18      	ldr	r3, [pc, #96]	; (8003788 <HAL_ADC_Init+0x1ac>)
 8003728:	4013      	ands	r3, r2
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	d10b      	bne.n	8003748 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003746:	e018      	b.n	800377a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	f023 0312 	bic.w	r3, r3, #18
 8003750:	f043 0210 	orr.w	r2, r3, #16
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f043 0201 	orr.w	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003768:	e007      	b.n	800377a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	f043 0210 	orr.w	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	ffe1f7fd 	.word	0xffe1f7fd
 8003788:	ff1f0efe 	.word	0xff1f0efe

0800378c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_Start_IT+0x1a>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0a0      	b.n	80038e8 <HAL_ADC_Start_IT+0x15c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fa72 	bl	8003c98 <ADC_Enable>
 80037b4:	4603      	mov	r3, r0
 80037b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f040 808f 	bne.w	80038de <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a45      	ldr	r2, [pc, #276]	; (80038f0 <HAL_ADC_Start_IT+0x164>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d105      	bne.n	80037ea <HAL_ADC_Start_IT+0x5e>
 80037de:	4b45      	ldr	r3, [pc, #276]	; (80038f4 <HAL_ADC_Start_IT+0x168>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003800:	2b00      	cmp	r3, #0
 8003802:	d026      	beq.n	8003852 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800380c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003814:	e01d      	b.n	8003852 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a33      	ldr	r2, [pc, #204]	; (80038f4 <HAL_ADC_Start_IT+0x168>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_ADC_Start_IT+0xaa>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <HAL_ADC_Start_IT+0x164>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <HAL_ADC_Start_IT+0xc6>
 8003836:	4b2f      	ldr	r3, [pc, #188]	; (80038f4 <HAL_ADC_Start_IT+0x168>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800384a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	f023 0206 	bic.w	r2, r3, #6
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
 800386a:	e002      	b.n	8003872 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0202 	mvn.w	r2, #2
 8003882:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0220 	orr.w	r2, r2, #32
 8003892:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800389e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80038a2:	d113      	bne.n	80038cc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80038a8:	4a11      	ldr	r2, [pc, #68]	; (80038f0 <HAL_ADC_Start_IT+0x164>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d105      	bne.n	80038ba <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_ADC_Start_IT+0x168>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	e00c      	b.n	80038e6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	e003      	b.n	80038e6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40012800 	.word	0x40012800
 80038f4:	40012400 	.word	0x40012400

080038f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d140      	bne.n	80039a8 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d139      	bne.n	80039a8 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003956:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800395a:	d11d      	bne.n	8003998 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003960:	2b00      	cmp	r3, #0
 8003962:	d119      	bne.n	8003998 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0220 	bic.w	r2, r2, #32
 8003972:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fd fd1b 	bl	80013d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f06f 0212 	mvn.w	r2, #18
 80039a6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d14f      	bne.n	8003a56 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d148      	bne.n	8003a56 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80039e6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80039ea:	d012      	beq.n	8003a12 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d125      	bne.n	8003a46 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003a04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003a08:	d11d      	bne.n	8003a46 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d119      	bne.n	8003a46 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a20:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	f043 0201 	orr.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa6e 	bl	8003f28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 020c 	mvn.w	r2, #12
 8003a54:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	d114      	bne.n	8003a8e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10d      	bne.n	8003a8e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f809 	bl	8003a96 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0201 	mvn.w	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x20>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e0dc      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x1da>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d81c      	bhi.n	8003b12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3b05      	subs	r3, #5
 8003aea:	221f      	movs	r2, #31
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	4019      	ands	r1, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	3b05      	subs	r3, #5
 8003b04:	fa00 f203 	lsl.w	r2, r0, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	635a      	str	r2, [r3, #52]	; 0x34
 8003b10:	e03c      	b.n	8003b8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	d81c      	bhi.n	8003b54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	3b23      	subs	r3, #35	; 0x23
 8003b2c:	221f      	movs	r2, #31
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	4019      	ands	r1, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	3b23      	subs	r3, #35	; 0x23
 8003b46:	fa00 f203 	lsl.w	r2, r0, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
 8003b52:	e01b      	b.n	8003b8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	3b41      	subs	r3, #65	; 0x41
 8003b66:	221f      	movs	r2, #31
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	4019      	ands	r1, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3b41      	subs	r3, #65	; 0x41
 8003b80:	fa00 f203 	lsl.w	r2, r0, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b09      	cmp	r3, #9
 8003b92:	d91c      	bls.n	8003bce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68d9      	ldr	r1, [r3, #12]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3b1e      	subs	r3, #30
 8003ba6:	2207      	movs	r2, #7
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	4019      	ands	r1, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6898      	ldr	r0, [r3, #8]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3b1e      	subs	r3, #30
 8003bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e019      	b.n	8003c02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6919      	ldr	r1, [r3, #16]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	2207      	movs	r2, #7
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	4019      	ands	r1, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6898      	ldr	r0, [r3, #8]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d003      	beq.n	8003c12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c0e:	2b11      	cmp	r3, #17
 8003c10:	d132      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_ADC_ConfigChannel+0x1e4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d125      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d126      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d11a      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_ADC_ConfigChannel+0x1e8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <HAL_ADC_ConfigChannel+0x1ec>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	0c9a      	lsrs	r2, r3, #18
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c58:	e002      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f9      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x1b2>
 8003c66:	e007      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40012400 	.word	0x40012400
 8003c90:	20000028 	.word	0x20000028
 8003c94:	431bde83 	.word	0x431bde83

08003c98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d040      	beq.n	8003d38 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0201 	orr.w	r2, r2, #1
 8003cc4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cc6:	4b1f      	ldr	r3, [pc, #124]	; (8003d44 <ADC_Enable+0xac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1f      	ldr	r2, [pc, #124]	; (8003d48 <ADC_Enable+0xb0>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	0c9b      	lsrs	r3, r3, #18
 8003cd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003cd4:	e002      	b.n	8003cdc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f9      	bne.n	8003cd6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ce2:	f7ff fc71 	bl	80035c8 <HAL_GetTick>
 8003ce6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003ce8:	e01f      	b.n	8003d2a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cea:	f7ff fc6d 	bl	80035c8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d918      	bls.n	8003d2a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d011      	beq.n	8003d2a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	f043 0210 	orr.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f043 0201 	orr.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e007      	b.n	8003d3a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d1d8      	bne.n	8003cea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000028 	.word	0x20000028
 8003d48:	431bde83 	.word	0x431bde83

08003d4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d12e      	bne.n	8003dc4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d76:	f7ff fc27 	bl	80035c8 <HAL_GetTick>
 8003d7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003d7c:	e01b      	b.n	8003db6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d7e:	f7ff fc23 	bl	80035c8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d914      	bls.n	8003db6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d10d      	bne.n	8003db6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	f043 0210 	orr.w	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e007      	b.n	8003dc6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d0dc      	beq.n	8003d7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_ADCEx_Calibration_Start+0x1e>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e095      	b.n	8003f1a <HAL_ADCEx_Calibration_Start+0x14a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffa8 	bl	8003d4c <ADC_ConversionStop_Disable>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 8084 	bne.w	8003f10 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e10:	f023 0302 	bic.w	r3, r3, #2
 8003e14:	f043 0202 	orr.w	r2, r3, #2
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003e1c:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <HAL_ADCEx_Calibration_Start+0x154>)
 8003e1e:	681c      	ldr	r4, [r3, #0]
 8003e20:	2002      	movs	r0, #2
 8003e22:	f002 ff33 	bl	8006c8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003e26:	4603      	mov	r3, r0
 8003e28:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003e2c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003e2e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003e30:	e002      	b.n	8003e38 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f9      	bne.n	8003e32 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ff2a 	bl	8003c98 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0208 	orr.w	r2, r2, #8
 8003e52:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003e54:	f7ff fbb8 	bl	80035c8 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e5a:	e01b      	b.n	8003e94 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003e5c:	f7ff fbb4 	bl	80035c8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b0a      	cmp	r3, #10
 8003e68:	d914      	bls.n	8003e94 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	f023 0312 	bic.w	r3, r3, #18
 8003e80:	f043 0210 	orr.w	r2, r3, #16
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e042      	b.n	8003f1a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1dc      	bne.n	8003e5c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0204 	orr.w	r2, r2, #4
 8003eb0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003eb2:	f7ff fb89 	bl	80035c8 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003eb8:	e01b      	b.n	8003ef2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003eba:	f7ff fb85 	bl	80035c8 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b0a      	cmp	r3, #10
 8003ec6:	d914      	bls.n	8003ef2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	f023 0312 	bic.w	r3, r3, #18
 8003ede:	f043 0210 	orr.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e013      	b.n	8003f1a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1dc      	bne.n	8003eba <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	f023 0303 	bic.w	r3, r3, #3
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd90      	pop	{r4, r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000028 	.word	0x20000028

08003f28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
	...

08003f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <__NVIC_SetPriorityGrouping+0x44>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f6e:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <__NVIC_SetPriorityGrouping+0x44>)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	60d3      	str	r3, [r2, #12]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f88:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <__NVIC_GetPriorityGrouping+0x18>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	f003 0307 	and.w	r3, r3, #7
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	db0b      	blt.n	8003fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	f003 021f 	and.w	r2, r3, #31
 8003fb8:	4906      	ldr	r1, [pc, #24]	; (8003fd4 <__NVIC_EnableIRQ+0x34>)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	e000e100 	.word	0xe000e100

08003fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	6039      	str	r1, [r7, #0]
 8003fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	db0a      	blt.n	8004002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	490c      	ldr	r1, [pc, #48]	; (8004024 <__NVIC_SetPriority+0x4c>)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	0112      	lsls	r2, r2, #4
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004000:	e00a      	b.n	8004018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4908      	ldr	r1, [pc, #32]	; (8004028 <__NVIC_SetPriority+0x50>)
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	3b04      	subs	r3, #4
 8004010:	0112      	lsls	r2, r2, #4
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	440b      	add	r3, r1
 8004016:	761a      	strb	r2, [r3, #24]
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000e100 	.word	0xe000e100
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f1c3 0307 	rsb	r3, r3, #7
 8004046:	2b04      	cmp	r3, #4
 8004048:	bf28      	it	cs
 800404a:	2304      	movcs	r3, #4
 800404c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3304      	adds	r3, #4
 8004052:	2b06      	cmp	r3, #6
 8004054:	d902      	bls.n	800405c <NVIC_EncodePriority+0x30>
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	3b03      	subs	r3, #3
 800405a:	e000      	b.n	800405e <NVIC_EncodePriority+0x32>
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004060:	f04f 32ff 	mov.w	r2, #4294967295
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43da      	mvns	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	401a      	ands	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004074:	f04f 31ff 	mov.w	r1, #4294967295
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	fa01 f303 	lsl.w	r3, r1, r3
 800407e:	43d9      	mvns	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004084:	4313      	orrs	r3, r2
         );
}
 8004086:	4618      	mov	r0, r3
 8004088:	3724      	adds	r7, #36	; 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a0:	d301      	bcc.n	80040a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00f      	b.n	80040c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <SysTick_Config+0x40>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ae:	210f      	movs	r1, #15
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	f7ff ff90 	bl	8003fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <SysTick_Config+0x40>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <SysTick_Config+0x40>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	e000e010 	.word	0xe000e010

080040d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ff2d 	bl	8003f3c <__NVIC_SetPriorityGrouping>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	4603      	mov	r3, r0
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040fc:	f7ff ff42 	bl	8003f84 <__NVIC_GetPriorityGrouping>
 8004100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	6978      	ldr	r0, [r7, #20]
 8004108:	f7ff ff90 	bl	800402c <NVIC_EncodePriority>
 800410c:	4602      	mov	r2, r0
 800410e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff5f 	bl	8003fd8 <__NVIC_SetPriority>
}
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	4603      	mov	r3, r0
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800412c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff35 	bl	8003fa0 <__NVIC_EnableIRQ>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ffa2 	bl	8004090 <SysTick_Config>
 800414c:	4603      	mov	r3, r0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e00e      	b.n	8004186 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	795b      	ldrb	r3, [r3, #5]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff f89f 	bl	80032bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800418e:	b480      	push	{r7}
 8004190:	b087      	sub	sp, #28
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2202      	movs	r2, #2
 80041a2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e00a      	b.n	80041d0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	441a      	add	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	3301      	adds	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d3f0      	bcc.n	80041ba <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80041e6:	693b      	ldr	r3, [r7, #16]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800420e:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <HAL_FLASH_Program+0xd8>)
 8004210:	7e1b      	ldrb	r3, [r3, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_FLASH_Program+0x26>
 8004216:	2302      	movs	r3, #2
 8004218:	e054      	b.n	80042c4 <HAL_FLASH_Program+0xd0>
 800421a:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_FLASH_Program+0xd8>)
 800421c:	2201      	movs	r2, #1
 800421e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004220:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004224:	f000 f8a8 	bl	8004378 <FLASH_WaitForLastOperation>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d144      	bne.n	80042bc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d102      	bne.n	800423e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004238:	2301      	movs	r3, #1
 800423a:	757b      	strb	r3, [r7, #21]
 800423c:	e007      	b.n	800424e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b02      	cmp	r3, #2
 8004242:	d102      	bne.n	800424a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004244:	2302      	movs	r3, #2
 8004246:	757b      	strb	r3, [r7, #21]
 8004248:	e001      	b.n	800424e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800424a:	2304      	movs	r3, #4
 800424c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800424e:	2300      	movs	r3, #0
 8004250:	75bb      	strb	r3, [r7, #22]
 8004252:	e02d      	b.n	80042b0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004254:	7dbb      	ldrb	r3, [r7, #22]
 8004256:	005a      	lsls	r2, r3, #1
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	eb02 0c03 	add.w	ip, r2, r3
 800425e:	7dbb      	ldrb	r3, [r7, #22]
 8004260:	0119      	lsls	r1, r3, #4
 8004262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004266:	f1c1 0620 	rsb	r6, r1, #32
 800426a:	f1a1 0020 	sub.w	r0, r1, #32
 800426e:	fa22 f401 	lsr.w	r4, r2, r1
 8004272:	fa03 f606 	lsl.w	r6, r3, r6
 8004276:	4334      	orrs	r4, r6
 8004278:	fa23 f000 	lsr.w	r0, r3, r0
 800427c:	4304      	orrs	r4, r0
 800427e:	fa23 f501 	lsr.w	r5, r3, r1
 8004282:	b2a3      	uxth	r3, r4
 8004284:	4619      	mov	r1, r3
 8004286:	4660      	mov	r0, ip
 8004288:	f000 f85a 	bl	8004340 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800428c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004290:	f000 f872 	bl	8004378 <FLASH_WaitForLastOperation>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004298:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_FLASH_Program+0xdc>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <HAL_FLASH_Program+0xdc>)
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d107      	bne.n	80042ba <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80042aa:	7dbb      	ldrb	r3, [r7, #22]
 80042ac:	3301      	adds	r3, #1
 80042ae:	75bb      	strb	r3, [r7, #22]
 80042b0:	7dba      	ldrb	r2, [r7, #22]
 80042b2:	7d7b      	ldrb	r3, [r7, #21]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d3cd      	bcc.n	8004254 <HAL_FLASH_Program+0x60>
 80042b8:	e000      	b.n	80042bc <HAL_FLASH_Program+0xc8>
      {
        break;
 80042ba:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_FLASH_Program+0xd8>)
 80042be:	2200      	movs	r2, #0
 80042c0:	761a      	strb	r2, [r3, #24]

  return status;
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042cc:	200004b0 	.word	0x200004b0
 80042d0:	40022000 	.word	0x40022000

080042d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_FLASH_Unlock+0x40>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_FLASH_Unlock+0x40>)
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <HAL_FLASH_Unlock+0x44>)
 80042ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_FLASH_Unlock+0x40>)
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <HAL_FLASH_Unlock+0x48>)
 80042f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <HAL_FLASH_Unlock+0x40>)
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004306:	79fb      	ldrb	r3, [r7, #7]
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40022000 	.word	0x40022000
 8004318:	45670123 	.word	0x45670123
 800431c:	cdef89ab 	.word	0xcdef89ab

08004320 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_FLASH_Lock+0x1c>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	4a04      	ldr	r2, [pc, #16]	; (800433c <HAL_FLASH_Lock+0x1c>)
 800432a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40022000 	.word	0x40022000

08004340 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800434c:	4b08      	ldr	r3, [pc, #32]	; (8004370 <FLASH_Program_HalfWord+0x30>)
 800434e:	2200      	movs	r2, #0
 8004350:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <FLASH_Program_HalfWord+0x34>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	4a07      	ldr	r2, [pc, #28]	; (8004374 <FLASH_Program_HalfWord+0x34>)
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	887a      	ldrh	r2, [r7, #2]
 8004362:	801a      	strh	r2, [r3, #0]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	200004b0 	.word	0x200004b0
 8004374:	40022000 	.word	0x40022000

08004378 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004380:	f7ff f922 	bl	80035c8 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004386:	e010      	b.n	80043aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d00c      	beq.n	80043aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <FLASH_WaitForLastOperation+0x2e>
 8004396:	f7ff f917 	bl	80035c8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d201      	bcs.n	80043aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e025      	b.n	80043f6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <FLASH_WaitForLastOperation+0x88>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e8      	bne.n	8004388 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <FLASH_WaitForLastOperation+0x88>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <FLASH_WaitForLastOperation+0x88>)
 80043c4:	2220      	movs	r2, #32
 80043c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <FLASH_WaitForLastOperation+0x88>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <FLASH_WaitForLastOperation+0x88>)
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80043e0:	4b07      	ldr	r3, [pc, #28]	; (8004400 <FLASH_WaitForLastOperation+0x88>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80043ec:	f000 f80a 	bl	8004404 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40022000 	.word	0x40022000

08004404 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <FLASH_SetErrorCode+0x98>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <FLASH_SetErrorCode+0x9c>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f043 0302 	orr.w	r3, r3, #2
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <FLASH_SetErrorCode+0x9c>)
 8004424:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f043 0310 	orr.w	r3, r3, #16
 800442c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800442e:	4b1b      	ldr	r3, [pc, #108]	; (800449c <FLASH_SetErrorCode+0x98>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800443a:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <FLASH_SetErrorCode+0x9c>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <FLASH_SetErrorCode+0x9c>)
 8004444:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <FLASH_SetErrorCode+0x98>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <FLASH_SetErrorCode+0x9c>)
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f043 0304 	orr.w	r3, r3, #4
 8004462:	4a0f      	ldr	r2, [pc, #60]	; (80044a0 <FLASH_SetErrorCode+0x9c>)
 8004464:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <FLASH_SetErrorCode+0x98>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4a0c      	ldr	r2, [pc, #48]	; (800449c <FLASH_SetErrorCode+0x98>)
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f240 1201 	movw	r2, #257	; 0x101
 8004478:	4293      	cmp	r3, r2
 800447a:	d106      	bne.n	800448a <FLASH_SetErrorCode+0x86>
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <FLASH_SetErrorCode+0x98>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4a06      	ldr	r2, [pc, #24]	; (800449c <FLASH_SetErrorCode+0x98>)
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	61d3      	str	r3, [r2, #28]
}  
 8004488:	e002      	b.n	8004490 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800448a:	4a04      	ldr	r2, [pc, #16]	; (800449c <FLASH_SetErrorCode+0x98>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60d3      	str	r3, [r2, #12]
}  
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40022000 	.word	0x40022000
 80044a0:	200004b0 	.word	0x200004b0

080044a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80044b6:	4b2f      	ldr	r3, [pc, #188]	; (8004574 <HAL_FLASHEx_Erase+0xd0>)
 80044b8:	7e1b      	ldrb	r3, [r3, #24]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_FLASHEx_Erase+0x1e>
 80044be:	2302      	movs	r3, #2
 80044c0:	e053      	b.n	800456a <HAL_FLASHEx_Erase+0xc6>
 80044c2:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <HAL_FLASHEx_Erase+0xd0>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d116      	bne.n	80044fe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80044d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044d4:	f7ff ff50 	bl	8004378 <FLASH_WaitForLastOperation>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d141      	bne.n	8004562 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80044de:	2001      	movs	r0, #1
 80044e0:	f000 f84c 	bl	800457c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044e8:	f7ff ff46 	bl	8004378 <FLASH_WaitForLastOperation>
 80044ec:	4603      	mov	r3, r0
 80044ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80044f0:	4b21      	ldr	r3, [pc, #132]	; (8004578 <HAL_FLASHEx_Erase+0xd4>)
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	4a20      	ldr	r2, [pc, #128]	; (8004578 <HAL_FLASHEx_Erase+0xd4>)
 80044f6:	f023 0304 	bic.w	r3, r3, #4
 80044fa:	6113      	str	r3, [r2, #16]
 80044fc:	e031      	b.n	8004562 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80044fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004502:	f7ff ff39 	bl	8004378 <FLASH_WaitForLastOperation>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d12a      	bne.n	8004562 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f04f 32ff 	mov.w	r2, #4294967295
 8004512:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	e019      	b.n	8004550 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800451c:	68b8      	ldr	r0, [r7, #8]
 800451e:	f000 f849 	bl	80045b4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004522:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004526:	f7ff ff27 	bl	8004378 <FLASH_WaitForLastOperation>
 800452a:	4603      	mov	r3, r0
 800452c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <HAL_FLASHEx_Erase+0xd4>)
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	4a11      	ldr	r2, [pc, #68]	; (8004578 <HAL_FLASHEx_Erase+0xd4>)
 8004534:	f023 0302 	bic.w	r3, r3, #2
 8004538:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	601a      	str	r2, [r3, #0]
            break;
 8004546:	e00c      	b.n	8004562 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800454e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	029a      	lsls	r2, r3, #10
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d3dc      	bcc.n	800451c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004562:	4b04      	ldr	r3, [pc, #16]	; (8004574 <HAL_FLASHEx_Erase+0xd0>)
 8004564:	2200      	movs	r2, #0
 8004566:	761a      	strb	r2, [r3, #24]

  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200004b0 	.word	0x200004b0
 8004578:	40022000 	.word	0x40022000

0800457c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004584:	4b09      	ldr	r3, [pc, #36]	; (80045ac <FLASH_MassErase+0x30>)
 8004586:	2200      	movs	r2, #0
 8004588:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800458a:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <FLASH_MassErase+0x34>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	4a08      	ldr	r2, [pc, #32]	; (80045b0 <FLASH_MassErase+0x34>)
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <FLASH_MassErase+0x34>)
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <FLASH_MassErase+0x34>)
 800459c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	200004b0 	.word	0x200004b0
 80045b0:	40022000 	.word	0x40022000

080045b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <FLASH_PageErase+0x38>)
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <FLASH_PageErase+0x3c>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <FLASH_PageErase+0x3c>)
 80045c8:	f043 0302 	orr.w	r3, r3, #2
 80045cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80045ce:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <FLASH_PageErase+0x3c>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <FLASH_PageErase+0x3c>)
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <FLASH_PageErase+0x3c>)
 80045da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	200004b0 	.word	0x200004b0
 80045f0:	40022000 	.word	0x40022000

080045f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b08b      	sub	sp, #44	; 0x2c
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004602:	2300      	movs	r3, #0
 8004604:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004606:	e169      	b.n	80048dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004608:	2201      	movs	r2, #1
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	429a      	cmp	r2, r3
 8004622:	f040 8158 	bne.w	80048d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4a9a      	ldr	r2, [pc, #616]	; (8004894 <HAL_GPIO_Init+0x2a0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d05e      	beq.n	80046ee <HAL_GPIO_Init+0xfa>
 8004630:	4a98      	ldr	r2, [pc, #608]	; (8004894 <HAL_GPIO_Init+0x2a0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d875      	bhi.n	8004722 <HAL_GPIO_Init+0x12e>
 8004636:	4a98      	ldr	r2, [pc, #608]	; (8004898 <HAL_GPIO_Init+0x2a4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d058      	beq.n	80046ee <HAL_GPIO_Init+0xfa>
 800463c:	4a96      	ldr	r2, [pc, #600]	; (8004898 <HAL_GPIO_Init+0x2a4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d86f      	bhi.n	8004722 <HAL_GPIO_Init+0x12e>
 8004642:	4a96      	ldr	r2, [pc, #600]	; (800489c <HAL_GPIO_Init+0x2a8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d052      	beq.n	80046ee <HAL_GPIO_Init+0xfa>
 8004648:	4a94      	ldr	r2, [pc, #592]	; (800489c <HAL_GPIO_Init+0x2a8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d869      	bhi.n	8004722 <HAL_GPIO_Init+0x12e>
 800464e:	4a94      	ldr	r2, [pc, #592]	; (80048a0 <HAL_GPIO_Init+0x2ac>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d04c      	beq.n	80046ee <HAL_GPIO_Init+0xfa>
 8004654:	4a92      	ldr	r2, [pc, #584]	; (80048a0 <HAL_GPIO_Init+0x2ac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d863      	bhi.n	8004722 <HAL_GPIO_Init+0x12e>
 800465a:	4a92      	ldr	r2, [pc, #584]	; (80048a4 <HAL_GPIO_Init+0x2b0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d046      	beq.n	80046ee <HAL_GPIO_Init+0xfa>
 8004660:	4a90      	ldr	r2, [pc, #576]	; (80048a4 <HAL_GPIO_Init+0x2b0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d85d      	bhi.n	8004722 <HAL_GPIO_Init+0x12e>
 8004666:	2b12      	cmp	r3, #18
 8004668:	d82a      	bhi.n	80046c0 <HAL_GPIO_Init+0xcc>
 800466a:	2b12      	cmp	r3, #18
 800466c:	d859      	bhi.n	8004722 <HAL_GPIO_Init+0x12e>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <HAL_GPIO_Init+0x80>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	080046ef 	.word	0x080046ef
 8004678:	080046c9 	.word	0x080046c9
 800467c:	080046db 	.word	0x080046db
 8004680:	0800471d 	.word	0x0800471d
 8004684:	08004723 	.word	0x08004723
 8004688:	08004723 	.word	0x08004723
 800468c:	08004723 	.word	0x08004723
 8004690:	08004723 	.word	0x08004723
 8004694:	08004723 	.word	0x08004723
 8004698:	08004723 	.word	0x08004723
 800469c:	08004723 	.word	0x08004723
 80046a0:	08004723 	.word	0x08004723
 80046a4:	08004723 	.word	0x08004723
 80046a8:	08004723 	.word	0x08004723
 80046ac:	08004723 	.word	0x08004723
 80046b0:	08004723 	.word	0x08004723
 80046b4:	08004723 	.word	0x08004723
 80046b8:	080046d1 	.word	0x080046d1
 80046bc:	080046e5 	.word	0x080046e5
 80046c0:	4a79      	ldr	r2, [pc, #484]	; (80048a8 <HAL_GPIO_Init+0x2b4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80046c6:	e02c      	b.n	8004722 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	623b      	str	r3, [r7, #32]
          break;
 80046ce:	e029      	b.n	8004724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	3304      	adds	r3, #4
 80046d6:	623b      	str	r3, [r7, #32]
          break;
 80046d8:	e024      	b.n	8004724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	3308      	adds	r3, #8
 80046e0:	623b      	str	r3, [r7, #32]
          break;
 80046e2:	e01f      	b.n	8004724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	330c      	adds	r3, #12
 80046ea:	623b      	str	r3, [r7, #32]
          break;
 80046ec:	e01a      	b.n	8004724 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046f6:	2304      	movs	r3, #4
 80046f8:	623b      	str	r3, [r7, #32]
          break;
 80046fa:	e013      	b.n	8004724 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004704:	2308      	movs	r3, #8
 8004706:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	611a      	str	r2, [r3, #16]
          break;
 800470e:	e009      	b.n	8004724 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004710:	2308      	movs	r3, #8
 8004712:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	615a      	str	r2, [r3, #20]
          break;
 800471a:	e003      	b.n	8004724 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800471c:	2300      	movs	r3, #0
 800471e:	623b      	str	r3, [r7, #32]
          break;
 8004720:	e000      	b.n	8004724 <HAL_GPIO_Init+0x130>
          break;
 8004722:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2bff      	cmp	r3, #255	; 0xff
 8004728:	d801      	bhi.n	800472e <HAL_GPIO_Init+0x13a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	e001      	b.n	8004732 <HAL_GPIO_Init+0x13e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2bff      	cmp	r3, #255	; 0xff
 8004738:	d802      	bhi.n	8004740 <HAL_GPIO_Init+0x14c>
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	e002      	b.n	8004746 <HAL_GPIO_Init+0x152>
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	3b08      	subs	r3, #8
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	210f      	movs	r1, #15
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	401a      	ands	r2, r3
 8004758:	6a39      	ldr	r1, [r7, #32]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	431a      	orrs	r2, r3
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80b1 	beq.w	80048d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004774:	4b4d      	ldr	r3, [pc, #308]	; (80048ac <HAL_GPIO_Init+0x2b8>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	4a4c      	ldr	r2, [pc, #304]	; (80048ac <HAL_GPIO_Init+0x2b8>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	6193      	str	r3, [r2, #24]
 8004780:	4b4a      	ldr	r3, [pc, #296]	; (80048ac <HAL_GPIO_Init+0x2b8>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800478c:	4a48      	ldr	r2, [pc, #288]	; (80048b0 <HAL_GPIO_Init+0x2bc>)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	3302      	adds	r3, #2
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	220f      	movs	r2, #15
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4013      	ands	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a40      	ldr	r2, [pc, #256]	; (80048b4 <HAL_GPIO_Init+0x2c0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d013      	beq.n	80047e0 <HAL_GPIO_Init+0x1ec>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <HAL_GPIO_Init+0x2c4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00d      	beq.n	80047dc <HAL_GPIO_Init+0x1e8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a3e      	ldr	r2, [pc, #248]	; (80048bc <HAL_GPIO_Init+0x2c8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d007      	beq.n	80047d8 <HAL_GPIO_Init+0x1e4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a3d      	ldr	r2, [pc, #244]	; (80048c0 <HAL_GPIO_Init+0x2cc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d101      	bne.n	80047d4 <HAL_GPIO_Init+0x1e0>
 80047d0:	2303      	movs	r3, #3
 80047d2:	e006      	b.n	80047e2 <HAL_GPIO_Init+0x1ee>
 80047d4:	2304      	movs	r3, #4
 80047d6:	e004      	b.n	80047e2 <HAL_GPIO_Init+0x1ee>
 80047d8:	2302      	movs	r3, #2
 80047da:	e002      	b.n	80047e2 <HAL_GPIO_Init+0x1ee>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_GPIO_Init+0x1ee>
 80047e0:	2300      	movs	r3, #0
 80047e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e4:	f002 0203 	and.w	r2, r2, #3
 80047e8:	0092      	lsls	r2, r2, #2
 80047ea:	4093      	lsls	r3, r2
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047f2:	492f      	ldr	r1, [pc, #188]	; (80048b0 <HAL_GPIO_Init+0x2bc>)
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	3302      	adds	r3, #2
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d006      	beq.n	800481a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800480c:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	492c      	ldr	r1, [pc, #176]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	4313      	orrs	r3, r2
 8004816:	600b      	str	r3, [r1, #0]
 8004818:	e006      	b.n	8004828 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800481a:	4b2a      	ldr	r3, [pc, #168]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	43db      	mvns	r3, r3
 8004822:	4928      	ldr	r1, [pc, #160]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 8004824:	4013      	ands	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d006      	beq.n	8004842 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004834:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	4922      	ldr	r1, [pc, #136]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]
 8004840:	e006      	b.n	8004850 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004842:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	43db      	mvns	r3, r3
 800484a:	491e      	ldr	r1, [pc, #120]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 800484c:	4013      	ands	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d006      	beq.n	800486a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800485c:	4b19      	ldr	r3, [pc, #100]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	4918      	ldr	r1, [pc, #96]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]
 8004868:	e006      	b.n	8004878 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800486a:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	43db      	mvns	r3, r3
 8004872:	4914      	ldr	r1, [pc, #80]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 8004874:	4013      	ands	r3, r2
 8004876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d021      	beq.n	80048c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	490e      	ldr	r1, [pc, #56]	; (80048c4 <HAL_GPIO_Init+0x2d0>)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	60cb      	str	r3, [r1, #12]
 8004890:	e021      	b.n	80048d6 <HAL_GPIO_Init+0x2e2>
 8004892:	bf00      	nop
 8004894:	10320000 	.word	0x10320000
 8004898:	10310000 	.word	0x10310000
 800489c:	10220000 	.word	0x10220000
 80048a0:	10210000 	.word	0x10210000
 80048a4:	10120000 	.word	0x10120000
 80048a8:	10110000 	.word	0x10110000
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40010800 	.word	0x40010800
 80048b8:	40010c00 	.word	0x40010c00
 80048bc:	40011000 	.word	0x40011000
 80048c0:	40011400 	.word	0x40011400
 80048c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_GPIO_Init+0x304>)
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	4909      	ldr	r1, [pc, #36]	; (80048f8 <HAL_GPIO_Init+0x304>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	3301      	adds	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f47f ae8e 	bne.w	8004608 <HAL_GPIO_Init+0x14>
  }
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	372c      	adds	r7, #44	; 0x2c
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	40010400 	.word	0x40010400

080048fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	887b      	ldrh	r3, [r7, #2]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e001      	b.n	800491e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	460b      	mov	r3, r1
 8004934:	807b      	strh	r3, [r7, #2]
 8004936:	4613      	mov	r3, r2
 8004938:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800493a:	787b      	ldrb	r3, [r7, #1]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004940:	887a      	ldrh	r2, [r7, #2]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004946:	e003      	b.n	8004950 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004948:	887b      	ldrh	r3, [r7, #2]
 800494a:	041a      	lsls	r2, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	611a      	str	r2, [r3, #16]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr
	...

0800495c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004972:	4a05      	ldr	r2, [pc, #20]	; (8004988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	4618      	mov	r0, r3
 800497c:	f7fc fd62 	bl	8001444 <HAL_GPIO_EXTI_Callback>
  }
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40010400 	.word	0x40010400

0800498c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800498c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498e:	b08b      	sub	sp, #44	; 0x2c
 8004990:	af06      	add	r7, sp, #24
 8004992:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0fd      	b.n	8004b9a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f007 fd34 	bl	800c420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f003 fa1d 	bl	8007e04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	687e      	ldr	r6, [r7, #4]
 80049d2:	466d      	mov	r5, sp
 80049d4:	f106 0410 	add.w	r4, r6, #16
 80049d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	602b      	str	r3, [r5, #0]
 80049e0:	1d33      	adds	r3, r6, #4
 80049e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049e4:	6838      	ldr	r0, [r7, #0]
 80049e6:	f003 f9e7 	bl	8007db8 <USB_CoreInit>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0ce      	b.n	8004b9a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f003 fa18 	bl	8007e38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	e04c      	b.n	8004aa8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3301      	adds	r3, #1
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	440b      	add	r3, r1
 8004a34:	7bfa      	ldrb	r2, [r7, #15]
 8004a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	b298      	uxth	r0, r3
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	440b      	add	r3, r1
 8004a4a:	3336      	adds	r3, #54	; 0x36
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	440b      	add	r3, r1
 8004a60:	3303      	adds	r3, #3
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	440b      	add	r3, r1
 8004a74:	3338      	adds	r3, #56	; 0x38
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a7a:	7bfa      	ldrb	r2, [r7, #15]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	440b      	add	r3, r1
 8004a88:	333c      	adds	r3, #60	; 0x3c
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a8e:	7bfa      	ldrb	r2, [r7, #15]
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3340      	adds	r3, #64	; 0x40
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
 8004aa8:	7bfa      	ldrb	r2, [r7, #15]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3ad      	bcc.n	8004a0e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	e044      	b.n	8004b42 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ace:	7bfa      	ldrb	r2, [r7, #15]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	440b      	add	r3, r1
 8004adc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ae0:	7bfa      	ldrb	r2, [r7, #15]
 8004ae2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	440b      	add	r3, r1
 8004af2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	440b      	add	r3, r1
 8004b08:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b10:	7bfa      	ldrb	r2, [r7, #15]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	440b      	add	r3, r1
 8004b1e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	440b      	add	r3, r1
 8004b34:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
 8004b42:	7bfa      	ldrb	r2, [r7, #15]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d3b5      	bcc.n	8004ab8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	687e      	ldr	r6, [r7, #4]
 8004b54:	466d      	mov	r5, sp
 8004b56:	f106 0410 	add.w	r4, r6, #16
 8004b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	1d33      	adds	r3, r6, #4
 8004b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b66:	6838      	ldr	r0, [r7, #0]
 8004b68:	f003 f972 	bl	8007e50 <USB_DevInit>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e00d      	b.n	8004b9a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f005 fe24 	bl	800a7e0 <USB_DevDisconnect>

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ba2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_PCD_Start+0x16>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e016      	b.n	8004be6 <HAL_PCD_Start+0x44>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f003 f907 	bl	8007dd8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004bca:	2101      	movs	r1, #1
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f007 fe9a 	bl	800c906 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f005 fdf8 	bl	800a7cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b088      	sub	sp, #32
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f005 fdfa 	bl	800a7f4 <USB_ReadInterrupts>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0a:	d102      	bne.n	8004c12 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fb5f 	bl	80052d0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f005 fdec 	bl	800a7f4 <USB_ReadInterrupts>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c26:	d112      	bne.n	8004c4e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f007 fc68 	bl	800c516 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004c46:	2100      	movs	r1, #0
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f923 	bl	8004e94 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f005 fdce 	bl	800a7f4 <USB_ReadInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c62:	d10b      	bne.n	8004c7c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c76:	b292      	uxth	r2, r2
 8004c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f005 fdb7 	bl	800a7f4 <USB_ReadInterrupts>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c90:	d10b      	bne.n	8004caa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca4:	b292      	uxth	r2, r2
 8004ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f005 fda0 	bl	800a7f4 <USB_ReadInterrupts>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	d126      	bne.n	8004d0e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0208 	bic.w	r2, r2, #8
 8004cea:	b292      	uxth	r2, r2
 8004cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f007 fc49 	bl	800c588 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d08:	b292      	uxth	r2, r2
 8004d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f005 fd6e 	bl	800a7f4 <USB_ReadInterrupts>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d22:	f040 8082 	bne.w	8004e2a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	77fb      	strb	r3, [r7, #31]
 8004d2a:	e010      	b.n	8004d4e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
 8004d3a:	8812      	ldrh	r2, [r2, #0]
 8004d3c:	b292      	uxth	r2, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	3320      	adds	r3, #32
 8004d42:	443b      	add	r3, r7
 8004d44:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004d48:	7ffb      	ldrb	r3, [r7, #31]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	2b07      	cmp	r3, #7
 8004d52:	d9eb      	bls.n	8004d2c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	b292      	uxth	r2, r2
 8004d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	b292      	uxth	r2, r2
 8004d80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004d84:	bf00      	nop
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f6      	beq.n	8004d86 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004daa:	b292      	uxth	r2, r2
 8004dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e00f      	b.n	8004dd6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004db6:	7ffb      	ldrb	r3, [r7, #31]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	7ffa      	ldrb	r2, [r7, #31]
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	440a      	add	r2, r1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	3320      	adds	r3, #32
 8004dc8:	443b      	add	r3, r7
 8004dca:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004dce:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004dd0:	7ffb      	ldrb	r3, [r7, #31]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	7ffb      	ldrb	r3, [r7, #31]
 8004dd8:	2b07      	cmp	r3, #7
 8004dda:	d9ec      	bls.n	8004db6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0208 	orr.w	r2, r2, #8
 8004dee:	b292      	uxth	r2, r2
 8004df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e06:	b292      	uxth	r2, r2
 8004e08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0204 	orr.w	r2, r2, #4
 8004e1e:	b292      	uxth	r2, r2
 8004e20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f007 fb95 	bl	800c554 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f005 fce0 	bl	800a7f4 <USB_ReadInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3e:	d10e      	bne.n	8004e5e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e52:	b292      	uxth	r2, r2
 8004e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f007 fb4e 	bl	800c4fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f005 fcc6 	bl	800a7f4 <USB_ReadInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	d10b      	bne.n	8004e8c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e86:	b292      	uxth	r2, r2
 8004e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_PCD_SetAddress+0x1a>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e013      	b.n	8004ed6 <HAL_PCD_SetAddress+0x42>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f005 fc6d 	bl	800a7a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	4608      	mov	r0, r1
 8004ee8:	4611      	mov	r1, r2
 8004eea:	461a      	mov	r2, r3
 8004eec:	4603      	mov	r3, r0
 8004eee:	70fb      	strb	r3, [r7, #3]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	803b      	strh	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da0e      	bge.n	8004f22 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4413      	add	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	705a      	strb	r2, [r3, #1]
 8004f20:	e00e      	b.n	8004f40 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	f003 0207 	and.w	r2, r3, #7
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	4413      	add	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f4c:	883a      	ldrh	r2, [r7, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	78ba      	ldrb	r2, [r7, #2]
 8004f56:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f6a:	78bb      	ldrb	r3, [r7, #2]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d102      	bne.n	8004f76 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_PCD_EP_Open+0xa6>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e00e      	b.n	8004fa2 <HAL_PCD_EP_Open+0xc4>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68f9      	ldr	r1, [r7, #12]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f002 ff7c 	bl	8007e90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004fa0:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da0e      	bge.n	8004fdc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	705a      	strb	r2, [r3, #1]
 8004fda:	e00e      	b.n	8004ffa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	f003 0207 	and.w	r2, r3, #7
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	b2da      	uxtb	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_PCD_EP_Close+0x6a>
 8005010:	2302      	movs	r3, #2
 8005012:	e00e      	b.n	8005032 <HAL_PCD_EP_Close+0x88>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68f9      	ldr	r1, [r7, #12]
 8005022:	4618      	mov	r0, r3
 8005024:	f003 fa9e 	bl	8008564 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	460b      	mov	r3, r1
 8005048:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800504a:	7afb      	ldrb	r3, [r7, #11]
 800504c:	f003 0207 	and.w	r2, r3, #7
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2200      	movs	r2, #0
 8005078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800507a:	7afb      	ldrb	r3, [r7, #11]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	b2da      	uxtb	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005086:	7afb      	ldrb	r3, [r7, #11]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	4618      	mov	r0, r3
 8005098:	f003 fc50 	bl	800893c <USB_EPStartXfer>
 800509c:	e005      	b.n	80050aa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f003 fc49 	bl	800893c <USB_EPStartXfer>
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 0207 	and.w	r2, r3, #7
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	460b      	mov	r3, r1
 80050f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050f2:	7afb      	ldrb	r3, [r7, #11]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2200      	movs	r2, #0
 8005126:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2201      	movs	r2, #1
 800512c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800512e:	7afb      	ldrb	r3, [r7, #11]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	b2da      	uxtb	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800513a:	7afb      	ldrb	r3, [r7, #11]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6979      	ldr	r1, [r7, #20]
 800514a:	4618      	mov	r0, r3
 800514c:	f003 fbf6 	bl	800893c <USB_EPStartXfer>
 8005150:	e005      	b.n	800515e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6979      	ldr	r1, [r7, #20]
 8005158:	4618      	mov	r0, r3
 800515a:	f003 fbef 	bl	800893c <USB_EPStartXfer>
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	f003 0207 	and.w	r2, r3, #7
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	d901      	bls.n	8005186 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e04c      	b.n	8005220 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800518a:	2b00      	cmp	r3, #0
 800518c:	da0e      	bge.n	80051ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	705a      	strb	r2, [r3, #1]
 80051aa:	e00c      	b.n	80051c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_PCD_EP_SetStall+0x7e>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e01c      	b.n	8005220 <HAL_PCD_EP_SetStall+0xb8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f005 f9d9 	bl	800a5ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800520e:	4619      	mov	r1, r3
 8005210:	4610      	mov	r0, r2
 8005212:	f005 fafe 	bl	800a812 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	429a      	cmp	r2, r3
 8005240:	d901      	bls.n	8005246 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e040      	b.n	80052c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800524a:	2b00      	cmp	r3, #0
 800524c:	da0e      	bge.n	800526c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	705a      	strb	r2, [r3, #1]
 800526a:	e00e      	b.n	800528a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	f003 0207 	and.w	r2, r3, #7
 8005272:	4613      	mov	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	b2da      	uxtb	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_PCD_EP_ClrStall+0x82>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e00e      	b.n	80052c8 <HAL_PCD_EP_ClrStall+0xa0>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f005 f9c7 	bl	800a64c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08e      	sub	sp, #56	; 0x38
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80052d8:	e2ec      	b.n	80058b4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80052e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80052f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 8161 	bne.w	80055bc <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80052fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d152      	bne.n	80053aa <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005314:	81fb      	strh	r3, [r7, #14]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	89fb      	ldrh	r3, [r7, #14]
 800531c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005324:	b29b      	uxth	r3, r3
 8005326:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3328      	adds	r3, #40	; 0x28
 800532c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005336:	b29b      	uxth	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	3302      	adds	r3, #2
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	441a      	add	r2, r3
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005368:	2100      	movs	r1, #0
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f007 f8ab 	bl	800c4c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 829b 	beq.w	80058b4 <PCD_EP_ISR_Handler+0x5e4>
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 8296 	bne.w	80058b4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800538e:	b2db      	uxtb	r3, r3
 8005390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005394:	b2da      	uxtb	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	b292      	uxth	r2, r2
 800539c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053a8:	e284      	b.n	80058b4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80053ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d034      	beq.n	800542e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4413      	add	r3, r2
 80053d8:	3306      	adds	r3, #6
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005402:	b29b      	uxth	r3, r3
 8005404:	f005 fa55 	bl	800a8b2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29a      	uxth	r2, r3
 8005410:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005414:	4013      	ands	r3, r2
 8005416:	823b      	strh	r3, [r7, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	8a3a      	ldrh	r2, [r7, #16]
 800541e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005422:	b292      	uxth	r2, r2
 8005424:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f007 f820 	bl	800c46c <HAL_PCD_SetupStageCallback>
 800542c:	e242      	b.n	80058b4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800542e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005432:	2b00      	cmp	r3, #0
 8005434:	f280 823e 	bge.w	80058b4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29a      	uxth	r2, r3
 8005440:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005444:	4013      	ands	r3, r2
 8005446:	83bb      	strh	r3, [r7, #28]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	8bba      	ldrh	r2, [r7, #28]
 800544e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005452:	b292      	uxth	r2, r2
 8005454:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545e:	b29b      	uxth	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4413      	add	r3, r2
 800546a:	3306      	adds	r3, #6
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d019      	beq.n	80054be <PCD_EP_ISR_Handler+0x1ee>
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d015      	beq.n	80054be <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	6959      	ldr	r1, [r3, #20]
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f005 fa05 	bl	800a8b2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	441a      	add	r2, r3
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80054b6:	2100      	movs	r1, #0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f006 ffe9 	bl	800c490 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f040 81f2 	bne.w	80058b4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054de:	b29b      	uxth	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	4413      	add	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d112      	bne.n	800551e <PCD_EP_ISR_Handler+0x24e>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005502:	b29a      	uxth	r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005516:	b29a      	uxth	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	e02f      	b.n	800557e <PCD_EP_ISR_Handler+0x2ae>
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b3e      	cmp	r3, #62	; 0x3e
 8005524:	d813      	bhi.n	800554e <PCD_EP_ISR_Handler+0x27e>
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	633b      	str	r3, [r7, #48]	; 0x30
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <PCD_EP_ISR_Handler+0x270>
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	3301      	adds	r3, #1
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	b29b      	uxth	r3, r3
 8005544:	029b      	lsls	r3, r3, #10
 8005546:	b29a      	uxth	r2, r3
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e017      	b.n	800557e <PCD_EP_ISR_Handler+0x2ae>
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	633b      	str	r3, [r7, #48]	; 0x30
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <PCD_EP_ISR_Handler+0x298>
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	3b01      	subs	r3, #1
 8005566:	633b      	str	r3, [r7, #48]	; 0x30
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	b29b      	uxth	r3, r3
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005578:	b29a      	uxth	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	827b      	strh	r3, [r7, #18]
 8005590:	8a7b      	ldrh	r3, [r7, #18]
 8005592:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005596:	827b      	strh	r3, [r7, #18]
 8005598:	8a7b      	ldrh	r3, [r7, #18]
 800559a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800559e:	827b      	strh	r3, [r7, #18]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	8a7b      	ldrh	r3, [r7, #18]
 80055a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	8013      	strh	r3, [r2, #0]
 80055ba:	e17b      	b.n	80058b4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80055ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f280 80ea 	bge.w	80057ac <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80055ee:	4013      	ands	r3, r2
 80055f0:	853b      	strh	r3, [r7, #40]	; 0x28
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005606:	b292      	uxth	r2, r2
 8005608:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800560a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4413      	add	r3, r2
 800561e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	7b1b      	ldrb	r3, [r3, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d122      	bne.n	800566e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005630:	b29b      	uxth	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	3306      	adds	r3, #6
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005650:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005652:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8087 	beq.w	8005768 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	6959      	ldr	r1, [r3, #20]
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	88da      	ldrh	r2, [r3, #6]
 8005666:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005668:	f005 f923 	bl	800a8b2 <USB_ReadPMA>
 800566c:	e07c      	b.n	8005768 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	78db      	ldrb	r3, [r3, #3]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d108      	bne.n	8005688 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005676:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005678:	461a      	mov	r2, r3
 800567a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f927 	bl	80058d0 <HAL_PCD_EP_DB_Receive>
 8005682:	4603      	mov	r3, r0
 8005684:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005686:	e06f      	b.n	8005768 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	441a      	add	r2, r3
 80056b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d021      	beq.n	8005726 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	3302      	adds	r3, #2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800570a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800570c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800570e:	2b00      	cmp	r3, #0
 8005710:	d02a      	beq.n	8005768 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	6959      	ldr	r1, [r3, #20]
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	891a      	ldrh	r2, [r3, #8]
 800571e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005720:	f005 f8c7 	bl	800a8b2 <USB_ReadPMA>
 8005724:	e020      	b.n	8005768 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572e:	b29b      	uxth	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	3306      	adds	r3, #6
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800574e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	6959      	ldr	r1, [r3, #20]
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	895a      	ldrh	r2, [r3, #10]
 8005762:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005764:	f005 f8a5 	bl	800a8b2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800576e:	441a      	add	r2, r3
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800577a:	441a      	add	r2, r3
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <PCD_EP_ISR_Handler+0x4c2>
 8005788:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	429a      	cmp	r2, r3
 8005790:	d206      	bcs.n	80057a0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f006 fe79 	bl	800c490 <HAL_PCD_DataOutStageCallback>
 800579e:	e005      	b.n	80057ac <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 f8c8 	bl	800893c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80057ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d07e      	beq.n	80058b4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80057b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4413      	add	r3, r2
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80057e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e4:	843b      	strh	r3, [r7, #32]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	441a      	add	r2, r3
 80057f4:	8c3b      	ldrh	r3, [r7, #32]
 80057f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	78db      	ldrb	r3, [r3, #3]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d00c      	beq.n	8005824 <PCD_EP_ISR_Handler+0x554>
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	78db      	ldrb	r3, [r3, #3]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005816:	2b02      	cmp	r3, #2
 8005818:	d146      	bne.n	80058a8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800581a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d141      	bne.n	80058a8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582c:	b29b      	uxth	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	3302      	adds	r3, #2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800584c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	8bfb      	ldrh	r3, [r7, #30]
 8005854:	429a      	cmp	r2, r3
 8005856:	d906      	bls.n	8005866 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	8bfb      	ldrh	r3, [r7, #30]
 800585e:	1ad2      	subs	r2, r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	619a      	str	r2, [r3, #24]
 8005864:	e002      	b.n	800586c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	2200      	movs	r2, #0
 800586a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f006 fe23 	bl	800c4c6 <HAL_PCD_DataInStageCallback>
 8005880:	e018      	b.n	80058b4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	695a      	ldr	r2, [r3, #20]
 8005886:	8bfb      	ldrh	r3, [r7, #30]
 8005888:	441a      	add	r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	8bfb      	ldrh	r3, [r7, #30]
 8005894:	441a      	add	r2, r3
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a0:	4618      	mov	r0, r3
 80058a2:	f003 f84b 	bl	800893c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80058a6:	e005      	b.n	80058b4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80058a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058aa:	461a      	mov	r2, r3
 80058ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f91b 	bl	8005aea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058bc:	b29b      	uxth	r3, r3
 80058be:	b21b      	sxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f6ff ad0a 	blt.w	80052da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3738      	adds	r7, #56	; 0x38
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d07e      	beq.n	80059e6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	3302      	adds	r3, #2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005910:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	8b7b      	ldrh	r3, [r7, #26]
 8005918:	429a      	cmp	r2, r3
 800591a:	d306      	bcc.n	800592a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	8b7b      	ldrh	r3, [r7, #26]
 8005922:	1ad2      	subs	r2, r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	619a      	str	r2, [r3, #24]
 8005928:	e002      	b.n	8005930 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2200      	movs	r2, #0
 800592e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d123      	bne.n	8005980 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	833b      	strh	r3, [r7, #24]
 8005954:	8b3b      	ldrh	r3, [r7, #24]
 8005956:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800595a:	833b      	strh	r3, [r7, #24]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	441a      	add	r2, r3
 800596a:	8b3b      	ldrh	r3, [r7, #24]
 800596c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597c:	b29b      	uxth	r3, r3
 800597e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01f      	beq.n	80059ca <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a4:	82fb      	strh	r3, [r7, #22]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	441a      	add	r2, r3
 80059b4:	8afb      	ldrh	r3, [r7, #22]
 80059b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059ca:	8b7b      	ldrh	r3, [r7, #26]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8087 	beq.w	8005ae0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6959      	ldr	r1, [r3, #20]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	891a      	ldrh	r2, [r3, #8]
 80059de:	8b7b      	ldrh	r3, [r7, #26]
 80059e0:	f004 ff67 	bl	800a8b2 <USB_ReadPMA>
 80059e4:	e07c      	b.n	8005ae0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	3306      	adds	r3, #6
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	6812      	ldr	r2, [r2, #0]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	8b7b      	ldrh	r3, [r7, #26]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d306      	bcc.n	8005a28 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	8b7b      	ldrh	r3, [r7, #26]
 8005a20:	1ad2      	subs	r2, r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	619a      	str	r2, [r3, #24]
 8005a26:	e002      	b.n	8005a2e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d123      	bne.n	8005a7e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a50:	83fb      	strh	r3, [r7, #30]
 8005a52:	8bfb      	ldrh	r3, [r7, #30]
 8005a54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a58:	83fb      	strh	r3, [r7, #30]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	441a      	add	r2, r3
 8005a68:	8bfb      	ldrh	r3, [r7, #30]
 8005a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d11f      	bne.n	8005ac8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa2:	83bb      	strh	r3, [r7, #28]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	8bbb      	ldrh	r3, [r7, #28]
 8005ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ac8:	8b7b      	ldrh	r3, [r7, #26]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d008      	beq.n	8005ae0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6959      	ldr	r1, [r3, #20]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	895a      	ldrh	r2, [r3, #10]
 8005ada:	8b7b      	ldrh	r3, [r7, #26]
 8005adc:	f004 fee9 	bl	800a8b2 <USB_ReadPMA>
    }
  }

  return count;
 8005ae0:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b0a2      	sub	sp, #136	; 0x88
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	4613      	mov	r3, r2
 8005af6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 81c7 	beq.w	8005e92 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	3302      	adds	r3, #2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d907      	bls.n	8005b4c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	619a      	str	r2, [r3, #24]
 8005b4a:	e002      	b.n	8005b52 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f040 80b9 	bne.w	8005cce <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d126      	bne.n	8005bb2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	4413      	add	r3, r2
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	011a      	lsls	r2, r3, #4
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	4413      	add	r3, r2
 8005b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e01a      	b.n	8005be8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d116      	bne.n	8005be8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	4413      	add	r3, r2
 8005bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	011a      	lsls	r2, r3, #4
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	4413      	add	r3, r2
 8005bdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	2200      	movs	r2, #0
 8005be6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d126      	bne.n	8005c44 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	011a      	lsls	r2, r3, #4
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	4413      	add	r3, r2
 8005c18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e017      	b.n	8005c74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d113      	bne.n	8005c74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	623b      	str	r3, [r7, #32]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	011a      	lsls	r2, r3, #4
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	4413      	add	r3, r2
 8005c68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2200      	movs	r2, #0
 8005c72:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f006 fc23 	bl	800c4c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 82d4 	beq.w	8006234 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	827b      	strh	r3, [r7, #18]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	8a7b      	ldrh	r3, [r7, #18]
 8005cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	8013      	strh	r3, [r2, #0]
 8005ccc:	e2b2      	b.n	8006234 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d021      	beq.n	8005d1c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	441a      	add	r2, r3
 8005d04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	f040 8286 	bne.w	8006234 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d30:	441a      	add	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d3e:	441a      	add	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d309      	bcc.n	8005d64 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	621a      	str	r2, [r3, #32]
 8005d62:	e015      	b.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d107      	bne.n	8005d7c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d7a:	e009      	b.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d155      	bne.n	8005e44 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	4413      	add	r3, r2
 8005dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	011a      	lsls	r2, r3, #4
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	4413      	add	r3, r2
 8005dba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d112      	bne.n	8005dec <HAL_PCD_EP_DB_Transmit+0x302>
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e047      	b.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x392>
 8005dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dee:	2b3e      	cmp	r3, #62	; 0x3e
 8005df0:	d811      	bhi.n	8005e16 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e04:	3301      	adds	r3, #1
 8005e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e032      	b.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x392>
 8005e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x342>
 8005e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	029b      	lsls	r3, r3, #10
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	e01b      	b.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x392>
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	785b      	ldrb	r3, [r3, #1]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d117      	bne.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x392>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	643b      	str	r3, [r7, #64]	; 0x40
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e60:	4413      	add	r3, r2
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	011a      	lsls	r2, r3, #4
 8005e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6959      	ldr	r1, [r3, #20]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	891a      	ldrh	r2, [r3, #8]
 8005e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f004 fccc 	bl	800a828 <USB_WritePMA>
 8005e90:	e1d0      	b.n	8006234 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3306      	adds	r3, #6
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d307      	bcc.n	8005eda <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	619a      	str	r2, [r3, #24]
 8005ed8:	e002      	b.n	8005ee0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2200      	movs	r2, #0
 8005ede:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 80c4 	bne.w	8006072 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d126      	bne.n	8005f40 <HAL_PCD_EP_DB_Transmit+0x456>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f06:	4413      	add	r3, r2
 8005f08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	011a      	lsls	r2, r3, #4
 8005f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f12:	4413      	add	r3, r2
 8005f14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f18:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e01a      	b.n	8005f76 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d116      	bne.n	8005f76 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5c:	4413      	add	r3, r2
 8005f5e:	677b      	str	r3, [r7, #116]	; 0x74
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	011a      	lsls	r2, r3, #4
 8005f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f72:	2200      	movs	r2, #0
 8005f74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d12f      	bne.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	011a      	lsls	r2, r3, #4
 8005fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fac:	4413      	add	r3, r2
 8005fae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	e017      	b.n	8006014 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d113      	bne.n	8006014 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffa:	4413      	add	r3, r2
 8005ffc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	011a      	lsls	r2, r3, #4
 8006004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006006:	4413      	add	r3, r2
 8006008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800600c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800600e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006010:	2200      	movs	r2, #0
 8006012:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4619      	mov	r1, r3
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f006 fa53 	bl	800c4c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006026:	2b00      	cmp	r3, #0
 8006028:	f040 8104 	bne.w	8006234 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006046:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800605c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	b29b      	uxth	r3, r3
 800606e:	8013      	strh	r3, [r2, #0]
 8006070:	e0e0      	b.n	8006234 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d121      	bne.n	80060c0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	441a      	add	r2, r3
 80060a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	f040 80b4 	bne.w	8006234 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060d4:	441a      	add	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	69da      	ldr	r2, [r3, #28]
 80060de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060e2:	441a      	add	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6a1a      	ldr	r2, [r3, #32]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d309      	bcc.n	8006108 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6a1a      	ldr	r2, [r3, #32]
 80060fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006100:	1ad2      	subs	r2, r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	621a      	str	r2, [r3, #32]
 8006106:	e015      	b.n	8006134 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d107      	bne.n	8006120 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006114:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800611e:	e009      	b.n	8006134 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2200      	movs	r2, #0
 800612a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	667b      	str	r3, [r7, #100]	; 0x64
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d155      	bne.n	80061ee <HAL_PCD_EP_DB_Transmit+0x704>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006150:	b29b      	uxth	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006156:	4413      	add	r3, r2
 8006158:	65fb      	str	r3, [r7, #92]	; 0x5c
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	011a      	lsls	r2, r3, #4
 8006160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006162:	4413      	add	r3, r2
 8006164:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006168:	65bb      	str	r3, [r7, #88]	; 0x58
 800616a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800616c:	2b00      	cmp	r3, #0
 800616e:	d112      	bne.n	8006196 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800617a:	b29a      	uxth	r2, r3
 800617c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618e:	b29a      	uxth	r2, r3
 8006190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	e044      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x736>
 8006196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006198:	2b3e      	cmp	r3, #62	; 0x3e
 800619a:	d811      	bhi.n	80061c0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800619c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	657b      	str	r3, [r7, #84]	; 0x54
 80061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80061ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ae:	3301      	adds	r3, #1
 80061b0:	657b      	str	r3, [r7, #84]	; 0x54
 80061b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	029b      	lsls	r3, r3, #10
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	e02f      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x736>
 80061c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	657b      	str	r3, [r7, #84]	; 0x54
 80061c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80061d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d2:	3b01      	subs	r3, #1
 80061d4:	657b      	str	r3, [r7, #84]	; 0x54
 80061d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d8:	b29b      	uxth	r3, r3
 80061da:	029b      	lsls	r3, r3, #10
 80061dc:	b29b      	uxth	r3, r3
 80061de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	e018      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x736>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d114      	bne.n	8006220 <HAL_PCD_EP_DB_Transmit+0x736>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006204:	4413      	add	r3, r2
 8006206:	667b      	str	r3, [r7, #100]	; 0x64
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	011a      	lsls	r2, r3, #4
 800620e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006210:	4413      	add	r3, r2
 8006212:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006216:	663b      	str	r3, [r7, #96]	; 0x60
 8006218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621a:	b29a      	uxth	r2, r3
 800621c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800621e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	895a      	ldrh	r2, [r3, #10]
 800622c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622e:	b29b      	uxth	r3, r3
 8006230:	f004 fafa 	bl	800a828 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624e:	823b      	strh	r3, [r7, #16]
 8006250:	8a3b      	ldrh	r3, [r7, #16]
 8006252:	f083 0310 	eor.w	r3, r3, #16
 8006256:	823b      	strh	r3, [r7, #16]
 8006258:	8a3b      	ldrh	r3, [r7, #16]
 800625a:	f083 0320 	eor.w	r3, r3, #32
 800625e:	823b      	strh	r3, [r7, #16]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	8a3b      	ldrh	r3, [r7, #16]
 8006270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006280:	b29b      	uxth	r3, r3
 8006282:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3788      	adds	r7, #136	; 0x88
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800628e:	b480      	push	{r7}
 8006290:	b087      	sub	sp, #28
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	817b      	strh	r3, [r7, #10]
 800629c:	4613      	mov	r3, r2
 800629e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80062a0:	897b      	ldrh	r3, [r7, #10]
 80062a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062ac:	897b      	ldrh	r3, [r7, #10]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e009      	b.n	80062d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062c4:	897a      	ldrh	r2, [r7, #10]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062d8:	893b      	ldrh	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d107      	bne.n	80062ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2200      	movs	r2, #0
 80062e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	80da      	strh	r2, [r3, #6]
 80062ec:	e00b      	b.n	8006306 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2201      	movs	r2, #1
 80062f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	b29a      	uxth	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr
	...

08006314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e272      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 8087 	beq.w	8006442 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006334:	4b92      	ldr	r3, [pc, #584]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f003 030c 	and.w	r3, r3, #12
 800633c:	2b04      	cmp	r3, #4
 800633e:	d00c      	beq.n	800635a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006340:	4b8f      	ldr	r3, [pc, #572]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f003 030c 	and.w	r3, r3, #12
 8006348:	2b08      	cmp	r3, #8
 800634a:	d112      	bne.n	8006372 <HAL_RCC_OscConfig+0x5e>
 800634c:	4b8c      	ldr	r3, [pc, #560]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006358:	d10b      	bne.n	8006372 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800635a:	4b89      	ldr	r3, [pc, #548]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d06c      	beq.n	8006440 <HAL_RCC_OscConfig+0x12c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d168      	bne.n	8006440 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e24c      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637a:	d106      	bne.n	800638a <HAL_RCC_OscConfig+0x76>
 800637c:	4b80      	ldr	r3, [pc, #512]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a7f      	ldr	r2, [pc, #508]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006386:	6013      	str	r3, [r2, #0]
 8006388:	e02e      	b.n	80063e8 <HAL_RCC_OscConfig+0xd4>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10c      	bne.n	80063ac <HAL_RCC_OscConfig+0x98>
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a7a      	ldr	r2, [pc, #488]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b78      	ldr	r3, [pc, #480]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a77      	ldr	r2, [pc, #476]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e01d      	b.n	80063e8 <HAL_RCC_OscConfig+0xd4>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0xbc>
 80063b6:	4b72      	ldr	r3, [pc, #456]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a71      	ldr	r2, [pc, #452]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4b6f      	ldr	r3, [pc, #444]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6e      	ldr	r2, [pc, #440]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e00b      	b.n	80063e8 <HAL_RCC_OscConfig+0xd4>
 80063d0:	4b6b      	ldr	r3, [pc, #428]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a6a      	ldr	r2, [pc, #424]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	4b68      	ldr	r3, [pc, #416]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a67      	ldr	r2, [pc, #412]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80063e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d013      	beq.n	8006418 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fd f8ea 	bl	80035c8 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f8:	f7fd f8e6 	bl	80035c8 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	; 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e200      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640a:	4b5d      	ldr	r3, [pc, #372]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0f0      	beq.n	80063f8 <HAL_RCC_OscConfig+0xe4>
 8006416:	e014      	b.n	8006442 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006418:	f7fd f8d6 	bl	80035c8 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006420:	f7fd f8d2 	bl	80035c8 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b64      	cmp	r3, #100	; 0x64
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e1ec      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006432:	4b53      	ldr	r3, [pc, #332]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0x10c>
 800643e:	e000      	b.n	8006442 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d063      	beq.n	8006516 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800644e:	4b4c      	ldr	r3, [pc, #304]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f003 030c 	and.w	r3, r3, #12
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800645a:	4b49      	ldr	r3, [pc, #292]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f003 030c 	and.w	r3, r3, #12
 8006462:	2b08      	cmp	r3, #8
 8006464:	d11c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x18c>
 8006466:	4b46      	ldr	r3, [pc, #280]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d116      	bne.n	80064a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006472:	4b43      	ldr	r3, [pc, #268]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d005      	beq.n	800648a <HAL_RCC_OscConfig+0x176>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d001      	beq.n	800648a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e1c0      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648a:	4b3d      	ldr	r3, [pc, #244]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4939      	ldr	r1, [pc, #228]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800649a:	4313      	orrs	r3, r2
 800649c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649e:	e03a      	b.n	8006516 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d020      	beq.n	80064ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a8:	4b36      	ldr	r3, [pc, #216]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ae:	f7fd f88b 	bl	80035c8 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b6:	f7fd f887 	bl	80035c8 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e1a1      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c8:	4b2d      	ldr	r3, [pc, #180]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d4:	4b2a      	ldr	r3, [pc, #168]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	4927      	ldr	r1, [pc, #156]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	600b      	str	r3, [r1, #0]
 80064e8:	e015      	b.n	8006516 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ea:	4b26      	ldr	r3, [pc, #152]	; (8006584 <HAL_RCC_OscConfig+0x270>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f0:	f7fd f86a 	bl	80035c8 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f8:	f7fd f866 	bl	80035c8 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e180      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f0      	bne.n	80064f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d03a      	beq.n	8006598 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d019      	beq.n	800655e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800652a:	4b17      	ldr	r3, [pc, #92]	; (8006588 <HAL_RCC_OscConfig+0x274>)
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006530:	f7fd f84a 	bl	80035c8 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006536:	e008      	b.n	800654a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006538:	f7fd f846 	bl	80035c8 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e160      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654a:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <HAL_RCC_OscConfig+0x26c>)
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006556:	2001      	movs	r0, #1
 8006558:	f000 fac4 	bl	8006ae4 <RCC_Delay>
 800655c:	e01c      	b.n	8006598 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <HAL_RCC_OscConfig+0x274>)
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006564:	f7fd f830 	bl	80035c8 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800656a:	e00f      	b.n	800658c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800656c:	f7fd f82c 	bl	80035c8 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d908      	bls.n	800658c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e146      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
 800657e:	bf00      	nop
 8006580:	40021000 	.word	0x40021000
 8006584:	42420000 	.word	0x42420000
 8006588:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800658c:	4b92      	ldr	r3, [pc, #584]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e9      	bne.n	800656c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80a6 	beq.w	80066f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065aa:	4b8b      	ldr	r3, [pc, #556]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10d      	bne.n	80065d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b6:	4b88      	ldr	r3, [pc, #544]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	4a87      	ldr	r2, [pc, #540]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80065bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c0:	61d3      	str	r3, [r2, #28]
 80065c2:	4b85      	ldr	r3, [pc, #532]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d2:	4b82      	ldr	r3, [pc, #520]	; (80067dc <HAL_RCC_OscConfig+0x4c8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d118      	bne.n	8006610 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065de:	4b7f      	ldr	r3, [pc, #508]	; (80067dc <HAL_RCC_OscConfig+0x4c8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a7e      	ldr	r2, [pc, #504]	; (80067dc <HAL_RCC_OscConfig+0x4c8>)
 80065e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ea:	f7fc ffed 	bl	80035c8 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f2:	f7fc ffe9 	bl	80035c8 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b64      	cmp	r3, #100	; 0x64
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e103      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006604:	4b75      	ldr	r3, [pc, #468]	; (80067dc <HAL_RCC_OscConfig+0x4c8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d106      	bne.n	8006626 <HAL_RCC_OscConfig+0x312>
 8006618:	4b6f      	ldr	r3, [pc, #444]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	4a6e      	ldr	r2, [pc, #440]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6213      	str	r3, [r2, #32]
 8006624:	e02d      	b.n	8006682 <HAL_RCC_OscConfig+0x36e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0x334>
 800662e:	4b6a      	ldr	r3, [pc, #424]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	4a69      	ldr	r2, [pc, #420]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	6213      	str	r3, [r2, #32]
 800663a:	4b67      	ldr	r3, [pc, #412]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	4a66      	ldr	r2, [pc, #408]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	6213      	str	r3, [r2, #32]
 8006646:	e01c      	b.n	8006682 <HAL_RCC_OscConfig+0x36e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b05      	cmp	r3, #5
 800664e:	d10c      	bne.n	800666a <HAL_RCC_OscConfig+0x356>
 8006650:	4b61      	ldr	r3, [pc, #388]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	4a60      	ldr	r2, [pc, #384]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006656:	f043 0304 	orr.w	r3, r3, #4
 800665a:	6213      	str	r3, [r2, #32]
 800665c:	4b5e      	ldr	r3, [pc, #376]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	4a5d      	ldr	r2, [pc, #372]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006662:	f043 0301 	orr.w	r3, r3, #1
 8006666:	6213      	str	r3, [r2, #32]
 8006668:	e00b      	b.n	8006682 <HAL_RCC_OscConfig+0x36e>
 800666a:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	4a5a      	ldr	r2, [pc, #360]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	6213      	str	r3, [r2, #32]
 8006676:	4b58      	ldr	r3, [pc, #352]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	4a57      	ldr	r2, [pc, #348]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d015      	beq.n	80066b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800668a:	f7fc ff9d 	bl	80035c8 <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006690:	e00a      	b.n	80066a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006692:	f7fc ff99 	bl	80035c8 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e0b1      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a8:	4b4b      	ldr	r3, [pc, #300]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0ee      	beq.n	8006692 <HAL_RCC_OscConfig+0x37e>
 80066b4:	e014      	b.n	80066e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b6:	f7fc ff87 	bl	80035c8 <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066bc:	e00a      	b.n	80066d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066be:	f7fc ff83 	bl	80035c8 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e09b      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d4:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1ee      	bne.n	80066be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d105      	bne.n	80066f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e6:	4b3c      	ldr	r3, [pc, #240]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	4a3b      	ldr	r2, [pc, #236]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80066ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8087 	beq.w	800680a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066fc:	4b36      	ldr	r3, [pc, #216]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f003 030c 	and.w	r3, r3, #12
 8006704:	2b08      	cmp	r3, #8
 8006706:	d061      	beq.n	80067cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d146      	bne.n	800679e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006710:	4b33      	ldr	r3, [pc, #204]	; (80067e0 <HAL_RCC_OscConfig+0x4cc>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006716:	f7fc ff57 	bl	80035c8 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800671e:	f7fc ff53 	bl	80035c8 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e06d      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006730:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f0      	bne.n	800671e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006744:	d108      	bne.n	8006758 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006746:	4b24      	ldr	r3, [pc, #144]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	4921      	ldr	r1, [pc, #132]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006758:	4b1f      	ldr	r3, [pc, #124]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a19      	ldr	r1, [r3, #32]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	430b      	orrs	r3, r1
 800676a:	491b      	ldr	r1, [pc, #108]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 800676c:	4313      	orrs	r3, r2
 800676e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_RCC_OscConfig+0x4cc>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006776:	f7fc ff27 	bl	80035c8 <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800677e:	f7fc ff23 	bl	80035c8 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e03d      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCC_OscConfig+0x46a>
 800679c:	e035      	b.n	800680a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <HAL_RCC_OscConfig+0x4cc>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a4:	f7fc ff10 	bl	80035c8 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ac:	f7fc ff0c 	bl	80035c8 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e026      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067be:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <HAL_RCC_OscConfig+0x4c4>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f0      	bne.n	80067ac <HAL_RCC_OscConfig+0x498>
 80067ca:	e01e      	b.n	800680a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d107      	bne.n	80067e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e019      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
 80067d8:	40021000 	.word	0x40021000
 80067dc:	40007000 	.word	0x40007000
 80067e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <HAL_RCC_OscConfig+0x500>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d106      	bne.n	8006806 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006802:	429a      	cmp	r2, r3
 8006804:	d001      	beq.n	800680a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40021000 	.word	0x40021000

08006818 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0d0      	b.n	80069ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800682c:	4b6a      	ldr	r3, [pc, #424]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d910      	bls.n	800685c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683a:	4b67      	ldr	r3, [pc, #412]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f023 0207 	bic.w	r2, r3, #7
 8006842:	4965      	ldr	r1, [pc, #404]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	4313      	orrs	r3, r2
 8006848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800684a:	4b63      	ldr	r3, [pc, #396]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d001      	beq.n	800685c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0b8      	b.n	80069ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d020      	beq.n	80068aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006874:	4b59      	ldr	r3, [pc, #356]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4a58      	ldr	r2, [pc, #352]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 800687a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800687e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800688c:	4b53      	ldr	r3, [pc, #332]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	4a52      	ldr	r2, [pc, #328]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006892:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006896:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006898:	4b50      	ldr	r3, [pc, #320]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	494d      	ldr	r1, [pc, #308]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d040      	beq.n	8006938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d107      	bne.n	80068ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	4b47      	ldr	r3, [pc, #284]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d115      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e07f      	b.n	80069ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d107      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068d6:	4b41      	ldr	r3, [pc, #260]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d109      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e073      	b.n	80069ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e6:	4b3d      	ldr	r3, [pc, #244]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e06b      	b.n	80069ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068f6:	4b39      	ldr	r3, [pc, #228]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f023 0203 	bic.w	r2, r3, #3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4936      	ldr	r1, [pc, #216]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006904:	4313      	orrs	r3, r2
 8006906:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006908:	f7fc fe5e 	bl	80035c8 <HAL_GetTick>
 800690c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800690e:	e00a      	b.n	8006926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006910:	f7fc fe5a 	bl	80035c8 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	f241 3288 	movw	r2, #5000	; 0x1388
 800691e:	4293      	cmp	r3, r2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e053      	b.n	80069ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006926:	4b2d      	ldr	r3, [pc, #180]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f003 020c 	and.w	r2, r3, #12
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	429a      	cmp	r2, r3
 8006936:	d1eb      	bne.n	8006910 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006938:	4b27      	ldr	r3, [pc, #156]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d210      	bcs.n	8006968 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006946:	4b24      	ldr	r3, [pc, #144]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f023 0207 	bic.w	r2, r3, #7
 800694e:	4922      	ldr	r1, [pc, #136]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	4313      	orrs	r3, r2
 8006954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006956:	4b20      	ldr	r3, [pc, #128]	; (80069d8 <HAL_RCC_ClockConfig+0x1c0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d001      	beq.n	8006968 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e032      	b.n	80069ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006974:	4b19      	ldr	r3, [pc, #100]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4916      	ldr	r1, [pc, #88]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006982:	4313      	orrs	r3, r2
 8006984:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d009      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	490e      	ldr	r1, [pc, #56]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069a6:	f000 f821 	bl	80069ec <HAL_RCC_GetSysClockFreq>
 80069aa:	4602      	mov	r2, r0
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	091b      	lsrs	r3, r3, #4
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	490a      	ldr	r1, [pc, #40]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80069b8:	5ccb      	ldrb	r3, [r1, r3]
 80069ba:	fa22 f303 	lsr.w	r3, r2, r3
 80069be:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <HAL_RCC_ClockConfig+0x1cc>)
 80069c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069c2:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <HAL_RCC_ClockConfig+0x1d0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fc fdbc 	bl	8003544 <HAL_InitTick>

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40022000 	.word	0x40022000
 80069dc:	40021000 	.word	0x40021000
 80069e0:	0800ca64 	.word	0x0800ca64
 80069e4:	20000028 	.word	0x20000028
 80069e8:	2000002c 	.word	0x2000002c

080069ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069ec:	b490      	push	{r4, r7}
 80069ee:	b08a      	sub	sp, #40	; 0x28
 80069f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80069f2:	4b29      	ldr	r3, [pc, #164]	; (8006a98 <HAL_RCC_GetSysClockFreq+0xac>)
 80069f4:	1d3c      	adds	r4, r7, #4
 80069f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80069fc:	f240 2301 	movw	r3, #513	; 0x201
 8006a00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a16:	4b21      	ldr	r3, [pc, #132]	; (8006a9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	f003 030c 	and.w	r3, r3, #12
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d002      	beq.n	8006a2c <HAL_RCC_GetSysClockFreq+0x40>
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d003      	beq.n	8006a32 <HAL_RCC_GetSysClockFreq+0x46>
 8006a2a:	e02b      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a2e:	623b      	str	r3, [r7, #32]
      break;
 8006a30:	e02b      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	0c9b      	lsrs	r3, r3, #18
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	3328      	adds	r3, #40	; 0x28
 8006a3c:	443b      	add	r3, r7
 8006a3e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a42:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d012      	beq.n	8006a74 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	0c5b      	lsrs	r3, r3, #17
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	3328      	adds	r3, #40	; 0x28
 8006a5a:	443b      	add	r3, r7
 8006a5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	4a0e      	ldr	r2, [pc, #56]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a66:	fb03 f202 	mul.w	r2, r3, r2
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	e004      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	4a0b      	ldr	r2, [pc, #44]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a78:	fb02 f303 	mul.w	r3, r2, r3
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	623b      	str	r3, [r7, #32]
      break;
 8006a82:	e002      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a86:	623b      	str	r3, [r7, #32]
      break;
 8006a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3728      	adds	r7, #40	; 0x28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bc90      	pop	{r4, r7}
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	0800ca00 	.word	0x0800ca00
 8006a9c:	40021000 	.word	0x40021000
 8006aa0:	007a1200 	.word	0x007a1200
 8006aa4:	003d0900 	.word	0x003d0900

08006aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aac:	4b02      	ldr	r3, [pc, #8]	; (8006ab8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006aae:	681b      	ldr	r3, [r3, #0]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr
 8006ab8:	20000028 	.word	0x20000028

08006abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ac0:	f7ff fff2 	bl	8006aa8 <HAL_RCC_GetHCLKFreq>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	0adb      	lsrs	r3, r3, #11
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	4903      	ldr	r1, [pc, #12]	; (8006ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ad2:	5ccb      	ldrb	r3, [r1, r3]
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40021000 	.word	0x40021000
 8006ae0:	0800ca74 	.word	0x0800ca74

08006ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <RCC_Delay+0x34>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <RCC_Delay+0x38>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	0a5b      	lsrs	r3, r3, #9
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b00:	bf00      	nop
  }
  while (Delay --);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	1e5a      	subs	r2, r3, #1
 8006b06:	60fa      	str	r2, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f9      	bne.n	8006b00 <RCC_Delay+0x1c>
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr
 8006b18:	20000028 	.word	0x20000028
 8006b1c:	10624dd3 	.word	0x10624dd3

08006b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d07d      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b40:	4b4f      	ldr	r3, [pc, #316]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10d      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b4c:	4b4c      	ldr	r3, [pc, #304]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	4a4b      	ldr	r2, [pc, #300]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b56:	61d3      	str	r3, [r2, #28]
 8006b58:	4b49      	ldr	r3, [pc, #292]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b68:	4b46      	ldr	r3, [pc, #280]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d118      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b74:	4b43      	ldr	r3, [pc, #268]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a42      	ldr	r2, [pc, #264]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b80:	f7fc fd22 	bl	80035c8 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b86:	e008      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b88:	f7fc fd1e 	bl	80035c8 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b64      	cmp	r3, #100	; 0x64
 8006b94:	d901      	bls.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e06d      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b9a:	4b3a      	ldr	r3, [pc, #232]	; (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ba6:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d02e      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d027      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc4:	4b2e      	ldr	r3, [pc, #184]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bce:	4b2e      	ldr	r3, [pc, #184]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bd4:	4b2c      	ldr	r3, [pc, #176]	; (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006bda:	4a29      	ldr	r2, [pc, #164]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d014      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bea:	f7fc fced 	bl	80035c8 <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf0:	e00a      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf2:	f7fc fce9 	bl	80035c8 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e036      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0ee      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	4917      	ldr	r1, [pc, #92]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d105      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c2c:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d008      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	490b      	ldr	r1, [pc, #44]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c62:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	4904      	ldr	r1, [pc, #16]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40021000 	.word	0x40021000
 8006c84:	40007000 	.word	0x40007000
 8006c88:	42420440 	.word	0x42420440

08006c8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b08d      	sub	sp, #52	; 0x34
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c94:	4b58      	ldr	r3, [pc, #352]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006c96:	f107 040c 	add.w	r4, r7, #12
 8006c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ca0:	f240 2301 	movw	r3, #513	; 0x201
 8006ca4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8006caa:	2300      	movs	r3, #0
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cae:	2300      	movs	r3, #0
 8006cb0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d00a      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	f200 808e 	bhi.w	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d049      	beq.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d079      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006cd4:	e086      	b.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006cd6:	4b49      	ldr	r3, [pc, #292]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006cdc:	4b47      	ldr	r3, [pc, #284]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d07f      	beq.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	0c9b      	lsrs	r3, r3, #18
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	3330      	adds	r3, #48	; 0x30
 8006cf2:	443b      	add	r3, r7
 8006cf4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006cf8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d017      	beq.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d04:	4b3d      	ldr	r3, [pc, #244]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	0c5b      	lsrs	r3, r3, #17
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	3330      	adds	r3, #48	; 0x30
 8006d10:	443b      	add	r3, r7
 8006d12:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00d      	beq.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006d22:	4a37      	ldr	r2, [pc, #220]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	fb02 f303 	mul.w	r3, r2, r3
 8006d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d32:	e004      	b.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	4a33      	ldr	r2, [pc, #204]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006d3e:	4b2f      	ldr	r3, [pc, #188]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d4a:	d102      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d50:	e04a      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4a2c      	ldr	r2, [pc, #176]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006d58:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5c:	085b      	lsrs	r3, r3, #1
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006d60:	e042      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006d62:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d72:	d108      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d84:	e01f      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d90:	d109      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006d92:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006d9e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da4:	e00f      	b.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db0:	d11c      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006dbe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006dc4:	e012      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006dc6:	e011      	b.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006dc8:	f7ff fe78 	bl	8006abc <HAL_RCC_GetPCLK2Freq>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	0b9b      	lsrs	r3, r3, #14
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	3301      	adds	r3, #1
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006de2:	e004      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006de4:	bf00      	nop
 8006de6:	e002      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006de8:	bf00      	nop
 8006dea:	e000      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006dec:	bf00      	nop
    }
  }
  return (frequency);
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3734      	adds	r7, #52	; 0x34
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd90      	pop	{r4, r7, pc}
 8006df8:	0800ca10 	.word	0x0800ca10
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	007a1200 	.word	0x007a1200
 8006e04:	003d0900 	.word	0x003d0900
 8006e08:	aaaaaaab 	.word	0xaaaaaaab

08006e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e041      	b.n	8006ea2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fc fa60 	bl	80032f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	f000 fca0 	bl	8007790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d001      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e032      	b.n	8006f2a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a18      	ldr	r2, [pc, #96]	; (8006f34 <HAL_TIM_Base_Start+0x88>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00e      	beq.n	8006ef4 <HAL_TIM_Base_Start+0x48>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d009      	beq.n	8006ef4 <HAL_TIM_Base_Start+0x48>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a14      	ldr	r2, [pc, #80]	; (8006f38 <HAL_TIM_Base_Start+0x8c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIM_Base_Start+0x48>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <HAL_TIM_Base_Start+0x90>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d111      	bne.n	8006f18 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b06      	cmp	r3, #6
 8006f04:	d010      	beq.n	8006f28 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0201 	orr.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f16:	e007      	b.n	8006f28 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr
 8006f34:	40012c00 	.word	0x40012c00
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800

08006f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d001      	beq.n	8006f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e03a      	b.n	8006fce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_TIM_Base_Start_IT+0x98>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x58>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f82:	d009      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x58>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a14      	ldr	r2, [pc, #80]	; (8006fdc <HAL_TIM_Base_Start_IT+0x9c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x58>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d111      	bne.n	8006fbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b06      	cmp	r3, #6
 8006fa8:	d010      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fba:	e007      	b.n	8006fcc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800

08006fe4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	f241 1311 	movw	r3, #4369	; 0x1111
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10f      	bne.n	800702c <HAL_TIM_Base_Stop_IT+0x48>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6a1a      	ldr	r2, [r3, #32]
 8007012:	f240 4344 	movw	r3, #1092	; 0x444
 8007016:	4013      	ands	r3, r2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <HAL_TIM_Base_Stop_IT+0x48>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0201 	bic.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e041      	b.n	80070d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f839 	bl	80070de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f000 fb86 	bl	8007790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d109      	bne.n	8007114 <HAL_TIM_PWM_Start+0x24>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	bf14      	ite	ne
 800710c:	2301      	movne	r3, #1
 800710e:	2300      	moveq	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	e022      	b.n	800715a <HAL_TIM_PWM_Start+0x6a>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b04      	cmp	r3, #4
 8007118:	d109      	bne.n	800712e <HAL_TIM_PWM_Start+0x3e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b01      	cmp	r3, #1
 8007124:	bf14      	ite	ne
 8007126:	2301      	movne	r3, #1
 8007128:	2300      	moveq	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	e015      	b.n	800715a <HAL_TIM_PWM_Start+0x6a>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b08      	cmp	r3, #8
 8007132:	d109      	bne.n	8007148 <HAL_TIM_PWM_Start+0x58>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b01      	cmp	r3, #1
 800713e:	bf14      	ite	ne
 8007140:	2301      	movne	r3, #1
 8007142:	2300      	moveq	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	e008      	b.n	800715a <HAL_TIM_PWM_Start+0x6a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b01      	cmp	r3, #1
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e05e      	b.n	8007220 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <HAL_TIM_PWM_Start+0x82>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007170:	e013      	b.n	800719a <HAL_TIM_PWM_Start+0xaa>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b04      	cmp	r3, #4
 8007176:	d104      	bne.n	8007182 <HAL_TIM_PWM_Start+0x92>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007180:	e00b      	b.n	800719a <HAL_TIM_PWM_Start+0xaa>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d104      	bne.n	8007192 <HAL_TIM_PWM_Start+0xa2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007190:	e003      	b.n	800719a <HAL_TIM_PWM_Start+0xaa>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2201      	movs	r2, #1
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fd74 	bl	8007c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <HAL_TIM_PWM_Start+0x138>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d107      	bne.n	80071c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a18      	ldr	r2, [pc, #96]	; (8007228 <HAL_TIM_PWM_Start+0x138>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00e      	beq.n	80071ea <HAL_TIM_PWM_Start+0xfa>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d4:	d009      	beq.n	80071ea <HAL_TIM_PWM_Start+0xfa>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a14      	ldr	r2, [pc, #80]	; (800722c <HAL_TIM_PWM_Start+0x13c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d004      	beq.n	80071ea <HAL_TIM_PWM_Start+0xfa>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a12      	ldr	r2, [pc, #72]	; (8007230 <HAL_TIM_PWM_Start+0x140>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d111      	bne.n	800720e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b06      	cmp	r3, #6
 80071fa:	d010      	beq.n	800721e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720c:	e007      	b.n	800721e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0201 	orr.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800

08007234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b02      	cmp	r3, #2
 8007248:	d122      	bne.n	8007290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d11b      	bne.n	8007290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0202 	mvn.w	r2, #2
 8007260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa6f 	bl	800775a <HAL_TIM_IC_CaptureCallback>
 800727c:	e005      	b.n	800728a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa62 	bl	8007748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fa71 	bl	800776c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b04      	cmp	r3, #4
 800729c:	d122      	bne.n	80072e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d11b      	bne.n	80072e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0204 	mvn.w	r2, #4
 80072b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa45 	bl	800775a <HAL_TIM_IC_CaptureCallback>
 80072d0:	e005      	b.n	80072de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa38 	bl	8007748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fa47 	bl	800776c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d122      	bne.n	8007338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d11b      	bne.n	8007338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0208 	mvn.w	r2, #8
 8007308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2204      	movs	r2, #4
 800730e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa1b 	bl	800775a <HAL_TIM_IC_CaptureCallback>
 8007324:	e005      	b.n	8007332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa0e 	bl	8007748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fa1d 	bl	800776c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b10      	cmp	r3, #16
 8007344:	d122      	bne.n	800738c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b10      	cmp	r3, #16
 8007352:	d11b      	bne.n	800738c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0210 	mvn.w	r2, #16
 800735c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2208      	movs	r2, #8
 8007362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9f1 	bl	800775a <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f9e4 	bl	8007748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f9f3 	bl	800776c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b01      	cmp	r3, #1
 8007398:	d10e      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0201 	mvn.w	r2, #1
 80073b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fa f820 	bl	80013f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c2:	2b80      	cmp	r3, #128	; 0x80
 80073c4:	d10e      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	2b80      	cmp	r3, #128	; 0x80
 80073d2:	d107      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fce1 	bl	8007da6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d10e      	bne.n	8007410 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d107      	bne.n	8007410 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f9b7 	bl	800777e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b20      	cmp	r3, #32
 800741c:	d10e      	bne.n	800743c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b20      	cmp	r3, #32
 800742a:	d107      	bne.n	800743c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0220 	mvn.w	r2, #32
 8007434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fcac 	bl	8007d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800745a:	2302      	movs	r3, #2
 800745c:	e0ac      	b.n	80075b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b0c      	cmp	r3, #12
 800746a:	f200 809f 	bhi.w	80075ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800746e:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	080074a9 	.word	0x080074a9
 8007478:	080075ad 	.word	0x080075ad
 800747c:	080075ad 	.word	0x080075ad
 8007480:	080075ad 	.word	0x080075ad
 8007484:	080074e9 	.word	0x080074e9
 8007488:	080075ad 	.word	0x080075ad
 800748c:	080075ad 	.word	0x080075ad
 8007490:	080075ad 	.word	0x080075ad
 8007494:	0800752b 	.word	0x0800752b
 8007498:	080075ad 	.word	0x080075ad
 800749c:	080075ad 	.word	0x080075ad
 80074a0:	080075ad 	.word	0x080075ad
 80074a4:	0800756b 	.word	0x0800756b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f9d0 	bl	8007854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699a      	ldr	r2, [r3, #24]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0208 	orr.w	r2, r2, #8
 80074c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0204 	bic.w	r2, r2, #4
 80074d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6999      	ldr	r1, [r3, #24]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	619a      	str	r2, [r3, #24]
      break;
 80074e6:	e062      	b.n	80075ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fa16 	bl	8007920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6999      	ldr	r1, [r3, #24]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	021a      	lsls	r2, r3, #8
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	619a      	str	r2, [r3, #24]
      break;
 8007528:	e041      	b.n	80075ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 fa5f 	bl	80079f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69da      	ldr	r2, [r3, #28]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0208 	orr.w	r2, r2, #8
 8007544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0204 	bic.w	r2, r2, #4
 8007554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69d9      	ldr	r1, [r3, #28]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	691a      	ldr	r2, [r3, #16]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	61da      	str	r2, [r3, #28]
      break;
 8007568:	e021      	b.n	80075ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68b9      	ldr	r1, [r7, #8]
 8007570:	4618      	mov	r0, r3
 8007572:	f000 faa9 	bl	8007ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69da      	ldr	r2, [r3, #28]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69d9      	ldr	r1, [r3, #28]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	021a      	lsls	r2, r3, #8
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	61da      	str	r2, [r3, #28]
      break;
 80075aa:	e000      	b.n	80075ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80075ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_TIM_ConfigClockSource+0x18>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e0b3      	b.n	8007740 <HAL_TIM_ConfigClockSource+0x180>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80075f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007610:	d03e      	beq.n	8007690 <HAL_TIM_ConfigClockSource+0xd0>
 8007612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007616:	f200 8087 	bhi.w	8007728 <HAL_TIM_ConfigClockSource+0x168>
 800761a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761e:	f000 8085 	beq.w	800772c <HAL_TIM_ConfigClockSource+0x16c>
 8007622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007626:	d87f      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x168>
 8007628:	2b70      	cmp	r3, #112	; 0x70
 800762a:	d01a      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0xa2>
 800762c:	2b70      	cmp	r3, #112	; 0x70
 800762e:	d87b      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x168>
 8007630:	2b60      	cmp	r3, #96	; 0x60
 8007632:	d050      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x116>
 8007634:	2b60      	cmp	r3, #96	; 0x60
 8007636:	d877      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x168>
 8007638:	2b50      	cmp	r3, #80	; 0x50
 800763a:	d03c      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0xf6>
 800763c:	2b50      	cmp	r3, #80	; 0x50
 800763e:	d873      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x168>
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d058      	beq.n	80076f6 <HAL_TIM_ConfigClockSource+0x136>
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d86f      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x168>
 8007648:	2b30      	cmp	r3, #48	; 0x30
 800764a:	d064      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0x156>
 800764c:	2b30      	cmp	r3, #48	; 0x30
 800764e:	d86b      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x168>
 8007650:	2b20      	cmp	r3, #32
 8007652:	d060      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0x156>
 8007654:	2b20      	cmp	r3, #32
 8007656:	d867      	bhi.n	8007728 <HAL_TIM_ConfigClockSource+0x168>
 8007658:	2b00      	cmp	r3, #0
 800765a:	d05c      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0x156>
 800765c:	2b10      	cmp	r3, #16
 800765e:	d05a      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007660:	e062      	b.n	8007728 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6899      	ldr	r1, [r3, #8]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f000 faee 	bl	8007c52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007684:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	609a      	str	r2, [r3, #8]
      break;
 800768e:	e04e      	b.n	800772e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	6899      	ldr	r1, [r3, #8]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f000 fad7 	bl	8007c52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076b2:	609a      	str	r2, [r3, #8]
      break;
 80076b4:	e03b      	b.n	800772e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6859      	ldr	r1, [r3, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	461a      	mov	r2, r3
 80076c4:	f000 fa4e 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2150      	movs	r1, #80	; 0x50
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 faa5 	bl	8007c1e <TIM_ITRx_SetConfig>
      break;
 80076d4:	e02b      	b.n	800772e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6859      	ldr	r1, [r3, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	461a      	mov	r2, r3
 80076e4:	f000 fa6c 	bl	8007bc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2160      	movs	r1, #96	; 0x60
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fa95 	bl	8007c1e <TIM_ITRx_SetConfig>
      break;
 80076f4:	e01b      	b.n	800772e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6859      	ldr	r1, [r3, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	461a      	mov	r2, r3
 8007704:	f000 fa2e 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2140      	movs	r1, #64	; 0x40
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fa85 	bl	8007c1e <TIM_ITRx_SetConfig>
      break;
 8007714:	e00b      	b.n	800772e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f000 fa7c 	bl	8007c1e <TIM_ITRx_SetConfig>
        break;
 8007726:	e002      	b.n	800772e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800772c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr

0800775a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007762:	bf00      	nop
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr

0800776c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr

0800777e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a29      	ldr	r2, [pc, #164]	; (8007848 <TIM_Base_SetConfig+0xb8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00b      	beq.n	80077c0 <TIM_Base_SetConfig+0x30>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ae:	d007      	beq.n	80077c0 <TIM_Base_SetConfig+0x30>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a26      	ldr	r2, [pc, #152]	; (800784c <TIM_Base_SetConfig+0xbc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_Base_SetConfig+0x30>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a25      	ldr	r2, [pc, #148]	; (8007850 <TIM_Base_SetConfig+0xc0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d108      	bne.n	80077d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1c      	ldr	r2, [pc, #112]	; (8007848 <TIM_Base_SetConfig+0xb8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00b      	beq.n	80077f2 <TIM_Base_SetConfig+0x62>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e0:	d007      	beq.n	80077f2 <TIM_Base_SetConfig+0x62>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a19      	ldr	r2, [pc, #100]	; (800784c <TIM_Base_SetConfig+0xbc>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d003      	beq.n	80077f2 <TIM_Base_SetConfig+0x62>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a18      	ldr	r2, [pc, #96]	; (8007850 <TIM_Base_SetConfig+0xc0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d108      	bne.n	8007804 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a07      	ldr	r2, [pc, #28]	; (8007848 <TIM_Base_SetConfig+0xb8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d103      	bne.n	8007838 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	615a      	str	r2, [r3, #20]
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40000400 	.word	0x40000400
 8007850:	40000800 	.word	0x40000800

08007854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f023 0201 	bic.w	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f023 0302 	bic.w	r3, r3, #2
 800789c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a1c      	ldr	r2, [pc, #112]	; (800791c <TIM_OC1_SetConfig+0xc8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10c      	bne.n	80078ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f023 0308 	bic.w	r3, r3, #8
 80078b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f023 0304 	bic.w	r3, r3, #4
 80078c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a13      	ldr	r2, [pc, #76]	; (800791c <TIM_OC1_SetConfig+0xc8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d111      	bne.n	80078f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	621a      	str	r2, [r3, #32]
}
 8007910:	bf00      	nop
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40012c00 	.word	0x40012c00

08007920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0210 	bic.w	r2, r3, #16
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0320 	bic.w	r3, r3, #32
 800796a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4313      	orrs	r3, r2
 8007976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a1d      	ldr	r2, [pc, #116]	; (80079f0 <TIM_OC2_SetConfig+0xd0>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d10d      	bne.n	800799c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <TIM_OC2_SetConfig+0xd0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d113      	bne.n	80079cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bc80      	pop	{r7}
 80079ee:	4770      	bx	lr
 80079f0:	40012c00 	.word	0x40012c00

080079f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a1d      	ldr	r2, [pc, #116]	; (8007ac4 <TIM_OC3_SetConfig+0xd0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d10d      	bne.n	8007a6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <TIM_OC3_SetConfig+0xd0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d113      	bne.n	8007a9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40012c00 	.word	0x40012c00

08007ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	031b      	lsls	r3, r3, #12
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <TIM_OC4_SetConfig+0x98>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d109      	bne.n	8007b3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	019b      	lsls	r3, r3, #6
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr
 8007b60:	40012c00 	.word	0x40012c00

08007b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f023 030a 	bic.w	r3, r3, #10
 8007ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	621a      	str	r2, [r3, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bc80      	pop	{r7}
 8007bbe:	4770      	bx	lr

08007bc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	f023 0210 	bic.w	r2, r3, #16
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	031b      	lsls	r3, r3, #12
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	621a      	str	r2, [r3, #32]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr

08007c1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f043 0307 	orr.w	r3, r3, #7
 8007c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	609a      	str	r2, [r3, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr

08007c52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b087      	sub	sp, #28
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	021a      	lsls	r2, r3, #8
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	609a      	str	r2, [r3, #8]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr

08007c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6a1a      	ldr	r2, [r3, #32]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	43db      	mvns	r3, r3
 8007cb2:	401a      	ands	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1a      	ldr	r2, [r3, #32]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bc80      	pop	{r7}
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e046      	b.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a16      	ldr	r2, [pc, #88]	; (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00e      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3c:	d009      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a12      	ldr	r2, [pc, #72]	; (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d004      	beq.n	8007d52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a10      	ldr	r2, [pc, #64]	; (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10c      	bne.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr
 8007d88:	40012c00 	.word	0x40012c00
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40000800 	.word	0x40000800

08007d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr

08007da6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr

08007db8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007db8:	b084      	sub	sp, #16
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	f107 0014 	add.w	r0, r7, #20
 8007dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	b004      	add	sp, #16
 8007dd6:	4770      	bx	lr

08007dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007de8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007dec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e0c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007e10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	4013      	ands	r3, r2
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr

08007e38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e50:	b084      	sub	sp, #16
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	f107 0014 	add.w	r0, r7, #20
 8007e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	b004      	add	sp, #16
 8007e8e:	4770      	bx	lr

08007e90 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b09b      	sub	sp, #108	; 0x6c
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	78db      	ldrb	r3, [r3, #3]
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d81f      	bhi.n	8007f02 <USB_ActivateEndpoint+0x72>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <USB_ActivateEndpoint+0x38>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007ed9 	.word	0x08007ed9
 8007ecc:	08007ef5 	.word	0x08007ef5
 8007ed0:	08007f0b 	.word	0x08007f0b
 8007ed4:	08007ee7 	.word	0x08007ee7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007ed8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007edc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ee0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007ee4:	e012      	b.n	8007f0c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007ee6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007eea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007eee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007ef2:	e00b      	b.n	8007f0c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007ef4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007ef8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007efc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007f00:	e004      	b.n	8007f0c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007f08:	e000      	b.n	8007f0c <USB_ActivateEndpoint+0x7c>
      break;
 8007f0a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	441a      	add	r2, r3
 8007f16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	7b1b      	ldrb	r3, [r3, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f040 8149 	bne.w	8008210 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 8084 	beq.w	8008090 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	4413      	add	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	011a      	lsls	r2, r3, #4
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	88db      	ldrh	r3, [r3, #6]
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	81fb      	strh	r3, [r7, #14]
 8007fca:	89fb      	ldrh	r3, [r7, #14]
 8007fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01b      	beq.n	800800c <USB_ActivateEndpoint+0x17c>
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fea:	81bb      	strh	r3, [r7, #12]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	441a      	add	r2, r3
 8007ff6:	89bb      	ldrh	r3, [r7, #12]
 8007ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008004:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008008:	b29b      	uxth	r3, r3
 800800a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	78db      	ldrb	r3, [r3, #3]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d020      	beq.n	8008056 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802a:	813b      	strh	r3, [r7, #8]
 800802c:	893b      	ldrh	r3, [r7, #8]
 800802e:	f083 0320 	eor.w	r3, r3, #32
 8008032:	813b      	strh	r3, [r7, #8]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	441a      	add	r2, r3
 800803e:	893b      	ldrh	r3, [r7, #8]
 8008040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800804c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008050:	b29b      	uxth	r3, r3
 8008052:	8013      	strh	r3, [r2, #0]
 8008054:	e27f      	b.n	8008556 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800806c:	817b      	strh	r3, [r7, #10]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	441a      	add	r2, r3
 8008078:	897b      	ldrh	r3, [r7, #10]
 800807a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800807e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808a:	b29b      	uxth	r3, r3
 800808c:	8013      	strh	r3, [r2, #0]
 800808e:	e262      	b.n	8008556 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809a:	b29b      	uxth	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	4413      	add	r3, r2
 80080a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	011a      	lsls	r2, r3, #4
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80080b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	88db      	ldrh	r3, [r3, #6]
 80080b8:	085b      	lsrs	r3, r3, #1
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	461a      	mov	r2, r3
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	4413      	add	r3, r2
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	011a      	lsls	r2, r3, #4
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	4413      	add	r3, r2
 80080e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080e6:	623b      	str	r3, [r7, #32]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d112      	bne.n	8008116 <USB_ActivateEndpoint+0x286>
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	801a      	strh	r2, [r3, #0]
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800810a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800810e:	b29a      	uxth	r2, r3
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	801a      	strh	r2, [r3, #0]
 8008114:	e02f      	b.n	8008176 <USB_ActivateEndpoint+0x2e6>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b3e      	cmp	r3, #62	; 0x3e
 800811c:	d813      	bhi.n	8008146 <USB_ActivateEndpoint+0x2b6>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	085b      	lsrs	r3, r3, #1
 8008124:	663b      	str	r3, [r7, #96]	; 0x60
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <USB_ActivateEndpoint+0x2a8>
 8008132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008134:	3301      	adds	r3, #1
 8008136:	663b      	str	r3, [r7, #96]	; 0x60
 8008138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800813a:	b29b      	uxth	r3, r3
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	b29a      	uxth	r2, r3
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	e017      	b.n	8008176 <USB_ActivateEndpoint+0x2e6>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	663b      	str	r3, [r7, #96]	; 0x60
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <USB_ActivateEndpoint+0x2d0>
 800815a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800815c:	3b01      	subs	r3, #1
 800815e:	663b      	str	r3, [r7, #96]	; 0x60
 8008160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008162:	b29b      	uxth	r3, r3
 8008164:	029b      	lsls	r3, r3, #10
 8008166:	b29b      	uxth	r3, r3
 8008168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800816c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008170:	b29a      	uxth	r2, r3
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	83fb      	strh	r3, [r7, #30]
 8008184:	8bfb      	ldrh	r3, [r7, #30]
 8008186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d01b      	beq.n	80081c6 <USB_ActivateEndpoint+0x336>
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a4:	83bb      	strh	r3, [r7, #28]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	441a      	add	r2, r3
 80081b0:	8bbb      	ldrh	r3, [r7, #28]
 80081b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081dc:	837b      	strh	r3, [r7, #26]
 80081de:	8b7b      	ldrh	r3, [r7, #26]
 80081e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081e4:	837b      	strh	r3, [r7, #26]
 80081e6:	8b7b      	ldrh	r3, [r7, #26]
 80081e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081ec:	837b      	strh	r3, [r7, #26]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	441a      	add	r2, r3
 80081f8:	8b7b      	ldrh	r3, [r7, #26]
 80081fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820a:	b29b      	uxth	r3, r3
 800820c:	8013      	strh	r3, [r2, #0]
 800820e:	e1a2      	b.n	8008556 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29b      	uxth	r3, r3
 800821e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008226:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	441a      	add	r2, r3
 8008234:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008240:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008248:	b29b      	uxth	r3, r3
 800824a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008256:	b29b      	uxth	r3, r3
 8008258:	461a      	mov	r2, r3
 800825a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800825c:	4413      	add	r3, r2
 800825e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	011a      	lsls	r2, r3, #4
 8008266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008268:	4413      	add	r3, r2
 800826a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800826e:	657b      	str	r3, [r7, #84]	; 0x54
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	891b      	ldrh	r3, [r3, #8]
 8008274:	085b      	lsrs	r3, r3, #1
 8008276:	b29b      	uxth	r3, r3
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	653b      	str	r3, [r7, #80]	; 0x50
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800828a:	b29b      	uxth	r3, r3
 800828c:	461a      	mov	r2, r3
 800828e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008290:	4413      	add	r3, r2
 8008292:	653b      	str	r3, [r7, #80]	; 0x50
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	011a      	lsls	r2, r3, #4
 800829a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829c:	4413      	add	r3, r2
 800829e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80082a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	895b      	ldrh	r3, [r3, #10]
 80082a8:	085b      	lsrs	r3, r3, #1
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f040 8091 	bne.w	80083e0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80082cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80082ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d01b      	beq.n	800830e <USB_ActivateEndpoint+0x47e>
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ec:	877b      	strh	r3, [r7, #58]	; 0x3a
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	441a      	add	r2, r3
 80082f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80082fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008302:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830a:	b29b      	uxth	r3, r3
 800830c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	873b      	strh	r3, [r7, #56]	; 0x38
 800831c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800831e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008322:	2b00      	cmp	r3, #0
 8008324:	d01b      	beq.n	800835e <USB_ActivateEndpoint+0x4ce>
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	441a      	add	r2, r3
 8008348:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800834a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800834e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800835a:	b29b      	uxth	r3, r3
 800835c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008374:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008376:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008378:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800837c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800837e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008380:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008384:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	441a      	add	r2, r3
 8008390:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083bc:	867b      	strh	r3, [r7, #50]	; 0x32
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80083ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083da:	b29b      	uxth	r3, r3
 80083dc:	8013      	strh	r3, [r2, #0]
 80083de:	e0ba      	b.n	8008556 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80083f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80083f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01d      	beq.n	8008438 <USB_ActivateEndpoint+0x5a8>
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29b      	uxth	r3, r3
 800840a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800840e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008412:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	441a      	add	r2, r3
 8008420:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800842c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008434:	b29b      	uxth	r3, r3
 8008436:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008448:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800844c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008450:	2b00      	cmp	r3, #0
 8008452:	d01d      	beq.n	8008490 <USB_ActivateEndpoint+0x600>
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800847c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800848c:	b29b      	uxth	r3, r3
 800848e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	78db      	ldrb	r3, [r3, #3]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d024      	beq.n	80084e2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80084b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80084b6:	f083 0320 	eor.w	r3, r3, #32
 80084ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	441a      	add	r2, r3
 80084c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80084cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084dc:	b29b      	uxth	r3, r3
 80084de:	8013      	strh	r3, [r2, #0]
 80084e0:	e01d      	b.n	800851e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800850a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851a:	b29b      	uxth	r3, r3
 800851c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008534:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	441a      	add	r2, r3
 8008540:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800854a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008552:	b29b      	uxth	r3, r3
 8008554:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008556:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800855a:	4618      	mov	r0, r3
 800855c:	376c      	adds	r7, #108	; 0x6c
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008564:	b480      	push	{r7}
 8008566:	b08d      	sub	sp, #52	; 0x34
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	7b1b      	ldrb	r3, [r3, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f040 808e 	bne.w	8008694 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	785b      	ldrb	r3, [r3, #1]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d044      	beq.n	800860a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	81bb      	strh	r3, [r7, #12]
 800858e:	89bb      	ldrh	r3, [r7, #12]
 8008590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01b      	beq.n	80085d0 <USB_DeactivateEndpoint+0x6c>
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ae:	817b      	strh	r3, [r7, #10]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	441a      	add	r2, r3
 80085ba:	897b      	ldrh	r3, [r7, #10]
 80085bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e6:	813b      	strh	r3, [r7, #8]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	441a      	add	r2, r3
 80085f2:	893b      	ldrh	r3, [r7, #8]
 80085f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008604:	b29b      	uxth	r3, r3
 8008606:	8013      	strh	r3, [r2, #0]
 8008608:	e192      	b.n	8008930 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	827b      	strh	r3, [r7, #18]
 8008618:	8a7b      	ldrh	r3, [r7, #18]
 800861a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01b      	beq.n	800865a <USB_DeactivateEndpoint+0xf6>
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008638:	823b      	strh	r3, [r7, #16]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	441a      	add	r2, r3
 8008644:	8a3b      	ldrh	r3, [r7, #16]
 8008646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800864a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008656:	b29b      	uxth	r3, r3
 8008658:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29b      	uxth	r3, r3
 8008668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800866c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008670:	81fb      	strh	r3, [r7, #14]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	441a      	add	r2, r3
 800867c:	89fb      	ldrh	r3, [r7, #14]
 800867e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868e:	b29b      	uxth	r3, r3
 8008690:	8013      	strh	r3, [r2, #0]
 8008692:	e14d      	b.n	8008930 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	785b      	ldrb	r3, [r3, #1]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f040 80a5 	bne.w	80087e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	843b      	strh	r3, [r7, #32]
 80086ac:	8c3b      	ldrh	r3, [r7, #32]
 80086ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d01b      	beq.n	80086ee <USB_DeactivateEndpoint+0x18a>
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086cc:	83fb      	strh	r3, [r7, #30]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	441a      	add	r2, r3
 80086d8:	8bfb      	ldrh	r3, [r7, #30]
 80086da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	83bb      	strh	r3, [r7, #28]
 80086fc:	8bbb      	ldrh	r3, [r7, #28]
 80086fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01b      	beq.n	800873e <USB_DeactivateEndpoint+0x1da>
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871c:	837b      	strh	r3, [r7, #26]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	8b7b      	ldrh	r3, [r7, #26]
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008736:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008754:	833b      	strh	r3, [r7, #24]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	441a      	add	r2, r3
 8008760:	8b3b      	ldrh	r3, [r7, #24]
 8008762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800876a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800876e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008772:	b29b      	uxth	r3, r3
 8008774:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29b      	uxth	r3, r3
 8008784:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878c:	82fb      	strh	r3, [r7, #22]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	441a      	add	r2, r3
 8008798:	8afb      	ldrh	r3, [r7, #22]
 800879a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800879e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c4:	82bb      	strh	r3, [r7, #20]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	441a      	add	r2, r3
 80087d0:	8abb      	ldrh	r3, [r7, #20]
 80087d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	8013      	strh	r3, [r2, #0]
 80087e6:	e0a3      	b.n	8008930 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80087f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d01b      	beq.n	8008838 <USB_DeactivateEndpoint+0x2d4>
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	b29b      	uxth	r3, r3
 800880e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008816:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	441a      	add	r2, r3
 8008822:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008834:	b29b      	uxth	r3, r3
 8008836:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008846:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01b      	beq.n	8008888 <USB_DeactivateEndpoint+0x324>
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	853b      	strh	r3, [r7, #40]	; 0x28
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	441a      	add	r2, r3
 8008872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008880:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008884:	b29b      	uxth	r3, r3
 8008886:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800889a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889e:	84fb      	strh	r3, [r7, #38]	; 0x26
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	441a      	add	r2, r3
 80088aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088bc:	b29b      	uxth	r3, r3
 80088be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	441a      	add	r2, r3
 80088e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800890a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	441a      	add	r2, r3
 800891a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800891c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892c:	b29b      	uxth	r3, r3
 800892e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3734      	adds	r7, #52	; 0x34
 8008936:	46bd      	mov	sp, r7
 8008938:	bc80      	pop	{r7}
 800893a:	4770      	bx	lr

0800893c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b0cc      	sub	sp, #304	; 0x130
 8008940:	af00      	add	r7, sp, #0
 8008942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800894a:	6018      	str	r0, [r3, #0]
 800894c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008954:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800895a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b01      	cmp	r3, #1
 8008964:	f041 817d 	bne.w	8009c62 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	699a      	ldr	r2, [r3, #24]
 8008974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	429a      	cmp	r2, r3
 8008982:	d908      	bls.n	8008996 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008994:	e007      	b.n	80089a6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80089a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	7b1b      	ldrb	r3, [r3, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d152      	bne.n	8008a5c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80089b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6959      	ldr	r1, [r3, #20]
 80089c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	88da      	ldrh	r2, [r3, #6]
 80089ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80089d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80089dc:	6800      	ldr	r0, [r0, #0]
 80089de:	f001 ff23 	bl	800a828 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80089ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089ee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	4619      	mov	r1, r3
 8008a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008a10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a14:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008a18:	6812      	ldr	r2, [r2, #0]
 8008a1a:	440a      	add	r2, r1
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	011a      	lsls	r2, r3, #4
 8008a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a30:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4413      	add	r3, r2
 8008a38:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	f001 b8b5 	b.w	8009bc6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	78db      	ldrb	r3, [r3, #3]
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	f040 84c6 	bne.w	80093fa <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6a1a      	ldr	r2, [r3, #32]
 8008a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	f240 8443 	bls.w	8009312 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	441a      	add	r2, r3
 8008ad0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008adc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6a1a      	ldr	r2, [r3, #32]
 8008af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af8:	1ad2      	subs	r2, r2, r3
 8008afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 823e 	beq.w	8008faa <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b3a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f040 809a 	bne.w	8008c88 <USB_EPStartXfer+0x34c>
 8008b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b60:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4619      	mov	r1, r3
 8008b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b86:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	440a      	add	r2, r1
 8008b8e:	601a      	str	r2, [r3, #0]
 8008b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	011a      	lsls	r2, r3, #4
 8008b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d122      	bne.n	8008c06 <USB_EPStartXfer+0x2ca>
 8008bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	e079      	b.n	8008cfa <USB_EPStartXfer+0x3be>
 8008c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c0c:	d81b      	bhi.n	8008c46 <USB_EPStartXfer+0x30a>
 8008c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c12:	085b      	lsrs	r3, r3, #1
 8008c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <USB_EPStartXfer+0x2f2>
 8008c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c28:	3301      	adds	r3, #1
 8008c2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	029b      	lsls	r3, r3, #10
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	801a      	strh	r2, [r3, #0]
 8008c44:	e059      	b.n	8008cfa <USB_EPStartXfer+0x3be>
 8008c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c4a:	095b      	lsrs	r3, r3, #5
 8008c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c54:	f003 031f 	and.w	r3, r3, #31
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <USB_EPStartXfer+0x32a>
 8008c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c60:	3b01      	subs	r3, #1
 8008c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	029b      	lsls	r3, r3, #10
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	e038      	b.n	8008cfa <USB_EPStartXfer+0x3be>
 8008c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	785b      	ldrb	r3, [r3, #1]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d130      	bne.n	8008cfa <USB_EPStartXfer+0x3be>
 8008c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	4619      	mov	r1, r3
 8008caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008cb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cb6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008cba:	6812      	ldr	r2, [r2, #0]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	011a      	lsls	r2, r3, #4
 8008cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	895b      	ldrh	r3, [r3, #10]
 8008d06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6959      	ldr	r1, [r3, #20]
 8008d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008d20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008d24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008d28:	6800      	ldr	r0, [r0, #0]
 8008d2a:	f001 fd7d 	bl	800a828 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	695a      	ldr	r2, [r3, #20]
 8008d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d3e:	441a      	add	r2, r3
 8008d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6a1a      	ldr	r2, [r3, #32]
 8008d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d90f      	bls.n	8008d88 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6a1a      	ldr	r2, [r3, #32]
 8008d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d78:	1ad2      	subs	r2, r2, r3
 8008d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	621a      	str	r2, [r3, #32]
 8008d86:	e00e      	b.n	8008da6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2200      	movs	r2, #0
 8008da4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f040 809a 	bne.w	8008eec <USB_EPStartXfer+0x5b0>
 8008db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dbc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008dc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008dc4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008dc8:	6812      	ldr	r2, [r2, #0]
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	4619      	mov	r1, r3
 8008dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008de6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008dea:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008dee:	6812      	ldr	r2, [r2, #0]
 8008df0:	440a      	add	r2, r1
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	011a      	lsls	r2, r3, #4
 8008e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e06:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d122      	bne.n	8008e6a <USB_EPStartXfer+0x52e>
 8008e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	801a      	strh	r2, [r3, #0]
 8008e68:	e083      	b.n	8008f72 <USB_EPStartXfer+0x636>
 8008e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6e:	2b3e      	cmp	r3, #62	; 0x3e
 8008e70:	d81b      	bhi.n	8008eaa <USB_EPStartXfer+0x56e>
 8008e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e76:	085b      	lsrs	r3, r3, #1
 8008e78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d004      	beq.n	8008e92 <USB_EPStartXfer+0x556>
 8008e88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e92:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	029b      	lsls	r3, r3, #10
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	801a      	strh	r2, [r3, #0]
 8008ea8:	e063      	b.n	8008f72 <USB_EPStartXfer+0x636>
 8008eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eae:	095b      	lsrs	r3, r3, #5
 8008eb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb8:	f003 031f 	and.w	r3, r3, #31
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <USB_EPStartXfer+0x58e>
 8008ec0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008eca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	029b      	lsls	r3, r3, #10
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	e042      	b.n	8008f72 <USB_EPStartXfer+0x636>
 8008eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d13a      	bne.n	8008f72 <USB_EPStartXfer+0x636>
 8008efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008f04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f08:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008f0c:	6812      	ldr	r2, [r2, #0]
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	4619      	mov	r1, r3
 8008f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008f2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f2e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	440a      	add	r2, r1
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	011a      	lsls	r2, r3, #4
 8008f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4413      	add	r3, r2
 8008f52:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	891b      	ldrh	r3, [r3, #8]
 8008f7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6959      	ldr	r1, [r3, #20]
 8008f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008fa0:	6800      	ldr	r0, [r0, #0]
 8008fa2:	f001 fc41 	bl	800a828 <USB_WritePMA>
 8008fa6:	f000 be0e 	b.w	8009bc6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	785b      	ldrb	r3, [r3, #1]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d16d      	bne.n	8009096 <USB_EPStartXfer+0x75a>
 8008fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fda:	4413      	add	r3, r2
 8008fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	011a      	lsls	r2, r3, #4
 8008fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fee:	4413      	add	r3, r2
 8008ff0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d112      	bne.n	8009024 <USB_EPStartXfer+0x6e8>
 8008ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	b29b      	uxth	r3, r3
 8009004:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009008:	b29a      	uxth	r2, r3
 800900a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b29b      	uxth	r3, r3
 8009014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800901c:	b29a      	uxth	r2, r3
 800901e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009020:	801a      	strh	r2, [r3, #0]
 8009022:	e063      	b.n	80090ec <USB_EPStartXfer+0x7b0>
 8009024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009028:	2b3e      	cmp	r3, #62	; 0x3e
 800902a:	d817      	bhi.n	800905c <USB_EPStartXfer+0x720>
 800902c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009030:	085b      	lsrs	r3, r3, #1
 8009032:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d004      	beq.n	800904c <USB_EPStartXfer+0x710>
 8009042:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009046:	3301      	adds	r3, #1
 8009048:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800904c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009050:	b29b      	uxth	r3, r3
 8009052:	029b      	lsls	r3, r3, #10
 8009054:	b29a      	uxth	r2, r3
 8009056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009058:	801a      	strh	r2, [r3, #0]
 800905a:	e047      	b.n	80090ec <USB_EPStartXfer+0x7b0>
 800905c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009060:	095b      	lsrs	r3, r3, #5
 8009062:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906a:	f003 031f 	and.w	r3, r3, #31
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <USB_EPStartXfer+0x740>
 8009072:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009076:	3b01      	subs	r3, #1
 8009078:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800907c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009080:	b29b      	uxth	r3, r3
 8009082:	029b      	lsls	r3, r3, #10
 8009084:	b29b      	uxth	r3, r3
 8009086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800908e:	b29a      	uxth	r2, r3
 8009090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009092:	801a      	strh	r2, [r3, #0]
 8009094:	e02a      	b.n	80090ec <USB_EPStartXfer+0x7b0>
 8009096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	785b      	ldrb	r3, [r3, #1]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d122      	bne.n	80090ec <USB_EPStartXfer+0x7b0>
 80090a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	653b      	str	r3, [r7, #80]	; 0x50
 80090b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	461a      	mov	r2, r3
 80090c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c6:	4413      	add	r3, r2
 80090c8:	653b      	str	r3, [r7, #80]	; 0x50
 80090ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	011a      	lsls	r2, r3, #4
 80090d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090da:	4413      	add	r3, r2
 80090dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	891b      	ldrh	r3, [r3, #8]
 80090f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6959      	ldr	r1, [r3, #20]
 8009108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800910c:	b29b      	uxth	r3, r3
 800910e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009112:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009116:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800911a:	6800      	ldr	r0, [r0, #0]
 800911c:	f001 fb84 	bl	800a828 <USB_WritePMA>
            ep->xfer_buff += len;
 8009120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	695a      	ldr	r2, [r3, #20]
 800912c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009130:	441a      	add	r2, r3
 8009132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800913e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6a1a      	ldr	r2, [r3, #32]
 800914a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	429a      	cmp	r2, r3
 8009158:	d90f      	bls.n	800917a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800915a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6a1a      	ldr	r2, [r3, #32]
 8009166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	621a      	str	r2, [r3, #32]
 8009178:	e00e      	b.n	8009198 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800917a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800917e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800918a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800918e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2200      	movs	r2, #0
 8009196:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800919c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	643b      	str	r3, [r7, #64]	; 0x40
 80091a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	785b      	ldrb	r3, [r3, #1]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d16d      	bne.n	8009290 <USB_EPStartXfer+0x954>
 80091b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	63bb      	str	r3, [r7, #56]	; 0x38
 80091c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	4413      	add	r3, r2
 80091d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80091d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	011a      	lsls	r2, r3, #4
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	4413      	add	r3, r2
 80091ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091ee:	637b      	str	r3, [r7, #52]	; 0x34
 80091f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d112      	bne.n	800921e <USB_EPStartXfer+0x8e2>
 80091f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009202:	b29a      	uxth	r2, r3
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	801a      	strh	r2, [r3, #0]
 8009208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	b29b      	uxth	r3, r3
 800920e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009216:	b29a      	uxth	r2, r3
 8009218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921a:	801a      	strh	r2, [r3, #0]
 800921c:	e05d      	b.n	80092da <USB_EPStartXfer+0x99e>
 800921e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009222:	2b3e      	cmp	r3, #62	; 0x3e
 8009224:	d817      	bhi.n	8009256 <USB_EPStartXfer+0x91a>
 8009226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922a:	085b      	lsrs	r3, r3, #1
 800922c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <USB_EPStartXfer+0x90a>
 800923c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009240:	3301      	adds	r3, #1
 8009242:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009246:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800924a:	b29b      	uxth	r3, r3
 800924c:	029b      	lsls	r3, r3, #10
 800924e:	b29a      	uxth	r2, r3
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	801a      	strh	r2, [r3, #0]
 8009254:	e041      	b.n	80092da <USB_EPStartXfer+0x99e>
 8009256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800925a:	095b      	lsrs	r3, r3, #5
 800925c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009264:	f003 031f 	and.w	r3, r3, #31
 8009268:	2b00      	cmp	r3, #0
 800926a:	d104      	bne.n	8009276 <USB_EPStartXfer+0x93a>
 800926c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009270:	3b01      	subs	r3, #1
 8009272:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009276:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800927a:	b29b      	uxth	r3, r3
 800927c:	029b      	lsls	r3, r3, #10
 800927e:	b29b      	uxth	r3, r3
 8009280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009288:	b29a      	uxth	r2, r3
 800928a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928c:	801a      	strh	r2, [r3, #0]
 800928e:	e024      	b.n	80092da <USB_EPStartXfer+0x99e>
 8009290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d11c      	bne.n	80092da <USB_EPStartXfer+0x99e>
 80092a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092b4:	4413      	add	r3, r2
 80092b6:	643b      	str	r3, [r7, #64]	; 0x40
 80092b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	011a      	lsls	r2, r3, #4
 80092c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c8:	4413      	add	r3, r2
 80092ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	895b      	ldrh	r3, [r3, #10]
 80092e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6959      	ldr	r1, [r3, #20]
 80092f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009300:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009304:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009308:	6800      	ldr	r0, [r0, #0]
 800930a:	f001 fa8d 	bl	800a828 <USB_WritePMA>
 800930e:	f000 bc5a 	b.w	8009bc6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009348:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800934c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800935a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	441a      	add	r2, r3
 8009366:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800936a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800936e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937a:	b29b      	uxth	r3, r3
 800937c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800937e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009382:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800938a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800938e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009398:	b29b      	uxth	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800939e:	4413      	add	r3, r2
 80093a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	011a      	lsls	r2, r3, #4
 80093b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b2:	4413      	add	r3, r2
 80093b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80093b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80093ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093be:	b29a      	uxth	r2, r3
 80093c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80093c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	891b      	ldrh	r3, [r3, #8]
 80093d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6959      	ldr	r1, [r3, #20]
 80093e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093ea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80093ee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80093f2:	6800      	ldr	r0, [r0, #0]
 80093f4:	f001 fa18 	bl	800a828 <USB_WritePMA>
 80093f8:	e3e5      	b.n	8009bc6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80093fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4413      	add	r3, r2
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	b29b      	uxth	r3, r3
 8009418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800941c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009420:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	441a      	add	r2, r3
 800943e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800944a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800944e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009452:	b29b      	uxth	r3, r3
 8009454:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6a1a      	ldr	r2, [r3, #32]
 8009462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009466:	1ad2      	subs	r2, r2, r3
 8009468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 81bc 	beq.w	8009814 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800949c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d16d      	bne.n	8009596 <USB_EPStartXfer+0xc5a>
 80094ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80094c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	461a      	mov	r2, r3
 80094d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094da:	4413      	add	r3, r2
 80094dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80094de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	011a      	lsls	r2, r3, #4
 80094ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ee:	4413      	add	r3, r2
 80094f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094f4:	677b      	str	r3, [r7, #116]	; 0x74
 80094f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d112      	bne.n	8009524 <USB_EPStartXfer+0xbe8>
 80094fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009508:	b29a      	uxth	r2, r3
 800950a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b29b      	uxth	r3, r3
 8009514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800951c:	b29a      	uxth	r2, r3
 800951e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009520:	801a      	strh	r2, [r3, #0]
 8009522:	e060      	b.n	80095e6 <USB_EPStartXfer+0xcaa>
 8009524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009528:	2b3e      	cmp	r3, #62	; 0x3e
 800952a:	d817      	bhi.n	800955c <USB_EPStartXfer+0xc20>
 800952c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009530:	085b      	lsrs	r3, r3, #1
 8009532:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d004      	beq.n	800954c <USB_EPStartXfer+0xc10>
 8009542:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009546:	3301      	adds	r3, #1
 8009548:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800954c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009550:	b29b      	uxth	r3, r3
 8009552:	029b      	lsls	r3, r3, #10
 8009554:	b29a      	uxth	r2, r3
 8009556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009558:	801a      	strh	r2, [r3, #0]
 800955a:	e044      	b.n	80095e6 <USB_EPStartXfer+0xcaa>
 800955c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009560:	095b      	lsrs	r3, r3, #5
 8009562:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956a:	f003 031f 	and.w	r3, r3, #31
 800956e:	2b00      	cmp	r3, #0
 8009570:	d104      	bne.n	800957c <USB_EPStartXfer+0xc40>
 8009572:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009576:	3b01      	subs	r3, #1
 8009578:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800957c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009580:	b29b      	uxth	r3, r3
 8009582:	029b      	lsls	r3, r3, #10
 8009584:	b29b      	uxth	r3, r3
 8009586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800958a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800958e:	b29a      	uxth	r2, r3
 8009590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	e027      	b.n	80095e6 <USB_EPStartXfer+0xcaa>
 8009596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800959a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d11f      	bne.n	80095e6 <USB_EPStartXfer+0xcaa>
 80095a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095bc:	4413      	add	r3, r2
 80095be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	011a      	lsls	r2, r3, #4
 80095d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095d4:	4413      	add	r3, r2
 80095d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80095e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	895b      	ldrh	r3, [r3, #10]
 80095f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6959      	ldr	r1, [r3, #20]
 8009602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009606:	b29b      	uxth	r3, r3
 8009608:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800960c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009610:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009614:	6800      	ldr	r0, [r0, #0]
 8009616:	f001 f907 	bl	800a828 <USB_WritePMA>
          ep->xfer_buff += len;
 800961a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	695a      	ldr	r2, [r3, #20]
 8009626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800962a:	441a      	add	r2, r3
 800962c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6a1a      	ldr	r2, [r3, #32]
 8009644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	429a      	cmp	r2, r3
 8009652:	d90f      	bls.n	8009674 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6a1a      	ldr	r2, [r3, #32]
 8009660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	621a      	str	r2, [r3, #32]
 8009672:	e00e      	b.n	8009692 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2200      	movs	r2, #0
 8009690:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 8295 	beq.w	8009bc6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800969c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	785b      	ldrb	r3, [r3, #1]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d16d      	bne.n	8009788 <USB_EPStartXfer+0xe4c>
 80096ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80096b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	461a      	mov	r2, r3
 80096ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096cc:	4413      	add	r3, r2
 80096ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80096d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	011a      	lsls	r2, r3, #4
 80096de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096e0:	4413      	add	r3, r2
 80096e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096e6:	667b      	str	r3, [r7, #100]	; 0x64
 80096e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d112      	bne.n	8009716 <USB_EPStartXfer+0xdda>
 80096f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096fe:	801a      	strh	r2, [r3, #0]
 8009700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	b29b      	uxth	r3, r3
 8009706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800970a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800970e:	b29a      	uxth	r2, r3
 8009710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	e063      	b.n	80097de <USB_EPStartXfer+0xea2>
 8009716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971a:	2b3e      	cmp	r3, #62	; 0x3e
 800971c:	d817      	bhi.n	800974e <USB_EPStartXfer+0xe12>
 800971e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009722:	085b      	lsrs	r3, r3, #1
 8009724:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <USB_EPStartXfer+0xe02>
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009738:	3301      	adds	r3, #1
 800973a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800973e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009742:	b29b      	uxth	r3, r3
 8009744:	029b      	lsls	r3, r3, #10
 8009746:	b29a      	uxth	r2, r3
 8009748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800974a:	801a      	strh	r2, [r3, #0]
 800974c:	e047      	b.n	80097de <USB_EPStartXfer+0xea2>
 800974e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009752:	095b      	lsrs	r3, r3, #5
 8009754:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	2b00      	cmp	r3, #0
 8009762:	d104      	bne.n	800976e <USB_EPStartXfer+0xe32>
 8009764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009768:	3b01      	subs	r3, #1
 800976a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800976e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009772:	b29b      	uxth	r3, r3
 8009774:	029b      	lsls	r3, r3, #10
 8009776:	b29b      	uxth	r3, r3
 8009778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800977c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009780:	b29a      	uxth	r2, r3
 8009782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009784:	801a      	strh	r2, [r3, #0]
 8009786:	e02a      	b.n	80097de <USB_EPStartXfer+0xea2>
 8009788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d122      	bne.n	80097de <USB_EPStartXfer+0xea2>
 8009798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	673b      	str	r3, [r7, #112]	; 0x70
 80097a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097b8:	4413      	add	r3, r2
 80097ba:	673b      	str	r3, [r7, #112]	; 0x70
 80097bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	011a      	lsls	r2, r3, #4
 80097ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097cc:	4413      	add	r3, r2
 80097ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d8:	b29a      	uxth	r2, r3
 80097da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80097de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	891b      	ldrh	r3, [r3, #8]
 80097ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6959      	ldr	r1, [r3, #20]
 80097fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009804:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009808:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f001 f80b 	bl	800a828 <USB_WritePMA>
 8009812:	e1d8      	b.n	8009bc6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	785b      	ldrb	r3, [r3, #1]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d178      	bne.n	8009916 <USB_EPStartXfer+0xfda>
 8009824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009840:	b29b      	uxth	r3, r3
 8009842:	461a      	mov	r2, r3
 8009844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009848:	4413      	add	r3, r2
 800984a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800984e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	011a      	lsls	r2, r3, #4
 800985c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009860:	4413      	add	r3, r2
 8009862:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009866:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800986a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800986e:	2b00      	cmp	r3, #0
 8009870:	d116      	bne.n	80098a0 <USB_EPStartXfer+0xf64>
 8009872:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29b      	uxth	r3, r3
 800987a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800987e:	b29a      	uxth	r2, r3
 8009880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009884:	801a      	strh	r2, [r3, #0]
 8009886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	b29b      	uxth	r3, r3
 800988e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009896:	b29a      	uxth	r2, r3
 8009898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800989c:	801a      	strh	r2, [r3, #0]
 800989e:	e06b      	b.n	8009978 <USB_EPStartXfer+0x103c>
 80098a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098a4:	2b3e      	cmp	r3, #62	; 0x3e
 80098a6:	d818      	bhi.n	80098da <USB_EPStartXfer+0xf9e>
 80098a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ac:	085b      	lsrs	r3, r3, #1
 80098ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80098b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d004      	beq.n	80098c8 <USB_EPStartXfer+0xf8c>
 80098be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098c2:	3301      	adds	r3, #1
 80098c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80098c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	029b      	lsls	r3, r3, #10
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098d6:	801a      	strh	r2, [r3, #0]
 80098d8:	e04e      	b.n	8009978 <USB_EPStartXfer+0x103c>
 80098da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80098e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e8:	f003 031f 	and.w	r3, r3, #31
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d104      	bne.n	80098fa <USB_EPStartXfer+0xfbe>
 80098f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098f4:	3b01      	subs	r3, #1
 80098f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80098fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098fe:	b29b      	uxth	r3, r3
 8009900:	029b      	lsls	r3, r3, #10
 8009902:	b29b      	uxth	r3, r3
 8009904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800990c:	b29a      	uxth	r2, r3
 800990e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009912:	801a      	strh	r2, [r3, #0]
 8009914:	e030      	b.n	8009978 <USB_EPStartXfer+0x103c>
 8009916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800991a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d128      	bne.n	8009978 <USB_EPStartXfer+0x103c>
 8009926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800992a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009942:	b29b      	uxth	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800994a:	4413      	add	r3, r2
 800994c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	011a      	lsls	r2, r3, #4
 800995e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009962:	4413      	add	r3, r2
 8009964:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800996c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009970:	b29a      	uxth	r2, r3
 8009972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009976:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800997c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	891b      	ldrh	r3, [r3, #8]
 8009984:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800998c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6959      	ldr	r1, [r3, #20]
 8009994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009998:	b29b      	uxth	r3, r3
 800999a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800999e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80099a2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80099a6:	6800      	ldr	r0, [r0, #0]
 80099a8:	f000 ff3e 	bl	800a828 <USB_WritePMA>
          ep->xfer_buff += len;
 80099ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	695a      	ldr	r2, [r3, #20]
 80099b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099bc:	441a      	add	r2, r3
 80099be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80099ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6a1a      	ldr	r2, [r3, #32]
 80099d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d90f      	bls.n	8009a06 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80099e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6a1a      	ldr	r2, [r3, #32]
 80099f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f6:	1ad2      	subs	r2, r2, r3
 80099f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	621a      	str	r2, [r3, #32]
 8009a04:	e00e      	b.n	8009a24 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2200      	movs	r2, #0
 8009a22:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80cc 	beq.w	8009bc6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d178      	bne.n	8009b3e <USB_EPStartXfer+0x1202>
 8009a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a70:	4413      	add	r3, r2
 8009a72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	011a      	lsls	r2, r3, #4
 8009a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a88:	4413      	add	r3, r2
 8009a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d116      	bne.n	8009ac8 <USB_EPStartXfer+0x118c>
 8009a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aac:	801a      	strh	r2, [r3, #0]
 8009aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ac4:	801a      	strh	r2, [r3, #0]
 8009ac6:	e064      	b.n	8009b92 <USB_EPStartXfer+0x1256>
 8009ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009acc:	2b3e      	cmp	r3, #62	; 0x3e
 8009ace:	d818      	bhi.n	8009b02 <USB_EPStartXfer+0x11c6>
 8009ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad4:	085b      	lsrs	r3, r3, #1
 8009ad6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <USB_EPStartXfer+0x11b4>
 8009ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aea:	3301      	adds	r3, #1
 8009aec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	029b      	lsls	r3, r3, #10
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009afe:	801a      	strh	r2, [r3, #0]
 8009b00:	e047      	b.n	8009b92 <USB_EPStartXfer+0x1256>
 8009b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b10:	f003 031f 	and.w	r3, r3, #31
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <USB_EPStartXfer+0x11e6>
 8009b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	029b      	lsls	r3, r3, #10
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b3a:	801a      	strh	r2, [r3, #0]
 8009b3c:	e029      	b.n	8009b92 <USB_EPStartXfer+0x1256>
 8009b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	785b      	ldrb	r3, [r3, #1]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d121      	bne.n	8009b92 <USB_EPStartXfer+0x1256>
 8009b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b64:	4413      	add	r3, r2
 8009b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	011a      	lsls	r2, r3, #4
 8009b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	895b      	ldrh	r3, [r3, #10]
 8009b9e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6959      	ldr	r1, [r3, #20]
 8009bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009bb8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009bbc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009bc0:	6800      	ldr	r0, [r0, #0]
 8009bc2:	f000 fe31 	bl	800a828 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009be8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf4:	8013      	strh	r3, [r2, #0]
 8009bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bfa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009bfe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c02:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009c06:	8812      	ldrh	r2, [r2, #0]
 8009c08:	f082 0210 	eor.w	r2, r2, #16
 8009c0c:	801a      	strh	r2, [r3, #0]
 8009c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c12:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009c16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c1a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009c1e:	8812      	ldrh	r2, [r2, #0]
 8009c20:	f082 0220 	eor.w	r2, r2, #32
 8009c24:	801a      	strh	r2, [r3, #0]
 8009c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	441a      	add	r2, r3
 8009c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c44:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	8013      	strh	r3, [r2, #0]
 8009c5e:	f000 bc9f 	b.w	800a5a0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	7b1b      	ldrb	r3, [r3, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f040 80ae 	bne.w	8009dd0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d917      	bls.n	8009cc0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb0:	1ad2      	subs	r2, r2, r3
 8009cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	619a      	str	r2, [r3, #24]
 8009cbe:	e00e      	b.n	8009cde <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d02:	4413      	add	r3, r2
 8009d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	011a      	lsls	r2, r3, #4
 8009d16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d116      	bne.n	8009d5a <USB_EPStartXfer+0x141e>
 8009d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d3e:	801a      	strh	r2, [r3, #0]
 8009d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d56:	801a      	strh	r2, [r3, #0]
 8009d58:	e3e8      	b.n	800a52c <USB_EPStartXfer+0x1bf0>
 8009d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8009d60:	d818      	bhi.n	8009d94 <USB_EPStartXfer+0x1458>
 8009d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d66:	085b      	lsrs	r3, r3, #1
 8009d68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d004      	beq.n	8009d82 <USB_EPStartXfer+0x1446>
 8009d78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	029b      	lsls	r3, r3, #10
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d90:	801a      	strh	r2, [r3, #0]
 8009d92:	e3cb      	b.n	800a52c <USB_EPStartXfer+0x1bf0>
 8009d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d98:	095b      	lsrs	r3, r3, #5
 8009d9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009da2:	f003 031f 	and.w	r3, r3, #31
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d104      	bne.n	8009db4 <USB_EPStartXfer+0x1478>
 8009daa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009dae:	3b01      	subs	r3, #1
 8009db0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	029b      	lsls	r3, r3, #10
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dcc:	801a      	strh	r2, [r3, #0]
 8009dce:	e3ad      	b.n	800a52c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	78db      	ldrb	r3, [r3, #3]
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	f040 8200 	bne.w	800a1e2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f040 8091 	bne.w	8009f16 <USB_EPStartXfer+0x15da>
 8009df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	461a      	mov	r2, r3
 8009e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e18:	4413      	add	r3, r2
 8009e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	011a      	lsls	r2, r3, #4
 8009e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e30:	4413      	add	r3, r2
 8009e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d116      	bne.n	8009e78 <USB_EPStartXfer+0x153c>
 8009e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e5c:	801a      	strh	r2, [r3, #0]
 8009e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e74:	801a      	strh	r2, [r3, #0]
 8009e76:	e083      	b.n	8009f80 <USB_EPStartXfer+0x1644>
 8009e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	2b3e      	cmp	r3, #62	; 0x3e
 8009e86:	d820      	bhi.n	8009eca <USB_EPStartXfer+0x158e>
 8009e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	085b      	lsrs	r3, r3, #1
 8009e96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d004      	beq.n	8009eb8 <USB_EPStartXfer+0x157c>
 8009eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	029b      	lsls	r3, r3, #10
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ec6:	801a      	strh	r2, [r3, #0]
 8009ec8:	e05a      	b.n	8009f80 <USB_EPStartXfer+0x1644>
 8009eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	095b      	lsrs	r3, r3, #5
 8009ed8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	f003 031f 	and.w	r3, r3, #31
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d104      	bne.n	8009efa <USB_EPStartXfer+0x15be>
 8009ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	029b      	lsls	r3, r3, #10
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f12:	801a      	strh	r2, [r3, #0]
 8009f14:	e034      	b.n	8009f80 <USB_EPStartXfer+0x1644>
 8009f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	785b      	ldrb	r3, [r3, #1]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d12c      	bne.n	8009f80 <USB_EPStartXfer+0x1644>
 8009f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	461a      	mov	r2, r3
 8009f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	011a      	lsls	r2, r3, #4
 8009f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f62:	4413      	add	r3, r2
 8009f64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009f7e:	801a      	strh	r2, [r3, #0]
 8009f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	785b      	ldrb	r3, [r3, #1]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f040 8091 	bne.w	800a0c2 <USB_EPStartXfer+0x1786>
 8009fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	011a      	lsls	r2, r3, #4
 8009fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fdc:	4413      	add	r3, r2
 8009fde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d116      	bne.n	800a024 <USB_EPStartXfer+0x16e8>
 8009ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a002:	b29a      	uxth	r2, r3
 800a004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a008:	801a      	strh	r2, [r3, #0]
 800a00a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a020:	801a      	strh	r2, [r3, #0]
 800a022:	e07c      	b.n	800a11e <USB_EPStartXfer+0x17e2>
 800a024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	2b3e      	cmp	r3, #62	; 0x3e
 800a032:	d820      	bhi.n	800a076 <USB_EPStartXfer+0x173a>
 800a034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	085b      	lsrs	r3, r3, #1
 800a042:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a04a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d004      	beq.n	800a064 <USB_EPStartXfer+0x1728>
 800a05a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a05e:	3301      	adds	r3, #1
 800a060:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a064:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a068:	b29b      	uxth	r3, r3
 800a06a:	029b      	lsls	r3, r3, #10
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a072:	801a      	strh	r2, [r3, #0]
 800a074:	e053      	b.n	800a11e <USB_EPStartXfer+0x17e2>
 800a076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a07a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	095b      	lsrs	r3, r3, #5
 800a084:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a08c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	f003 031f 	and.w	r3, r3, #31
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d104      	bne.n	800a0a6 <USB_EPStartXfer+0x176a>
 800a09c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a0a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	029b      	lsls	r3, r3, #10
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0be:	801a      	strh	r2, [r3, #0]
 800a0c0:	e02d      	b.n	800a11e <USB_EPStartXfer+0x17e2>
 800a0c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d125      	bne.n	800a11e <USB_EPStartXfer+0x17e2>
 800a0d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	011a      	lsls	r2, r3, #4
 800a0fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a100:	4413      	add	r3, r2
 800a102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a10a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a10e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	b29a      	uxth	r2, r3
 800a118:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a11c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a11e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f000 81fe 	beq.w	800a52c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a134:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a13e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a150:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <USB_EPStartXfer+0x182c>
 800a15c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10d      	bne.n	800a184 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a168:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a16c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 81db 	bne.w	800a52c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a176:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 81d4 	bne.w	800a52c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1aa:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a1ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	441a      	add	r2, r3
 800a1c8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a1cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	8013      	strh	r3, [r2, #0]
 800a1e0:	e1a4      	b.n	800a52c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a1e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	78db      	ldrb	r3, [r3, #3]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	f040 819a 	bne.w	800a528 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a1f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699a      	ldr	r2, [r3, #24]
 800a200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d917      	bls.n	800a240 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	699a      	ldr	r2, [r3, #24]
 800a22c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a230:	1ad2      	subs	r2, r2, r3
 800a232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	619a      	str	r2, [r3, #24]
 800a23e:	e00e      	b.n	800a25e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2200      	movs	r2, #0
 800a25c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a25e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d178      	bne.n	800a360 <USB_EPStartXfer+0x1a24>
 800a26e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a272:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a27c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	461a      	mov	r2, r3
 800a28e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a292:	4413      	add	r3, r2
 800a294:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a29c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	011a      	lsls	r2, r3, #4
 800a2a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a2b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d116      	bne.n	800a2ea <USB_EPStartXfer+0x19ae>
 800a2bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2e6:	801a      	strh	r2, [r3, #0]
 800a2e8:	e06b      	b.n	800a3c2 <USB_EPStartXfer+0x1a86>
 800a2ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a2f0:	d818      	bhi.n	800a324 <USB_EPStartXfer+0x19e8>
 800a2f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2f6:	085b      	lsrs	r3, r3, #1
 800a2f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d004      	beq.n	800a312 <USB_EPStartXfer+0x19d6>
 800a308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a30c:	3301      	adds	r3, #1
 800a30e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a316:	b29b      	uxth	r3, r3
 800a318:	029b      	lsls	r3, r3, #10
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a320:	801a      	strh	r2, [r3, #0]
 800a322:	e04e      	b.n	800a3c2 <USB_EPStartXfer+0x1a86>
 800a324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a328:	095b      	lsrs	r3, r3, #5
 800a32a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a32e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a332:	f003 031f 	and.w	r3, r3, #31
 800a336:	2b00      	cmp	r3, #0
 800a338:	d104      	bne.n	800a344 <USB_EPStartXfer+0x1a08>
 800a33a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a33e:	3b01      	subs	r3, #1
 800a340:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a348:	b29b      	uxth	r3, r3
 800a34a:	029b      	lsls	r3, r3, #10
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a356:	b29a      	uxth	r2, r3
 800a358:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a35c:	801a      	strh	r2, [r3, #0]
 800a35e:	e030      	b.n	800a3c2 <USB_EPStartXfer+0x1a86>
 800a360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	785b      	ldrb	r3, [r3, #1]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d128      	bne.n	800a3c2 <USB_EPStartXfer+0x1a86>
 800a370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a374:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a37e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a382:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	461a      	mov	r2, r3
 800a390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a394:	4413      	add	r3, r2
 800a396:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a39a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	011a      	lsls	r2, r3, #4
 800a3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a3b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a3c0:	801a      	strh	r2, [r3, #0]
 800a3c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	785b      	ldrb	r3, [r3, #1]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d178      	bne.n	800a4d2 <USB_EPStartXfer+0x1b96>
 800a3e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a3ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	461a      	mov	r2, r3
 800a400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a404:	4413      	add	r3, r2
 800a406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a40a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a40e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	011a      	lsls	r2, r3, #4
 800a418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a41c:	4413      	add	r3, r2
 800a41e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d116      	bne.n	800a45c <USB_EPStartXfer+0x1b20>
 800a42e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	b29b      	uxth	r3, r3
 800a436:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a440:	801a      	strh	r2, [r3, #0]
 800a442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a44e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a452:	b29a      	uxth	r2, r3
 800a454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a458:	801a      	strh	r2, [r3, #0]
 800a45a:	e067      	b.n	800a52c <USB_EPStartXfer+0x1bf0>
 800a45c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a460:	2b3e      	cmp	r3, #62	; 0x3e
 800a462:	d818      	bhi.n	800a496 <USB_EPStartXfer+0x1b5a>
 800a464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a468:	085b      	lsrs	r3, r3, #1
 800a46a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a46e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d004      	beq.n	800a484 <USB_EPStartXfer+0x1b48>
 800a47a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a47e:	3301      	adds	r3, #1
 800a480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a484:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a488:	b29b      	uxth	r3, r3
 800a48a:	029b      	lsls	r3, r3, #10
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a492:	801a      	strh	r2, [r3, #0]
 800a494:	e04a      	b.n	800a52c <USB_EPStartXfer+0x1bf0>
 800a496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a49a:	095b      	lsrs	r3, r3, #5
 800a49c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4a4:	f003 031f 	and.w	r3, r3, #31
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d104      	bne.n	800a4b6 <USB_EPStartXfer+0x1b7a>
 800a4ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	029b      	lsls	r3, r3, #10
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4ce:	801a      	strh	r2, [r3, #0]
 800a4d0:	e02c      	b.n	800a52c <USB_EPStartXfer+0x1bf0>
 800a4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d124      	bne.n	800a52c <USB_EPStartXfer+0x1bf0>
 800a4e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a4fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	011a      	lsls	r2, r3, #4
 800a50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a510:	4413      	add	r3, r2
 800a512:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a516:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a51a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a51e:	b29a      	uxth	r2, r3
 800a520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a524:	801a      	strh	r2, [r3, #0]
 800a526:	e001      	b.n	800a52c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e03a      	b.n	800a5a2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a52c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a54e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a552:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a556:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a55a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a55e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a562:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a566:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a56a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a56e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a57c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	441a      	add	r2, r3
 800a588:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a58c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	785b      	ldrb	r3, [r3, #1]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d020      	beq.n	800a600 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5d4:	81bb      	strh	r3, [r7, #12]
 800a5d6:	89bb      	ldrh	r3, [r7, #12]
 800a5d8:	f083 0310 	eor.w	r3, r3, #16
 800a5dc:	81bb      	strh	r3, [r7, #12]
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	441a      	add	r2, r3
 800a5e8:	89bb      	ldrh	r3, [r7, #12]
 800a5ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	8013      	strh	r3, [r2, #0]
 800a5fe:	e01f      	b.n	800a640 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a616:	81fb      	strh	r3, [r7, #14]
 800a618:	89fb      	ldrh	r3, [r7, #14]
 800a61a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a61e:	81fb      	strh	r3, [r7, #14]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	441a      	add	r2, r3
 800a62a:	89fb      	ldrh	r3, [r7, #14]
 800a62c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	bc80      	pop	{r7}
 800a64a:	4770      	bx	lr

0800a64c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	7b1b      	ldrb	r3, [r3, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f040 809d 	bne.w	800a79a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d04c      	beq.n	800a702 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	823b      	strh	r3, [r7, #16]
 800a676:	8a3b      	ldrh	r3, [r7, #16]
 800a678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01b      	beq.n	800a6b8 <USB_EPClearStall+0x6c>
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a696:	81fb      	strh	r3, [r7, #14]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	441a      	add	r2, r3
 800a6a2:	89fb      	ldrh	r3, [r7, #14]
 800a6a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	78db      	ldrb	r3, [r3, #3]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d06c      	beq.n	800a79a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6d6:	81bb      	strh	r3, [r7, #12]
 800a6d8:	89bb      	ldrh	r3, [r7, #12]
 800a6da:	f083 0320 	eor.w	r3, r3, #32
 800a6de:	81bb      	strh	r3, [r7, #12]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	441a      	add	r2, r3
 800a6ea:	89bb      	ldrh	r3, [r7, #12]
 800a6ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	8013      	strh	r3, [r2, #0]
 800a700:	e04b      	b.n	800a79a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	82fb      	strh	r3, [r7, #22]
 800a710:	8afb      	ldrh	r3, [r7, #22]
 800a712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d01b      	beq.n	800a752 <USB_EPClearStall+0x106>
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	b29b      	uxth	r3, r3
 800a728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a72c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a730:	82bb      	strh	r3, [r7, #20]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	441a      	add	r2, r3
 800a73c:	8abb      	ldrh	r3, [r7, #20]
 800a73e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74e:	b29b      	uxth	r3, r3
 800a750:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a768:	827b      	strh	r3, [r7, #18]
 800a76a:	8a7b      	ldrh	r3, [r7, #18]
 800a76c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a770:	827b      	strh	r3, [r7, #18]
 800a772:	8a7b      	ldrh	r3, [r7, #18]
 800a774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a778:	827b      	strh	r3, [r7, #18]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	441a      	add	r2, r3
 800a784:	8a7b      	ldrh	r3, [r7, #18]
 800a786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a78a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a78e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a796:	b29b      	uxth	r3, r3
 800a798:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	371c      	adds	r7, #28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bc80      	pop	{r7}
 800a7a4:	4770      	bx	lr

0800a7a6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b083      	sub	sp, #12
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a7b2:	78fb      	ldrb	r3, [r7, #3]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d103      	bne.n	800a7c0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2280      	movs	r2, #128	; 0x80
 800a7bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bc80      	pop	{r7}
 800a7ca:	4770      	bx	lr

0800a7cc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc80      	pop	{r7}
 800a7de:	4770      	bx	lr

0800a7e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bc80      	pop	{r7}
 800a7f2:	4770      	bx	lr

0800a7f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a802:	b29b      	uxth	r3, r3
 800a804:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a806:	68fb      	ldr	r3, [r7, #12]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bc80      	pop	{r7}
 800a810:	4770      	bx	lr

0800a812 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	bc80      	pop	{r7}
 800a826:	4770      	bx	lr

0800a828 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a828:	b480      	push	{r7}
 800a82a:	b08d      	sub	sp, #52	; 0x34
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	4611      	mov	r1, r2
 800a834:	461a      	mov	r2, r3
 800a836:	460b      	mov	r3, r1
 800a838:	80fb      	strh	r3, [r7, #6]
 800a83a:	4613      	mov	r3, r2
 800a83c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a83e:	88bb      	ldrh	r3, [r7, #4]
 800a840:	3301      	adds	r3, #1
 800a842:	085b      	lsrs	r3, r3, #1
 800a844:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a84e:	88fb      	ldrh	r3, [r7, #6]
 800a850:	005a      	lsls	r2, r3, #1
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	4413      	add	r3, r2
 800a856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a85a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a860:	e01e      	b.n	800a8a0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86a:	3301      	adds	r3, #1
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	b29b      	uxth	r3, r3
 800a874:	021b      	lsls	r3, r3, #8
 800a876:	b29b      	uxth	r3, r3
 800a878:	461a      	mov	r2, r3
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	b29a      	uxth	r2, r3
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	3302      	adds	r3, #2
 800a88c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	3302      	adds	r3, #2
 800a892:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	3301      	adds	r3, #1
 800a898:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	3b01      	subs	r3, #1
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1dd      	bne.n	800a862 <USB_WritePMA+0x3a>
  }
}
 800a8a6:	bf00      	nop
 800a8a8:	bf00      	nop
 800a8aa:	3734      	adds	r7, #52	; 0x34
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bc80      	pop	{r7}
 800a8b0:	4770      	bx	lr

0800a8b2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b08b      	sub	sp, #44	; 0x2c
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	4611      	mov	r1, r2
 800a8be:	461a      	mov	r2, r3
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	80fb      	strh	r3, [r7, #6]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a8c8:	88bb      	ldrh	r3, [r7, #4]
 800a8ca:	085b      	lsrs	r3, r3, #1
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8d8:	88fb      	ldrh	r3, [r7, #6]
 800a8da:	005a      	lsls	r2, r3, #1
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8e4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8ea:	e01b      	b.n	800a924 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	3302      	adds	r3, #2
 800a8f8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	3301      	adds	r3, #1
 800a906:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3301      	adds	r3, #1
 800a916:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	3302      	adds	r3, #2
 800a91c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	3b01      	subs	r3, #1
 800a922:	627b      	str	r3, [r7, #36]	; 0x24
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e0      	bne.n	800a8ec <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a92a:	88bb      	ldrh	r3, [r7, #4]
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	b29b      	uxth	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d007      	beq.n	800a946 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	b2da      	uxtb	r2, r3
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	701a      	strb	r2, [r3, #0]
  }
}
 800a946:	bf00      	nop
 800a948:	372c      	adds	r7, #44	; 0x2c
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bc80      	pop	{r7}
 800a94e:	4770      	bx	lr

0800a950 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	7c1b      	ldrb	r3, [r3, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d115      	bne.n	800a994 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a96c:	2202      	movs	r2, #2
 800a96e:	2181      	movs	r1, #129	; 0x81
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 fe8c 	bl	800c68e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a97c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a980:	2202      	movs	r2, #2
 800a982:	2101      	movs	r1, #1
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 fe82 	bl	800c68e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a992:	e012      	b.n	800a9ba <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a994:	2340      	movs	r3, #64	; 0x40
 800a996:	2202      	movs	r2, #2
 800a998:	2181      	movs	r1, #129	; 0x81
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f001 fe77 	bl	800c68e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a9a6:	2340      	movs	r3, #64	; 0x40
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 fe6e 	bl	800c68e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9ba:	2308      	movs	r3, #8
 800a9bc:	2203      	movs	r2, #3
 800a9be:	2182      	movs	r1, #130	; 0x82
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 fe64 	bl	800c68e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a9cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a9d0:	f001 ff84 	bl	800c8dc <USBD_static_malloc>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d102      	bne.n	800a9ec <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	73fb      	strb	r3, [r7, #15]
 800a9ea:	e026      	b.n	800aa3a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	7c1b      	ldrb	r3, [r3, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d109      	bne.n	800aa2a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa20:	2101      	movs	r1, #1
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f001 ff24 	bl	800c870 <USBD_LL_PrepareReceive>
 800aa28:	e007      	b.n	800aa3a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa30:	2340      	movs	r3, #64	; 0x40
 800aa32:	2101      	movs	r1, #1
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 ff1b 	bl	800c870 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aa54:	2181      	movs	r1, #129	; 0x81
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f001 fe3f 	bl	800c6da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aa62:	2101      	movs	r1, #1
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 fe38 	bl	800c6da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aa72:	2182      	movs	r1, #130	; 0x82
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f001 fe30 	bl	800c6da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00e      	beq.n	800aaa8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f001 ff2a 	bl	800c8f4 <USBD_static_free>
    pdev->pClassData = NULL;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b086      	sub	sp, #24
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aac8:	2300      	movs	r3, #0
 800aaca:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d039      	beq.n	800ab50 <USBD_CDC_Setup+0x9e>
 800aadc:	2b20      	cmp	r3, #32
 800aade:	d17f      	bne.n	800abe0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	88db      	ldrh	r3, [r3, #6]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d029      	beq.n	800ab3c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	b25b      	sxtb	r3, r3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	da11      	bge.n	800ab16 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aafe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	88d2      	ldrh	r2, [r2, #6]
 800ab04:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ab06:	6939      	ldr	r1, [r7, #16]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	88db      	ldrh	r3, [r3, #6]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f001 fa09 	bl	800bf26 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ab14:	e06b      	b.n	800abee <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	785a      	ldrb	r2, [r3, #1]
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	88db      	ldrh	r3, [r3, #6]
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ab2c:	6939      	ldr	r1, [r7, #16]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	88db      	ldrh	r3, [r3, #6]
 800ab32:	461a      	mov	r2, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f001 fa24 	bl	800bf82 <USBD_CtlPrepareRx>
      break;
 800ab3a:	e058      	b.n	800abee <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	7850      	ldrb	r0, [r2, #1]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	4798      	blx	r3
      break;
 800ab4e:	e04e      	b.n	800abee <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	785b      	ldrb	r3, [r3, #1]
 800ab54:	2b0b      	cmp	r3, #11
 800ab56:	d02e      	beq.n	800abb6 <USBD_CDC_Setup+0x104>
 800ab58:	2b0b      	cmp	r3, #11
 800ab5a:	dc38      	bgt.n	800abce <USBD_CDC_Setup+0x11c>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <USBD_CDC_Setup+0xb4>
 800ab60:	2b0a      	cmp	r3, #10
 800ab62:	d014      	beq.n	800ab8e <USBD_CDC_Setup+0xdc>
 800ab64:	e033      	b.n	800abce <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d107      	bne.n	800ab80 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	2202      	movs	r2, #2
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f001 f9d4 	bl	800bf26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab7e:	e02e      	b.n	800abde <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 f965 	bl	800be52 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	75fb      	strb	r3, [r7, #23]
          break;
 800ab8c:	e027      	b.n	800abde <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab94:	2b03      	cmp	r3, #3
 800ab96:	d107      	bne.n	800aba8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab98:	f107 030f 	add.w	r3, r7, #15
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f001 f9c0 	bl	800bf26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aba6:	e01a      	b.n	800abde <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 f951 	bl	800be52 <USBD_CtlError>
            ret = USBD_FAIL;
 800abb0:	2302      	movs	r3, #2
 800abb2:	75fb      	strb	r3, [r7, #23]
          break;
 800abb4:	e013      	b.n	800abde <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbc:	2b03      	cmp	r3, #3
 800abbe:	d00d      	beq.n	800abdc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f001 f945 	bl	800be52 <USBD_CtlError>
            ret = USBD_FAIL;
 800abc8:	2302      	movs	r3, #2
 800abca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800abcc:	e006      	b.n	800abdc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 f93e 	bl	800be52 <USBD_CtlError>
          ret = USBD_FAIL;
 800abd6:	2302      	movs	r3, #2
 800abd8:	75fb      	strb	r3, [r7, #23]
          break;
 800abda:	e000      	b.n	800abde <USBD_CDC_Setup+0x12c>
          break;
 800abdc:	bf00      	nop
      }
      break;
 800abde:	e006      	b.n	800abee <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f001 f935 	bl	800be52 <USBD_CtlError>
      ret = USBD_FAIL;
 800abe8:	2302      	movs	r3, #2
 800abea:	75fb      	strb	r3, [r7, #23]
      break;
 800abec:	bf00      	nop
  }

  return ret;
 800abee:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3718      	adds	r7, #24
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac12:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d03a      	beq.n	800ac94 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ac1e:	78fa      	ldrb	r2, [r7, #3]
 800ac20:	6879      	ldr	r1, [r7, #4]
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	440b      	add	r3, r1
 800ac2c:	331c      	adds	r3, #28
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d029      	beq.n	800ac88 <USBD_CDC_DataIn+0x90>
 800ac34:	78fa      	ldrb	r2, [r7, #3]
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	331c      	adds	r3, #28
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	78f9      	ldrb	r1, [r7, #3]
 800ac48:	68b8      	ldr	r0, [r7, #8]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	440b      	add	r3, r1
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	4403      	add	r3, r0
 800ac54:	3338      	adds	r3, #56	; 0x38
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac5c:	fb01 f303 	mul.w	r3, r1, r3
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d110      	bne.n	800ac88 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ac66:	78fa      	ldrb	r2, [r7, #3]
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	440b      	add	r3, r1
 800ac74:	331c      	adds	r3, #28
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac7a:	78f9      	ldrb	r1, [r7, #3]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	2200      	movs	r2, #0
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f001 fdd2 	bl	800c82a <USBD_LL_Transmit>
 800ac86:	e003      	b.n	800ac90 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	e000      	b.n	800ac96 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ac94:	2302      	movs	r3, #2
  }
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800acb2:	78fb      	ldrb	r3, [r7, #3]
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f001 fdfd 	bl	800c8b6 <USBD_LL_GetRxDataSize>
 800acbc:	4602      	mov	r2, r0
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00d      	beq.n	800acea <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ace2:	4611      	mov	r1, r2
 800ace4:	4798      	blx	r3

    return USBD_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	e000      	b.n	800acec <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800acea:	2302      	movs	r3, #2
  }
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad02:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d015      	beq.n	800ad3a <USBD_CDC_EP0_RxReady+0x46>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad14:	2bff      	cmp	r3, #255	; 0xff
 800ad16:	d010      	beq.n	800ad3a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ad26:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ad2e:	b292      	uxth	r2, r2
 800ad30:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	22ff      	movs	r2, #255	; 0xff
 800ad36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2243      	movs	r2, #67	; 0x43
 800ad50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ad52:	4b03      	ldr	r3, [pc, #12]	; (800ad60 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bc80      	pop	{r7}
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	200000bc 	.word	0x200000bc

0800ad64 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2243      	movs	r2, #67	; 0x43
 800ad70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ad72:	4b03      	ldr	r3, [pc, #12]	; (800ad80 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	370c      	adds	r7, #12
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bc80      	pop	{r7}
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	20000078 	.word	0x20000078

0800ad84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2243      	movs	r2, #67	; 0x43
 800ad90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ad92:	4b03      	ldr	r3, [pc, #12]	; (800ada0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bc80      	pop	{r7}
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	20000100 	.word	0x20000100

0800ada4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	220a      	movs	r2, #10
 800adb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800adb2:	4b03      	ldr	r3, [pc, #12]	; (800adc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	bc80      	pop	{r7}
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	20000034 	.word	0x20000034

0800adc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800adce:	2302      	movs	r3, #2
 800add0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	bc80      	pop	{r7}
 800adee:	4770      	bx	lr

0800adf0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4613      	mov	r3, r2
 800adfc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae04:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ae0e:	88fa      	ldrh	r2, [r7, #6]
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	371c      	adds	r7, #28
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bc80      	pop	{r7}
 800ae20:	4770      	bx	lr

0800ae22 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae32:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bc80      	pop	{r7}
 800ae46:	4770      	bx	lr

0800ae48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d01c      	beq.n	800ae9c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d115      	bne.n	800ae98 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	2181      	movs	r1, #129	; 0x81
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f001 fccb 	bl	800c82a <USBD_LL_Transmit>

      return USBD_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	e002      	b.n	800ae9e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e000      	b.n	800ae9e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ae9c:	2302      	movs	r3, #2
  }
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d017      	beq.n	800aef0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7c1b      	ldrb	r3, [r3, #16]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d109      	bne.n	800aedc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aece:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aed2:	2101      	movs	r1, #1
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 fccb 	bl	800c870 <USBD_LL_PrepareReceive>
 800aeda:	e007      	b.n	800aeec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aee2:	2340      	movs	r3, #64	; 0x40
 800aee4:	2101      	movs	r1, #1
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 fcc2 	bl	800c870 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	e000      	b.n	800aef2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800aef0:	2302      	movs	r3, #2
  }
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b084      	sub	sp, #16
 800aefe:	af00      	add	r7, sp, #0
 800af00:	60f8      	str	r0, [r7, #12]
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	4613      	mov	r3, r2
 800af06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800af0e:	2302      	movs	r3, #2
 800af10:	e01a      	b.n	800af48 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	79fa      	ldrb	r2, [r7, #7]
 800af3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f001 fb2f 	bl	800c5a4 <USBD_LL_Init>

  return USBD_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d006      	beq.n	800af72 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
 800af70:	e001      	b.n	800af76 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800af72:	2302      	movs	r3, #2
 800af74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af76:	7bfb      	ldrb	r3, [r7, #15]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr

0800af82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f001 fb64 	bl	800c658 <USBD_LL_Start>

  return USBD_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bc80      	pop	{r7}
 800afac:	4770      	bx	lr

0800afae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	460b      	mov	r3, r1
 800afb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800afba:	2302      	movs	r3, #2
 800afbc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00c      	beq.n	800afe2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	78fa      	ldrb	r2, [r7, #3]
 800afd2:	4611      	mov	r1, r2
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	4798      	blx	r3
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	78fa      	ldrb	r2, [r7, #3]
 800b002:	4611      	mov	r1, r2
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	4798      	blx	r3

  return USBD_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 fed8 	bl	800bdda <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b038:	461a      	mov	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b046:	f003 031f 	and.w	r3, r3, #31
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d016      	beq.n	800b07c <USBD_LL_SetupStage+0x6a>
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d81c      	bhi.n	800b08c <USBD_LL_SetupStage+0x7a>
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <USBD_LL_SetupStage+0x4a>
 800b056:	2b01      	cmp	r3, #1
 800b058:	d008      	beq.n	800b06c <USBD_LL_SetupStage+0x5a>
 800b05a:	e017      	b.n	800b08c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b062:	4619      	mov	r1, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f9cb 	bl	800b400 <USBD_StdDevReq>
      break;
 800b06a:	e01a      	b.n	800b0a2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fa2d 	bl	800b4d4 <USBD_StdItfReq>
      break;
 800b07a:	e012      	b.n	800b0a2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b082:	4619      	mov	r1, r3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fa6d 	bl	800b564 <USBD_StdEPReq>
      break;
 800b08a:	e00a      	b.n	800b0a2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b092:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b096:	b2db      	uxtb	r3, r3
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f001 fb3c 	bl	800c718 <USBD_LL_StallEP>
      break;
 800b0a0:	bf00      	nop
  }

  return USBD_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3708      	adds	r7, #8
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b0ba:	7afb      	ldrb	r3, [r7, #11]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d14b      	bne.n	800b158 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b0c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	d134      	bne.n	800b13c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	68da      	ldr	r2, [r3, #12]
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d919      	bls.n	800b112 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	68da      	ldr	r2, [r3, #12]
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	1ad2      	subs	r2, r2, r3
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	68da      	ldr	r2, [r3, #12]
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d203      	bcs.n	800b100 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	e002      	b.n	800b106 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b104:	b29b      	uxth	r3, r3
 800b106:	461a      	mov	r2, r3
 800b108:	6879      	ldr	r1, [r7, #4]
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f000 ff57 	bl	800bfbe <USBD_CtlContinueRx>
 800b110:	e038      	b.n	800b184 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00a      	beq.n	800b134 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b124:	2b03      	cmp	r3, #3
 800b126:	d105      	bne.n	800b134 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 ff54 	bl	800bfe2 <USBD_CtlSendStatus>
 800b13a:	e023      	b.n	800b184 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b142:	2b05      	cmp	r3, #5
 800b144:	d11e      	bne.n	800b184 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b14e:	2100      	movs	r1, #0
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f001 fae1 	bl	800c718 <USBD_LL_StallEP>
 800b156:	e015      	b.n	800b184 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00d      	beq.n	800b180 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d108      	bne.n	800b180 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b174:	699b      	ldr	r3, [r3, #24]
 800b176:	7afa      	ldrb	r2, [r7, #11]
 800b178:	4611      	mov	r1, r2
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	4798      	blx	r3
 800b17e:	e001      	b.n	800b184 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b180:	2302      	movs	r3, #2
 800b182:	e000      	b.n	800b186 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b086      	sub	sp, #24
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	460b      	mov	r3, r1
 800b198:	607a      	str	r2, [r7, #4]
 800b19a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b19c:	7afb      	ldrb	r3, [r7, #11]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d17f      	bne.n	800b2a2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3314      	adds	r3, #20
 800b1a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d15c      	bne.n	800b26c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d915      	bls.n	800b1ea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	68da      	ldr	r2, [r3, #12]
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	1ad2      	subs	r2, r2, r3
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	6879      	ldr	r1, [r7, #4]
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f000 fec1 	bl	800bf5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1dc:	2300      	movs	r3, #0
 800b1de:	2200      	movs	r2, #0
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f001 fb44 	bl	800c870 <USBD_LL_PrepareReceive>
 800b1e8:	e04e      	b.n	800b288 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	6912      	ldr	r2, [r2, #16]
 800b1f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1f6:	fb01 f202 	mul.w	r2, r1, r2
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d11c      	bne.n	800b23a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	689a      	ldr	r2, [r3, #8]
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b208:	429a      	cmp	r2, r3
 800b20a:	d316      	bcc.n	800b23a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b216:	429a      	cmp	r2, r3
 800b218:	d20f      	bcs.n	800b23a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b21a:	2200      	movs	r2, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 fe9d 	bl	800bf5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b22c:	2300      	movs	r3, #0
 800b22e:	2200      	movs	r2, #0
 800b230:	2100      	movs	r1, #0
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f001 fb1c 	bl	800c870 <USBD_LL_PrepareReceive>
 800b238:	e026      	b.n	800b288 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d105      	bne.n	800b25c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b25c:	2180      	movs	r1, #128	; 0x80
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f001 fa5a 	bl	800c718 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 fecf 	bl	800c008 <USBD_CtlReceiveStatus>
 800b26a:	e00d      	b.n	800b288 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b272:	2b04      	cmp	r3, #4
 800b274:	d004      	beq.n	800b280 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d103      	bne.n	800b288 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b280:	2180      	movs	r1, #128	; 0x80
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f001 fa48 	bl	800c718 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d11d      	bne.n	800b2ce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7ff fe81 	bl	800af9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b2a0:	e015      	b.n	800b2ce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00d      	beq.n	800b2ca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b2b4:	2b03      	cmp	r3, #3
 800b2b6:	d108      	bne.n	800b2ca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	7afa      	ldrb	r2, [r7, #11]
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	4798      	blx	r3
 800b2c8:	e001      	b.n	800b2ce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e000      	b.n	800b2d0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 f9d1 	bl	800c68e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2240      	movs	r2, #64	; 0x40
 800b2f8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2fc:	2340      	movs	r3, #64	; 0x40
 800b2fe:	2200      	movs	r2, #0
 800b300:	2180      	movs	r1, #128	; 0x80
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f001 f9c3 	bl	800c68e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2240      	movs	r2, #64	; 0x40
 800b312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d009      	beq.n	800b350 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	6852      	ldr	r2, [r2, #4]
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	4611      	mov	r1, r2
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	4798      	blx	r3
  }

  return USBD_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	460b      	mov	r3, r1
 800b364:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	78fa      	ldrb	r2, [r7, #3]
 800b36a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	bc80      	pop	{r7}
 800b376:	4770      	bx	lr

0800b378 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2204      	movs	r2, #4
 800b390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bc80      	pop	{r7}
 800b39e:	4770      	bx	lr

0800b3a0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ae:	2b04      	cmp	r3, #4
 800b3b0:	d105      	bne.n	800b3be <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bc80      	pop	{r7}
 800b3c8:	4770      	bx	lr

0800b3ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d10b      	bne.n	800b3f4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e2:	69db      	ldr	r3, [r3, #28]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d005      	beq.n	800b3f4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
	...

0800b400 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b416:	2b40      	cmp	r3, #64	; 0x40
 800b418:	d005      	beq.n	800b426 <USBD_StdDevReq+0x26>
 800b41a:	2b40      	cmp	r3, #64	; 0x40
 800b41c:	d84f      	bhi.n	800b4be <USBD_StdDevReq+0xbe>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d009      	beq.n	800b436 <USBD_StdDevReq+0x36>
 800b422:	2b20      	cmp	r3, #32
 800b424:	d14b      	bne.n	800b4be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	6839      	ldr	r1, [r7, #0]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	4798      	blx	r3
      break;
 800b434:	e048      	b.n	800b4c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b09      	cmp	r3, #9
 800b43c:	d839      	bhi.n	800b4b2 <USBD_StdDevReq+0xb2>
 800b43e:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <USBD_StdDevReq+0x44>)
 800b440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b444:	0800b495 	.word	0x0800b495
 800b448:	0800b4a9 	.word	0x0800b4a9
 800b44c:	0800b4b3 	.word	0x0800b4b3
 800b450:	0800b49f 	.word	0x0800b49f
 800b454:	0800b4b3 	.word	0x0800b4b3
 800b458:	0800b477 	.word	0x0800b477
 800b45c:	0800b46d 	.word	0x0800b46d
 800b460:	0800b4b3 	.word	0x0800b4b3
 800b464:	0800b48b 	.word	0x0800b48b
 800b468:	0800b481 	.word	0x0800b481
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f9dc 	bl	800b82c <USBD_GetDescriptor>
          break;
 800b474:	e022      	b.n	800b4bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 fb3f 	bl	800bafc <USBD_SetAddress>
          break;
 800b47e:	e01d      	b.n	800b4bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b480:	6839      	ldr	r1, [r7, #0]
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fb7e 	bl	800bb84 <USBD_SetConfig>
          break;
 800b488:	e018      	b.n	800b4bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b48a:	6839      	ldr	r1, [r7, #0]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fc07 	bl	800bca0 <USBD_GetConfig>
          break;
 800b492:	e013      	b.n	800b4bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fc37 	bl	800bd0a <USBD_GetStatus>
          break;
 800b49c:	e00e      	b.n	800b4bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fc65 	bl	800bd70 <USBD_SetFeature>
          break;
 800b4a6:	e009      	b.n	800b4bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fc74 	bl	800bd98 <USBD_ClrFeature>
          break;
 800b4b0:	e004      	b.n	800b4bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fccc 	bl	800be52 <USBD_CtlError>
          break;
 800b4ba:	bf00      	nop
      }
      break;
 800b4bc:	e004      	b.n	800b4c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fcc6 	bl	800be52 <USBD_CtlError>
      break;
 800b4c6:	bf00      	nop
  }

  return ret;
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop

0800b4d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4ea:	2b40      	cmp	r3, #64	; 0x40
 800b4ec:	d005      	beq.n	800b4fa <USBD_StdItfReq+0x26>
 800b4ee:	2b40      	cmp	r3, #64	; 0x40
 800b4f0:	d82e      	bhi.n	800b550 <USBD_StdItfReq+0x7c>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <USBD_StdItfReq+0x26>
 800b4f6:	2b20      	cmp	r3, #32
 800b4f8:	d12a      	bne.n	800b550 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b500:	3b01      	subs	r3, #1
 800b502:	2b02      	cmp	r3, #2
 800b504:	d81d      	bhi.n	800b542 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	889b      	ldrh	r3, [r3, #4]
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d813      	bhi.n	800b538 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	4798      	blx	r3
 800b51e:	4603      	mov	r3, r0
 800b520:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	88db      	ldrh	r3, [r3, #6]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d110      	bne.n	800b54c <USBD_StdItfReq+0x78>
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10d      	bne.n	800b54c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fd56 	bl	800bfe2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b536:	e009      	b.n	800b54c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fc89 	bl	800be52 <USBD_CtlError>
          break;
 800b540:	e004      	b.n	800b54c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fc84 	bl	800be52 <USBD_CtlError>
          break;
 800b54a:	e000      	b.n	800b54e <USBD_StdItfReq+0x7a>
          break;
 800b54c:	bf00      	nop
      }
      break;
 800b54e:	e004      	b.n	800b55a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 fc7d 	bl	800be52 <USBD_CtlError>
      break;
 800b558:	bf00      	nop
  }

  return USBD_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	889b      	ldrh	r3, [r3, #4]
 800b576:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b580:	2b40      	cmp	r3, #64	; 0x40
 800b582:	d007      	beq.n	800b594 <USBD_StdEPReq+0x30>
 800b584:	2b40      	cmp	r3, #64	; 0x40
 800b586:	f200 8146 	bhi.w	800b816 <USBD_StdEPReq+0x2b2>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00a      	beq.n	800b5a4 <USBD_StdEPReq+0x40>
 800b58e:	2b20      	cmp	r3, #32
 800b590:	f040 8141 	bne.w	800b816 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	4798      	blx	r3
      break;
 800b5a2:	e13d      	b.n	800b820 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	d10a      	bne.n	800b5c6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	6839      	ldr	r1, [r7, #0]
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
 800b5c4:	e12d      	b.n	800b822 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	785b      	ldrb	r3, [r3, #1]
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d007      	beq.n	800b5de <USBD_StdEPReq+0x7a>
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	f300 811b 	bgt.w	800b80a <USBD_StdEPReq+0x2a6>
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d072      	beq.n	800b6be <USBD_StdEPReq+0x15a>
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d03a      	beq.n	800b652 <USBD_StdEPReq+0xee>
 800b5dc:	e115      	b.n	800b80a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d002      	beq.n	800b5ee <USBD_StdEPReq+0x8a>
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d015      	beq.n	800b618 <USBD_StdEPReq+0xb4>
 800b5ec:	e02b      	b.n	800b646 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00c      	beq.n	800b60e <USBD_StdEPReq+0xaa>
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2b80      	cmp	r3, #128	; 0x80
 800b5f8:	d009      	beq.n	800b60e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b5fa:	7bbb      	ldrb	r3, [r7, #14]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f001 f88a 	bl	800c718 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b604:	2180      	movs	r1, #128	; 0x80
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f001 f886 	bl	800c718 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b60c:	e020      	b.n	800b650 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fc1e 	bl	800be52 <USBD_CtlError>
              break;
 800b616:	e01b      	b.n	800b650 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	885b      	ldrh	r3, [r3, #2]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10e      	bne.n	800b63e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00b      	beq.n	800b63e <USBD_StdEPReq+0xda>
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b80      	cmp	r3, #128	; 0x80
 800b62a:	d008      	beq.n	800b63e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	88db      	ldrh	r3, [r3, #6]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d104      	bne.n	800b63e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b634:	7bbb      	ldrb	r3, [r7, #14]
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f001 f86d 	bl	800c718 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fccf 	bl	800bfe2 <USBD_CtlSendStatus>

              break;
 800b644:	e004      	b.n	800b650 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fc02 	bl	800be52 <USBD_CtlError>
              break;
 800b64e:	bf00      	nop
          }
          break;
 800b650:	e0e0      	b.n	800b814 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d002      	beq.n	800b662 <USBD_StdEPReq+0xfe>
 800b65c:	2b03      	cmp	r3, #3
 800b65e:	d015      	beq.n	800b68c <USBD_StdEPReq+0x128>
 800b660:	e026      	b.n	800b6b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00c      	beq.n	800b682 <USBD_StdEPReq+0x11e>
 800b668:	7bbb      	ldrb	r3, [r7, #14]
 800b66a:	2b80      	cmp	r3, #128	; 0x80
 800b66c:	d009      	beq.n	800b682 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f001 f850 	bl	800c718 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b678:	2180      	movs	r1, #128	; 0x80
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f001 f84c 	bl	800c718 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b680:	e01c      	b.n	800b6bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fbe4 	bl	800be52 <USBD_CtlError>
              break;
 800b68a:	e017      	b.n	800b6bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	885b      	ldrh	r3, [r3, #2]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d112      	bne.n	800b6ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b694:	7bbb      	ldrb	r3, [r7, #14]
 800b696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d004      	beq.n	800b6a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f001 f857 	bl	800c756 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 fc9a 	bl	800bfe2 <USBD_CtlSendStatus>
              }
              break;
 800b6ae:	e004      	b.n	800b6ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fbcd 	bl	800be52 <USBD_CtlError>
              break;
 800b6b8:	e000      	b.n	800b6bc <USBD_StdEPReq+0x158>
              break;
 800b6ba:	bf00      	nop
          }
          break;
 800b6bc:	e0aa      	b.n	800b814 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d002      	beq.n	800b6ce <USBD_StdEPReq+0x16a>
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d032      	beq.n	800b732 <USBD_StdEPReq+0x1ce>
 800b6cc:	e097      	b.n	800b7fe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d007      	beq.n	800b6e4 <USBD_StdEPReq+0x180>
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
 800b6d6:	2b80      	cmp	r3, #128	; 0x80
 800b6d8:	d004      	beq.n	800b6e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b6da:	6839      	ldr	r1, [r7, #0]
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fbb8 	bl	800be52 <USBD_CtlError>
                break;
 800b6e2:	e091      	b.n	800b808 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	da0b      	bge.n	800b704 <USBD_StdEPReq+0x1a0>
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	3310      	adds	r3, #16
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	4413      	add	r3, r2
 800b700:	3304      	adds	r3, #4
 800b702:	e00b      	b.n	800b71c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b70a:	4613      	mov	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	4413      	add	r3, r2
 800b71a:	3304      	adds	r3, #4
 800b71c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2202      	movs	r2, #2
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fbfb 	bl	800bf26 <USBD_CtlSendData>
              break;
 800b730:	e06a      	b.n	800b808 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b736:	2b00      	cmp	r3, #0
 800b738:	da11      	bge.n	800b75e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b73a:	7bbb      	ldrb	r3, [r7, #14]
 800b73c:	f003 020f 	and.w	r2, r3, #15
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	440b      	add	r3, r1
 800b74c:	3318      	adds	r3, #24
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d117      	bne.n	800b784 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fb7b 	bl	800be52 <USBD_CtlError>
                  break;
 800b75c:	e054      	b.n	800b808 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
 800b760:	f003 020f 	and.w	r2, r3, #15
 800b764:	6879      	ldr	r1, [r7, #4]
 800b766:	4613      	mov	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4413      	add	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	440b      	add	r3, r1
 800b770:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d104      	bne.n	800b784 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 fb68 	bl	800be52 <USBD_CtlError>
                  break;
 800b782:	e041      	b.n	800b808 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	da0b      	bge.n	800b7a4 <USBD_StdEPReq+0x240>
 800b78c:	7bbb      	ldrb	r3, [r7, #14]
 800b78e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	3310      	adds	r3, #16
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	4413      	add	r3, r2
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	e00b      	b.n	800b7bc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7a4:	7bbb      	ldrb	r3, [r7, #14]
 800b7a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7be:	7bbb      	ldrb	r3, [r7, #14]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <USBD_StdEPReq+0x266>
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	2b80      	cmp	r3, #128	; 0x80
 800b7c8:	d103      	bne.n	800b7d2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	e00e      	b.n	800b7f0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 ffdc 	bl	800c794 <USBD_LL_IsStallEP>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	e002      	b.n	800b7f0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fb95 	bl	800bf26 <USBD_CtlSendData>
              break;
 800b7fc:	e004      	b.n	800b808 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fb26 	bl	800be52 <USBD_CtlError>
              break;
 800b806:	bf00      	nop
          }
          break;
 800b808:	e004      	b.n	800b814 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b80a:	6839      	ldr	r1, [r7, #0]
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fb20 	bl	800be52 <USBD_CtlError>
          break;
 800b812:	bf00      	nop
      }
      break;
 800b814:	e004      	b.n	800b820 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fb1a 	bl	800be52 <USBD_CtlError>
      break;
 800b81e:	bf00      	nop
  }

  return ret;
 800b820:	7bfb      	ldrb	r3, [r7, #15]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
	...

0800b82c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b836:	2300      	movs	r3, #0
 800b838:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b83e:	2300      	movs	r3, #0
 800b840:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	885b      	ldrh	r3, [r3, #2]
 800b846:	0a1b      	lsrs	r3, r3, #8
 800b848:	b29b      	uxth	r3, r3
 800b84a:	3b01      	subs	r3, #1
 800b84c:	2b06      	cmp	r3, #6
 800b84e:	f200 8128 	bhi.w	800baa2 <USBD_GetDescriptor+0x276>
 800b852:	a201      	add	r2, pc, #4	; (adr r2, 800b858 <USBD_GetDescriptor+0x2c>)
 800b854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b858:	0800b875 	.word	0x0800b875
 800b85c:	0800b88d 	.word	0x0800b88d
 800b860:	0800b8cd 	.word	0x0800b8cd
 800b864:	0800baa3 	.word	0x0800baa3
 800b868:	0800baa3 	.word	0x0800baa3
 800b86c:	0800ba43 	.word	0x0800ba43
 800b870:	0800ba6f 	.word	0x0800ba6f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7c12      	ldrb	r2, [r2, #16]
 800b880:	f107 0108 	add.w	r1, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
      break;
 800b88a:	e112      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7c1b      	ldrb	r3, [r3, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10d      	bne.n	800b8b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89c:	f107 0208 	add.w	r2, r7, #8
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
 800b8a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8ae:	e100      	b.n	800bab2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b8:	f107 0208 	add.w	r2, r7, #8
 800b8bc:	4610      	mov	r0, r2
 800b8be:	4798      	blx	r3
 800b8c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	2202      	movs	r2, #2
 800b8c8:	701a      	strb	r2, [r3, #0]
      break;
 800b8ca:	e0f2      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	885b      	ldrh	r3, [r3, #2]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b05      	cmp	r3, #5
 800b8d4:	f200 80ac 	bhi.w	800ba30 <USBD_GetDescriptor+0x204>
 800b8d8:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <USBD_GetDescriptor+0xb4>)
 800b8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8de:	bf00      	nop
 800b8e0:	0800b8f9 	.word	0x0800b8f9
 800b8e4:	0800b92d 	.word	0x0800b92d
 800b8e8:	0800b961 	.word	0x0800b961
 800b8ec:	0800b995 	.word	0x0800b995
 800b8f0:	0800b9c9 	.word	0x0800b9c9
 800b8f4:	0800b9fd 	.word	0x0800b9fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	7c12      	ldrb	r2, [r2, #16]
 800b910:	f107 0108 	add.w	r1, r7, #8
 800b914:	4610      	mov	r0, r2
 800b916:	4798      	blx	r3
 800b918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b91a:	e091      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fa97 	bl	800be52 <USBD_CtlError>
            err++;
 800b924:	7afb      	ldrb	r3, [r7, #11]
 800b926:	3301      	adds	r3, #1
 800b928:	72fb      	strb	r3, [r7, #11]
          break;
 800b92a:	e089      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00b      	beq.n	800b950 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	7c12      	ldrb	r2, [r2, #16]
 800b944:	f107 0108 	add.w	r1, r7, #8
 800b948:	4610      	mov	r0, r2
 800b94a:	4798      	blx	r3
 800b94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94e:	e077      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa7d 	bl	800be52 <USBD_CtlError>
            err++;
 800b958:	7afb      	ldrb	r3, [r7, #11]
 800b95a:	3301      	adds	r3, #1
 800b95c:	72fb      	strb	r3, [r7, #11]
          break;
 800b95e:	e06f      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	7c12      	ldrb	r2, [r2, #16]
 800b978:	f107 0108 	add.w	r1, r7, #8
 800b97c:	4610      	mov	r0, r2
 800b97e:	4798      	blx	r3
 800b980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b982:	e05d      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa63 	bl	800be52 <USBD_CtlError>
            err++;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	3301      	adds	r3, #1
 800b990:	72fb      	strb	r3, [r7, #11]
          break;
 800b992:	e055      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b99a:	691b      	ldr	r3, [r3, #16]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00b      	beq.n	800b9b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b9a6:	691b      	ldr	r3, [r3, #16]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	7c12      	ldrb	r2, [r2, #16]
 800b9ac:	f107 0108 	add.w	r1, r7, #8
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	4798      	blx	r3
 800b9b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9b6:	e043      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fa49 	bl	800be52 <USBD_CtlError>
            err++;
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9c6:	e03b      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00b      	beq.n	800b9ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b9da:	695b      	ldr	r3, [r3, #20]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	7c12      	ldrb	r2, [r2, #16]
 800b9e0:	f107 0108 	add.w	r1, r7, #8
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	4798      	blx	r3
 800b9e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9ea:	e029      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fa2f 	bl	800be52 <USBD_CtlError>
            err++;
 800b9f4:	7afb      	ldrb	r3, [r7, #11]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b9fa:	e021      	b.n	800ba40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00b      	beq.n	800ba20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	7c12      	ldrb	r2, [r2, #16]
 800ba14:	f107 0108 	add.w	r1, r7, #8
 800ba18:	4610      	mov	r0, r2
 800ba1a:	4798      	blx	r3
 800ba1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba1e:	e00f      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fa15 	bl	800be52 <USBD_CtlError>
            err++;
 800ba28:	7afb      	ldrb	r3, [r7, #11]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba2e:	e007      	b.n	800ba40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fa0d 	bl	800be52 <USBD_CtlError>
          err++;
 800ba38:	7afb      	ldrb	r3, [r7, #11]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ba3e:	e038      	b.n	800bab2 <USBD_GetDescriptor+0x286>
 800ba40:	e037      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	7c1b      	ldrb	r3, [r3, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d109      	bne.n	800ba5e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba52:	f107 0208 	add.w	r2, r7, #8
 800ba56:	4610      	mov	r0, r2
 800ba58:	4798      	blx	r3
 800ba5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba5c:	e029      	b.n	800bab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f9f6 	bl	800be52 <USBD_CtlError>
        err++;
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ba6c:	e021      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	7c1b      	ldrb	r3, [r3, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10d      	bne.n	800ba92 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7e:	f107 0208 	add.w	r2, r7, #8
 800ba82:	4610      	mov	r0, r2
 800ba84:	4798      	blx	r3
 800ba86:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	2207      	movs	r2, #7
 800ba8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba90:	e00f      	b.n	800bab2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f9dc 	bl	800be52 <USBD_CtlError>
        err++;
 800ba9a:	7afb      	ldrb	r3, [r7, #11]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	72fb      	strb	r3, [r7, #11]
      break;
 800baa0:	e007      	b.n	800bab2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f9d4 	bl	800be52 <USBD_CtlError>
      err++;
 800baaa:	7afb      	ldrb	r3, [r7, #11]
 800baac:	3301      	adds	r3, #1
 800baae:	72fb      	strb	r3, [r7, #11]
      break;
 800bab0:	bf00      	nop
  }

  if (err != 0U)
 800bab2:	7afb      	ldrb	r3, [r7, #11]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d11c      	bne.n	800baf2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bab8:	893b      	ldrh	r3, [r7, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d011      	beq.n	800bae2 <USBD_GetDescriptor+0x2b6>
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	88db      	ldrh	r3, [r3, #6]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00d      	beq.n	800bae2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	88da      	ldrh	r2, [r3, #6]
 800baca:	893b      	ldrh	r3, [r7, #8]
 800bacc:	4293      	cmp	r3, r2
 800bace:	bf28      	it	cs
 800bad0:	4613      	movcs	r3, r2
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bad6:	893b      	ldrh	r3, [r7, #8]
 800bad8:	461a      	mov	r2, r3
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fa22 	bl	800bf26 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	88db      	ldrh	r3, [r3, #6]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d104      	bne.n	800baf4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fa79 	bl	800bfe2 <USBD_CtlSendStatus>
 800baf0:	e000      	b.n	800baf4 <USBD_GetDescriptor+0x2c8>
    return;
 800baf2:	bf00      	nop
    }
  }
}
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop

0800bafc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	889b      	ldrh	r3, [r3, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d130      	bne.n	800bb70 <USBD_SetAddress+0x74>
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	88db      	ldrh	r3, [r3, #6]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d12c      	bne.n	800bb70 <USBD_SetAddress+0x74>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb1c:	d828      	bhi.n	800bb70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	885b      	ldrh	r3, [r3, #2]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d104      	bne.n	800bb3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f98b 	bl	800be52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb3c:	e01d      	b.n	800bb7a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7bfa      	ldrb	r2, [r7, #15]
 800bb42:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fe4e 	bl	800c7ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fa46 	bl	800bfe2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb56:	7bfb      	ldrb	r3, [r7, #15]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2202      	movs	r2, #2
 800bb60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb64:	e009      	b.n	800bb7a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6e:	e004      	b.n	800bb7a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f96d 	bl	800be52 <USBD_CtlError>
  }
}
 800bb78:	bf00      	nop
 800bb7a:	bf00      	nop
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	885b      	ldrh	r3, [r3, #2]
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	4b41      	ldr	r3, [pc, #260]	; (800bc9c <USBD_SetConfig+0x118>)
 800bb96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb98:	4b40      	ldr	r3, [pc, #256]	; (800bc9c <USBD_SetConfig+0x118>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d904      	bls.n	800bbaa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f955 	bl	800be52 <USBD_CtlError>
 800bba8:	e075      	b.n	800bc96 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d002      	beq.n	800bbba <USBD_SetConfig+0x36>
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d023      	beq.n	800bc00 <USBD_SetConfig+0x7c>
 800bbb8:	e062      	b.n	800bc80 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bbba:	4b38      	ldr	r3, [pc, #224]	; (800bc9c <USBD_SetConfig+0x118>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d01a      	beq.n	800bbf8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bbc2:	4b36      	ldr	r3, [pc, #216]	; (800bc9c <USBD_SetConfig+0x118>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2203      	movs	r2, #3
 800bbd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bbd4:	4b31      	ldr	r3, [pc, #196]	; (800bc9c <USBD_SetConfig+0x118>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7ff f9e7 	bl	800afae <USBD_SetClassConfig>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d104      	bne.n	800bbf0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f932 	bl	800be52 <USBD_CtlError>
            return;
 800bbee:	e052      	b.n	800bc96 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f9f6 	bl	800bfe2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bbf6:	e04e      	b.n	800bc96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f9f2 	bl	800bfe2 <USBD_CtlSendStatus>
        break;
 800bbfe:	e04a      	b.n	800bc96 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bc00:	4b26      	ldr	r3, [pc, #152]	; (800bc9c <USBD_SetConfig+0x118>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d112      	bne.n	800bc2e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bc10:	4b22      	ldr	r3, [pc, #136]	; (800bc9c <USBD_SetConfig+0x118>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	461a      	mov	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bc1a:	4b20      	ldr	r3, [pc, #128]	; (800bc9c <USBD_SetConfig+0x118>)
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff f9e3 	bl	800afec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f9db 	bl	800bfe2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bc2c:	e033      	b.n	800bc96 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bc2e:	4b1b      	ldr	r3, [pc, #108]	; (800bc9c <USBD_SetConfig+0x118>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d01d      	beq.n	800bc78 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff f9d1 	bl	800afec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bc4a:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <USBD_SetConfig+0x118>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bc54:	4b11      	ldr	r3, [pc, #68]	; (800bc9c <USBD_SetConfig+0x118>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff f9a7 	bl	800afae <USBD_SetClassConfig>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d104      	bne.n	800bc70 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f8f2 	bl	800be52 <USBD_CtlError>
            return;
 800bc6e:	e012      	b.n	800bc96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f9b6 	bl	800bfe2 <USBD_CtlSendStatus>
        break;
 800bc76:	e00e      	b.n	800bc96 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f9b2 	bl	800bfe2 <USBD_CtlSendStatus>
        break;
 800bc7e:	e00a      	b.n	800bc96 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f8e5 	bl	800be52 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bc88:	4b04      	ldr	r3, [pc, #16]	; (800bc9c <USBD_SetConfig+0x118>)
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f7ff f9ac 	bl	800afec <USBD_ClrClassConfig>
        break;
 800bc94:	bf00      	nop
    }
  }
}
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	200004d0 	.word	0x200004d0

0800bca0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	88db      	ldrh	r3, [r3, #6]
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d004      	beq.n	800bcbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f8cc 	bl	800be52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcba:	e022      	b.n	800bd02 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	dc02      	bgt.n	800bccc <USBD_GetConfig+0x2c>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	dc03      	bgt.n	800bcd2 <USBD_GetConfig+0x32>
 800bcca:	e015      	b.n	800bcf8 <USBD_GetConfig+0x58>
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d00b      	beq.n	800bce8 <USBD_GetConfig+0x48>
 800bcd0:	e012      	b.n	800bcf8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	2201      	movs	r2, #1
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f920 	bl	800bf26 <USBD_CtlSendData>
        break;
 800bce6:	e00c      	b.n	800bd02 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3304      	adds	r3, #4
 800bcec:	2201      	movs	r2, #1
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f918 	bl	800bf26 <USBD_CtlSendData>
        break;
 800bcf6:	e004      	b.n	800bd02 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f8a9 	bl	800be52 <USBD_CtlError>
        break;
 800bd00:	bf00      	nop
}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	2b02      	cmp	r3, #2
 800bd1e:	d81e      	bhi.n	800bd5e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	88db      	ldrh	r3, [r3, #6]
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d004      	beq.n	800bd32 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 f891 	bl	800be52 <USBD_CtlError>
        break;
 800bd30:	e01a      	b.n	800bd68 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	f043 0202 	orr.w	r2, r3, #2
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	330c      	adds	r3, #12
 800bd52:	2202      	movs	r2, #2
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f8e5 	bl	800bf26 <USBD_CtlSendData>
      break;
 800bd5c:	e004      	b.n	800bd68 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f876 	bl	800be52 <USBD_CtlError>
      break;
 800bd66:	bf00      	nop
  }
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	885b      	ldrh	r3, [r3, #2]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d106      	bne.n	800bd90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f929 	bl	800bfe2 <USBD_CtlSendStatus>
  }
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d80b      	bhi.n	800bdc6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	885b      	ldrh	r3, [r3, #2]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d10c      	bne.n	800bdd0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f90f 	bl	800bfe2 <USBD_CtlSendStatus>
      }
      break;
 800bdc4:	e004      	b.n	800bdd0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bdc6:	6839      	ldr	r1, [r7, #0]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 f842 	bl	800be52 <USBD_CtlError>
      break;
 800bdce:	e000      	b.n	800bdd2 <USBD_ClrFeature+0x3a>
      break;
 800bdd0:	bf00      	nop
  }
}
 800bdd2:	bf00      	nop
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b083      	sub	sp, #12
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	781a      	ldrb	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	785a      	ldrb	r2, [r3, #1]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	3302      	adds	r3, #2
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	3303      	adds	r3, #3
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b29b      	uxth	r3, r3
 800be04:	021b      	lsls	r3, r3, #8
 800be06:	b29b      	uxth	r3, r3
 800be08:	4413      	add	r3, r2
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	3304      	adds	r3, #4
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	b29a      	uxth	r2, r3
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	3305      	adds	r3, #5
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	b29b      	uxth	r3, r3
 800be20:	021b      	lsls	r3, r3, #8
 800be22:	b29b      	uxth	r3, r3
 800be24:	4413      	add	r3, r2
 800be26:	b29a      	uxth	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	3306      	adds	r3, #6
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	b29a      	uxth	r2, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	3307      	adds	r3, #7
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	021b      	lsls	r3, r3, #8
 800be3e:	b29b      	uxth	r3, r3
 800be40:	4413      	add	r3, r2
 800be42:	b29a      	uxth	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	80da      	strh	r2, [r3, #6]

}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bc80      	pop	{r7}
 800be50:	4770      	bx	lr

0800be52 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b082      	sub	sp, #8
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800be5c:	2180      	movs	r1, #128	; 0x80
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 fc5a 	bl	800c718 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800be64:	2100      	movs	r1, #0
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fc56 	bl	800c718 <USBD_LL_StallEP>
}
 800be6c:	bf00      	nop
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d032      	beq.n	800bef0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 f834 	bl	800bef8 <USBD_GetLen>
 800be90:	4603      	mov	r3, r0
 800be92:	3301      	adds	r3, #1
 800be94:	b29b      	uxth	r3, r3
 800be96:	005b      	lsls	r3, r3, #1
 800be98:	b29a      	uxth	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	75fa      	strb	r2, [r7, #23]
 800bea4:	461a      	mov	r2, r3
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4413      	add	r3, r2
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	7812      	ldrb	r2, [r2, #0]
 800beae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800beb0:	7dfb      	ldrb	r3, [r7, #23]
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	75fa      	strb	r2, [r7, #23]
 800beb6:	461a      	mov	r2, r3
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	4413      	add	r3, r2
 800bebc:	2203      	movs	r2, #3
 800bebe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bec0:	e012      	b.n	800bee8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	60fa      	str	r2, [r7, #12]
 800bec8:	7dfa      	ldrb	r2, [r7, #23]
 800beca:	1c51      	adds	r1, r2, #1
 800becc:	75f9      	strb	r1, [r7, #23]
 800bece:	4611      	mov	r1, r2
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	440a      	add	r2, r1
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	75fa      	strb	r2, [r7, #23]
 800bede:	461a      	mov	r2, r3
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	4413      	add	r3, r2
 800bee4:	2200      	movs	r2, #0
 800bee6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1e8      	bne.n	800bec2 <USBD_GetString+0x4e>
    }
  }
}
 800bef0:	bf00      	nop
 800bef2:	3718      	adds	r7, #24
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bf04:	e005      	b.n	800bf12 <USBD_GetLen+0x1a>
  {
    len++;
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1f5      	bne.n	800bf06 <USBD_GetLen+0xe>
  }

  return len;
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bc80      	pop	{r7}
 800bf24:	4770      	bx	lr

0800bf26 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	4613      	mov	r3, r2
 800bf32:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2202      	movs	r2, #2
 800bf38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bf3c:	88fa      	ldrh	r2, [r7, #6]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bf42:	88fa      	ldrh	r2, [r7, #6]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf48:	88fb      	ldrh	r3, [r7, #6]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f000 fc6b 	bl	800c82a <USBD_LL_Transmit>

  return USBD_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b084      	sub	sp, #16
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	60b9      	str	r1, [r7, #8]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	2100      	movs	r1, #0
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 fc59 	bl	800c82a <USBD_LL_Transmit>

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2203      	movs	r2, #3
 800bf94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf98:	88fa      	ldrh	r2, [r7, #6]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bfa0:	88fa      	ldrh	r2, [r7, #6]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfa8:	88fb      	ldrh	r3, [r7, #6]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	2100      	movs	r1, #0
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f000 fc5e 	bl	800c870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b084      	sub	sp, #16
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	60f8      	str	r0, [r7, #12]
 800bfc6:	60b9      	str	r1, [r7, #8]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfcc:	88fb      	ldrh	r3, [r7, #6]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 fc4c 	bl	800c870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2204      	movs	r2, #4
 800bfee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bff2:	2300      	movs	r3, #0
 800bff4:	2200      	movs	r2, #0
 800bff6:	2100      	movs	r1, #0
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fc16 	bl	800c82a <USBD_LL_Transmit>

  return USBD_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2205      	movs	r2, #5
 800c014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c018:	2300      	movs	r3, #0
 800c01a:	2200      	movs	r2, #0
 800c01c:	2100      	movs	r1, #0
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fc26 	bl	800c870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c034:	2200      	movs	r2, #0
 800c036:	4912      	ldr	r1, [pc, #72]	; (800c080 <MX_USB_DEVICE_Init+0x50>)
 800c038:	4812      	ldr	r0, [pc, #72]	; (800c084 <MX_USB_DEVICE_Init+0x54>)
 800c03a:	f7fe ff5e 	bl	800aefa <USBD_Init>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c044:	f7f7 f8be 	bl	80031c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c048:	490f      	ldr	r1, [pc, #60]	; (800c088 <MX_USB_DEVICE_Init+0x58>)
 800c04a:	480e      	ldr	r0, [pc, #56]	; (800c084 <MX_USB_DEVICE_Init+0x54>)
 800c04c:	f7fe ff80 	bl	800af50 <USBD_RegisterClass>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c056:	f7f7 f8b5 	bl	80031c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c05a:	490c      	ldr	r1, [pc, #48]	; (800c08c <MX_USB_DEVICE_Init+0x5c>)
 800c05c:	4809      	ldr	r0, [pc, #36]	; (800c084 <MX_USB_DEVICE_Init+0x54>)
 800c05e:	f7fe feb1 	bl	800adc4 <USBD_CDC_RegisterInterface>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c068:	f7f7 f8ac 	bl	80031c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c06c:	4805      	ldr	r0, [pc, #20]	; (800c084 <MX_USB_DEVICE_Init+0x54>)
 800c06e:	f7fe ff88 	bl	800af82 <USBD_Start>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c078:	f7f7 f8a4 	bl	80031c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c07c:	bf00      	nop
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	20000154 	.word	0x20000154
 800c084:	200004d4 	.word	0x200004d4
 800c088:	20000040 	.word	0x20000040
 800c08c:	20000144 	.word	0x20000144

0800c090 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c094:	2200      	movs	r2, #0
 800c096:	4905      	ldr	r1, [pc, #20]	; (800c0ac <CDC_Init_FS+0x1c>)
 800c098:	4805      	ldr	r0, [pc, #20]	; (800c0b0 <CDC_Init_FS+0x20>)
 800c09a:	f7fe fea9 	bl	800adf0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c09e:	4905      	ldr	r1, [pc, #20]	; (800c0b4 <CDC_Init_FS+0x24>)
 800c0a0:	4803      	ldr	r0, [pc, #12]	; (800c0b0 <CDC_Init_FS+0x20>)
 800c0a2:	f7fe febe 	bl	800ae22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c0a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20000b80 	.word	0x20000b80
 800c0b0:	200004d4 	.word	0x200004d4
 800c0b4:	20000798 	.word	0x20000798

0800c0b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c0bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bc80      	pop	{r7}
 800c0c4:	4770      	bx	lr
	...

0800c0c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	6039      	str	r1, [r7, #0]
 800c0d2:	71fb      	strb	r3, [r7, #7]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c0d8:	79fb      	ldrb	r3, [r7, #7]
 800c0da:	2b23      	cmp	r3, #35	; 0x23
 800c0dc:	d84a      	bhi.n	800c174 <CDC_Control_FS+0xac>
 800c0de:	a201      	add	r2, pc, #4	; (adr r2, 800c0e4 <CDC_Control_FS+0x1c>)
 800c0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e4:	0800c175 	.word	0x0800c175
 800c0e8:	0800c175 	.word	0x0800c175
 800c0ec:	0800c175 	.word	0x0800c175
 800c0f0:	0800c175 	.word	0x0800c175
 800c0f4:	0800c175 	.word	0x0800c175
 800c0f8:	0800c175 	.word	0x0800c175
 800c0fc:	0800c175 	.word	0x0800c175
 800c100:	0800c175 	.word	0x0800c175
 800c104:	0800c175 	.word	0x0800c175
 800c108:	0800c175 	.word	0x0800c175
 800c10c:	0800c175 	.word	0x0800c175
 800c110:	0800c175 	.word	0x0800c175
 800c114:	0800c175 	.word	0x0800c175
 800c118:	0800c175 	.word	0x0800c175
 800c11c:	0800c175 	.word	0x0800c175
 800c120:	0800c175 	.word	0x0800c175
 800c124:	0800c175 	.word	0x0800c175
 800c128:	0800c175 	.word	0x0800c175
 800c12c:	0800c175 	.word	0x0800c175
 800c130:	0800c175 	.word	0x0800c175
 800c134:	0800c175 	.word	0x0800c175
 800c138:	0800c175 	.word	0x0800c175
 800c13c:	0800c175 	.word	0x0800c175
 800c140:	0800c175 	.word	0x0800c175
 800c144:	0800c175 	.word	0x0800c175
 800c148:	0800c175 	.word	0x0800c175
 800c14c:	0800c175 	.word	0x0800c175
 800c150:	0800c175 	.word	0x0800c175
 800c154:	0800c175 	.word	0x0800c175
 800c158:	0800c175 	.word	0x0800c175
 800c15c:	0800c175 	.word	0x0800c175
 800c160:	0800c175 	.word	0x0800c175
 800c164:	0800c175 	.word	0x0800c175
 800c168:	0800c175 	.word	0x0800c175
 800c16c:	0800c175 	.word	0x0800c175
 800c170:	0800c175 	.word	0x0800c175
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c174:	bf00      	nop
  }

  return (USBD_OK);
 800c176:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c178:	4618      	mov	r0, r3
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bc80      	pop	{r7}
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop

0800c184 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	4808      	ldr	r0, [pc, #32]	; (800c1b4 <CDC_Receive_FS+0x30>)
 800c192:	f7fe fe46 	bl	800ae22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c196:	4807      	ldr	r0, [pc, #28]	; (800c1b4 <CDC_Receive_FS+0x30>)
 800c198:	f7fe fe85 	bl	800aea6 <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7f6 fb1c 	bl	80027e0 <USB_Packet_Received>
  return (USBD_OK);
 800c1a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	200004d4 	.word	0x200004d4

0800c1b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c1c8:	4b0d      	ldr	r3, [pc, #52]	; (800c200 <CDC_Transmit_FS+0x48>)
 800c1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e00b      	b.n	800c1f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c1de:	887b      	ldrh	r3, [r7, #2]
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	4806      	ldr	r0, [pc, #24]	; (800c200 <CDC_Transmit_FS+0x48>)
 800c1e6:	f7fe fe03 	bl	800adf0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1ea:	4805      	ldr	r0, [pc, #20]	; (800c200 <CDC_Transmit_FS+0x48>)
 800c1ec:	f7fe fe2c 	bl	800ae48 <USBD_CDC_TransmitPacket>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	200004d4 	.word	0x200004d4

0800c204 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	4603      	mov	r3, r0
 800c20c:	6039      	str	r1, [r7, #0]
 800c20e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2212      	movs	r2, #18
 800c214:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c216:	4b03      	ldr	r3, [pc, #12]	; (800c224 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bc80      	pop	{r7}
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	20000170 	.word	0x20000170

0800c228 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	6039      	str	r1, [r7, #0]
 800c232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2204      	movs	r2, #4
 800c238:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c23a:	4b03      	ldr	r3, [pc, #12]	; (800c248 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	bc80      	pop	{r7}
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	20000184 	.word	0x20000184

0800c24c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	6039      	str	r1, [r7, #0]
 800c256:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c258:	79fb      	ldrb	r3, [r7, #7]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d105      	bne.n	800c26a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c25e:	683a      	ldr	r2, [r7, #0]
 800c260:	4907      	ldr	r1, [pc, #28]	; (800c280 <USBD_FS_ProductStrDescriptor+0x34>)
 800c262:	4808      	ldr	r0, [pc, #32]	; (800c284 <USBD_FS_ProductStrDescriptor+0x38>)
 800c264:	f7ff fe06 	bl	800be74 <USBD_GetString>
 800c268:	e004      	b.n	800c274 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c26a:	683a      	ldr	r2, [r7, #0]
 800c26c:	4904      	ldr	r1, [pc, #16]	; (800c280 <USBD_FS_ProductStrDescriptor+0x34>)
 800c26e:	4805      	ldr	r0, [pc, #20]	; (800c284 <USBD_FS_ProductStrDescriptor+0x38>)
 800c270:	f7ff fe00 	bl	800be74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c274:	4b02      	ldr	r3, [pc, #8]	; (800c280 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c276:	4618      	mov	r0, r3
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20000f68 	.word	0x20000f68
 800c284:	0800ca20 	.word	0x0800ca20

0800c288 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	6039      	str	r1, [r7, #0]
 800c292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	4904      	ldr	r1, [pc, #16]	; (800c2a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c298:	4804      	ldr	r0, [pc, #16]	; (800c2ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c29a:	f7ff fdeb 	bl	800be74 <USBD_GetString>
  return USBD_StrDesc;
 800c29e:	4b02      	ldr	r3, [pc, #8]	; (800c2a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	20000f68 	.word	0x20000f68
 800c2ac:	0800ca34 	.word	0x0800ca34

0800c2b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	6039      	str	r1, [r7, #0]
 800c2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	221a      	movs	r2, #26
 800c2c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2c2:	f000 f843 	bl	800c34c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c2c6:	4b02      	ldr	r3, [pc, #8]	; (800c2d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	20000188 	.word	0x20000188

0800c2d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	6039      	str	r1, [r7, #0]
 800c2de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2e0:	79fb      	ldrb	r3, [r7, #7]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d105      	bne.n	800c2f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	4907      	ldr	r1, [pc, #28]	; (800c308 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2ea:	4808      	ldr	r0, [pc, #32]	; (800c30c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2ec:	f7ff fdc2 	bl	800be74 <USBD_GetString>
 800c2f0:	e004      	b.n	800c2fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	4904      	ldr	r1, [pc, #16]	; (800c308 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2f6:	4805      	ldr	r0, [pc, #20]	; (800c30c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2f8:	f7ff fdbc 	bl	800be74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2fc:	4b02      	ldr	r3, [pc, #8]	; (800c308 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20000f68 	.word	0x20000f68
 800c30c:	0800ca48 	.word	0x0800ca48

0800c310 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	6039      	str	r1, [r7, #0]
 800c31a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d105      	bne.n	800c32e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	4907      	ldr	r1, [pc, #28]	; (800c344 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c326:	4808      	ldr	r0, [pc, #32]	; (800c348 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c328:	f7ff fda4 	bl	800be74 <USBD_GetString>
 800c32c:	e004      	b.n	800c338 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	4904      	ldr	r1, [pc, #16]	; (800c344 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c332:	4805      	ldr	r0, [pc, #20]	; (800c348 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c334:	f7ff fd9e 	bl	800be74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c338:	4b02      	ldr	r3, [pc, #8]	; (800c344 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	20000f68 	.word	0x20000f68
 800c348:	0800ca54 	.word	0x0800ca54

0800c34c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c352:	4b0f      	ldr	r3, [pc, #60]	; (800c390 <Get_SerialNum+0x44>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c358:	4b0e      	ldr	r3, [pc, #56]	; (800c394 <Get_SerialNum+0x48>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c35e:	4b0e      	ldr	r3, [pc, #56]	; (800c398 <Get_SerialNum+0x4c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4413      	add	r3, r2
 800c36a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d009      	beq.n	800c386 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c372:	2208      	movs	r2, #8
 800c374:	4909      	ldr	r1, [pc, #36]	; (800c39c <Get_SerialNum+0x50>)
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f000 f814 	bl	800c3a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c37c:	2204      	movs	r2, #4
 800c37e:	4908      	ldr	r1, [pc, #32]	; (800c3a0 <Get_SerialNum+0x54>)
 800c380:	68b8      	ldr	r0, [r7, #8]
 800c382:	f000 f80f 	bl	800c3a4 <IntToUnicode>
  }
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	1ffff7e8 	.word	0x1ffff7e8
 800c394:	1ffff7ec 	.word	0x1ffff7ec
 800c398:	1ffff7f0 	.word	0x1ffff7f0
 800c39c:	2000018a 	.word	0x2000018a
 800c3a0:	2000019a 	.word	0x2000019a

0800c3a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	75fb      	strb	r3, [r7, #23]
 800c3ba:	e027      	b.n	800c40c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	0f1b      	lsrs	r3, r3, #28
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	d80b      	bhi.n	800c3dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	0f1b      	lsrs	r3, r3, #28
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	440b      	add	r3, r1
 800c3d4:	3230      	adds	r2, #48	; 0x30
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	e00a      	b.n	800c3f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	0f1b      	lsrs	r3, r3, #28
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	440b      	add	r3, r1
 800c3ec:	3237      	adds	r2, #55	; 0x37
 800c3ee:	b2d2      	uxtb	r2, r2
 800c3f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	011b      	lsls	r3, r3, #4
 800c3f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	4413      	add	r3, r2
 800c402:	2200      	movs	r2, #0
 800c404:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	3301      	adds	r3, #1
 800c40a:	75fb      	strb	r3, [r7, #23]
 800c40c:	7dfa      	ldrb	r2, [r7, #23]
 800c40e:	79fb      	ldrb	r3, [r7, #7]
 800c410:	429a      	cmp	r2, r3
 800c412:	d3d3      	bcc.n	800c3bc <IntToUnicode+0x18>
  }
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop
 800c418:	371c      	adds	r7, #28
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bc80      	pop	{r7}
 800c41e:	4770      	bx	lr

0800c420 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a0d      	ldr	r2, [pc, #52]	; (800c464 <HAL_PCD_MspInit+0x44>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d113      	bne.n	800c45a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c432:	4b0d      	ldr	r3, [pc, #52]	; (800c468 <HAL_PCD_MspInit+0x48>)
 800c434:	69db      	ldr	r3, [r3, #28]
 800c436:	4a0c      	ldr	r2, [pc, #48]	; (800c468 <HAL_PCD_MspInit+0x48>)
 800c438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c43c:	61d3      	str	r3, [r2, #28]
 800c43e:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <HAL_PCD_MspInit+0x48>)
 800c440:	69db      	ldr	r3, [r3, #28]
 800c442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800c44a:	2200      	movs	r2, #0
 800c44c:	2103      	movs	r1, #3
 800c44e:	2014      	movs	r0, #20
 800c450:	f7f7 fe4b 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c454:	2014      	movs	r0, #20
 800c456:	f7f7 fe64 	bl	8004122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	40005c00 	.word	0x40005c00
 800c468:	40021000 	.word	0x40021000

0800c46c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	f7fe fdc5 	bl	800b012 <USBD_LL_SetupStage>
}
 800c488:	bf00      	nop
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	460b      	mov	r3, r1
 800c49a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c4a2:	78fa      	ldrb	r2, [r7, #3]
 800c4a4:	6879      	ldr	r1, [r7, #4]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4413      	add	r3, r2
 800c4ac:	00db      	lsls	r3, r3, #3
 800c4ae:	440b      	add	r3, r1
 800c4b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	78fb      	ldrb	r3, [r7, #3]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	f7fe fdf7 	bl	800b0ac <USBD_LL_DataOutStage>
}
 800c4be:	bf00      	nop
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b082      	sub	sp, #8
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c4d8:	78fa      	ldrb	r2, [r7, #3]
 800c4da:	6879      	ldr	r1, [r7, #4]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	440b      	add	r3, r1
 800c4e6:	333c      	adds	r3, #60	; 0x3c
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	f7fe fe4e 	bl	800b18e <USBD_LL_DataInStage>
}
 800c4f2:	bf00      	nop
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fe ff5e 	bl	800b3ca <USBD_LL_SOF>
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b084      	sub	sp, #16
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c51e:	2301      	movs	r3, #1
 800c520:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	2b02      	cmp	r3, #2
 800c528:	d001      	beq.n	800c52e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c52a:	f7f6 fe4b 	bl	80031c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c534:	7bfa      	ldrb	r2, [r7, #15]
 800c536:	4611      	mov	r1, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fe ff0e 	bl	800b35a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe fec7 	bl	800b2d8 <USBD_LL_Reset>
}
 800c54a:	bf00      	nop
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe ff08 	bl	800b378 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d005      	beq.n	800c57c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c570:	4b04      	ldr	r3, [pc, #16]	; (800c584 <HAL_PCD_SuspendCallback+0x30>)
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	4a03      	ldr	r2, [pc, #12]	; (800c584 <HAL_PCD_SuspendCallback+0x30>)
 800c576:	f043 0306 	orr.w	r3, r3, #6
 800c57a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c57c:	bf00      	nop
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	e000ed00 	.word	0xe000ed00

0800c588 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe ff02 	bl	800b3a0 <USBD_LL_Resume>
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c5ac:	4a28      	ldr	r2, [pc, #160]	; (800c650 <USBD_LL_Init+0xac>)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a26      	ldr	r2, [pc, #152]	; (800c650 <USBD_LL_Init+0xac>)
 800c5b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c5bc:	4b24      	ldr	r3, [pc, #144]	; (800c650 <USBD_LL_Init+0xac>)
 800c5be:	4a25      	ldr	r2, [pc, #148]	; (800c654 <USBD_LL_Init+0xb0>)
 800c5c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c5c2:	4b23      	ldr	r3, [pc, #140]	; (800c650 <USBD_LL_Init+0xac>)
 800c5c4:	2208      	movs	r2, #8
 800c5c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c5c8:	4b21      	ldr	r3, [pc, #132]	; (800c650 <USBD_LL_Init+0xac>)
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c5ce:	4b20      	ldr	r3, [pc, #128]	; (800c650 <USBD_LL_Init+0xac>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c5d4:	4b1e      	ldr	r3, [pc, #120]	; (800c650 <USBD_LL_Init+0xac>)
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c5da:	4b1d      	ldr	r3, [pc, #116]	; (800c650 <USBD_LL_Init+0xac>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c5e0:	481b      	ldr	r0, [pc, #108]	; (800c650 <USBD_LL_Init+0xac>)
 800c5e2:	f7f8 f9d3 	bl	800498c <HAL_PCD_Init>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c5ec:	f7f6 fdea 	bl	80031c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c5f6:	2318      	movs	r3, #24
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	f7f9 fe47 	bl	800628e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c606:	2358      	movs	r3, #88	; 0x58
 800c608:	2200      	movs	r2, #0
 800c60a:	2180      	movs	r1, #128	; 0x80
 800c60c:	f7f9 fe3f 	bl	800628e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c616:	23c0      	movs	r3, #192	; 0xc0
 800c618:	2200      	movs	r2, #0
 800c61a:	2181      	movs	r1, #129	; 0x81
 800c61c:	f7f9 fe37 	bl	800628e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c626:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c62a:	2200      	movs	r2, #0
 800c62c:	2101      	movs	r1, #1
 800c62e:	f7f9 fe2e 	bl	800628e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c63c:	2200      	movs	r2, #0
 800c63e:	2182      	movs	r1, #130	; 0x82
 800c640:	f7f9 fe25 	bl	800628e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20001168 	.word	0x20001168
 800c654:	40005c00 	.word	0x40005c00

0800c658 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c664:	2300      	movs	r3, #0
 800c666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f8 fa97 	bl	8004ba2 <HAL_PCD_Start>
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 f94e 	bl	800c91c <USBD_Get_USB_Status>
 800c680:	4603      	mov	r3, r0
 800c682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c684:	7bbb      	ldrb	r3, [r7, #14]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b084      	sub	sp, #16
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	4608      	mov	r0, r1
 800c698:	4611      	mov	r1, r2
 800c69a:	461a      	mov	r2, r3
 800c69c:	4603      	mov	r3, r0
 800c69e:	70fb      	strb	r3, [r7, #3]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70bb      	strb	r3, [r7, #2]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6b6:	78bb      	ldrb	r3, [r7, #2]
 800c6b8:	883a      	ldrh	r2, [r7, #0]
 800c6ba:	78f9      	ldrb	r1, [r7, #3]
 800c6bc:	f7f8 fc0f 	bl	8004ede <HAL_PCD_EP_Open>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 f928 	bl	800c91c <USBD_Get_USB_Status>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6f4:	78fa      	ldrb	r2, [r7, #3]
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7f8 fc56 	bl	8004faa <HAL_PCD_EP_Close>
 800c6fe:	4603      	mov	r3, r0
 800c700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f909 	bl	800c91c <USBD_Get_USB_Status>
 800c70a:	4603      	mov	r3, r0
 800c70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c732:	78fa      	ldrb	r2, [r7, #3]
 800c734:	4611      	mov	r1, r2
 800c736:	4618      	mov	r0, r3
 800c738:	f7f8 fd16 	bl	8005168 <HAL_PCD_EP_SetStall>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f8ea 	bl	800c91c <USBD_Get_USB_Status>
 800c748:	4603      	mov	r3, r0
 800c74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c770:	78fa      	ldrb	r2, [r7, #3]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f7f8 fd57 	bl	8005228 <HAL_PCD_EP_ClrStall>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	4618      	mov	r0, r3
 800c782:	f000 f8cb 	bl	800c91c <USBD_Get_USB_Status>
 800c786:	4603      	mov	r3, r0
 800c788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c7a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	da0c      	bge.n	800c7ca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7b6:	68f9      	ldr	r1, [r7, #12]
 800c7b8:	1c5a      	adds	r2, r3, #1
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	440b      	add	r3, r1
 800c7c4:	3302      	adds	r3, #2
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	e00b      	b.n	800c7e2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c7ca:	78fb      	ldrb	r3, [r7, #3]
 800c7cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7d0:	68f9      	ldr	r1, [r7, #12]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	440b      	add	r3, r1
 800c7dc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c7e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3714      	adds	r7, #20
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bc80      	pop	{r7}
 800c7ea:	4770      	bx	lr

0800c7ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c806:	78fa      	ldrb	r2, [r7, #3]
 800c808:	4611      	mov	r1, r2
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7f8 fb42 	bl	8004e94 <HAL_PCD_SetAddress>
 800c810:	4603      	mov	r3, r0
 800c812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	4618      	mov	r0, r3
 800c818:	f000 f880 	bl	800c91c <USBD_Get_USB_Status>
 800c81c:	4603      	mov	r3, r0
 800c81e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c820:	7bbb      	ldrb	r3, [r7, #14]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b086      	sub	sp, #24
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	461a      	mov	r2, r3
 800c836:	460b      	mov	r3, r1
 800c838:	72fb      	strb	r3, [r7, #11]
 800c83a:	4613      	mov	r3, r2
 800c83c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c84c:	893b      	ldrh	r3, [r7, #8]
 800c84e:	7af9      	ldrb	r1, [r7, #11]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	f7f8 fc46 	bl	80050e2 <HAL_PCD_EP_Transmit>
 800c856:	4603      	mov	r3, r0
 800c858:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 f85d 	bl	800c91c <USBD_Get_USB_Status>
 800c862:	4603      	mov	r3, r0
 800c864:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c866:	7dbb      	ldrb	r3, [r7, #22]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	607a      	str	r2, [r7, #4]
 800c87a:	461a      	mov	r2, r3
 800c87c:	460b      	mov	r3, r1
 800c87e:	72fb      	strb	r3, [r7, #11]
 800c880:	4613      	mov	r3, r2
 800c882:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c884:	2300      	movs	r3, #0
 800c886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c888:	2300      	movs	r3, #0
 800c88a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c892:	893b      	ldrh	r3, [r7, #8]
 800c894:	7af9      	ldrb	r1, [r7, #11]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	f7f8 fbcf 	bl	800503a <HAL_PCD_EP_Receive>
 800c89c:	4603      	mov	r3, r0
 800c89e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 f83a 	bl	800c91c <USBD_Get_USB_Status>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3718      	adds	r7, #24
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8c8:	78fa      	ldrb	r2, [r7, #3]
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7f8 fbf1 	bl	80050b4 <HAL_PCD_EP_GetRxCount>
 800c8d2:	4603      	mov	r3, r0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c8e4:	4b02      	ldr	r3, [pc, #8]	; (800c8f0 <USBD_static_malloc+0x14>)
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bc80      	pop	{r7}
 800c8ee:	4770      	bx	lr
 800c8f0:	20001454 	.word	0x20001454

0800c8f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]

}
 800c8fc:	bf00      	nop
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	bc80      	pop	{r7}
 800c904:	4770      	bx	lr

0800c906 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c906:	b480      	push	{r7}
 800c908:	b083      	sub	sp, #12
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c912:	bf00      	nop
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	bc80      	pop	{r7}
 800c91a:	4770      	bx	lr

0800c91c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	4603      	mov	r3, r0
 800c924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c926:	2300      	movs	r3, #0
 800c928:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c92a:	79fb      	ldrb	r3, [r7, #7]
 800c92c:	2b03      	cmp	r3, #3
 800c92e:	d817      	bhi.n	800c960 <USBD_Get_USB_Status+0x44>
 800c930:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <USBD_Get_USB_Status+0x1c>)
 800c932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c936:	bf00      	nop
 800c938:	0800c949 	.word	0x0800c949
 800c93c:	0800c94f 	.word	0x0800c94f
 800c940:	0800c955 	.word	0x0800c955
 800c944:	0800c95b 	.word	0x0800c95b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	73fb      	strb	r3, [r7, #15]
    break;
 800c94c:	e00b      	b.n	800c966 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c94e:	2302      	movs	r3, #2
 800c950:	73fb      	strb	r3, [r7, #15]
    break;
 800c952:	e008      	b.n	800c966 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c954:	2301      	movs	r3, #1
 800c956:	73fb      	strb	r3, [r7, #15]
    break;
 800c958:	e005      	b.n	800c966 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c95a:	2302      	movs	r3, #2
 800c95c:	73fb      	strb	r3, [r7, #15]
    break;
 800c95e:	e002      	b.n	800c966 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c960:	2302      	movs	r3, #2
 800c962:	73fb      	strb	r3, [r7, #15]
    break;
 800c964:	bf00      	nop
  }
  return usb_status;
 800c966:	7bfb      	ldrb	r3, [r7, #15]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3714      	adds	r7, #20
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bc80      	pop	{r7}
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop

0800c974 <__libc_init_array>:
 800c974:	b570      	push	{r4, r5, r6, lr}
 800c976:	2600      	movs	r6, #0
 800c978:	4d0c      	ldr	r5, [pc, #48]	; (800c9ac <__libc_init_array+0x38>)
 800c97a:	4c0d      	ldr	r4, [pc, #52]	; (800c9b0 <__libc_init_array+0x3c>)
 800c97c:	1b64      	subs	r4, r4, r5
 800c97e:	10a4      	asrs	r4, r4, #2
 800c980:	42a6      	cmp	r6, r4
 800c982:	d109      	bne.n	800c998 <__libc_init_array+0x24>
 800c984:	f000 f830 	bl	800c9e8 <_init>
 800c988:	2600      	movs	r6, #0
 800c98a:	4d0a      	ldr	r5, [pc, #40]	; (800c9b4 <__libc_init_array+0x40>)
 800c98c:	4c0a      	ldr	r4, [pc, #40]	; (800c9b8 <__libc_init_array+0x44>)
 800c98e:	1b64      	subs	r4, r4, r5
 800c990:	10a4      	asrs	r4, r4, #2
 800c992:	42a6      	cmp	r6, r4
 800c994:	d105      	bne.n	800c9a2 <__libc_init_array+0x2e>
 800c996:	bd70      	pop	{r4, r5, r6, pc}
 800c998:	f855 3b04 	ldr.w	r3, [r5], #4
 800c99c:	4798      	blx	r3
 800c99e:	3601      	adds	r6, #1
 800c9a0:	e7ee      	b.n	800c980 <__libc_init_array+0xc>
 800c9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a6:	4798      	blx	r3
 800c9a8:	3601      	adds	r6, #1
 800c9aa:	e7f2      	b.n	800c992 <__libc_init_array+0x1e>
 800c9ac:	0800ca7c 	.word	0x0800ca7c
 800c9b0:	0800ca7c 	.word	0x0800ca7c
 800c9b4:	0800ca7c 	.word	0x0800ca7c
 800c9b8:	0800ca80 	.word	0x0800ca80

0800c9bc <memcpy>:
 800c9bc:	440a      	add	r2, r1
 800c9be:	4291      	cmp	r1, r2
 800c9c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9c4:	d100      	bne.n	800c9c8 <memcpy+0xc>
 800c9c6:	4770      	bx	lr
 800c9c8:	b510      	push	{r4, lr}
 800c9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9ce:	4291      	cmp	r1, r2
 800c9d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9d4:	d1f9      	bne.n	800c9ca <memcpy+0xe>
 800c9d6:	bd10      	pop	{r4, pc}

0800c9d8 <memset>:
 800c9d8:	4603      	mov	r3, r0
 800c9da:	4402      	add	r2, r0
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d100      	bne.n	800c9e2 <memset+0xa>
 800c9e0:	4770      	bx	lr
 800c9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9e6:	e7f9      	b.n	800c9dc <memset+0x4>

0800c9e8 <_init>:
 800c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ea:	bf00      	nop
 800c9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ee:	bc08      	pop	{r3}
 800c9f0:	469e      	mov	lr, r3
 800c9f2:	4770      	bx	lr

0800c9f4 <_fini>:
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	bf00      	nop
 800c9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9fa:	bc08      	pop	{r3}
 800c9fc:	469e      	mov	lr, r3
 800c9fe:	4770      	bx	lr
