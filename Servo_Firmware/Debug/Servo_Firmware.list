
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b944  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bacc  0800bacc  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bacc  0800bacc  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bacc  0800bacc  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bacc  0800bacc  0001bacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bad0  0800bad0  0001bad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800bad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c0  200001a8  0800bc78  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001668  0800bc78  00021668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edd0  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e5b  00000000  00000000  0003ef9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00043df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  00045360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1c1  00000000  00000000  00046678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d431  00000000  00000000  00063839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a53  00000000  00000000  00080c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001146bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005558  00000000  00000000  00114710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ba38 	.word	0x0800ba38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	0800ba38 	.word	0x0800ba38

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <Potentiometer_Ready>:
extern uint8_t usb_rq;
extern uint8_t usb_rq_sett_revert_flash;
extern uint8_t usb_rq_stat_motor;
extern uint8_t usb_rq_stat_phold;

void Potentiometer_Ready(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	pid_input = potentiometer_position;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <Potentiometer_Ready+0x80>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1e      	ldr	r2, [pc, #120]	; (80007c4 <Potentiometer_Ready+0x84>)
 800074a:	6013      	str	r3, [r2, #0]
	if(!pid_running){
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <Potentiometer_Ready+0x88>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d133      	bne.n	80007bc <Potentiometer_Ready+0x7c>
		if(motor_running){
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <Potentiometer_Ready+0x8c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02f      	beq.n	80007bc <Potentiometer_Ready+0x7c>
			if((potentiometer_position <= potentiometer_min) && (Motor_Get() < 0)){
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <Potentiometer_Ready+0x90>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdad 	bl	80002c0 <__aeabi_i2f>
 8000766:	4602      	mov	r2, r0
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <Potentiometer_Ready+0x80>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	4610      	mov	r0, r2
 8000770:	f7ff ffac 	bl	80006cc <__aeabi_fcmpge>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d008      	beq.n	800078c <Potentiometer_Ready+0x4c>
 800077a:	f000 fb0f 	bl	8000d9c <Motor_Get>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	da03      	bge.n	800078c <Potentiometer_Ready+0x4c>
				Motor_Set(0);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 faa1 	bl	8000ccc <Motor_Set>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 800078a:	e017      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <Potentiometer_Ready+0x94>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd95 	bl	80002c0 <__aeabi_i2f>
 8000796:	4602      	mov	r2, r0
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <Potentiometer_Ready+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f7ff ff8a 	bl	80006b8 <__aeabi_fcmple>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <Potentiometer_Ready+0x6c>
}
 80007aa:	e007      	b.n	80007bc <Potentiometer_Ready+0x7c>
			}else if((potentiometer_position >= potentiometer_max) && (Motor_Get() > 0)){
 80007ac:	f000 faf6 	bl	8000d9c <Motor_Get>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	dd02      	ble.n	80007bc <Potentiometer_Ready+0x7c>
				Motor_Set(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fa88 	bl	8000ccc <Motor_Set>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001f4 	.word	0x200001f4
 80007c4:	200001dc 	.word	0x200001dc
 80007c8:	200001d8 	.word	0x200001d8
 80007cc:	200001c8 	.word	0x200001c8
 80007d0:	20000422 	.word	0x20000422
 80007d4:	20000420 	.word	0x20000420

080007d8 <PID_Ready>:
void PID_Ready(float output){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff87 	bl	80006f4 <__aeabi_f2iz>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fa6e 	bl	8000ccc <Motor_Set>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <App_Init>:

void App_Init(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	Settings_Read();
 80007fc:	f000 fdd2 	bl	80013a4 <Settings_Read>
	USB_Init();
 8000800:	f001 fb1c 	bl	8001e3c <USB_Init>
	Signal_Init();
 8000804:	f001 fac4 	bl	8001d90 <Signal_Init>
	Potentiometer_Init();
 8000808:	f000 fdb4 	bl	8001374 <Potentiometer_Init>
	Motor_Init();
 800080c:	f000 fb04 	bl	8000e18 <Motor_Init>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <App_Loop>:
void App_Loop(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	switch(usb_rq){
 8000818:	4b3c      	ldr	r3, [pc, #240]	; (800090c <App_Loop+0xf8>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d002      	beq.n	8000826 <App_Loop+0x12>
 8000820:	2b02      	cmp	r3, #2
 8000822:	d019      	beq.n	8000858 <App_Loop+0x44>
 8000824:	e06e      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_CONF:
			if(usb_rq_sett_revert_flash == USB_SETTINGS_REVERT){
 8000826:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <App_Loop+0xfc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <App_Loop+0x26>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 800082e:	4b38      	ldr	r3, [pc, #224]	; (8000910 <App_Loop+0xfc>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				//Read from flash
				Settings_Read();
 8000834:	f000 fdb6 	bl	80013a4 <Settings_Read>
 8000838:	e008      	b.n	800084c <App_Loop+0x38>
			}else if(usb_rq_sett_revert_flash == USB_SETTINGS_FLASH){
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <App_Loop+0xfc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d104      	bne.n	800084c <App_Loop+0x38>
				usb_rq_sett_revert_flash = USB_SETTINGS_KEEP;
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <App_Loop+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
				//Write to flash
				Settings_Write();
 8000848:	f001 f890 	bl	800196c <Settings_Write>
			}
			USB_Send_Config();
 800084c:	f001 fb88 	bl	8001f60 <USB_Send_Config>
			usb_rq = USB_RQ_NONE;
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <App_Loop+0xf8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		break;
 8000856:	e055      	b.n	8000904 <App_Loop+0xf0>
		case USB_RQ_STAT:
			if(usb_rq_stat_motor != 0){
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <App_Loop+0x100>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d033      	beq.n	80008c8 <App_Loop+0xb4>
				//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout
				if(usb_rq_stat_motor == 1){//Backward
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <App_Loop+0x100>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d112      	bne.n	800088e <App_Loop+0x7a>
					if(potentiometer_position > potentiometer_min){
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <App_Loop+0x104>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fd27 	bl	80002c0 <__aeabi_i2f>
 8000872:	4602      	mov	r2, r0
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <App_Loop+0x108>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f7ff ff12 	bl	80006a4 <__aeabi_fcmplt>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(-1000);
 8000886:	4826      	ldr	r0, [pc, #152]	; (8000920 <App_Loop+0x10c>)
 8000888:	f000 fa20 	bl	8000ccc <Motor_Set>
 800088c:	e016      	b.n	80008bc <App_Loop+0xa8>
					}
				}else if(usb_rq_stat_motor == 2){//Forward
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <App_Loop+0x100>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d112      	bne.n	80008bc <App_Loop+0xa8>
					if(potentiometer_position < potentiometer_max){
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <App_Loop+0x110>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd10 	bl	80002c0 <__aeabi_i2f>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b1e      	ldr	r3, [pc, #120]	; (800091c <App_Loop+0x108>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4619      	mov	r1, r3
 80008a8:	4610      	mov	r0, r2
 80008aa:	f7ff ff19 	bl	80006e0 <__aeabi_fcmpgt>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <App_Loop+0xa8>
						Motor_Set(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f000 fa08 	bl	8000ccc <Motor_Set>
					}
				}
				motor_systick = 0;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <App_Loop+0x114>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
				usb_rq_stat_motor = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <App_Loop+0x100>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
			}
			if(usb_rq_stat_phold == 1){
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <App_Loop+0x118>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d109      	bne.n	80008e4 <App_Loop+0xd0>
				usb_rq_stat_phold = 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <App_Loop+0x118>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
				if(!pid_running){//Run pid with signal timeout
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <App_Loop+0x11c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10c      	bne.n	80008f8 <App_Loop+0xe4>
					PID_Start();
 80008de:	f000 fcd5 	bl	800128c <PID_Start>
 80008e2:	e009      	b.n	80008f8 <App_Loop+0xe4>
				}
			}else if(signal_ignore && pid_running){
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <App_Loop+0x120>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <App_Loop+0xe4>
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <App_Loop+0x11c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <App_Loop+0xe4>
				PID_Stop();
 80008f4:	f000 fcec 	bl	80012d0 <PID_Stop>
			}
			USB_Send_Status();
 80008f8:	f001 fd00 	bl	80022fc <USB_Send_Status>
			usb_rq = USB_RQ_NONE;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <App_Loop+0xf8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
		break;
 8000902:	bf00      	nop
	}
	LED_Update();
 8000904:	f000 f982 	bl	8000c0c <LED_Update>
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200001f9 	.word	0x200001f9
 8000910:	200001fa 	.word	0x200001fa
 8000914:	200001fb 	.word	0x200001fb
 8000918:	20000422 	.word	0x20000422
 800091c:	200001f4 	.word	0x200001f4
 8000920:	fffffc18 	.word	0xfffffc18
 8000924:	20000420 	.word	0x20000420
 8000928:	200001c9 	.word	0x200001c9
 800092c:	200001fc 	.word	0x200001fc
 8000930:	200001d8 	.word	0x200001d8
 8000934:	20000468 	.word	0x20000468

08000938 <Flash_Read>:
#include "main.h"
#include "flash.h"

void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000948:	e00b      	b.n	8000962 <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	4413      	add	r3, r2
 8000950:	4619      	mov	r1, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	4413      	add	r3, r2
 8000958:	780a      	ldrb	r2, [r1, #0]
 800095a:	701a      	strb	r2, [r3, #0]
		i++;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
	while(i != length){
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d1ef      	bne.n	800094a <Flash_Read+0x12>
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <Flash_Write>:
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8000976:	b580      	push	{r7, lr}
 8000978:	b08c      	sub	sp, #48	; 0x30
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000992:	f003 f801 	bl	8003998 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8000996:	f107 0210 	add.w	r2, r7, #16
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 f8e1 	bl	8003b68 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	089b      	lsrs	r3, r3, #2
 80009aa:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80009be:	e025      	b.n	8000a0c <Flash_Write+0x96>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8)|(uint32_t)data[i+3]);
 80009c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	18d0      	adds	r0, r2, r3
 80009c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	061a      	lsls	r2, r3, #24
 80009d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009d2:	3301      	adds	r3, #1
 80009d4:	68f9      	ldr	r1, [r7, #12]
 80009d6:	440b      	add	r3, r1
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	041b      	lsls	r3, r3, #16
 80009dc:	431a      	orrs	r2, r3
 80009de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009e0:	3302      	adds	r3, #2
 80009e2:	68f9      	ldr	r1, [r7, #12]
 80009e4:	440b      	add	r3, r1
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	4313      	orrs	r3, r2
 80009ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80009ee:	3203      	adds	r2, #3
 80009f0:	68f9      	ldr	r1, [r7, #12]
 80009f2:	440a      	add	r2, r1
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	4601      	mov	r1, r0
 8000a00:	2002      	movs	r0, #2
 8000a02:	f002 ff59 	bl	80038b8 <HAL_FLASH_Program>
		i+=4;
 8000a06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a08:	3304      	adds	r3, #4
 8000a0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 8000a0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d1d4      	bne.n	80009c0 <Flash_Write+0x4a>
	}
	if(lbytes != 0){
 8000a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d03d      	beq.n	8000a98 <Flash_Write+0x122>
		uint32_t wdata = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 8000a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d114      	bne.n	8000a50 <Flash_Write+0xda>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i+2]<<8);
 8000a26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	061a      	lsls	r2, r3, #24
 8000a30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a32:	3301      	adds	r3, #1
 8000a34:	68f9      	ldr	r1, [r7, #12]
 8000a36:	440b      	add	r3, r1
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	041b      	lsls	r3, r3, #16
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a40:	3302      	adds	r3, #2
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	440b      	add	r3, r1
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a4e:	e019      	b.n	8000a84 <Flash_Write+0x10e>
		}
		else if(lbytes == 2){
 8000a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d10d      	bne.n	8000a72 <Flash_Write+0xfc>
			wdata = ((uint32_t)data[i]<<24)|((uint32_t)data[i+1]<<16);
 8000a56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	061a      	lsls	r2, r3, #24
 8000a60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a62:	3301      	adds	r3, #1
 8000a64:	68f9      	ldr	r1, [r7, #12]
 8000a66:	440b      	add	r3, r1
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	041b      	lsls	r3, r3, #16
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	e008      	b.n	8000a84 <Flash_Write+0x10e>
		}
		else if(lbytes == 1){
 8000a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d105      	bne.n	8000a84 <Flash_Write+0x10e>
			wdata = ((uint32_t)data[i]<<24);
 8000a78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	061b      	lsls	r3, r3, #24
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8000a84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	18d1      	adds	r1, r2, r3
 8000a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	2002      	movs	r0, #2
 8000a94:	f002 ff10 	bl	80038b8 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 8000a98:	f002 ffa4 	bl	80039e4 <HAL_FLASH_Lock>
}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	; 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <General_Copy_32_Bit>:
#include "main.h"
#include "general.h"

void General_Copy_32_Bit(uint32_t address_to, uint32_t address_from){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000ab2:	e00b      	b.n	8000acc <General_Copy_32_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000ab4:	7bfa      	ldrb	r2, [r7, #15]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4619      	mov	r1, r3
 8000abc:	7bfa      	ldrb	r2, [r7, #15]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	780a      	ldrb	r2, [r1, #0]
 8000ac4:	701a      	strb	r2, [r3, #0]
		i++;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
	while(i != 4){
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d1f0      	bne.n	8000ab4 <General_Copy_32_Bit+0x10>
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <General_Copy_16_Bit>:
void General_Copy_16_Bit(uint32_t address_to, uint32_t address_from){
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000aec:	e00b      	b.n	8000b06 <General_Copy_16_Bit+0x28>
		*(uint8_t *)(address_to + i) = *(uint8_t *)(address_from + i);
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	7bfa      	ldrb	r2, [r7, #15]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	780a      	ldrb	r2, [r1, #0]
 8000afe:	701a      	strb	r2, [r3, #0]
		i++;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	3301      	adds	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
	while(i != 2){
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d1f0      	bne.n	8000aee <General_Copy_16_Bit+0x10>
	}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <HAL_ADC_ConvCpltCallback>:
#include "motor.h"
#include "signal.h"
#include "usb.h"
#include "led.h"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 8000b2a:	f000 fbe1 	bl	80012f0 <Potentiometer_ADC_Interrupt>
    }
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40012400 	.word	0x40012400

08000b3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d101      	bne.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x16>
		PID_Timer_Interrupt();
 8000b4e:	f000 f987 	bl	8000e60 <PID_Timer_Interrupt>
	}
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40000400 	.word	0x40000400

08000b60 <Interrupts_SysTick>:

void Interrupts_SysTick(){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	Motor_SysTick_Interrupt();
 8000b64:	f000 f890 	bl	8000c88 <Motor_SysTick_Interrupt>
	Signal_SysTick_Interrupt();
 8000b68:	f000 ffe2 	bl	8001b30 <Signal_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8000b6c:	f000 f818 	bl	8000ba0 <LED_SysTick_Interrupt>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIGNAL_Pin){
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d102      	bne.n	8000b8a <HAL_GPIO_EXTI_Callback+0x16>
		Signal_Interrupt();
 8000b84:	f001 f814 	bl	8001bb0 <Signal_Interrupt>
	}else if(GPIO_Pin == USB_DET_Pin){
		USB_Det_Interrupt();
	}
}
 8000b88:	e005      	b.n	8000b96 <HAL_GPIO_EXTI_Callback+0x22>
	}else if(GPIO_Pin == USB_DET_Pin){
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b90:	d101      	bne.n	8000b96 <HAL_GPIO_EXTI_Callback+0x22>
		USB_Det_Interrupt();
 8000b92:	f001 f939 	bl	8001e08 <USB_Det_Interrupt>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <LED_SysTick_Interrupt>:

uint8_t led_mode = 0;
uint8_t led_position_changed = 0;
uint8_t led_systick = 0;

void LED_SysTick_Interrupt(){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	if(led_mode == LED_MODE_POSITION_CHANGE){
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <LED_SysTick_Interrupt+0x30>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d10f      	bne.n	8000bcc <LED_SysTick_Interrupt+0x2c>
		led_systick++;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <LED_SysTick_Interrupt+0x34>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <LED_SysTick_Interrupt+0x34>)
 8000bb6:	701a      	strb	r2, [r3, #0]
		if(led_systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <LED_SysTick_Interrupt+0x34>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b13      	cmp	r3, #19
 8000bbe:	d905      	bls.n	8000bcc <LED_SysTick_Interrupt+0x2c>
			LED_Set(OFF);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 f809 	bl	8000bd8 <LED_Set>
			led_systick = 0;
 8000bc6:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <LED_SysTick_Interrupt+0x34>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200001c4 	.word	0x200001c4
 8000bd4:	200001c6 	.word	0x200001c6

08000bd8 <LED_Set>:

void LED_Set(uint8_t state){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	if(state == ON){
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d105      	bne.n	8000bf4 <LED_Set+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <LED_Set+0x30>)
 8000bee:	f003 f9fe 	bl	8003fee <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	}
}
 8000bf2:	e004      	b.n	8000bfe <LED_Set+0x26>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <LED_Set+0x30>)
 8000bfa:	f003 f9f8 	bl	8003fee <HAL_GPIO_WritePin>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40010800 	.word	0x40010800

08000c0c <LED_Update>:
void LED_Update(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	switch(led_mode){
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <LED_Update+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d82a      	bhi.n	8000c6e <LED_Update+0x62>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <LED_Update+0x14>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c39 	.word	0x08000c39
 8000c28:	08000c41 	.word	0x08000c41
 8000c2c:	08000c59 	.word	0x08000c59
		case LED_MODE_OFF:
			LED_Set(OFF);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff ffd1 	bl	8000bd8 <LED_Set>
		break;
 8000c36:	e01a      	b.n	8000c6e <LED_Update+0x62>
		case LED_MODE_POWER:
			LED_Set(ON);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff ffcd 	bl	8000bd8 <LED_Set>
		break;
 8000c3e:	e016      	b.n	8000c6e <LED_Update+0x62>
		case LED_MODE_SIGNAL:
			if(pid_running){
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <LED_Update+0x70>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <LED_Update+0x44>
				LED_Set(ON);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ffc5 	bl	8000bd8 <LED_Set>
			}else{
				LED_Set(OFF);
			}
		break;
 8000c4e:	e00e      	b.n	8000c6e <LED_Update+0x62>
				LED_Set(OFF);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ffc1 	bl	8000bd8 <LED_Set>
		break;
 8000c56:	e00a      	b.n	8000c6e <LED_Update+0x62>
		case LED_MODE_POSITION_CHANGE:
			if(led_position_changed){
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <LED_Update+0x74>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <LED_Update+0x60>
				led_systick = 0;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <LED_Update+0x78>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
				LED_Set(ON);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff ffb6 	bl	8000bd8 <LED_Set>
			}
		break;
 8000c6c:	bf00      	nop
	}
	led_position_changed = 0;
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <LED_Update+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200001c4 	.word	0x200001c4
 8000c7c:	200001d8 	.word	0x200001d8
 8000c80:	200001c5 	.word	0x200001c5
 8000c84:	200001c6 	.word	0x200001c6

08000c88 <Motor_SysTick_Interrupt>:
uint8_t motor_invert = MOTOR_NORMAL;
uint16_t motor_max_power = 1000;
uint8_t motor_running = 0;
uint8_t motor_systick = 0;

void Motor_SysTick_Interrupt(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	if(!pid_running){
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <Motor_SysTick_Interrupt+0x38>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d113      	bne.n	8000cbc <Motor_SysTick_Interrupt+0x34>
		if(motor_running){
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <Motor_SysTick_Interrupt+0x3c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00f      	beq.n	8000cbc <Motor_SysTick_Interrupt+0x34>
			motor_systick++;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <Motor_SysTick_Interrupt+0x40>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <Motor_SysTick_Interrupt+0x40>)
 8000ca6:	701a      	strb	r2, [r3, #0]
			if(motor_systick == MOTOR_USB_TEST_TIMEOUT_MS){
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <Motor_SysTick_Interrupt+0x40>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b32      	cmp	r3, #50	; 0x32
 8000cae:	d105      	bne.n	8000cbc <Motor_SysTick_Interrupt+0x34>
				Motor_Set(0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f80b 	bl	8000ccc <Motor_Set>
				motor_systick = 0;
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <Motor_SysTick_Interrupt+0x40>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200001d8 	.word	0x200001d8
 8000cc4:	200001c8 	.word	0x200001c8
 8000cc8:	200001c9 	.word	0x200001c9

08000ccc <Motor_Set>:

void Motor_Set(int16_t strength){//-1000 0 1000 Strength
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
	if(motor_invert == MOTOR_INVERT){
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <Motor_Set+0xc0>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d103      	bne.n	8000ce6 <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	425b      	negs	r3, r3
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	80fb      	strh	r3, [r7, #6]
	}

	if(strength == 0){
 8000ce6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d110      	bne.n	8000d10 <Motor_Set+0x44>
		TIM2 -> CCR1 = 1000;
 8000cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 0;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <Motor_Set+0xc4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
		motor_systick = 0;
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <Motor_Set+0xc8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
		TIM2 -> CCR2 = 1000;
		motor_running = 1;
	}
}
 8000d0e:	e038      	b.n	8000d82 <Motor_Set+0xb6>
	}else if(strength < 0){
 8000d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da18      	bge.n	8000d4a <Motor_Set+0x7e>
		TIM2 -> CCR1 = 1000;
 8000d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000 + (strength / (1000 / motor_max_power));
 8000d22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <Motor_Set+0xcc>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d30:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d38:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <Motor_Set+0xc4>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
}
 8000d48:	e01b      	b.n	8000d82 <Motor_Set+0xb6>
	}else if(strength > 0){
 8000d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	dd17      	ble.n	8000d82 <Motor_Set+0xb6>
		TIM2 -> CCR1 = 1000 - (strength / (1000 / motor_max_power));
 8000d52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <Motor_Set+0xcc>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d60:	fb93 f3f1 	sdiv	r3, r3, r1
 8000d64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d68:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8000d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2 -> CCR2 = 1000;
 8000d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
		motor_running = 1;
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <Motor_Set+0xc4>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200001c7 	.word	0x200001c7
 8000d90:	200001c8 	.word	0x200001c8
 8000d94:	200001c9 	.word	0x200001c9
 8000d98:	20000000 	.word	0x20000000

08000d9c <Motor_Get>:
int16_t Motor_Get(){
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	if(TIM2 -> CCR1 != 1000){
 8000da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000daa:	d013      	beq.n	8000dd4 <Motor_Get+0x38>
		return (1000 - (int16_t)(TIM2 -> CCR1)) * (1000 / motor_max_power);
 8000dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <Motor_Get+0x78>)
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc4:	fb92 f2f1 	sdiv	r2, r2, r1
 8000dc8:	b292      	uxth	r2, r2
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	e01a      	b.n	8000e0a <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 8000dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dde:	d013      	beq.n	8000e08 <Motor_Get+0x6c>
		return ((int16_t)(TIM2 -> CCR2) - 1000) * (1000 / motor_max_power);
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <Motor_Get+0x78>)
 8000df0:	8812      	ldrh	r2, [r2, #0]
 8000df2:	4611      	mov	r1, r2
 8000df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df8:	fb92 f2f1 	sdiv	r2, r2, r1
 8000dfc:	b292      	uxth	r2, r2
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	e000      	b.n	8000e0a <Motor_Get+0x6e>
	}
	return 0;
 8000e08:	2300      	movs	r3, #0
} 
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000000 	.word	0x20000000

08000e18 <Motor_Init>:
void Motor_Init(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <Motor_Init+0x18>)
 8000e20:	f005 fcce 	bl	80067c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e24:	2104      	movs	r1, #4
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <Motor_Init+0x18>)
 8000e28:	f005 fcca 	bl	80067c0 <HAL_TIM_PWM_Start>
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000678 	.word	0x20000678

08000e34 <PID_Timer_Stop>:
float pid_setpoint = 2047;
//Runtime variables
float pid_last_input = 0;
float pid_output_sum = 0;

void PID_Timer_Stop(){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <PID_Timer_Stop+0x10>)
 8000e3a:	f005 fc3b 	bl	80066b4 <HAL_TIM_Base_Stop_IT>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000600 	.word	0x20000600

08000e48 <PID_Timer_Restart>:
void PID_Timer_Restart(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <PID_Timer_Restart+0x14>)
 8000e4e:	f005 fc31 	bl	80066b4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000e52:	4802      	ldr	r0, [pc, #8]	; (8000e5c <PID_Timer_Restart+0x14>)
 8000e54:	f005 fbdc 	bl	8006610 <HAL_TIM_Base_Start_IT>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000600 	.word	0x20000600

08000e60 <PID_Timer_Interrupt>:
void PID_Timer_Interrupt(){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	PID_Compute();
 8000e64:	f000 f838 	bl	8000ed8 <PID_Compute>
	PID_Ready(pid_output);
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <PID_Timer_Interrupt+0x1c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fcb3 	bl	80007d8 <PID_Ready>
	PID_Timer_Restart();
 8000e72:	f7ff ffe9 	bl	8000e48 <PID_Timer_Restart>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001e0 	.word	0x200001e0

08000e80 <PID_Get_Sampling_Time>:

uint16_t PID_Get_Sampling_Time(){
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <PID_Get_Sampling_Time+0x1c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <PID_Get_Sampling_Time+0x20>)
 8000e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e90:	095b      	lsrs	r3, r3, #5
 8000e92:	b29b      	uxth	r3, r3
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000600 	.word	0x20000600
 8000ea0:	51eb851f 	.word	0x51eb851f

08000ea4 <PID_Set_Sampling_Time>:
void PID_Set_Sampling_Time(uint16_t ms){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2264      	movs	r2, #100	; 0x64
 8000eb2:	fb02 f203 	mul.w	r2, r2, r3
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <PID_Set_Sampling_Time+0x30>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	2264      	movs	r2, #100	; 0x64
 8000ec0:	fb02 f303 	mul.w	r3, r2, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <PID_Set_Sampling_Time+0x30>)
 8000ec8:	60da      	str	r2, [r3, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	20000600 	.word	0x20000600

08000ed8 <PID_Compute>:
void PID_Compute(){
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
	float input = pid_input;
 8000ede:	4b94      	ldr	r3, [pc, #592]	; (8001130 <PID_Compute+0x258>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60bb      	str	r3, [r7, #8]
	float error = pid_setpoint - input;
 8000ee4:	4b93      	ldr	r3, [pc, #588]	; (8001134 <PID_Compute+0x25c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff f932 	bl	8000154 <__aeabi_fsub>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	607b      	str	r3, [r7, #4]
	float input_d = (input - pid_last_input);
 8000ef4:	4b90      	ldr	r3, [pc, #576]	; (8001138 <PID_Compute+0x260>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	68b8      	ldr	r0, [r7, #8]
 8000efc:	f7ff f92a 	bl	8000154 <__aeabi_fsub>
 8000f00:	4603      	mov	r3, r0
 8000f02:	603b      	str	r3, [r7, #0]
	float output = 0;
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]

	if(error >= pid_split_1){
 8000f0a:	4b8c      	ldr	r3, [pc, #560]	; (800113c <PID_Compute+0x264>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9d6 	bl	80002c0 <__aeabi_i2f>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4619      	mov	r1, r3
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fbd7 	bl	80006cc <__aeabi_fcmpge>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d074      	beq.n	800100e <PID_Compute+0x136>
		pid_output_sum += pid_ki_1 * error;
 8000f24:	4b86      	ldr	r3, [pc, #536]	; (8001140 <PID_Compute+0x268>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fa1c 	bl	8000368 <__aeabi_fmul>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b83      	ldr	r3, [pc, #524]	; (8001144 <PID_Compute+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	f7ff f90c 	bl	8000158 <__addsf3>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b7f      	ldr	r3, [pc, #508]	; (8001144 <PID_Compute+0x26c>)
 8000f46:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8000f48:	4b7f      	ldr	r3, [pc, #508]	; (8001148 <PID_Compute+0x270>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d110      	bne.n	8000f72 <PID_Compute+0x9a>
			pid_output_sum -= pid_kp_1 * input_d;
 8000f50:	4b7c      	ldr	r3, [pc, #496]	; (8001144 <PID_Compute+0x26c>)
 8000f52:	681c      	ldr	r4, [r3, #0]
 8000f54:	4b7d      	ldr	r3, [pc, #500]	; (800114c <PID_Compute+0x274>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa04 	bl	8000368 <__aeabi_fmul>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4619      	mov	r1, r3
 8000f64:	4620      	mov	r0, r4
 8000f66:	f7ff f8f5 	bl	8000154 <__aeabi_fsub>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b75      	ldr	r3, [pc, #468]	; (8001144 <PID_Compute+0x26c>)
 8000f70:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8000f72:	4b74      	ldr	r3, [pc, #464]	; (8001144 <PID_Compute+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4976      	ldr	r1, [pc, #472]	; (8001150 <PID_Compute+0x278>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fbb1 	bl	80006e0 <__aeabi_fcmpgt>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <PID_Compute+0xb4>
			pid_output_sum = 1000.0f;
 8000f84:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <PID_Compute+0x26c>)
 8000f86:	4a72      	ldr	r2, [pc, #456]	; (8001150 <PID_Compute+0x278>)
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e00b      	b.n	8000fa4 <PID_Compute+0xcc>
		}else if(pid_output_sum < -1000.0f){
 8000f8c:	4b6d      	ldr	r3, [pc, #436]	; (8001144 <PID_Compute+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4970      	ldr	r1, [pc, #448]	; (8001154 <PID_Compute+0x27c>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fb86 	bl	80006a4 <__aeabi_fcmplt>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <PID_Compute+0xcc>
			pid_output_sum = -1000.0f;
 8000f9e:	4b69      	ldr	r3, [pc, #420]	; (8001144 <PID_Compute+0x26c>)
 8000fa0:	4a6c      	ldr	r2, [pc, #432]	; (8001154 <PID_Compute+0x27c>)
 8000fa2:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 8000fa4:	4b68      	ldr	r3, [pc, #416]	; (8001148 <PID_Compute+0x270>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d107      	bne.n	8000fbc <PID_Compute+0xe4>
			output = pid_kp_1 * error;
 8000fac:	4b67      	ldr	r3, [pc, #412]	; (800114c <PID_Compute+0x274>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff f9d8 	bl	8000368 <__aeabi_fmul>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_1 * input_d;
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <PID_Compute+0x26c>)
 8000fbe:	681c      	ldr	r4, [r3, #0]
 8000fc0:	4b65      	ldr	r3, [pc, #404]	; (8001158 <PID_Compute+0x280>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6839      	ldr	r1, [r7, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f9ce 	bl	8000368 <__aeabi_fmul>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff f8bf 	bl	8000154 <__aeabi_fsub>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff f8bc 	bl	8000158 <__addsf3>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8000fe4:	495a      	ldr	r1, [pc, #360]	; (8001150 <PID_Compute+0x278>)
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fb7a 	bl	80006e0 <__aeabi_fcmpgt>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <PID_Compute+0x120>
			output = 1000.0f;
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <PID_Compute+0x278>)
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e12c      	b.n	8001252 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8000ff8:	4956      	ldr	r1, [pc, #344]	; (8001154 <PID_Compute+0x27c>)
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fb52 	bl	80006a4 <__aeabi_fcmplt>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8125 	beq.w	8001252 <PID_Compute+0x37a>
			output = -1000.0f;
 8001008:	4b52      	ldr	r3, [pc, #328]	; (8001154 <PID_Compute+0x27c>)
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e121      	b.n	8001252 <PID_Compute+0x37a>
		}
	}else if((error < pid_split_1) && (error >= pid_split_2)){
 800100e:	4b4b      	ldr	r3, [pc, #300]	; (800113c <PID_Compute+0x264>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f954 	bl	80002c0 <__aeabi_i2f>
 8001018:	4603      	mov	r3, r0
 800101a:	4619      	mov	r1, r3
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fb41 	bl	80006a4 <__aeabi_fcmplt>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80a1 	beq.w	800116c <PID_Compute+0x294>
 800102a:	4b4c      	ldr	r3, [pc, #304]	; (800115c <PID_Compute+0x284>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff f946 	bl	80002c0 <__aeabi_i2f>
 8001034:	4603      	mov	r3, r0
 8001036:	4619      	mov	r1, r3
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fb47 	bl	80006cc <__aeabi_fcmpge>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 8093 	beq.w	800116c <PID_Compute+0x294>
		pid_output_sum += pid_ki_2 * error;
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <PID_Compute+0x288>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff f98b 	bl	8000368 <__aeabi_fmul>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <PID_Compute+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	4610      	mov	r0, r2
 800105e:	f7ff f87b 	bl	8000158 <__addsf3>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b37      	ldr	r3, [pc, #220]	; (8001144 <PID_Compute+0x26c>)
 8001068:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <PID_Compute+0x270>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d110      	bne.n	8001094 <PID_Compute+0x1bc>
			pid_output_sum -= pid_kp_2 * input_d;
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <PID_Compute+0x26c>)
 8001074:	681c      	ldr	r4, [r3, #0]
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <PID_Compute+0x28c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f973 	bl	8000368 <__aeabi_fmul>
 8001082:	4603      	mov	r3, r0
 8001084:	4619      	mov	r1, r3
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff f864 	bl	8000154 <__aeabi_fsub>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <PID_Compute+0x26c>)
 8001092:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <PID_Compute+0x26c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	492d      	ldr	r1, [pc, #180]	; (8001150 <PID_Compute+0x278>)
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fb20 	bl	80006e0 <__aeabi_fcmpgt>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <PID_Compute+0x1d6>
			pid_output_sum = 1000.0f;
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <PID_Compute+0x26c>)
 80010a8:	4a29      	ldr	r2, [pc, #164]	; (8001150 <PID_Compute+0x278>)
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e00b      	b.n	80010c6 <PID_Compute+0x1ee>
		}else if(pid_output_sum < -1000.0f){
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <PID_Compute+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4928      	ldr	r1, [pc, #160]	; (8001154 <PID_Compute+0x27c>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff faf5 	bl	80006a4 <__aeabi_fcmplt>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <PID_Compute+0x1ee>
			pid_output_sum = -1000.0f;
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <PID_Compute+0x26c>)
 80010c2:	4a24      	ldr	r2, [pc, #144]	; (8001154 <PID_Compute+0x27c>)
 80010c4:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <PID_Compute+0x270>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d107      	bne.n	80010de <PID_Compute+0x206>
			output = pid_kp_2 * error;
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <PID_Compute+0x28c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff f947 	bl	8000368 <__aeabi_fmul>
 80010da:	4603      	mov	r3, r0
 80010dc:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_2 * input_d;
 80010de:	4b19      	ldr	r3, [pc, #100]	; (8001144 <PID_Compute+0x26c>)
 80010e0:	681c      	ldr	r4, [r3, #0]
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <PID_Compute+0x290>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f93d 	bl	8000368 <__aeabi_fmul>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4619      	mov	r1, r3
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff f82e 	bl	8000154 <__aeabi_fsub>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4619      	mov	r1, r3
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff f82b 	bl	8000158 <__addsf3>
 8001102:	4603      	mov	r3, r0
 8001104:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001106:	4912      	ldr	r1, [pc, #72]	; (8001150 <PID_Compute+0x278>)
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff fae9 	bl	80006e0 <__aeabi_fcmpgt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <PID_Compute+0x242>
			output = 1000.0f;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <PID_Compute+0x278>)
 8001116:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 8001118:	e09b      	b.n	8001252 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 800111a:	490e      	ldr	r1, [pc, #56]	; (8001154 <PID_Compute+0x27c>)
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff fac1 	bl	80006a4 <__aeabi_fcmplt>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d100      	bne.n	800112a <PID_Compute+0x252>
		if(output > 1000.0f){
 8001128:	e093      	b.n	8001252 <PID_Compute+0x37a>
			output = -1000.0f;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <PID_Compute+0x27c>)
 800112c:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800112e:	e090      	b.n	8001252 <PID_Compute+0x37a>
 8001130:	200001dc 	.word	0x200001dc
 8001134:	20000024 	.word	0x20000024
 8001138:	200001e4 	.word	0x200001e4
 800113c:	2000001c 	.word	0x2000001c
 8001140:	200001cc 	.word	0x200001cc
 8001144:	200001e8 	.word	0x200001e8
 8001148:	20000020 	.word	0x20000020
 800114c:	20000004 	.word	0x20000004
 8001150:	447a0000 	.word	0x447a0000
 8001154:	c47a0000 	.word	0xc47a0000
 8001158:	20000008 	.word	0x20000008
 800115c:	2000001e 	.word	0x2000001e
 8001160:	200001d0 	.word	0x200001d0
 8001164:	2000000c 	.word	0x2000000c
 8001168:	20000010 	.word	0x20000010
		}
	}else{
		pid_output_sum += pid_ki_3 * error;
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <PID_Compute+0x390>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f8f8 	bl	8000368 <__aeabi_fmul>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b3b      	ldr	r3, [pc, #236]	; (800126c <PID_Compute+0x394>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f7fe ffe8 	bl	8000158 <__addsf3>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <PID_Compute+0x394>)
 800118e:	601a      	str	r2, [r3, #0]
		if(pid_on == PID_ON_M){
 8001190:	4b37      	ldr	r3, [pc, #220]	; (8001270 <PID_Compute+0x398>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d110      	bne.n	80011ba <PID_Compute+0x2e2>
			pid_output_sum -= pid_kp_3 * input_d;
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <PID_Compute+0x394>)
 800119a:	681c      	ldr	r4, [r3, #0]
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <PID_Compute+0x39c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6839      	ldr	r1, [r7, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f8e0 	bl	8000368 <__aeabi_fmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7fe ffd1 	bl	8000154 <__aeabi_fsub>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <PID_Compute+0x394>)
 80011b8:	601a      	str	r2, [r3, #0]
		}

		if(pid_output_sum > 1000.0f){
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <PID_Compute+0x394>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	492e      	ldr	r1, [pc, #184]	; (8001278 <PID_Compute+0x3a0>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fa8d 	bl	80006e0 <__aeabi_fcmpgt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <PID_Compute+0x2fc>
			pid_output_sum = 1000.0f;
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <PID_Compute+0x394>)
 80011ce:	4a2a      	ldr	r2, [pc, #168]	; (8001278 <PID_Compute+0x3a0>)
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e00b      	b.n	80011ec <PID_Compute+0x314>
		}else if(pid_output_sum < -1000.0f){
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <PID_Compute+0x394>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4928      	ldr	r1, [pc, #160]	; (800127c <PID_Compute+0x3a4>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fa62 	bl	80006a4 <__aeabi_fcmplt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <PID_Compute+0x314>
			pid_output_sum = -1000.0f;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <PID_Compute+0x394>)
 80011e8:	4a24      	ldr	r2, [pc, #144]	; (800127c <PID_Compute+0x3a4>)
 80011ea:	601a      	str	r2, [r3, #0]
		}

		if(pid_on == PID_ON_E){
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <PID_Compute+0x398>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d107      	bne.n	8001204 <PID_Compute+0x32c>
			output = pid_kp_3 * error;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <PID_Compute+0x39c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f8b4 	bl	8000368 <__aeabi_fmul>
 8001200:	4603      	mov	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]
		}

		output += pid_output_sum - pid_kd_3 * input_d;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <PID_Compute+0x394>)
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <PID_Compute+0x3a8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6839      	ldr	r1, [r7, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8aa 	bl	8000368 <__aeabi_fmul>
 8001214:	4603      	mov	r3, r0
 8001216:	4619      	mov	r1, r3
 8001218:	4620      	mov	r0, r4
 800121a:	f7fe ff9b 	bl	8000154 <__aeabi_fsub>
 800121e:	4603      	mov	r3, r0
 8001220:	4619      	mov	r1, r3
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7fe ff98 	bl	8000158 <__addsf3>
 8001228:	4603      	mov	r3, r0
 800122a:	60fb      	str	r3, [r7, #12]
		if(output > 1000.0f){
 800122c:	4912      	ldr	r1, [pc, #72]	; (8001278 <PID_Compute+0x3a0>)
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fa56 	bl	80006e0 <__aeabi_fcmpgt>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <PID_Compute+0x368>
			output = 1000.0f;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <PID_Compute+0x3a0>)
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	e008      	b.n	8001252 <PID_Compute+0x37a>
		}
		else if(output < -1000.0f){
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <PID_Compute+0x3a4>)
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f7ff fa2e 	bl	80006a4 <__aeabi_fcmplt>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <PID_Compute+0x37a>
			output = -1000.0f;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <PID_Compute+0x3a4>)
 8001250:	60fb      	str	r3, [r7, #12]
		}
	}

	pid_output = output;
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <PID_Compute+0x3ac>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6013      	str	r3, [r2, #0]
	pid_last_input = input;
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <PID_Compute+0x3b0>)
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	6013      	str	r3, [r2, #0]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bd90      	pop	{r4, r7, pc}
 8001266:	bf00      	nop
 8001268:	200001d4 	.word	0x200001d4
 800126c:	200001e8 	.word	0x200001e8
 8001270:	20000020 	.word	0x20000020
 8001274:	20000014 	.word	0x20000014
 8001278:	447a0000 	.word	0x447a0000
 800127c:	c47a0000 	.word	0xc47a0000
 8001280:	20000018 	.word	0x20000018
 8001284:	200001e0 	.word	0x200001e0
 8001288:	200001e4 	.word	0x200001e4

0800128c <PID_Start>:
void PID_Start(){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	pid_last_input = pid_input;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <PID_Start+0x30>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <PID_Start+0x34>)
 8001296:	6013      	str	r3, [r2, #0]
	pid_output_sum = 0;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <PID_Start+0x38>)
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
    PID_Set_Sampling_Time(pid_sampling_time);
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <PID_Start+0x3c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fdfc 	bl	8000ea4 <PID_Set_Sampling_Time>
	PID_Timer_Restart();
 80012ac:	f7ff fdcc 	bl	8000e48 <PID_Timer_Restart>
	pid_running = 1;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <PID_Start+0x40>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200001dc 	.word	0x200001dc
 80012c0:	200001e4 	.word	0x200001e4
 80012c4:	200001e8 	.word	0x200001e8
 80012c8:	20000002 	.word	0x20000002
 80012cc:	200001d8 	.word	0x200001d8

080012d0 <PID_Stop>:
void PID_Stop(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	PID_Timer_Stop();
 80012d4:	f7ff fdae 	bl	8000e34 <PID_Timer_Stop>
	PID_Ready(0);
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f7ff fa7c 	bl	80007d8 <PID_Ready>
	pid_running = 0;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <PID_Stop+0x1c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001d8 	.word	0x200001d8

080012f0 <Potentiometer_ADC_Interrupt>:
uint32_t potentiometer_adctmp = 0;
uint16_t potentiometer_adccnt = 0;
uint8_t potentiometer_init_cplt = 0;
float potentiometer_position = 0;

void Potentiometer_ADC_Interrupt(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	potentiometer_adctmp += HAL_ADC_GetValue(&hadc1);
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <Potentiometer_ADC_Interrupt+0x6c>)
 80012f6:	f001 fe61 	bl	8002fbc <HAL_ADC_GetValue>
 80012fa:	4602      	mov	r2, r0
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <Potentiometer_ADC_Interrupt+0x70>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4413      	add	r3, r2
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <Potentiometer_ADC_Interrupt+0x70>)
 8001304:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop_IT(&hadc1);
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <Potentiometer_ADC_Interrupt+0x6c>)
 8001308:	f001 fe24 	bl	8002f54 <HAL_ADC_Stop_IT>
	potentiometer_adccnt++;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <Potentiometer_ADC_Interrupt+0x74>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <Potentiometer_ADC_Interrupt+0x74>)
 8001316:	801a      	strh	r2, [r3, #0]
	if(potentiometer_adccnt == POTENTIOMETER_SAMPLE_CNT){
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <Potentiometer_ADC_Interrupt+0x74>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d115      	bne.n	800134c <Potentiometer_ADC_Interrupt+0x5c>
		potentiometer_position = (float)potentiometer_adctmp/POTENTIOMETER_SAMPLE_CNT;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <Potentiometer_ADC_Interrupt+0x70>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7fe ffc7 	bl	80002b8 <__aeabi_ui2f>
 800132a:	4603      	mov	r3, r0
 800132c:	490e      	ldr	r1, [pc, #56]	; (8001368 <Potentiometer_ADC_Interrupt+0x78>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f8ce 	bl	80004d0 <__aeabi_fdiv>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <Potentiometer_ADC_Interrupt+0x7c>)
 800133a:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 800133c:	f7ff fa00 	bl	8000740 <Potentiometer_Ready>
		potentiometer_adccnt = 0;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <Potentiometer_ADC_Interrupt+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
		potentiometer_adctmp = 0;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <Potentiometer_ADC_Interrupt+0x70>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
	}
	potentiometer_init_cplt = 1;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <Potentiometer_ADC_Interrupt+0x80>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8001352:	4802      	ldr	r0, [pc, #8]	; (800135c <Potentiometer_ADC_Interrupt+0x6c>)
 8001354:	f001 fd48 	bl	8002de8 <HAL_ADC_Start_IT>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000648 	.word	0x20000648
 8001360:	200001ec 	.word	0x200001ec
 8001364:	200001f0 	.word	0x200001f0
 8001368:	42c80000 	.word	0x42c80000
 800136c:	200001f4 	.word	0x200001f4
 8001370:	200001f2 	.word	0x200001f2

08001374 <Potentiometer_Init>:

void Potentiometer_Init(){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001378:	bf00      	nop
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <Potentiometer_Init+0x28>)
 800137c:	f002 f88a 	bl	8003494 <HAL_ADCEx_Calibration_Start>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <Potentiometer_Init+0x28>)
 8001388:	f001 fd2e 	bl	8002de8 <HAL_ADC_Start_IT>
	while(!potentiometer_init_cplt);
 800138c:	bf00      	nop
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <Potentiometer_Init+0x2c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0fb      	beq.n	800138e <Potentiometer_Init+0x1a>
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000648 	.word	0x20000648
 80013a0:	200001f2 	.word	0x200001f2

080013a4 <Settings_Read>:
extern uint16_t pid_split_2;
extern uint8_t pid_sampling_time;

uint8_t settings[SETTINGS_TOTAL_LENGTH];

void Settings_Read(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	//Read
	Flash_Read(&settings[0], SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 80013aa:	2240      	movs	r2, #64	; 0x40
 80013ac:	49ab      	ldr	r1, [pc, #684]	; (800165c <Settings_Read+0x2b8>)
 80013ae:	48ac      	ldr	r0, [pc, #688]	; (8001660 <Settings_Read+0x2bc>)
 80013b0:	f7ff fac2 	bl	8000938 <Flash_Read>
	//Get CRC
	uint32_t crc = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&crc, (uint32_t)&settings[32]);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4aaa      	ldr	r2, [pc, #680]	; (8001664 <Settings_Read+0x2c0>)
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fb70 	bl	8000aa4 <General_Copy_32_Bit>
	//If CRC is correct
	if(HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1) == crc){
 80013c4:	220f      	movs	r2, #15
 80013c6:	49a6      	ldr	r1, [pc, #664]	; (8001660 <Settings_Read+0x2bc>)
 80013c8:	48a7      	ldr	r0, [pc, #668]	; (8001668 <Settings_Read+0x2c4>)
 80013ca:	f002 fa42 	bl	8003852 <HAL_CRC_Calculate>
 80013ce:	4602      	mov	r2, r0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	f040 824a 	bne.w	800186c <Settings_Read+0x4c8>
		//Parse
		General_Copy_16_Bit((uint32_t)&potentiometer_min, (uint32_t)&settings[0]);
 80013d8:	4ba4      	ldr	r3, [pc, #656]	; (800166c <Settings_Read+0x2c8>)
 80013da:	4aa1      	ldr	r2, [pc, #644]	; (8001660 <Settings_Read+0x2bc>)
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fb7d 	bl	8000ade <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&potentiometer_max, (uint32_t)&settings[2]);
 80013e4:	4ba2      	ldr	r3, [pc, #648]	; (8001670 <Settings_Read+0x2cc>)
 80013e6:	4aa3      	ldr	r2, [pc, #652]	; (8001674 <Settings_Read+0x2d0>)
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fb77 	bl	8000ade <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&motor_max_power, (uint32_t)&settings[4]);
 80013f0:	4ba1      	ldr	r3, [pc, #644]	; (8001678 <Settings_Read+0x2d4>)
 80013f2:	4aa2      	ldr	r2, [pc, #648]	; (800167c <Settings_Read+0x2d8>)
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fb71 	bl	8000ade <General_Copy_16_Bit>
		motor_invert = settings[6];
 80013fc:	4b98      	ldr	r3, [pc, #608]	; (8001660 <Settings_Read+0x2bc>)
 80013fe:	799a      	ldrb	r2, [r3, #6]
 8001400:	4b9f      	ldr	r3, [pc, #636]	; (8001680 <Settings_Read+0x2dc>)
 8001402:	701a      	strb	r2, [r3, #0]
		signal_ignore = settings[7];
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <Settings_Read+0x2bc>)
 8001406:	79da      	ldrb	r2, [r3, #7]
 8001408:	4b9e      	ldr	r3, [pc, #632]	; (8001684 <Settings_Read+0x2e0>)
 800140a:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&settings[8]);
 800140c:	4b9e      	ldr	r3, [pc, #632]	; (8001688 <Settings_Read+0x2e4>)
 800140e:	4a9f      	ldr	r2, [pc, #636]	; (800168c <Settings_Read+0x2e8>)
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb46 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&settings[12]);
 8001418:	4b9d      	ldr	r3, [pc, #628]	; (8001690 <Settings_Read+0x2ec>)
 800141a:	4a9e      	ldr	r2, [pc, #632]	; (8001694 <Settings_Read+0x2f0>)
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fb40 	bl	8000aa4 <General_Copy_32_Bit>
		led_mode = settings[16];
 8001424:	4b8e      	ldr	r3, [pc, #568]	; (8001660 <Settings_Read+0x2bc>)
 8001426:	7c1a      	ldrb	r2, [r3, #16]
 8001428:	4b9b      	ldr	r3, [pc, #620]	; (8001698 <Settings_Read+0x2f4>)
 800142a:	701a      	strb	r2, [r3, #0]
		pid_on = settings[17];
 800142c:	4b8c      	ldr	r3, [pc, #560]	; (8001660 <Settings_Read+0x2bc>)
 800142e:	7c5a      	ldrb	r2, [r3, #17]
 8001430:	4b9a      	ldr	r3, [pc, #616]	; (800169c <Settings_Read+0x2f8>)
 8001432:	701a      	strb	r2, [r3, #0]
		General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&settings[18]);
 8001434:	4b9a      	ldr	r3, [pc, #616]	; (80016a0 <Settings_Read+0x2fc>)
 8001436:	4a9b      	ldr	r2, [pc, #620]	; (80016a4 <Settings_Read+0x300>)
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fb32 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&settings[22]);
 8001440:	4b99      	ldr	r3, [pc, #612]	; (80016a8 <Settings_Read+0x304>)
 8001442:	4a9a      	ldr	r2, [pc, #616]	; (80016ac <Settings_Read+0x308>)
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb2c 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&settings[26]);
 800144c:	4b98      	ldr	r3, [pc, #608]	; (80016b0 <Settings_Read+0x30c>)
 800144e:	4a99      	ldr	r2, [pc, #612]	; (80016b4 <Settings_Read+0x310>)
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fb26 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&settings[30]);
 8001458:	4b97      	ldr	r3, [pc, #604]	; (80016b8 <Settings_Read+0x314>)
 800145a:	4a98      	ldr	r2, [pc, #608]	; (80016bc <Settings_Read+0x318>)
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fb20 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&settings[34]);
 8001464:	4b96      	ldr	r3, [pc, #600]	; (80016c0 <Settings_Read+0x31c>)
 8001466:	4a97      	ldr	r2, [pc, #604]	; (80016c4 <Settings_Read+0x320>)
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fb1a 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&settings[38]);
 8001470:	4b95      	ldr	r3, [pc, #596]	; (80016c8 <Settings_Read+0x324>)
 8001472:	4a96      	ldr	r2, [pc, #600]	; (80016cc <Settings_Read+0x328>)
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fb14 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&settings[42]);
 800147c:	4b94      	ldr	r3, [pc, #592]	; (80016d0 <Settings_Read+0x32c>)
 800147e:	4a95      	ldr	r2, [pc, #596]	; (80016d4 <Settings_Read+0x330>)
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fb0e 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&settings[46]);
 8001488:	4b93      	ldr	r3, [pc, #588]	; (80016d8 <Settings_Read+0x334>)
 800148a:	4a94      	ldr	r2, [pc, #592]	; (80016dc <Settings_Read+0x338>)
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fb08 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&settings[50]);
 8001494:	4b92      	ldr	r3, [pc, #584]	; (80016e0 <Settings_Read+0x33c>)
 8001496:	4a93      	ldr	r2, [pc, #588]	; (80016e4 <Settings_Read+0x340>)
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fb02 	bl	8000aa4 <General_Copy_32_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&settings[54]);
 80014a0:	4b91      	ldr	r3, [pc, #580]	; (80016e8 <Settings_Read+0x344>)
 80014a2:	4a92      	ldr	r2, [pc, #584]	; (80016ec <Settings_Read+0x348>)
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fb19 	bl	8000ade <General_Copy_16_Bit>
		General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&settings[56]);
 80014ac:	4b90      	ldr	r3, [pc, #576]	; (80016f0 <Settings_Read+0x34c>)
 80014ae:	4a91      	ldr	r2, [pc, #580]	; (80016f4 <Settings_Read+0x350>)
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb13 	bl	8000ade <General_Copy_16_Bit>
		pid_sampling_time = settings[58];
 80014b8:	4b69      	ldr	r3, [pc, #420]	; (8001660 <Settings_Read+0x2bc>)
 80014ba:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80014be:	4b8e      	ldr	r3, [pc, #568]	; (80016f8 <Settings_Read+0x354>)
 80014c0:	701a      	strb	r2, [r3, #0]

		//Verify
		if((potentiometer_min < SETTINGS_DEF_POTENTIOMETER_MIN_MIN)||(potentiometer_min > SETTINGS_DEF_POTENTIOMETER_MIN_MAX)){
 80014c2:	4b6a      	ldr	r3, [pc, #424]	; (800166c <Settings_Read+0x2c8>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 80014ca:	d302      	bcc.n	80014d2 <Settings_Read+0x12e>
			potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 80014cc:	4b67      	ldr	r3, [pc, #412]	; (800166c <Settings_Read+0x2c8>)
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	801a      	strh	r2, [r3, #0]
		}
		if((potentiometer_max < SETTINGS_DEF_POTENTIOMETER_MAX_MIN)||(potentiometer_max > SETTINGS_DEF_POTENTIOMETER_MAX_MAX)){
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <Settings_Read+0x2cc>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	2b7f      	cmp	r3, #127	; 0x7f
 80014d8:	d904      	bls.n	80014e4 <Settings_Read+0x140>
 80014da:	4b65      	ldr	r3, [pc, #404]	; (8001670 <Settings_Read+0x2cc>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e2:	d303      	bcc.n	80014ec <Settings_Read+0x148>
			potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 80014e4:	4b62      	ldr	r3, [pc, #392]	; (8001670 <Settings_Read+0x2cc>)
 80014e6:	f640 727f 	movw	r2, #3967	; 0xf7f
 80014ea:	801a      	strh	r2, [r3, #0]
		}
		if((motor_max_power < SETTINGS_DEF_MOTOR_MAX_POWER_MIN)||(motor_max_power > SETTINGS_DEF_MOTOR_MAX_POWER_MAX)){
 80014ec:	4b62      	ldr	r3, [pc, #392]	; (8001678 <Settings_Read+0x2d4>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014f4:	d903      	bls.n	80014fe <Settings_Read+0x15a>
			motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 80014f6:	4b60      	ldr	r3, [pc, #384]	; (8001678 <Settings_Read+0x2d4>)
 80014f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014fc:	801a      	strh	r2, [r3, #0]
		}
		if((motor_invert != MOTOR_NORMAL) && (motor_invert != MOTOR_INVERT)){
 80014fe:	4b60      	ldr	r3, [pc, #384]	; (8001680 <Settings_Read+0x2dc>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <Settings_Read+0x170>
 8001506:	4b5e      	ldr	r3, [pc, #376]	; (8001680 <Settings_Read+0x2dc>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d002      	beq.n	8001514 <Settings_Read+0x170>
			motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 800150e:	4b5c      	ldr	r3, [pc, #368]	; (8001680 <Settings_Read+0x2dc>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
		}
		if((signal_ignore != GENERAL_TRUE) && (signal_ignore != GENERAL_FALSE)){
 8001514:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <Settings_Read+0x2e0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d006      	beq.n	800152a <Settings_Read+0x186>
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <Settings_Read+0x2e0>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <Settings_Read+0x186>
			signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001524:	4b57      	ldr	r3, [pc, #348]	; (8001684 <Settings_Read+0x2e0>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
		}
		if((signal_length < SETTINGS_DEF_SIGNAL_LENGTH_MIN)||(signal_length > SETTINGS_DEF_SIGNAL_LENGTH_MAX)){
 800152a:	4b57      	ldr	r3, [pc, #348]	; (8001688 <Settings_Read+0x2e4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f8b6 	bl	80006a4 <__aeabi_fcmplt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <Settings_Read+0x1ac>
 800153e:	4b52      	ldr	r3, [pc, #328]	; (8001688 <Settings_Read+0x2e4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	496e      	ldr	r1, [pc, #440]	; (80016fc <Settings_Read+0x358>)
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f8cb 	bl	80006e0 <__aeabi_fcmpgt>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <Settings_Read+0x1b4>
			signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 8001550:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <Settings_Read+0x2e4>)
 8001552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001556:	601a      	str	r2, [r3, #0]
		}
		if((signal_timeout < SETTINGS_DEF_SIGNAL_TIMEOUT_MIN)||(signal_timeout > SETTINGS_DEF_SIGNAL_TIMEOUT_MAX)){
 8001558:	4b4d      	ldr	r3, [pc, #308]	; (8001690 <Settings_Read+0x2ec>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f89f 	bl	80006a4 <__aeabi_fcmplt>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d108      	bne.n	800157e <Settings_Read+0x1da>
 800156c:	4b48      	ldr	r3, [pc, #288]	; (8001690 <Settings_Read+0x2ec>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4963      	ldr	r1, [pc, #396]	; (8001700 <Settings_Read+0x35c>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f8b4 	bl	80006e0 <__aeabi_fcmpgt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <Settings_Read+0x1e0>
			signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 800157e:	4b44      	ldr	r3, [pc, #272]	; (8001690 <Settings_Read+0x2ec>)
 8001580:	4a60      	ldr	r2, [pc, #384]	; (8001704 <Settings_Read+0x360>)
 8001582:	601a      	str	r2, [r3, #0]
		}
		if((led_mode != LED_MODE_OFF) && (led_mode != LED_MODE_POWER) && (led_mode != LED_MODE_SIGNAL) && (led_mode != LED_MODE_POSITION_CHANGE)){
 8001584:	4b44      	ldr	r3, [pc, #272]	; (8001698 <Settings_Read+0x2f4>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00e      	beq.n	80015aa <Settings_Read+0x206>
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <Settings_Read+0x2f4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d00a      	beq.n	80015aa <Settings_Read+0x206>
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <Settings_Read+0x2f4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d006      	beq.n	80015aa <Settings_Read+0x206>
 800159c:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <Settings_Read+0x2f4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d002      	beq.n	80015aa <Settings_Read+0x206>
			led_mode = SETTINGS_DEF_LED_MODE_DEF;
 80015a4:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <Settings_Read+0x2f4>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
		}
		if((pid_on != PID_ON_M) && (pid_on != PID_ON_E)){
 80015aa:	4b3c      	ldr	r3, [pc, #240]	; (800169c <Settings_Read+0x2f8>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <Settings_Read+0x21c>
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <Settings_Read+0x2f8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d002      	beq.n	80015c0 <Settings_Read+0x21c>
			pid_on = SETTINGS_DEF_PID_ON_DEF;
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <Settings_Read+0x2f8>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
		}
		if((pid_kp_1 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_1 > SETTINGS_DEF_PID_KP_MAX)){
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <Settings_Read+0x2fc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f86b 	bl	80006a4 <__aeabi_fcmplt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d108      	bne.n	80015e6 <Settings_Read+0x242>
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <Settings_Read+0x2fc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4949      	ldr	r1, [pc, #292]	; (8001700 <Settings_Read+0x35c>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f880 	bl	80006e0 <__aeabi_fcmpgt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <Settings_Read+0x24a>
			pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <Settings_Read+0x2fc>)
 80015e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015ec:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_1 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_1 > SETTINGS_DEF_PID_KI_MAX)){
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <Settings_Read+0x304>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f04f 0100 	mov.w	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f854 	bl	80006a4 <__aeabi_fcmplt>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <Settings_Read+0x270>
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <Settings_Read+0x304>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	493e      	ldr	r1, [pc, #248]	; (8001700 <Settings_Read+0x35c>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff f869 	bl	80006e0 <__aeabi_fcmpgt>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <Settings_Read+0x278>
			pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <Settings_Read+0x304>)
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_1 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_1 > SETTINGS_DEF_PID_KD_MAX)){
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <Settings_Read+0x30c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f04f 0100 	mov.w	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff f83d 	bl	80006a4 <__aeabi_fcmplt>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d108      	bne.n	8001642 <Settings_Read+0x29e>
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Settings_Read+0x30c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4932      	ldr	r1, [pc, #200]	; (8001700 <Settings_Read+0x35c>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f852 	bl	80006e0 <__aeabi_fcmpgt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <Settings_Read+0x2a4>
			pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <Settings_Read+0x30c>)
 8001644:	4a30      	ldr	r2, [pc, #192]	; (8001708 <Settings_Read+0x364>)
 8001646:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_2 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_2 > SETTINGS_DEF_PID_KP_MAX)){
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <Settings_Read+0x314>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f827 	bl	80006a4 <__aeabi_fcmplt>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	e057      	b.n	800170c <Settings_Read+0x368>
 800165c:	0800c000 	.word	0x0800c000
 8001660:	20000424 	.word	0x20000424
 8001664:	20000444 	.word	0x20000444
 8001668:	200005f8 	.word	0x200005f8
 800166c:	20000422 	.word	0x20000422
 8001670:	20000420 	.word	0x20000420
 8001674:	20000426 	.word	0x20000426
 8001678:	20000000 	.word	0x20000000
 800167c:	20000428 	.word	0x20000428
 8001680:	200001c7 	.word	0x200001c7
 8001684:	20000468 	.word	0x20000468
 8001688:	20000464 	.word	0x20000464
 800168c:	2000042c 	.word	0x2000042c
 8001690:	2000046c 	.word	0x2000046c
 8001694:	20000430 	.word	0x20000430
 8001698:	200001c4 	.word	0x200001c4
 800169c:	20000020 	.word	0x20000020
 80016a0:	20000004 	.word	0x20000004
 80016a4:	20000436 	.word	0x20000436
 80016a8:	200001cc 	.word	0x200001cc
 80016ac:	2000043a 	.word	0x2000043a
 80016b0:	20000008 	.word	0x20000008
 80016b4:	2000043e 	.word	0x2000043e
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	20000442 	.word	0x20000442
 80016c0:	200001d0 	.word	0x200001d0
 80016c4:	20000446 	.word	0x20000446
 80016c8:	20000010 	.word	0x20000010
 80016cc:	2000044a 	.word	0x2000044a
 80016d0:	20000014 	.word	0x20000014
 80016d4:	2000044e 	.word	0x2000044e
 80016d8:	200001d4 	.word	0x200001d4
 80016dc:	20000452 	.word	0x20000452
 80016e0:	20000018 	.word	0x20000018
 80016e4:	20000456 	.word	0x20000456
 80016e8:	2000001c 	.word	0x2000001c
 80016ec:	2000045a 	.word	0x2000045a
 80016f0:	2000001e 	.word	0x2000001e
 80016f4:	2000045c 	.word	0x2000045c
 80016f8:	20000002 	.word	0x20000002
 80016fc:	41200000 	.word	0x41200000
 8001700:	42c80000 	.word	0x42c80000
 8001704:	41900000 	.word	0x41900000
 8001708:	40400000 	.word	0x40400000
 800170c:	d108      	bne.n	8001720 <Settings_Read+0x37c>
 800170e:	4b7e      	ldr	r3, [pc, #504]	; (8001908 <Settings_Read+0x564>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	497e      	ldr	r1, [pc, #504]	; (800190c <Settings_Read+0x568>)
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ffe3 	bl	80006e0 <__aeabi_fcmpgt>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <Settings_Read+0x384>
			pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 8001720:	4b79      	ldr	r3, [pc, #484]	; (8001908 <Settings_Read+0x564>)
 8001722:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001726:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_2 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_2 > SETTINGS_DEF_PID_KI_MAX)){
 8001728:	4b79      	ldr	r3, [pc, #484]	; (8001910 <Settings_Read+0x56c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f04f 0100 	mov.w	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ffb7 	bl	80006a4 <__aeabi_fcmplt>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d108      	bne.n	800174e <Settings_Read+0x3aa>
 800173c:	4b74      	ldr	r3, [pc, #464]	; (8001910 <Settings_Read+0x56c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4972      	ldr	r1, [pc, #456]	; (800190c <Settings_Read+0x568>)
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ffcc 	bl	80006e0 <__aeabi_fcmpgt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <Settings_Read+0x3b2>
			pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 800174e:	4b70      	ldr	r3, [pc, #448]	; (8001910 <Settings_Read+0x56c>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_2 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_2 > SETTINGS_DEF_PID_KD_MAX)){
 8001756:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <Settings_Read+0x570>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ffa0 	bl	80006a4 <__aeabi_fcmplt>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d108      	bne.n	800177c <Settings_Read+0x3d8>
 800176a:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <Settings_Read+0x570>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4967      	ldr	r1, [pc, #412]	; (800190c <Settings_Read+0x568>)
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe ffb5 	bl	80006e0 <__aeabi_fcmpgt>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <Settings_Read+0x3de>
			pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 800177c:	4b65      	ldr	r3, [pc, #404]	; (8001914 <Settings_Read+0x570>)
 800177e:	4a66      	ldr	r2, [pc, #408]	; (8001918 <Settings_Read+0x574>)
 8001780:	601a      	str	r2, [r3, #0]
		}
		if((pid_kp_3 < SETTINGS_DEF_PID_KP_MIN)||(pid_kp_3 > SETTINGS_DEF_PID_KP_MAX)){
 8001782:	4b66      	ldr	r3, [pc, #408]	; (800191c <Settings_Read+0x578>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe ff8a 	bl	80006a4 <__aeabi_fcmplt>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <Settings_Read+0x404>
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <Settings_Read+0x578>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	495c      	ldr	r1, [pc, #368]	; (800190c <Settings_Read+0x568>)
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe ff9f 	bl	80006e0 <__aeabi_fcmpgt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <Settings_Read+0x40c>
			pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80017a8:	4b5c      	ldr	r3, [pc, #368]	; (800191c <Settings_Read+0x578>)
 80017aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017ae:	601a      	str	r2, [r3, #0]
		}
		if((pid_ki_3 < SETTINGS_DEF_PID_KI_MIN)||(pid_ki_3 > SETTINGS_DEF_PID_KI_MAX)){
 80017b0:	4b5b      	ldr	r3, [pc, #364]	; (8001920 <Settings_Read+0x57c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe ff73 	bl	80006a4 <__aeabi_fcmplt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <Settings_Read+0x432>
 80017c4:	4b56      	ldr	r3, [pc, #344]	; (8001920 <Settings_Read+0x57c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4950      	ldr	r1, [pc, #320]	; (800190c <Settings_Read+0x568>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe ff88 	bl	80006e0 <__aeabi_fcmpgt>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <Settings_Read+0x43a>
			pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80017d6:	4b52      	ldr	r3, [pc, #328]	; (8001920 <Settings_Read+0x57c>)
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
		}
		if((pid_kd_3 < SETTINGS_DEF_PID_KD_MIN)||(pid_kd_3 > SETTINGS_DEF_PID_KD_MAX)){
 80017de:	4b51      	ldr	r3, [pc, #324]	; (8001924 <Settings_Read+0x580>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe ff5c 	bl	80006a4 <__aeabi_fcmplt>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <Settings_Read+0x460>
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <Settings_Read+0x580>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4945      	ldr	r1, [pc, #276]	; (800190c <Settings_Read+0x568>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe ff71 	bl	80006e0 <__aeabi_fcmpgt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <Settings_Read+0x466>
			pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <Settings_Read+0x580>)
 8001806:	4a44      	ldr	r2, [pc, #272]	; (8001918 <Settings_Read+0x574>)
 8001808:	601a      	str	r2, [r3, #0]
		}
		if((pid_split_1 < SETTINGS_DEF_PID_SPLIT_1_MIN)||(pid_split_1 > SETTINGS_DEF_PID_SPLIT_1_MAX)){
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <Settings_Read+0x584>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001812:	d303      	bcc.n	800181c <Settings_Read+0x478>
			pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 8001814:	4b44      	ldr	r3, [pc, #272]	; (8001928 <Settings_Read+0x584>)
 8001816:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800181a:	801a      	strh	r2, [r3, #0]
		}
		if((pid_split_2 < SETTINGS_DEF_PID_SPLIT_2_MIN)||(pid_split_2 > SETTINGS_DEF_PID_SPLIT_2_MAX)){
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <Settings_Read+0x588>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001824:	d303      	bcc.n	800182e <Settings_Read+0x48a>
			pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <Settings_Read+0x588>)
 8001828:	f640 32fc 	movw	r2, #3068	; 0xbfc
 800182c:	801a      	strh	r2, [r3, #0]
		}
		if((pid_sampling_time < SETTINGS_DEF_PID_SAMPLING_TIME_MIN)||(pid_sampling_time > SETTINGS_DEF_PID_SAMPLING_TIME_MAX)){
 800182e:	4b40      	ldr	r3, [pc, #256]	; (8001930 <Settings_Read+0x58c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fd44 	bl	80002c0 <__aeabi_i2f>
 8001838:	4603      	mov	r3, r0
 800183a:	493e      	ldr	r1, [pc, #248]	; (8001934 <Settings_Read+0x590>)
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe ff31 	bl	80006a4 <__aeabi_fcmplt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10d      	bne.n	8001864 <Settings_Read+0x4c0>
 8001848:	4b39      	ldr	r3, [pc, #228]	; (8001930 <Settings_Read+0x58c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fd37 	bl	80002c0 <__aeabi_i2f>
 8001852:	4603      	mov	r3, r0
 8001854:	492d      	ldr	r1, [pc, #180]	; (800190c <Settings_Read+0x568>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe ff42 	bl	80006e0 <__aeabi_fcmpgt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d100      	bne.n	8001864 <Settings_Read+0x4c0>
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
	}
}
 8001862:	e04d      	b.n	8001900 <Settings_Read+0x55c>
			pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <Settings_Read+0x58c>)
 8001866:	2205      	movs	r2, #5
 8001868:	701a      	strb	r2, [r3, #0]
}
 800186a:	e049      	b.n	8001900 <Settings_Read+0x55c>
		potentiometer_min = SETTINGS_DEF_POTENTIOMETER_MIN_DEF;
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <Settings_Read+0x594>)
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	801a      	strh	r2, [r3, #0]
		potentiometer_max = SETTINGS_DEF_POTENTIOMETER_MAX_DEF;
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <Settings_Read+0x598>)
 8001874:	f640 727f 	movw	r2, #3967	; 0xf7f
 8001878:	801a      	strh	r2, [r3, #0]
		motor_max_power = SETTINGS_DEF_MOTOR_MAX_POWER_DEF;
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <Settings_Read+0x59c>)
 800187c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001880:	801a      	strh	r2, [r3, #0]
		motor_invert = SETTINGS_DEF_MOTOR_INVERT_DEF;
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <Settings_Read+0x5a0>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
		signal_ignore = SETTINGS_DEF_SIGNAL_IGNORE_DEF;
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <Settings_Read+0x5a4>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
		signal_length = SETTINGS_DEF_SIGNAL_LENGTH_DEF;
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <Settings_Read+0x5a8>)
 8001890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001894:	601a      	str	r2, [r3, #0]
		signal_timeout = SETTINGS_DEF_SIGNAL_TIMEOUT_DEF;
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <Settings_Read+0x5ac>)
 8001898:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <Settings_Read+0x5b0>)
 800189a:	601a      	str	r2, [r3, #0]
		led_mode = SETTINGS_DEF_LED_MODE_DEF;
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <Settings_Read+0x5b4>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
		pid_on = SETTINGS_DEF_PID_ON_DEF;
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <Settings_Read+0x5b8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
		pid_kp_1 = SETTINGS_DEF_PID_KP_DEF;
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <Settings_Read+0x5bc>)
 80018aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018ae:	601a      	str	r2, [r3, #0]
		pid_ki_1 = SETTINGS_DEF_PID_KI_DEF;
 80018b0:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <Settings_Read+0x5c0>)
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
		pid_kd_1 = SETTINGS_DEF_PID_KD_DEF;
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <Settings_Read+0x5c4>)
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <Settings_Read+0x574>)
 80018bc:	601a      	str	r2, [r3, #0]
		pid_kp_2 = SETTINGS_DEF_PID_KP_DEF;
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <Settings_Read+0x564>)
 80018c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c4:	601a      	str	r2, [r3, #0]
		pid_ki_2 = SETTINGS_DEF_PID_KI_DEF;
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <Settings_Read+0x56c>)
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
		pid_kd_2 = SETTINGS_DEF_PID_KD_DEF;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <Settings_Read+0x570>)
 80018d0:	4a11      	ldr	r2, [pc, #68]	; (8001918 <Settings_Read+0x574>)
 80018d2:	601a      	str	r2, [r3, #0]
		pid_kp_3 = SETTINGS_DEF_PID_KP_DEF;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <Settings_Read+0x578>)
 80018d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018da:	601a      	str	r2, [r3, #0]
		pid_ki_3 = SETTINGS_DEF_PID_KI_DEF;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <Settings_Read+0x57c>)
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
		pid_kd_3 = SETTINGS_DEF_PID_KD_DEF;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <Settings_Read+0x580>)
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <Settings_Read+0x574>)
 80018e8:	601a      	str	r2, [r3, #0]
		pid_split_1 = SETTINGS_DEF_PID_SPLIT_1_DEF;
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <Settings_Read+0x584>)
 80018ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80018f0:	801a      	strh	r2, [r3, #0]
		pid_split_2 = SETTINGS_DEF_PID_SPLIT_2_DEF;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <Settings_Read+0x588>)
 80018f4:	f640 32fc 	movw	r2, #3068	; 0xbfc
 80018f8:	801a      	strh	r2, [r3, #0]
		pid_sampling_time = SETTINGS_DEF_PID_SAMPLING_TIME_DEF;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <Settings_Read+0x58c>)
 80018fc:	2205      	movs	r2, #5
 80018fe:	701a      	strb	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000000c 	.word	0x2000000c
 800190c:	42c80000 	.word	0x42c80000
 8001910:	200001d0 	.word	0x200001d0
 8001914:	20000010 	.word	0x20000010
 8001918:	40400000 	.word	0x40400000
 800191c:	20000014 	.word	0x20000014
 8001920:	200001d4 	.word	0x200001d4
 8001924:	20000018 	.word	0x20000018
 8001928:	2000001c 	.word	0x2000001c
 800192c:	2000001e 	.word	0x2000001e
 8001930:	20000002 	.word	0x20000002
 8001934:	40a00000 	.word	0x40a00000
 8001938:	20000422 	.word	0x20000422
 800193c:	20000420 	.word	0x20000420
 8001940:	20000000 	.word	0x20000000
 8001944:	200001c7 	.word	0x200001c7
 8001948:	20000468 	.word	0x20000468
 800194c:	20000464 	.word	0x20000464
 8001950:	2000046c 	.word	0x2000046c
 8001954:	41900000 	.word	0x41900000
 8001958:	200001c4 	.word	0x200001c4
 800195c:	20000020 	.word	0x20000020
 8001960:	20000004 	.word	0x20000004
 8001964:	200001cc 	.word	0x200001cc
 8001968:	20000008 	.word	0x20000008

0800196c <Settings_Write>:
void Settings_Write(){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	General_Copy_16_Bit((uint32_t)&settings[0], (uint32_t)&potentiometer_min);
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <Settings_Write+0x124>)
 8001974:	4a47      	ldr	r2, [pc, #284]	; (8001a94 <Settings_Write+0x128>)
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f8b0 	bl	8000ade <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[2], (uint32_t)&potentiometer_max);
 800197e:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <Settings_Write+0x12c>)
 8001980:	4a46      	ldr	r2, [pc, #280]	; (8001a9c <Settings_Write+0x130>)
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f8aa 	bl	8000ade <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[4], (uint32_t)&motor_max_power);
 800198a:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <Settings_Write+0x134>)
 800198c:	4a45      	ldr	r2, [pc, #276]	; (8001aa4 <Settings_Write+0x138>)
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff f8a4 	bl	8000ade <General_Copy_16_Bit>
	settings[6] = motor_invert;
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <Settings_Write+0x13c>)
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <Settings_Write+0x124>)
 800199c:	719a      	strb	r2, [r3, #6]
	settings[7] = signal_ignore;
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <Settings_Write+0x140>)
 80019a0:	781a      	ldrb	r2, [r3, #0]
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <Settings_Write+0x124>)
 80019a4:	71da      	strb	r2, [r3, #7]
	General_Copy_32_Bit((uint32_t)&settings[8], (uint32_t)&signal_length);
 80019a6:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <Settings_Write+0x144>)
 80019a8:	4a42      	ldr	r2, [pc, #264]	; (8001ab4 <Settings_Write+0x148>)
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f879 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[12], (uint32_t)&signal_timeout);
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <Settings_Write+0x14c>)
 80019b4:	4a41      	ldr	r2, [pc, #260]	; (8001abc <Settings_Write+0x150>)
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f873 	bl	8000aa4 <General_Copy_32_Bit>
	settings[16] = led_mode;
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <Settings_Write+0x154>)
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <Settings_Write+0x124>)
 80019c4:	741a      	strb	r2, [r3, #16]
	settings[17] = pid_on;
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <Settings_Write+0x158>)
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <Settings_Write+0x124>)
 80019cc:	745a      	strb	r2, [r3, #17]
	General_Copy_32_Bit((uint32_t)&settings[18], (uint32_t)&pid_kp_1);
 80019ce:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <Settings_Write+0x15c>)
 80019d0:	4a3e      	ldr	r2, [pc, #248]	; (8001acc <Settings_Write+0x160>)
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f865 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[22], (uint32_t)&pid_ki_1);
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <Settings_Write+0x164>)
 80019dc:	4a3d      	ldr	r2, [pc, #244]	; (8001ad4 <Settings_Write+0x168>)
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f85f 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[26], (uint32_t)&pid_kd_1);
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <Settings_Write+0x16c>)
 80019e8:	4a3c      	ldr	r2, [pc, #240]	; (8001adc <Settings_Write+0x170>)
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f859 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[30], (uint32_t)&pid_kp_2);
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <Settings_Write+0x174>)
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <Settings_Write+0x178>)
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f853 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[34], (uint32_t)&pid_ki_2);
 80019fe:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <Settings_Write+0x17c>)
 8001a00:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <Settings_Write+0x180>)
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f84d 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[38], (uint32_t)&pid_kd_2);
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <Settings_Write+0x184>)
 8001a0c:	4a39      	ldr	r2, [pc, #228]	; (8001af4 <Settings_Write+0x188>)
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f847 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[42], (uint32_t)&pid_kp_3);
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <Settings_Write+0x18c>)
 8001a18:	4a38      	ldr	r2, [pc, #224]	; (8001afc <Settings_Write+0x190>)
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f841 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[46], (uint32_t)&pid_ki_3);
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <Settings_Write+0x194>)
 8001a24:	4a37      	ldr	r2, [pc, #220]	; (8001b04 <Settings_Write+0x198>)
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f83b 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&settings[50], (uint32_t)&pid_kd_3);
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <Settings_Write+0x19c>)
 8001a30:	4a36      	ldr	r2, [pc, #216]	; (8001b0c <Settings_Write+0x1a0>)
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f835 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&settings[54], (uint32_t)&pid_split_1);
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <Settings_Write+0x1a4>)
 8001a3c:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <Settings_Write+0x1a8>)
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f84c 	bl	8000ade <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&settings[56], (uint32_t)&pid_split_2);
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <Settings_Write+0x1ac>)
 8001a48:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <Settings_Write+0x1b0>)
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f846 	bl	8000ade <General_Copy_16_Bit>
	settings[58] = pid_sampling_time;
 8001a52:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <Settings_Write+0x1b4>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <Settings_Write+0x124>)
 8001a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	settings[59] = SETTINGS_CRC_PADDING;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <Settings_Write+0x124>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)settings, (SETTINGS_TOTAL_LENGTH / 4) - 1);
 8001a64:	220f      	movs	r2, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <Settings_Write+0x124>)
 8001a68:	482e      	ldr	r0, [pc, #184]	; (8001b24 <Settings_Write+0x1b8>)
 8001a6a:	f001 fef2 	bl	8003852 <HAL_CRC_Calculate>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&settings[60], (uint32_t)&crc);
 8001a72:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <Settings_Write+0x1bc>)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f7ff f813 	bl	8000aa4 <General_Copy_32_Bit>
	Flash_Write(&settings[0], SETTINGS_FLASH_ADDRESS, SETTINGS_TOTAL_LENGTH);
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	492a      	ldr	r1, [pc, #168]	; (8001b2c <Settings_Write+0x1c0>)
 8001a82:	4803      	ldr	r0, [pc, #12]	; (8001a90 <Settings_Write+0x124>)
 8001a84:	f7fe ff77 	bl	8000976 <Flash_Write>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000424 	.word	0x20000424
 8001a94:	20000422 	.word	0x20000422
 8001a98:	20000426 	.word	0x20000426
 8001a9c:	20000420 	.word	0x20000420
 8001aa0:	20000428 	.word	0x20000428
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	200001c7 	.word	0x200001c7
 8001aac:	20000468 	.word	0x20000468
 8001ab0:	2000042c 	.word	0x2000042c
 8001ab4:	20000464 	.word	0x20000464
 8001ab8:	20000430 	.word	0x20000430
 8001abc:	2000046c 	.word	0x2000046c
 8001ac0:	200001c4 	.word	0x200001c4
 8001ac4:	20000020 	.word	0x20000020
 8001ac8:	20000436 	.word	0x20000436
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	2000043a 	.word	0x2000043a
 8001ad4:	200001cc 	.word	0x200001cc
 8001ad8:	2000043e 	.word	0x2000043e
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000442 	.word	0x20000442
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	20000446 	.word	0x20000446
 8001aec:	200001d0 	.word	0x200001d0
 8001af0:	2000044a 	.word	0x2000044a
 8001af4:	20000010 	.word	0x20000010
 8001af8:	2000044e 	.word	0x2000044e
 8001afc:	20000014 	.word	0x20000014
 8001b00:	20000452 	.word	0x20000452
 8001b04:	200001d4 	.word	0x200001d4
 8001b08:	20000456 	.word	0x20000456
 8001b0c:	20000018 	.word	0x20000018
 8001b10:	2000045a 	.word	0x2000045a
 8001b14:	2000001c 	.word	0x2000001c
 8001b18:	2000045c 	.word	0x2000045c
 8001b1c:	2000001e 	.word	0x2000001e
 8001b20:	20000002 	.word	0x20000002
 8001b24:	200005f8 	.word	0x200005f8
 8001b28:	20000460 	.word	0x20000460
 8001b2c:	0800c000 	.word	0x0800c000

08001b30 <Signal_SysTick_Interrupt>:
float signal_length;
float signal_timeout;

uint8_t signal_present = 0;

void Signal_SysTick_Interrupt(){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	if(((float)(Signal_Read_Timer() + 1) / 500.0f) > signal_timeout){
 8001b34:	f000 f8e4 	bl	8001d00 <Signal_Read_Timer>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fbbb 	bl	80002b8 <__aeabi_ui2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4914      	ldr	r1, [pc, #80]	; (8001b98 <Signal_SysTick_Interrupt+0x68>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fcc2 	bl	80004d0 <__aeabi_fdiv>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <Signal_SysTick_Interrupt+0x6c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f7fe fdc2 	bl	80006e0 <__aeabi_fcmpgt>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d100      	bne.n	8001b64 <Signal_SysTick_Interrupt+0x34>
		Signal_Timer_Reset();
		if((!signal_ignore || (signal_ignore && (!usb_present))) && pid_running){
			PID_Stop();
		}
	}
}
 8001b62:	e016      	b.n	8001b92 <Signal_SysTick_Interrupt+0x62>
		signal_present = 0;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <Signal_SysTick_Interrupt+0x70>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
		Signal_Timer_Reset();
 8001b6a:	f000 f8d5 	bl	8001d18 <Signal_Timer_Reset>
		if((!signal_ignore || (signal_ignore && (!usb_present))) && pid_running){
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <Signal_SysTick_Interrupt+0x74>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <Signal_SysTick_Interrupt+0x56>
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <Signal_SysTick_Interrupt+0x74>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <Signal_SysTick_Interrupt+0x62>
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <Signal_SysTick_Interrupt+0x78>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d105      	bne.n	8001b92 <Signal_SysTick_Interrupt+0x62>
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <Signal_SysTick_Interrupt+0x7c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <Signal_SysTick_Interrupt+0x62>
			PID_Stop();
 8001b8e:	f7ff fb9f 	bl	80012d0 <PID_Stop>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	43fa0000 	.word	0x43fa0000
 8001b9c:	2000046c 	.word	0x2000046c
 8001ba0:	200001f8 	.word	0x200001f8
 8001ba4:	20000468 	.word	0x20000468
 8001ba8:	200001fd 	.word	0x200001fd
 8001bac:	200001d8 	.word	0x200001d8

08001bb0 <Signal_Interrupt>:
void Signal_Interrupt(){
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
	if(!signal_ignore || (signal_ignore && (!usb_present))){
 8001bb6:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <Signal_Interrupt+0x128>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <Signal_Interrupt+0x20>
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <Signal_Interrupt+0x128>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8083 	beq.w	8001cce <Signal_Interrupt+0x11e>
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <Signal_Interrupt+0x12c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d17e      	bne.n	8001cce <Signal_Interrupt+0x11e>
		if(Signal_Read() == SIGNAL_HIGH){
 8001bd0:	f000 f8ae 	bl	8001d30 <Signal_Read>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d105      	bne.n	8001be6 <Signal_Interrupt+0x36>
			Signal_Timer_Reset();
 8001bda:	f000 f89d 	bl	8001d18 <Signal_Timer_Reset>
			signal_present = 1;
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <Signal_Interrupt+0x130>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
					PID_Stop();
				}
			}
		}
	}
}
 8001be4:	e073      	b.n	8001cce <Signal_Interrupt+0x11e>
		}else if(signal_present){
 8001be6:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <Signal_Interrupt+0x130>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06f      	beq.n	8001cce <Signal_Interrupt+0x11e>
			float received_length_ms  = (Signal_Read_Timer() + 1) / 500.0f;
 8001bee:	f000 f887 	bl	8001d00 <Signal_Read_Timer>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fb5e 	bl	80002b8 <__aeabi_ui2f>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4939      	ldr	r1, [pc, #228]	; (8001ce4 <Signal_Interrupt+0x134>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc65 	bl	80004d0 <__aeabi_fdiv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	607b      	str	r3, [r7, #4]
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <Signal_Interrupt+0x138>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7fe fd51 	bl	80006b8 <__aeabi_fcmple>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d04d      	beq.n	8001cb8 <Signal_Interrupt+0x108>
 8001c1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7fe fd53 	bl	80006cc <__aeabi_fcmpge>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d045      	beq.n	8001cb8 <Signal_Interrupt+0x108>
				float new_pid_setpoint = ((potentiometer_max - potentiometer_min) * ((received_length_ms - 1.0f) / (signal_length - 1.0f))) + potentiometer_min;
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <Signal_Interrupt+0x13c>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b2f      	ldr	r3, [pc, #188]	; (8001cf0 <Signal_Interrupt+0x140>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fb41 	bl	80002c0 <__aeabi_i2f>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7fe fa85 	bl	8000154 <__aeabi_fsub>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	4b26      	ldr	r3, [pc, #152]	; (8001ce8 <Signal_Interrupt+0x138>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fa7c 	bl	8000154 <__aeabi_fsub>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4628      	mov	r0, r5
 8001c62:	f7fe fc35 	bl	80004d0 <__aeabi_fdiv>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7fe fb7c 	bl	8000368 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461c      	mov	r4, r3
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <Signal_Interrupt+0x140>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fb21 	bl	80002c0 <__aeabi_i2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4619      	mov	r1, r3
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7fe fa68 	bl	8000158 <__addsf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	603b      	str	r3, [r7, #0]
				if(pid_setpoint != new_pid_setpoint){
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <Signal_Interrupt+0x144>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	6838      	ldr	r0, [r7, #0]
 8001c94:	f7fe fcfc 	bl	8000690 <__aeabi_fcmpeq>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d102      	bne.n	8001ca4 <Signal_Interrupt+0xf4>
					led_position_changed = 1;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <Signal_Interrupt+0x148>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
				pid_setpoint = new_pid_setpoint;
 8001ca4:	4a13      	ldr	r2, [pc, #76]	; (8001cf4 <Signal_Interrupt+0x144>)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6013      	str	r3, [r2, #0]
				if(!pid_running){
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <Signal_Interrupt+0x14c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <Signal_Interrupt+0x11c>
					PID_Start();
 8001cb2:	f7ff faeb 	bl	800128c <PID_Start>
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001cb6:	e009      	b.n	8001ccc <Signal_Interrupt+0x11c>
				signal_present = 0;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <Signal_Interrupt+0x130>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
				if(pid_running){
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <Signal_Interrupt+0x14c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <Signal_Interrupt+0x11e>
					PID_Stop();
 8001cc6:	f7ff fb03 	bl	80012d0 <PID_Stop>
}
 8001cca:	e000      	b.n	8001cce <Signal_Interrupt+0x11e>
			if((received_length_ms <= signal_length) && (received_length_ms >= 1.0f)){
 8001ccc:	bf00      	nop
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000468 	.word	0x20000468
 8001cdc:	200001fd 	.word	0x200001fd
 8001ce0:	200001f8 	.word	0x200001f8
 8001ce4:	43fa0000 	.word	0x43fa0000
 8001ce8:	20000464 	.word	0x20000464
 8001cec:	20000420 	.word	0x20000420
 8001cf0:	20000422 	.word	0x20000422
 8001cf4:	20000024 	.word	0x20000024
 8001cf8:	200001c5 	.word	0x200001c5
 8001cfc:	200001d8 	.word	0x200001d8

08001d00 <Signal_Read_Timer>:

uint32_t Signal_Read_Timer(){
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <Signal_Read_Timer+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200005b0 	.word	0x200005b0

08001d18 <Signal_Timer_Reset>:
void Signal_Timer_Reset(){
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001d1c:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <Signal_Timer_Reset+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	200005b0 	.word	0x200005b0

08001d30 <Signal_Read>:
uint8_t Signal_Read(){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001d3e:	e01d      	b.n	8001d7c <Signal_Read+0x4c>
		i = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 8001d44:	2102      	movs	r1, #2
 8001d46:	4811      	ldr	r0, [pc, #68]	; (8001d8c <Signal_Read+0x5c>)
 8001d48:	f002 f93a 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	71fb      	strb	r3, [r7, #7]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001d50:	e011      	b.n	8001d76 <Signal_Read+0x46>
			i++;
 8001d52:	797b      	ldrb	r3, [r7, #5]
 8001d54:	3301      	adds	r3, #1
 8001d56:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 8001d58:	2102      	movs	r1, #2
 8001d5a:	480c      	ldr	r0, [pc, #48]	; (8001d8c <Signal_Read+0x5c>)
 8001d5c:	f002 f930 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d000      	beq.n	8001d6c <Signal_Read+0x3c>
				break;
 8001d6a:	e007      	b.n	8001d7c <Signal_Read+0x4c>
			}
			if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001d6c:	797b      	ldrb	r3, [r7, #5]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d101      	bne.n	8001d76 <Signal_Read+0x46>
				d = 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	71bb      	strb	r3, [r7, #6]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001d76:	797b      	ldrb	r3, [r7, #5]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d1ea      	bne.n	8001d52 <Signal_Read+0x22>
	while(d != 1){
 8001d7c:	79bb      	ldrb	r3, [r7, #6]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d1de      	bne.n	8001d40 <Signal_Read+0x10>
			}
		}
	}
	return level;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40010c00 	.word	0x40010c00

08001d90 <Signal_Init>:

void Signal_Init(){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim4);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <Signal_Init+0x10>)
 8001d96:	f004 fbf1 	bl	800657c <HAL_TIM_Base_Start>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200005b0 	.word	0x200005b0

08001da4 <USB_Det_Read>:

uint8_t usb_present = 0;
uint8_t usb_tx_buffer[64];
uint8_t usb_long_buffer[256];

uint8_t USB_Det_Read(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
	uint8_t level;
	uint8_t d = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	717b      	strb	r3, [r7, #5]
	while(d != 1){
 8001db2:	e01f      	b.n	8001df4 <USB_Det_Read+0x50>
		i = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	717b      	strb	r3, [r7, #5]
		level = HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin);
 8001db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dbc:	4811      	ldr	r0, [pc, #68]	; (8001e04 <USB_Det_Read+0x60>)
 8001dbe:	f002 f8ff 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001dc6:	e012      	b.n	8001dee <USB_Det_Read+0x4a>
			i++;
 8001dc8:	797b      	ldrb	r3, [r7, #5]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	717b      	strb	r3, [r7, #5]
			if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) != level){
 8001dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd2:	480c      	ldr	r0, [pc, #48]	; (8001e04 <USB_Det_Read+0x60>)
 8001dd4:	f002 f8f4 	bl	8003fc0 <HAL_GPIO_ReadPin>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d000      	beq.n	8001de4 <USB_Det_Read+0x40>
				break;
 8001de2:	e007      	b.n	8001df4 <USB_Det_Read+0x50>
			}
			if(i == USB_DET_DEBOUNCE_SAMPLES){
 8001de4:	797b      	ldrb	r3, [r7, #5]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d101      	bne.n	8001dee <USB_Det_Read+0x4a>
				d = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	71bb      	strb	r3, [r7, #6]
		while(i != USB_DET_DEBOUNCE_SAMPLES){
 8001dee:	797b      	ldrb	r3, [r7, #5]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d1e9      	bne.n	8001dc8 <USB_Det_Read+0x24>
	while(d != 1){
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d1dc      	bne.n	8001db4 <USB_Det_Read+0x10>
			}
		}
	}
	return level;
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40010c00 	.word	0x40010c00

08001e08 <USB_Det_Interrupt>:
void USB_Det_Interrupt(){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e0c:	f7ff ffca 	bl	8001da4 <USB_Det_Read>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d103      	bne.n	8001e1e <USB_Det_Interrupt+0x16>
		usb_present = 1;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <USB_Det_Interrupt+0x2c>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e002      	b.n	8001e24 <USB_Det_Interrupt+0x1c>
	}else{
		usb_present = 0;
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <USB_Det_Interrupt+0x2c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
	}
	if(pid_running){
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <USB_Det_Interrupt+0x30>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <USB_Det_Interrupt+0x28>
		PID_Stop();
 8001e2c:	f7ff fa50 	bl	80012d0 <PID_Stop>
	}
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200001fd 	.word	0x200001fd
 8001e38:	200001d8 	.word	0x200001d8

08001e3c <USB_Init>:
void USB_Init(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	if(USB_Det_Read() == USB_DET_HIGH){
 8001e40:	f7ff ffb0 	bl	8001da4 <USB_Det_Read>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d103      	bne.n	8001e52 <USB_Init+0x16>
		usb_present = 1;
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <USB_Init+0x20>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
	}else{
		usb_present = 0;
	}
}
 8001e50:	e002      	b.n	8001e58 <USB_Init+0x1c>
		usb_present = 0;
 8001e52:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <USB_Init+0x20>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200001fd 	.word	0x200001fd

08001e60 <USB_Packet_Received>:
void USB_Packet_Received(uint8_t *data, uint32_t length){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	if((data[1] == USB_CMD_CONFIG) && (uint32_t)data[0] == length){
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d11c      	bne.n	8001eae <USB_Packet_Received+0x4e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d116      	bne.n	8001eae <USB_Packet_Received+0x4e>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3b01      	subs	r3, #1
 8001e86:	461a      	mov	r2, r3
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4829      	ldr	r0, [pc, #164]	; (8001f30 <USB_Packet_Received+0xd0>)
 8001e8c:	f001 fce1 	bl	8003852 <HAL_CRC_Calculate>
 8001e90:	4601      	mov	r1, r0
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3b04      	subs	r3, #4
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4299      	cmp	r1, r3
 8001e9e:	d143      	bne.n	8001f28 <USB_Packet_Received+0xc8>
			USB_Parse_Config(data);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f84d 	bl	8001f40 <USB_Parse_Config>
			usb_rq = USB_RQ_CONF;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <USB_Packet_Received+0xd4>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / 4) - 1) == *(uint32_t *)&data[length - 4]){
 8001eac:	e03c      	b.n	8001f28 <USB_Packet_Received+0xc8>
		}
	}else if((data[1] == USB_CMD_STATUS) && (length == 64)){
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d108      	bne.n	8001eca <USB_Packet_Received+0x6a>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b40      	cmp	r3, #64	; 0x40
 8001ebc:	d105      	bne.n	8001eca <USB_Packet_Received+0x6a>
		memcpy(usb_long_buffer, data, 64);
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	481d      	ldr	r0, [pc, #116]	; (8001f38 <USB_Packet_Received+0xd8>)
 8001ec4:	f009 fda2 	bl	800ba0c <memcpy>
 8001ec8:	e02e      	b.n	8001f28 <USB_Packet_Received+0xc8>
	}
	else if((usb_long_buffer[1] == USB_CMD_STATUS) && (usb_long_buffer[0] == (length + 64))){
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <USB_Packet_Received+0xd8>)
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d126      	bne.n	8001f20 <USB_Packet_Received+0xc0>
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <USB_Packet_Received+0xd8>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3340      	adds	r3, #64	; 0x40
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d11f      	bne.n	8001f20 <USB_Packet_Received+0xc0>
		memcpy(&usb_long_buffer[64], data, length);
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4815      	ldr	r0, [pc, #84]	; (8001f3c <USB_Packet_Received+0xdc>)
 8001ee6:	f009 fd91 	bl	800ba0c <memcpy>
		if(HAL_CRC_Calculate(&hcrc, (uint32_t *)usb_long_buffer, ((length + 64) / 4) - 1) == *(uint32_t *)&usb_long_buffer[length + 64- 4]){
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	3340      	adds	r3, #64	; 0x40
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4910      	ldr	r1, [pc, #64]	; (8001f38 <USB_Packet_Received+0xd8>)
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <USB_Packet_Received+0xd0>)
 8001ef8:	f001 fcab 	bl	8003852 <HAL_CRC_Calculate>
 8001efc:	4602      	mov	r2, r0
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	333c      	adds	r3, #60	; 0x3c
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <USB_Packet_Received+0xd8>)
 8001f04:	440b      	add	r3, r1
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d105      	bne.n	8001f18 <USB_Packet_Received+0xb8>
			USB_Parse_Status(usb_long_buffer);
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <USB_Packet_Received+0xd8>)
 8001f0e:	f000 f8ff 	bl	8002110 <USB_Parse_Status>
			usb_rq = USB_RQ_STAT;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <USB_Packet_Received+0xd4>)
 8001f14:	2202      	movs	r2, #2
 8001f16:	701a      	strb	r2, [r3, #0]
		}
		usb_long_buffer[1] = 0xff;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <USB_Packet_Received+0xd8>)
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	705a      	strb	r2, [r3, #1]
 8001f1e:	e003      	b.n	8001f28 <USB_Packet_Received+0xc8>
	}else{
		usb_long_buffer[1] = 0xff;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <USB_Packet_Received+0xd8>)
 8001f22:	22ff      	movs	r2, #255	; 0xff
 8001f24:	705a      	strb	r2, [r3, #1]
	}
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200005f8 	.word	0x200005f8
 8001f34:	200001f9 	.word	0x200001f9
 8001f38:	20000470 	.word	0x20000470
 8001f3c:	200004b0 	.word	0x200004b0

08001f40 <USB_Parse_Config>:
void USB_Parse_Config(uint8_t *data){
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	usb_rq_sett_revert_flash = data[2];
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	789a      	ldrb	r2, [r3, #2]
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <USB_Parse_Config+0x1c>)
 8001f4e:	701a      	strb	r2, [r3, #0]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200001fa 	.word	0x200001fa

08001f60 <USB_Send_Config>:
void USB_Send_Config(){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_CONFIG_LENGTH;
 8001f66:	4b48      	ldr	r3, [pc, #288]	; (8002088 <USB_Send_Config+0x128>)
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_CONFIG;
 8001f6c:	4b46      	ldr	r3, [pc, #280]	; (8002088 <USB_Send_Config+0x128>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	705a      	strb	r2, [r3, #1]
	*(uint16_t *)&usb_tx_buffer[2] = potentiometer_min;
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <USB_Send_Config+0x12c>)
 8001f74:	4a46      	ldr	r2, [pc, #280]	; (8002090 <USB_Send_Config+0x130>)
 8001f76:	8812      	ldrh	r2, [r2, #0]
 8001f78:	801a      	strh	r2, [r3, #0]
	*(uint16_t *)&usb_tx_buffer[4] = potentiometer_max;
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <USB_Send_Config+0x134>)
 8001f7c:	4a46      	ldr	r2, [pc, #280]	; (8002098 <USB_Send_Config+0x138>)
 8001f7e:	8812      	ldrh	r2, [r2, #0]
 8001f80:	801a      	strh	r2, [r3, #0]
	usb_tx_buffer[6] = (uint8_t)((uint16_t)motor_max_power / 10);
 8001f82:	4b46      	ldr	r3, [pc, #280]	; (800209c <USB_Send_Config+0x13c>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	4a46      	ldr	r2, [pc, #280]	; (80020a0 <USB_Send_Config+0x140>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <USB_Send_Config+0x128>)
 8001f94:	719a      	strb	r2, [r3, #6]
	usb_tx_buffer[7] = motor_invert;
 8001f96:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <USB_Send_Config+0x144>)
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <USB_Send_Config+0x128>)
 8001f9c:	71da      	strb	r2, [r3, #7]
	usb_tx_buffer[8] = signal_ignore;
 8001f9e:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <USB_Send_Config+0x148>)
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	4b39      	ldr	r3, [pc, #228]	; (8002088 <USB_Send_Config+0x128>)
 8001fa4:	721a      	strb	r2, [r3, #8]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[9], (uint32_t)&signal_length);
 8001fa6:	4b41      	ldr	r3, [pc, #260]	; (80020ac <USB_Send_Config+0x14c>)
 8001fa8:	4a41      	ldr	r2, [pc, #260]	; (80020b0 <USB_Send_Config+0x150>)
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fd79 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[13], (uint32_t)&signal_timeout);
 8001fb2:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <USB_Send_Config+0x154>)
 8001fb4:	4a40      	ldr	r2, [pc, #256]	; (80020b8 <USB_Send_Config+0x158>)
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fd73 	bl	8000aa4 <General_Copy_32_Bit>
	usb_tx_buffer[17] = led_mode;
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <USB_Send_Config+0x15c>)
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <USB_Send_Config+0x128>)
 8001fc4:	745a      	strb	r2, [r3, #17]
	usb_tx_buffer[18] = pid_on;
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <USB_Send_Config+0x160>)
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <USB_Send_Config+0x128>)
 8001fcc:	749a      	strb	r2, [r3, #18]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[19], (uint32_t)&pid_kp_1);
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <USB_Send_Config+0x164>)
 8001fd0:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <USB_Send_Config+0x168>)
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fd65 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[23], (uint32_t)&pid_ki_1);
 8001fda:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <USB_Send_Config+0x16c>)
 8001fdc:	4a3c      	ldr	r2, [pc, #240]	; (80020d0 <USB_Send_Config+0x170>)
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fd5f 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[27], (uint32_t)&pid_kd_1);
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <USB_Send_Config+0x174>)
 8001fe8:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <USB_Send_Config+0x178>)
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fd59 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[31], (uint32_t)&pid_kp_1);
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <USB_Send_Config+0x17c>)
 8001ff4:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <USB_Send_Config+0x168>)
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fd53 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[35], (uint32_t)&pid_ki_1);
 8001ffe:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <USB_Send_Config+0x180>)
 8002000:	4a33      	ldr	r2, [pc, #204]	; (80020d0 <USB_Send_Config+0x170>)
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fd4d 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[39], (uint32_t)&pid_kd_1);
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <USB_Send_Config+0x184>)
 800200c:	4a32      	ldr	r2, [pc, #200]	; (80020d8 <USB_Send_Config+0x178>)
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fd47 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[43], (uint32_t)&pid_kp_1);
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <USB_Send_Config+0x188>)
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <USB_Send_Config+0x168>)
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fd41 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[47], (uint32_t)&pid_ki_1);
 8002022:	4b32      	ldr	r3, [pc, #200]	; (80020ec <USB_Send_Config+0x18c>)
 8002024:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <USB_Send_Config+0x170>)
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fd3b 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[51], (uint32_t)&pid_kd_1);
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <USB_Send_Config+0x190>)
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <USB_Send_Config+0x178>)
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fd35 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[55], (uint32_t)&pid_split_1);
 800203a:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <USB_Send_Config+0x194>)
 800203c:	4a2e      	ldr	r2, [pc, #184]	; (80020f8 <USB_Send_Config+0x198>)
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fd4c 	bl	8000ade <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[57], (uint32_t)&pid_split_2);
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <USB_Send_Config+0x19c>)
 8002048:	4a2d      	ldr	r2, [pc, #180]	; (8002100 <USB_Send_Config+0x1a0>)
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fd46 	bl	8000ade <General_Copy_16_Bit>
	usb_tx_buffer[59] = pid_sampling_time;
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <USB_Send_Config+0x1a4>)
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <USB_Send_Config+0x128>)
 8002058:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_CONFIG_LENGTH / 4) - 1);
 800205c:	220f      	movs	r2, #15
 800205e:	490a      	ldr	r1, [pc, #40]	; (8002088 <USB_Send_Config+0x128>)
 8002060:	4829      	ldr	r0, [pc, #164]	; (8002108 <USB_Send_Config+0x1a8>)
 8002062:	f001 fbf6 	bl	8003852 <HAL_CRC_Calculate>
 8002066:	4603      	mov	r3, r0
 8002068:	607b      	str	r3, [r7, #4]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[60], (uint32_t)&crc);
 800206a:	4a28      	ldr	r2, [pc, #160]	; (800210c <USB_Send_Config+0x1ac>)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4610      	mov	r0, r2
 8002072:	f7fe fd17 	bl	8000aa4 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_CONFIG_LENGTH);
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	4803      	ldr	r0, [pc, #12]	; (8002088 <USB_Send_Config+0x128>)
 800207a:	f009 f8c5 	bl	800b208 <CDC_Transmit_FS>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000570 	.word	0x20000570
 800208c:	20000572 	.word	0x20000572
 8002090:	20000422 	.word	0x20000422
 8002094:	20000574 	.word	0x20000574
 8002098:	20000420 	.word	0x20000420
 800209c:	20000000 	.word	0x20000000
 80020a0:	cccccccd 	.word	0xcccccccd
 80020a4:	200001c7 	.word	0x200001c7
 80020a8:	20000468 	.word	0x20000468
 80020ac:	20000579 	.word	0x20000579
 80020b0:	20000464 	.word	0x20000464
 80020b4:	2000057d 	.word	0x2000057d
 80020b8:	2000046c 	.word	0x2000046c
 80020bc:	200001c4 	.word	0x200001c4
 80020c0:	20000020 	.word	0x20000020
 80020c4:	20000583 	.word	0x20000583
 80020c8:	20000004 	.word	0x20000004
 80020cc:	20000587 	.word	0x20000587
 80020d0:	200001cc 	.word	0x200001cc
 80020d4:	2000058b 	.word	0x2000058b
 80020d8:	20000008 	.word	0x20000008
 80020dc:	2000058f 	.word	0x2000058f
 80020e0:	20000593 	.word	0x20000593
 80020e4:	20000597 	.word	0x20000597
 80020e8:	2000059b 	.word	0x2000059b
 80020ec:	2000059f 	.word	0x2000059f
 80020f0:	200005a3 	.word	0x200005a3
 80020f4:	200005a7 	.word	0x200005a7
 80020f8:	2000001c 	.word	0x2000001c
 80020fc:	200005a9 	.word	0x200005a9
 8002100:	2000001e 	.word	0x2000001e
 8002104:	20000002 	.word	0x20000002
 8002108:	200005f8 	.word	0x200005f8
 800210c:	200005ac 	.word	0x200005ac

08002110 <USB_Parse_Status>:
void USB_Parse_Status(uint8_t *data){
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	potentiometer_min = *(uint16_t *)&data[2];
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	885a      	ldrh	r2, [r3, #2]
 800211c:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <USB_Parse_Status+0x188>)
 800211e:	801a      	strh	r2, [r3, #0]
	potentiometer_max = *(uint16_t *)&data[4];
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	889a      	ldrh	r2, [r3, #4]
 8002124:	4b5d      	ldr	r3, [pc, #372]	; (800229c <USB_Parse_Status+0x18c>)
 8002126:	801a      	strh	r2, [r3, #0]
	motor_max_power = (uint16_t)data[6] * 10;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3306      	adds	r3, #6
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4413      	add	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <USB_Parse_Status+0x190>)
 800213c:	801a      	strh	r2, [r3, #0]
	motor_invert = data[7];
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	79da      	ldrb	r2, [r3, #7]
 8002142:	4b58      	ldr	r3, [pc, #352]	; (80022a4 <USB_Parse_Status+0x194>)
 8002144:	701a      	strb	r2, [r3, #0]
	signal_ignore = data[8];
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7a1a      	ldrb	r2, [r3, #8]
 800214a:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <USB_Parse_Status+0x198>)
 800214c:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&signal_length, (uint32_t)&data[9]);
 800214e:	4a57      	ldr	r2, [pc, #348]	; (80022ac <USB_Parse_Status+0x19c>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3309      	adds	r3, #9
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	f7fe fca4 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&signal_timeout, (uint32_t)&data[13]);
 800215c:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <USB_Parse_Status+0x1a0>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	330d      	adds	r3, #13
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7fe fc9d 	bl	8000aa4 <General_Copy_32_Bit>
	led_mode = data[17];
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7c5a      	ldrb	r2, [r3, #17]
 800216e:	4b51      	ldr	r3, [pc, #324]	; (80022b4 <USB_Parse_Status+0x1a4>)
 8002170:	701a      	strb	r2, [r3, #0]
	pid_on = data[18];
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7c9a      	ldrb	r2, [r3, #18]
 8002176:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <USB_Parse_Status+0x1a8>)
 8002178:	701a      	strb	r2, [r3, #0]
	General_Copy_32_Bit((uint32_t)&pid_kp_1, (uint32_t)&data[19]);
 800217a:	4a50      	ldr	r2, [pc, #320]	; (80022bc <USB_Parse_Status+0x1ac>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3313      	adds	r3, #19
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f7fe fc8e 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_1, (uint32_t)&data[23]);
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <USB_Parse_Status+0x1b0>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3317      	adds	r3, #23
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f7fe fc87 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_1, (uint32_t)&data[27]);
 8002196:	4a4b      	ldr	r2, [pc, #300]	; (80022c4 <USB_Parse_Status+0x1b4>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	331b      	adds	r3, #27
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f7fe fc80 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_2, (uint32_t)&data[31]);
 80021a4:	4a48      	ldr	r2, [pc, #288]	; (80022c8 <USB_Parse_Status+0x1b8>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	331f      	adds	r3, #31
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f7fe fc79 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_2, (uint32_t)&data[35]);
 80021b2:	4a46      	ldr	r2, [pc, #280]	; (80022cc <USB_Parse_Status+0x1bc>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3323      	adds	r3, #35	; 0x23
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f7fe fc72 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_2, (uint32_t)&data[39]);
 80021c0:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <USB_Parse_Status+0x1c0>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3327      	adds	r3, #39	; 0x27
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f7fe fc6b 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kp_3, (uint32_t)&data[43]);
 80021ce:	4a41      	ldr	r2, [pc, #260]	; (80022d4 <USB_Parse_Status+0x1c4>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	332b      	adds	r3, #43	; 0x2b
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f7fe fc64 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_ki_3, (uint32_t)&data[47]);
 80021dc:	4a3e      	ldr	r2, [pc, #248]	; (80022d8 <USB_Parse_Status+0x1c8>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	332f      	adds	r3, #47	; 0x2f
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f7fe fc5d 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&pid_kd_3, (uint32_t)&data[51]);
 80021ea:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <USB_Parse_Status+0x1cc>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3333      	adds	r3, #51	; 0x33
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f7fe fc56 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_1, (uint32_t)&data[55]);
 80021f8:	4a39      	ldr	r2, [pc, #228]	; (80022e0 <USB_Parse_Status+0x1d0>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3337      	adds	r3, #55	; 0x37
 80021fe:	4619      	mov	r1, r3
 8002200:	4610      	mov	r0, r2
 8002202:	f7fe fc6c 	bl	8000ade <General_Copy_16_Bit>
	General_Copy_16_Bit((uint32_t)&pid_split_2, (uint32_t)&data[57]);
 8002206:	4a37      	ldr	r2, [pc, #220]	; (80022e4 <USB_Parse_Status+0x1d4>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3339      	adds	r3, #57	; 0x39
 800220c:	4619      	mov	r1, r3
 800220e:	4610      	mov	r0, r2
 8002210:	f7fe fc65 	bl	8000ade <General_Copy_16_Bit>
	pid_sampling_time = data[59];
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <USB_Parse_Status+0x1d8>)
 800221c:	701a      	strb	r2, [r3, #0]
	if(PID_Get_Sampling_Time() != pid_sampling_time){
 800221e:	f7fe fe2f 	bl	8000e80 <PID_Get_Sampling_Time>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <USB_Parse_Status+0x1d8>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	429a      	cmp	r2, r3
 800222e:	d005      	beq.n	800223c <USB_Parse_Status+0x12c>
		PID_Set_Sampling_Time(pid_sampling_time);
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <USB_Parse_Status+0x1d8>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fe34 	bl	8000ea4 <PID_Set_Sampling_Time>
	}
	float new_pid_setpoint = 0;
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
	General_Copy_32_Bit((uint32_t)&new_pid_setpoint, (uint32_t)&data[60]);
 8002242:	f107 020c 	add.w	r2, r7, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	333c      	adds	r3, #60	; 0x3c
 800224a:	4619      	mov	r1, r3
 800224c:	4610      	mov	r0, r2
 800224e:	f7fe fc29 	bl	8000aa4 <General_Copy_32_Bit>
	if(signal_ignore){
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <USB_Parse_Status+0x198>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00f      	beq.n	800227a <USB_Parse_Status+0x16a>
		if(pid_setpoint != new_pid_setpoint){
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <USB_Parse_Status+0x1dc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fa14 	bl	8000690 <__aeabi_fcmpeq>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <USB_Parse_Status+0x164>
			led_position_changed = 1;
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <USB_Parse_Status+0x1e0>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
		}
		pid_setpoint = new_pid_setpoint;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <USB_Parse_Status+0x1dc>)
 8002278:	6013      	str	r3, [r2, #0]
	}
	usb_rq_stat_phold = data[64];
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <USB_Parse_Status+0x1e4>)
 8002282:	701a      	strb	r2, [r3, #0]
	usb_rq_stat_motor = data[65];
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <USB_Parse_Status+0x1e8>)
 800228c:	701a      	strb	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000422 	.word	0x20000422
 800229c:	20000420 	.word	0x20000420
 80022a0:	20000000 	.word	0x20000000
 80022a4:	200001c7 	.word	0x200001c7
 80022a8:	20000468 	.word	0x20000468
 80022ac:	20000464 	.word	0x20000464
 80022b0:	2000046c 	.word	0x2000046c
 80022b4:	200001c4 	.word	0x200001c4
 80022b8:	20000020 	.word	0x20000020
 80022bc:	20000004 	.word	0x20000004
 80022c0:	200001cc 	.word	0x200001cc
 80022c4:	20000008 	.word	0x20000008
 80022c8:	2000000c 	.word	0x2000000c
 80022cc:	200001d0 	.word	0x200001d0
 80022d0:	20000010 	.word	0x20000010
 80022d4:	20000014 	.word	0x20000014
 80022d8:	200001d4 	.word	0x200001d4
 80022dc:	20000018 	.word	0x20000018
 80022e0:	2000001c 	.word	0x2000001c
 80022e4:	2000001e 	.word	0x2000001e
 80022e8:	20000002 	.word	0x20000002
 80022ec:	20000024 	.word	0x20000024
 80022f0:	200001c5 	.word	0x200001c5
 80022f4:	200001fc 	.word	0x200001fc
 80022f8:	200001fb 	.word	0x200001fb

080022fc <USB_Send_Status>:
void USB_Send_Status(){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
	usb_tx_buffer[0] = USB_TX_STATUS_LENGTH;
 8002302:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <USB_Send_Status+0x84>)
 8002304:	2214      	movs	r2, #20
 8002306:	701a      	strb	r2, [r3, #0]
	usb_tx_buffer[1] = USB_CMD_STATUS;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <USB_Send_Status+0x84>)
 800230a:	2201      	movs	r2, #1
 800230c:	705a      	strb	r2, [r3, #1]
	usb_tx_buffer[2] = pid_running;
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <USB_Send_Status+0x88>)
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <USB_Send_Status+0x84>)
 8002314:	709a      	strb	r2, [r3, #2]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[3], (uint32_t)&pid_setpoint);
 8002316:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <USB_Send_Status+0x8c>)
 8002318:	4a1c      	ldr	r2, [pc, #112]	; (800238c <USB_Send_Status+0x90>)
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fbc1 	bl	8000aa4 <General_Copy_32_Bit>
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[7], (uint32_t)&potentiometer_position);
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <USB_Send_Status+0x94>)
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <USB_Send_Status+0x98>)
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fbbb 	bl	8000aa4 <General_Copy_32_Bit>
	int16_t motor_val = Motor_Get();
 800232e:	f7fe fd35 	bl	8000d9c <Motor_Get>
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
	General_Copy_16_Bit((uint32_t)&usb_tx_buffer[11], (uint32_t)&motor_val);
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <USB_Send_Status+0x9c>)
 8002338:	1dbb      	adds	r3, r7, #6
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7fe fbce 	bl	8000ade <General_Copy_16_Bit>
	usb_tx_buffer[13] = USB_CRC_PADDING;
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <USB_Send_Status+0x84>)
 8002344:	2200      	movs	r2, #0
 8002346:	735a      	strb	r2, [r3, #13]
	usb_tx_buffer[14] = USB_CRC_PADDING;
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <USB_Send_Status+0x84>)
 800234a:	2200      	movs	r2, #0
 800234c:	739a      	strb	r2, [r3, #14]
	usb_tx_buffer[15] = USB_CRC_PADDING;
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <USB_Send_Status+0x84>)
 8002350:	2200      	movs	r2, #0
 8002352:	73da      	strb	r2, [r3, #15]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&usb_tx_buffer, (USB_TX_STATUS_LENGTH / 4) - 1);
 8002354:	2204      	movs	r2, #4
 8002356:	490a      	ldr	r1, [pc, #40]	; (8002380 <USB_Send_Status+0x84>)
 8002358:	4810      	ldr	r0, [pc, #64]	; (800239c <USB_Send_Status+0xa0>)
 800235a:	f001 fa7a 	bl	8003852 <HAL_CRC_Calculate>
 800235e:	4603      	mov	r3, r0
 8002360:	603b      	str	r3, [r7, #0]
	General_Copy_32_Bit((uint32_t)&usb_tx_buffer[16], (uint32_t)&crc);
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <USB_Send_Status+0xa4>)
 8002364:	463b      	mov	r3, r7
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7fe fb9b 	bl	8000aa4 <General_Copy_32_Bit>
	CDC_Transmit_FS((uint8_t *)&usb_tx_buffer, USB_TX_STATUS_LENGTH);
 800236e:	2114      	movs	r1, #20
 8002370:	4803      	ldr	r0, [pc, #12]	; (8002380 <USB_Send_Status+0x84>)
 8002372:	f008 ff49 	bl	800b208 <CDC_Transmit_FS>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000570 	.word	0x20000570
 8002384:	200001d8 	.word	0x200001d8
 8002388:	20000573 	.word	0x20000573
 800238c:	20000024 	.word	0x20000024
 8002390:	20000577 	.word	0x20000577
 8002394:	200001f4 	.word	0x200001f4
 8002398:	2000057b 	.word	0x2000057b
 800239c:	200005f8 	.word	0x200005f8
 80023a0:	20000580 	.word	0x20000580

080023a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a8:	f000 fbe4 	bl	8002b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ac:	f000 f813 	bl	80023d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b0:	f000 f9de 	bl	8002770 <MX_GPIO_Init>
  MX_ADC1_Init();
 80023b4:	f000 f86c 	bl	8002490 <MX_ADC1_Init>
  MX_CRC_Init();
 80023b8:	f000 f8a8 	bl	800250c <MX_CRC_Init>
  MX_TIM2_Init();
 80023bc:	f000 f8ba 	bl	8002534 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023c0:	f000 f93a 	bl	8002638 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023c4:	f000 f986 	bl	80026d4 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80023c8:	f008 fe5a 	bl	800b080 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
App_Init();
 80023cc:	f7fe fa14 	bl	80007f8 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
App_Loop();
 80023d0:	f7fe fa20 	bl	8000814 <App_Loop>
 80023d4:	e7fc      	b.n	80023d0 <main+0x2c>

080023d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b094      	sub	sp, #80	; 0x50
 80023da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e0:	2228      	movs	r2, #40	; 0x28
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f009 fb1f 	bl	800ba28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
 80023f8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002406:	2301      	movs	r3, #1
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800240a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002414:	2301      	movs	r3, #1
 8002416:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002418:	2302      	movs	r3, #2
 800241a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800241c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002422:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fad5 	bl	80059dc <HAL_RCC_OscConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002438:	f000 fa04 	bl	8002844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243c:	230f      	movs	r3, #15
 800243e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002440:	2302      	movs	r3, #2
 8002442:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	2102      	movs	r1, #2
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fd3f 	bl	8005edc <HAL_RCC_ClockConfig>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002464:	f000 f9ee 	bl	8002844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002468:	2312      	movs	r3, #18
 800246a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800246c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002470:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f003 feb5 	bl	80061e8 <HAL_RCCEx_PeriphCLKConfig>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002484:	f000 f9de 	bl	8002844 <Error_Handler>
  }
}
 8002488:	bf00      	nop
 800248a:	3750      	adds	r7, #80	; 0x50
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80024a0:	4b18      	ldr	r3, [pc, #96]	; (8002504 <MX_ADC1_Init+0x74>)
 80024a2:	4a19      	ldr	r2, [pc, #100]	; (8002508 <MX_ADC1_Init+0x78>)
 80024a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <MX_ADC1_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <MX_ADC1_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <MX_ADC1_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <MX_ADC1_Init+0x74>)
 80024ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <MX_ADC1_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <MX_ADC1_Init+0x74>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <MX_ADC1_Init+0x74>)
 80024ce:	f000 fbb3 	bl	8002c38 <HAL_ADC_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80024d8:	f000 f9b4 	bl	8002844 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80024dc:	2304      	movs	r3, #4
 80024de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80024e4:	2307      	movs	r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <MX_ADC1_Init+0x74>)
 80024ee:	f000 fe3d 	bl	800316c <HAL_ADC_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80024f8:	f000 f9a4 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000648 	.word	0x20000648
 8002508:	40012400 	.word	0x40012400

0800250c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_CRC_Init+0x20>)
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <MX_CRC_Init+0x24>)
 8002514:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_CRC_Init+0x20>)
 8002518:	f001 f97f 	bl	800381a <HAL_CRC_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002522:	f000 f98f 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200005f8 	.word	0x200005f8
 8002530:	40023000 	.word	0x40023000

08002534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	; 0x38
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002548:	f107 0320 	add.w	r3, r7, #32
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <MX_TIM2_Init+0x100>)
 8002566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800256a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <MX_TIM2_Init+0x100>)
 800256e:	2207      	movs	r2, #7
 8002570:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <MX_TIM2_Init+0x100>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <MX_TIM2_Init+0x100>)
 800257a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800257e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <MX_TIM2_Init+0x100>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <MX_TIM2_Init+0x100>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800258c:	4829      	ldr	r0, [pc, #164]	; (8002634 <MX_TIM2_Init+0x100>)
 800258e:	f003 ffa5 	bl	80064dc <HAL_TIM_Base_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002598:	f000 f954 	bl	8002844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a6:	4619      	mov	r1, r3
 80025a8:	4822      	ldr	r0, [pc, #136]	; (8002634 <MX_TIM2_Init+0x100>)
 80025aa:	f004 fb71 	bl	8006c90 <HAL_TIM_ConfigClockSource>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025b4:	f000 f946 	bl	8002844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025b8:	481e      	ldr	r0, [pc, #120]	; (8002634 <MX_TIM2_Init+0x100>)
 80025ba:	f004 f8a9 	bl	8006710 <HAL_TIM_PWM_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025c4:	f000 f93e 	bl	8002844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d0:	f107 0320 	add.w	r3, r7, #32
 80025d4:	4619      	mov	r1, r3
 80025d6:	4817      	ldr	r0, [pc, #92]	; (8002634 <MX_TIM2_Init+0x100>)
 80025d8:	f004 fee6 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80025e2:	f000 f92f 	bl	8002844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e6:	2360      	movs	r3, #96	; 0x60
 80025e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80025ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80025f0:	2302      	movs	r3, #2
 80025f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	480d      	ldr	r0, [pc, #52]	; (8002634 <MX_TIM2_Init+0x100>)
 8002600:	f004 fa88 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800260a:	f000 f91b 	bl	8002844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2204      	movs	r2, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4807      	ldr	r0, [pc, #28]	; (8002634 <MX_TIM2_Init+0x100>)
 8002616:	f004 fa7d 	bl	8006b14 <HAL_TIM_PWM_ConfigChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002620:	f000 f910 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002624:	4803      	ldr	r0, [pc, #12]	; (8002634 <MX_TIM2_Init+0x100>)
 8002626:	f000 f9f3 	bl	8002a10 <HAL_TIM_MspPostInit>

}
 800262a:	bf00      	nop
 800262c:	3738      	adds	r7, #56	; 0x38
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000678 	.word	0x20000678

08002638 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263e:	f107 0308 	add.w	r3, r7, #8
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264c:	463b      	mov	r3, r7
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <MX_TIM3_Init+0x94>)
 8002656:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <MX_TIM3_Init+0x98>)
 8002658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <MX_TIM3_Init+0x94>)
 800265c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_TIM3_Init+0x94>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <MX_TIM3_Init+0x94>)
 800266a:	22c7      	movs	r2, #199	; 0xc7
 800266c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <MX_TIM3_Init+0x94>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <MX_TIM3_Init+0x94>)
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800267a:	4814      	ldr	r0, [pc, #80]	; (80026cc <MX_TIM3_Init+0x94>)
 800267c:	f003 ff2e 	bl	80064dc <HAL_TIM_Base_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002686:	f000 f8dd 	bl	8002844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800268a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	4619      	mov	r1, r3
 8002696:	480d      	ldr	r0, [pc, #52]	; (80026cc <MX_TIM3_Init+0x94>)
 8002698:	f004 fafa 	bl	8006c90 <HAL_TIM_ConfigClockSource>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80026a2:	f000 f8cf 	bl	8002844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ae:	463b      	mov	r3, r7
 80026b0:	4619      	mov	r1, r3
 80026b2:	4806      	ldr	r0, [pc, #24]	; (80026cc <MX_TIM3_Init+0x94>)
 80026b4:	f004 fe78 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80026be:	f000 f8c1 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000600 	.word	0x20000600
 80026d0:	40000400 	.word	0x40000400

080026d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e8:	463b      	mov	r3, r7
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <MX_TIM4_Init+0x94>)
 80026f2:	4a1e      	ldr	r2, [pc, #120]	; (800276c <MX_TIM4_Init+0x98>)
 80026f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 143;
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <MX_TIM4_Init+0x94>)
 80026f8:	228f      	movs	r2, #143	; 0x8f
 80026fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <MX_TIM4_Init+0x94>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002702:	4b19      	ldr	r3, [pc, #100]	; (8002768 <MX_TIM4_Init+0x94>)
 8002704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002708:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <MX_TIM4_Init+0x94>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <MX_TIM4_Init+0x94>)
 8002712:	2200      	movs	r2, #0
 8002714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002716:	4814      	ldr	r0, [pc, #80]	; (8002768 <MX_TIM4_Init+0x94>)
 8002718:	f003 fee0 	bl	80064dc <HAL_TIM_Base_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002722:	f000 f88f 	bl	8002844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	4619      	mov	r1, r3
 8002732:	480d      	ldr	r0, [pc, #52]	; (8002768 <MX_TIM4_Init+0x94>)
 8002734:	f004 faac 	bl	8006c90 <HAL_TIM_ConfigClockSource>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800273e:	f000 f881 	bl	8002844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800274a:	463b      	mov	r3, r7
 800274c:	4619      	mov	r1, r3
 800274e:	4806      	ldr	r0, [pc, #24]	; (8002768 <MX_TIM4_Init+0x94>)
 8002750:	f004 fe2a 	bl	80073a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800275a:	f000 f873 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200005b0 	.word	0x200005b0
 800276c:	40000800 	.word	0x40000800

08002770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <MX_GPIO_Init+0xc4>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a2a      	ldr	r2, [pc, #168]	; (8002834 <MX_GPIO_Init+0xc4>)
 800278a:	f043 0320 	orr.w	r3, r3, #32
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b28      	ldr	r3, [pc, #160]	; (8002834 <MX_GPIO_Init+0xc4>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <MX_GPIO_Init+0xc4>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	4a24      	ldr	r2, [pc, #144]	; (8002834 <MX_GPIO_Init+0xc4>)
 80027a2:	f043 0304 	orr.w	r3, r3, #4
 80027a6:	6193      	str	r3, [r2, #24]
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <MX_GPIO_Init+0xc4>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <MX_GPIO_Init+0xc4>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <MX_GPIO_Init+0xc4>)
 80027ba:	f043 0308 	orr.w	r3, r3, #8
 80027be:	6193      	str	r3, [r2, #24]
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <MX_GPIO_Init+0xc4>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2180      	movs	r1, #128	; 0x80
 80027d0:	4819      	ldr	r0, [pc, #100]	; (8002838 <MX_GPIO_Init+0xc8>)
 80027d2:	f001 fc0c 	bl	8003fee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027da:	2301      	movs	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027de:	2302      	movs	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	4619      	mov	r1, r3
 80027ec:	4812      	ldr	r0, [pc, #72]	; (8002838 <MX_GPIO_Init+0xc8>)
 80027ee:	f001 fa63 	bl	8003cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_Pin USB_DET_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin|USB_DET_Pin;
 80027f2:	f240 2302 	movw	r3, #514	; 0x202
 80027f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <MX_GPIO_Init+0xcc>)
 80027fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027fc:	2302      	movs	r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 0310 	add.w	r3, r7, #16
 8002804:	4619      	mov	r1, r3
 8002806:	480e      	ldr	r0, [pc, #56]	; (8002840 <MX_GPIO_Init+0xd0>)
 8002808:	f001 fa56 	bl	8003cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	2007      	movs	r0, #7
 8002812:	f000 ffcc 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002816:	2007      	movs	r0, #7
 8002818:	f000 ffe5 	bl	80037e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2102      	movs	r1, #2
 8002820:	2017      	movs	r0, #23
 8002822:	f000 ffc4 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002826:	2017      	movs	r0, #23
 8002828:	f000 ffdd 	bl	80037e6 <HAL_NVIC_EnableIRQ>

}
 800282c:	bf00      	nop
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	40010800 	.word	0x40010800
 800283c:	10310000 	.word	0x10310000
 8002840:	40010c00 	.word	0x40010c00

08002844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002848:	b672      	cpsid	i
}
 800284a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800284c:	e7fe      	b.n	800284c <Error_Handler+0x8>
	...

08002850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_MspInit+0x5c>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_MspInit+0x5c>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6193      	str	r3, [r2, #24]
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_MspInit+0x5c>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_MspInit+0x5c>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_MspInit+0x5c>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_MspInit+0x5c>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_MspInit+0x60>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_MspInit+0x60>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40010000 	.word	0x40010000

080028b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a18      	ldr	r2, [pc, #96]	; (8002930 <HAL_ADC_MspInit+0x7c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d129      	bne.n	8002928 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_ADC_MspInit+0x80>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a16      	ldr	r2, [pc, #88]	; (8002934 <HAL_ADC_MspInit+0x80>)
 80028da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_ADC_MspInit+0x80>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_ADC_MspInit+0x80>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a10      	ldr	r2, [pc, #64]	; (8002934 <HAL_ADC_MspInit+0x80>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_ADC_MspInit+0x80>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8002904:	2310      	movs	r3, #16
 8002906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002908:	2303      	movs	r3, #3
 800290a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4619      	mov	r1, r3
 8002912:	4809      	ldr	r0, [pc, #36]	; (8002938 <HAL_ADC_MspInit+0x84>)
 8002914:	f001 f9d0 	bl	8003cb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002918:	2200      	movs	r2, #0
 800291a:	2100      	movs	r1, #0
 800291c:	2012      	movs	r0, #18
 800291e:	f000 ff46 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002922:	2012      	movs	r0, #18
 8002924:	f000 ff5f 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002928:	bf00      	nop
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40012400 	.word	0x40012400
 8002934:	40021000 	.word	0x40021000
 8002938:	40010800 	.word	0x40010800

0800293c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_CRC_MspInit+0x34>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10b      	bne.n	8002966 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_CRC_MspInit+0x38>)
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_CRC_MspInit+0x38>)
 8002954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002958:	6153      	str	r3, [r2, #20]
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_CRC_MspInit+0x38>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	40023000 	.word	0x40023000
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d10c      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800298a:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029a2:	e02a      	b.n	80029fa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <HAL_TIM_Base_MspInit+0x90>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d114      	bne.n	80029d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	61d3      	str	r3, [r2, #28]
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2101      	movs	r1, #1
 80029ca:	201d      	movs	r0, #29
 80029cc:	f000 feef 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029d0:	201d      	movs	r0, #29
 80029d2:	f000 ff08 	bl	80037e6 <HAL_NVIC_EnableIRQ>
}
 80029d6:	e010      	b.n	80029fa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <HAL_TIM_Base_MspInit+0x94>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10b      	bne.n	80029fa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	61d3      	str	r3, [r2, #28]
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_TIM_Base_MspInit+0x8c>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800

08002a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0310 	add.w	r3, r7, #16
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d117      	bne.n	8002a60 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_TIM_MspPostInit+0x58>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <HAL_TIM_MspPostInit+0x58>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	6193      	str	r3, [r2, #24]
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_TIM_MspPostInit+0x58>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a50:	2303      	movs	r3, #3
 8002a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4804      	ldr	r0, [pc, #16]	; (8002a6c <HAL_TIM_MspPostInit+0x5c>)
 8002a5c:	f001 f92c 	bl	8003cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010800 	.word	0x40010800

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <NMI_Handler+0x4>

08002a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <MemManage_Handler+0x4>

08002a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a86:	e7fe      	b.n	8002a86 <BusFault_Handler+0x4>

08002a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a8c:	e7fe      	b.n	8002a8c <UsageFault_Handler+0x4>

08002a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ab6:	f000 f8a3 	bl	8002c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 8002aba:	f7fe f851 	bl	8000b60 <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f001 faaa 	bl	8004020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <ADC1_2_IRQHandler+0x10>)
 8002ad6:	f000 fa7d 	bl	8002fd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000648 	.word	0x20000648

08002ae4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002aea:	f001 fbe2 	bl	80042b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000137c 	.word	0x2000137c

08002af8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002afc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b00:	f001 fa8e 	bl	8004020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <TIM3_IRQHandler+0x10>)
 8002b0e:	f003 fef9 	bl	8006904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000600 	.word	0x20000600

08002b1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b28:	480c      	ldr	r0, [pc, #48]	; (8002b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b2a:	490d      	ldr	r1, [pc, #52]	; (8002b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b30:	e002      	b.n	8002b38 <LoopCopyDataInit>

08002b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b36:	3304      	adds	r3, #4

08002b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b3c:	d3f9      	bcc.n	8002b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b40:	4c0a      	ldr	r4, [pc, #40]	; (8002b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b44:	e001      	b.n	8002b4a <LoopFillZerobss>

08002b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b48:	3204      	adds	r2, #4

08002b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b4c:	d3fb      	bcc.n	8002b46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b4e:	f7ff ffe5 	bl	8002b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b52:	f008 ff37 	bl	800b9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b56:	f7ff fc25 	bl	80023a4 <main>
  bx lr
 8002b5a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b60:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8002b64:	0800bad4 	.word	0x0800bad4
  ldr r2, =_sbss
 8002b68:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8002b6c:	20001668 	.word	0x20001668

08002b70 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b70:	e7fe      	b.n	8002b70 <CAN1_RX1_IRQHandler>
	...

08002b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_Init+0x28>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <HAL_Init+0x28>)
 8002b7e:	f043 0310 	orr.w	r3, r3, #16
 8002b82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b84:	2003      	movs	r0, #3
 8002b86:	f000 fe07 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b8a:	200f      	movs	r0, #15
 8002b8c:	f000 f808 	bl	8002ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b90:	f7ff fe5e 	bl	8002850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000

08002ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_InitTick+0x54>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <HAL_InitTick+0x58>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fe1f 	bl	8003802 <HAL_SYSTICK_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e00e      	b.n	8002bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b0f      	cmp	r3, #15
 8002bd2:	d80a      	bhi.n	8002bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	f000 fde7 	bl	80037ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be0:	4a06      	ldr	r2, [pc, #24]	; (8002bfc <HAL_InitTick+0x5c>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000028 	.word	0x20000028
 8002bf8:	20000030 	.word	0x20000030
 8002bfc:	2000002c 	.word	0x2000002c

08002c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_IncTick+0x1c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_IncTick+0x20>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a03      	ldr	r2, [pc, #12]	; (8002c20 <HAL_IncTick+0x20>)
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000030 	.word	0x20000030
 8002c20:	200006c0 	.word	0x200006c0

08002c24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return uwTick;
 8002c28:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <HAL_GetTick+0x10>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	200006c0 	.word	0x200006c0

08002c38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0be      	b.n	8002dd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fe1c 	bl	80028b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fbc7 	bl	8003410 <ADC_ConversionStop_Disable>
 8002c82:	4603      	mov	r3, r0
 8002c84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 8099 	bne.w	8002dc6 <HAL_ADC_Init+0x18e>
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 8095 	bne.w	8002dc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ca4:	f023 0302 	bic.w	r3, r3, #2
 8002ca8:	f043 0202 	orr.w	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7b1b      	ldrb	r3, [r3, #12]
 8002cbe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cc0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd0:	d003      	beq.n	8002cda <HAL_ADC_Init+0xa2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <HAL_ADC_Init+0xa8>
 8002cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cde:	e000      	b.n	8002ce2 <HAL_ADC_Init+0xaa>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7d1b      	ldrb	r3, [r3, #20]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d119      	bne.n	8002d24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7b1b      	ldrb	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	035a      	lsls	r2, r3, #13
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	e00b      	b.n	8002d24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_ADC_Init+0x1a8>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d54:	d003      	beq.n	8002d5e <HAL_ADC_Init+0x126>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d104      	bne.n	8002d68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	051b      	lsls	r3, r3, #20
 8002d66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_ADC_Init+0x1ac>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d10b      	bne.n	8002da4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002da2:	e018      	b.n	8002dd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f023 0312 	bic.w	r3, r3, #18
 8002dac:	f043 0210 	orr.w	r2, r3, #16
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dc4:	e007      	b.n	8002dd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	f043 0210 	orr.w	r2, r3, #16
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	ffe1f7fd 	.word	0xffe1f7fd
 8002de4:	ff1f0efe 	.word	0xff1f0efe

08002de8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Start_IT+0x1a>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0a0      	b.n	8002f44 <HAL_ADC_Start_IT+0x15c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 faa6 	bl	800335c <ADC_Enable>
 8002e10:	4603      	mov	r3, r0
 8002e12:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f040 808f 	bne.w	8002f3a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a45      	ldr	r2, [pc, #276]	; (8002f4c <HAL_ADC_Start_IT+0x164>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d105      	bne.n	8002e46 <HAL_ADC_Start_IT+0x5e>
 8002e3a:	4b45      	ldr	r3, [pc, #276]	; (8002f50 <HAL_ADC_Start_IT+0x168>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d115      	bne.n	8002e72 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d026      	beq.n	8002eae <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e70:	e01d      	b.n	8002eae <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a33      	ldr	r2, [pc, #204]	; (8002f50 <HAL_ADC_Start_IT+0x168>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_ADC_Start_IT+0xaa>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <HAL_ADC_Start_IT+0x164>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10d      	bne.n	8002eae <HAL_ADC_Start_IT+0xc6>
 8002e92:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <HAL_ADC_Start_IT+0x168>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ea6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	f023 0206 	bic.w	r2, r3, #6
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ec6:	e002      	b.n	8002ece <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f06f 0202 	mvn.w	r2, #2
 8002ede:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0220 	orr.w	r2, r2, #32
 8002eee:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002efa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002efe:	d113      	bne.n	8002f28 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_ADC_Start_IT+0x164>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d105      	bne.n	8002f16 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_ADC_Start_IT+0x168>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	e00c      	b.n	8002f42 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	e003      	b.n	8002f42 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40012800 	.word	0x40012800
 8002f50:	40012400 	.word	0x40012400

08002f54 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_Stop_IT+0x1a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e022      	b.n	8002fb4 <HAL_ADC_Stop_IT+0x60>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa4a 	bl	8003410 <ADC_ConversionStop_Disable>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d111      	bne.n	8002faa <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0220 	bic.w	r2, r2, #32
 8002f94:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d140      	bne.n	800306c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d139      	bne.n	800306c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800301a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800301e:	d11d      	bne.n	800305c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003024:	2b00      	cmp	r3, #0
 8003026:	d119      	bne.n	800305c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0220 	bic.w	r2, r2, #32
 8003036:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fd fd5b 	bl	8000b18 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f06f 0212 	mvn.w	r2, #18
 800306a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b80      	cmp	r3, #128	; 0x80
 8003078:	d14f      	bne.n	800311a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d148      	bne.n	800311a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80030aa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80030ae:	d012      	beq.n	80030d6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d125      	bne.n	800310a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030cc:	d11d      	bne.n	800310a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d119      	bne.n	800310a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa6e 	bl	80035ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 020c 	mvn.w	r2, #12
 8003118:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b40      	cmp	r3, #64	; 0x40
 8003126:	d114      	bne.n	8003152 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10d      	bne.n	8003152 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f809 	bl	800315a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x20>
 8003188:	2302      	movs	r3, #2
 800318a:	e0dc      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1da>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b06      	cmp	r3, #6
 800319a:	d81c      	bhi.n	80031d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3b05      	subs	r3, #5
 80031ae:	221f      	movs	r2, #31
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	4019      	ands	r1, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	3b05      	subs	r3, #5
 80031c8:	fa00 f203 	lsl.w	r2, r0, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	635a      	str	r2, [r3, #52]	; 0x34
 80031d4:	e03c      	b.n	8003250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d81c      	bhi.n	8003218 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b23      	subs	r3, #35	; 0x23
 80031f0:	221f      	movs	r2, #31
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	4019      	ands	r1, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b23      	subs	r3, #35	; 0x23
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
 8003216:	e01b      	b.n	8003250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	3b41      	subs	r3, #65	; 0x41
 800322a:	221f      	movs	r2, #31
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	4019      	ands	r1, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	3b41      	subs	r3, #65	; 0x41
 8003244:	fa00 f203 	lsl.w	r2, r0, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b09      	cmp	r3, #9
 8003256:	d91c      	bls.n	8003292 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68d9      	ldr	r1, [r3, #12]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	3b1e      	subs	r3, #30
 800326a:	2207      	movs	r2, #7
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	4019      	ands	r1, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6898      	ldr	r0, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	3b1e      	subs	r3, #30
 8003284:	fa00 f203 	lsl.w	r2, r0, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e019      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6919      	ldr	r1, [r3, #16]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	2207      	movs	r2, #7
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	4019      	ands	r1, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6898      	ldr	r0, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	fa00 f203 	lsl.w	r2, r0, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d003      	beq.n	80032d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032d2:	2b11      	cmp	r3, #17
 80032d4:	d132      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <HAL_ADC_ConfigChannel+0x1e4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d125      	bne.n	800332c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d126      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b10      	cmp	r3, #16
 8003304:	d11a      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_ADC_ConfigChannel+0x1e8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <HAL_ADC_ConfigChannel+0x1ec>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	0c9a      	lsrs	r2, r3, #18
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800331c:	e002      	b.n	8003324 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3b01      	subs	r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f9      	bne.n	800331e <HAL_ADC_ConfigChannel+0x1b2>
 800332a:	e007      	b.n	800333c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	40012400 	.word	0x40012400
 8003354:	20000028 	.word	0x20000028
 8003358:	431bde83 	.word	0x431bde83

0800335c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d040      	beq.n	80033fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800338a:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <ADC_Enable+0xac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1f      	ldr	r2, [pc, #124]	; (800340c <ADC_Enable+0xb0>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	0c9b      	lsrs	r3, r3, #18
 8003396:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003398:	e002      	b.n	80033a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f9      	bne.n	800339a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033a6:	f7ff fc3d 	bl	8002c24 <HAL_GetTick>
 80033aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033ac:	e01f      	b.n	80033ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033ae:	f7ff fc39 	bl	8002c24 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d918      	bls.n	80033ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d011      	beq.n	80033ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d1d8      	bne.n	80033ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000028 	.word	0x20000028
 800340c:	431bde83 	.word	0x431bde83

08003410 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12e      	bne.n	8003488 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800343a:	f7ff fbf3 	bl	8002c24 <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003440:	e01b      	b.n	800347a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003442:	f7ff fbef 	bl	8002c24 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d914      	bls.n	800347a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d10d      	bne.n	800347a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	f043 0210 	orr.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e007      	b.n	800348a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d0dc      	beq.n	8003442 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_ADCEx_Calibration_Start+0x1e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e095      	b.n	80035de <HAL_ADCEx_Calibration_Start+0x14a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ffa8 	bl	8003410 <ADC_ConversionStop_Disable>
 80034c0:	4603      	mov	r3, r0
 80034c2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 8084 	bne.w	80035d4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034d4:	f023 0302 	bic.w	r3, r3, #2
 80034d8:	f043 0202 	orr.w	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034e0:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_ADCEx_Calibration_Start+0x154>)
 80034e2:	681c      	ldr	r4, [r3, #0]
 80034e4:	2002      	movs	r0, #2
 80034e6:	f002 ff35 	bl	8006354 <HAL_RCCEx_GetPeriphCLKFreq>
 80034ea:	4603      	mov	r3, r0
 80034ec:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034f0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034f2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034f4:	e002      	b.n	80034fc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f9      	bne.n	80034f6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff2a 	bl	800335c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0208 	orr.w	r2, r2, #8
 8003516:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003518:	f7ff fb84 	bl	8002c24 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800351e:	e01b      	b.n	8003558 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003520:	f7ff fb80 	bl	8002c24 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b0a      	cmp	r3, #10
 800352c:	d914      	bls.n	8003558 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f023 0312 	bic.w	r3, r3, #18
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e042      	b.n	80035de <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1dc      	bne.n	8003520 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0204 	orr.w	r2, r2, #4
 8003574:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003576:	f7ff fb55 	bl	8002c24 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800357c:	e01b      	b.n	80035b6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800357e:	f7ff fb51 	bl	8002c24 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b0a      	cmp	r3, #10
 800358a:	d914      	bls.n	80035b6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	f023 0312 	bic.w	r3, r3, #18
 80035a2:	f043 0210 	orr.w	r2, r3, #16
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e013      	b.n	80035de <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1dc      	bne.n	800357e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	f023 0303 	bic.w	r3, r3, #3
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd90      	pop	{r4, r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000028 	.word	0x20000028

080035ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
	...

08003600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800361c:	4013      	ands	r3, r2
 800361e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003632:	4a04      	ldr	r2, [pc, #16]	; (8003644 <__NVIC_SetPriorityGrouping+0x44>)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	60d3      	str	r3, [r2, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <__NVIC_GetPriorityGrouping+0x18>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 0307 	and.w	r3, r3, #7
}
 8003656:	4618      	mov	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	2b00      	cmp	r3, #0
 8003674:	db0b      	blt.n	800368e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	f003 021f 	and.w	r2, r3, #31
 800367c:	4906      	ldr	r1, [pc, #24]	; (8003698 <__NVIC_EnableIRQ+0x34>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	2001      	movs	r0, #1
 8003686:	fa00 f202 	lsl.w	r2, r0, r2
 800368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	e000e100 	.word	0xe000e100

0800369c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	db0a      	blt.n	80036c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	490c      	ldr	r1, [pc, #48]	; (80036e8 <__NVIC_SetPriority+0x4c>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	440b      	add	r3, r1
 80036c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036c4:	e00a      	b.n	80036dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4908      	ldr	r1, [pc, #32]	; (80036ec <__NVIC_SetPriority+0x50>)
 80036cc:	79fb      	ldrb	r3, [r7, #7]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3b04      	subs	r3, #4
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	440b      	add	r3, r1
 80036da:	761a      	strb	r2, [r3, #24]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000e100 	.word	0xe000e100
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	; 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f1c3 0307 	rsb	r3, r3, #7
 800370a:	2b04      	cmp	r3, #4
 800370c:	bf28      	it	cs
 800370e:	2304      	movcs	r3, #4
 8003710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3304      	adds	r3, #4
 8003716:	2b06      	cmp	r3, #6
 8003718:	d902      	bls.n	8003720 <NVIC_EncodePriority+0x30>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3b03      	subs	r3, #3
 800371e:	e000      	b.n	8003722 <NVIC_EncodePriority+0x32>
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	401a      	ands	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003738:	f04f 31ff 	mov.w	r1, #4294967295
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	43d9      	mvns	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	4313      	orrs	r3, r2
         );
}
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f7ff ff90 	bl	800369c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff2d 	bl	8003600 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037c0:	f7ff ff42 	bl	8003648 <__NVIC_GetPriorityGrouping>
 80037c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7ff ff90 	bl	80036f0 <NVIC_EncodePriority>
 80037d0:	4602      	mov	r2, r0
 80037d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff5f 	bl	800369c <__NVIC_SetPriority>
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff35 	bl	8003664 <__NVIC_EnableIRQ>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffa2 	bl	8003754 <SysTick_Config>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e00e      	b.n	800384a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	795b      	ldrb	r3, [r3, #5]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff f87d 	bl	800293c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003852:	b480      	push	{r7}
 8003854:	b087      	sub	sp, #28
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e00a      	b.n	8003894 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	441a      	add	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3301      	adds	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d3f0      	bcc.n	800387e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80038aa:	693b      	ldr	r3, [r7, #16]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038d2:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_FLASH_Program+0xd8>)
 80038d4:	7e1b      	ldrb	r3, [r3, #24]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_FLASH_Program+0x26>
 80038da:	2302      	movs	r3, #2
 80038dc:	e054      	b.n	8003988 <HAL_FLASH_Program+0xd0>
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_FLASH_Program+0xd8>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038e8:	f000 f8a8 	bl	8003a3c <FLASH_WaitForLastOperation>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d144      	bne.n	8003980 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d102      	bne.n	8003902 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038fc:	2301      	movs	r3, #1
 80038fe:	757b      	strb	r3, [r7, #21]
 8003900:	e007      	b.n	8003912 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d102      	bne.n	800390e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003908:	2302      	movs	r3, #2
 800390a:	757b      	strb	r3, [r7, #21]
 800390c:	e001      	b.n	8003912 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800390e:	2304      	movs	r3, #4
 8003910:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003912:	2300      	movs	r3, #0
 8003914:	75bb      	strb	r3, [r7, #22]
 8003916:	e02d      	b.n	8003974 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003918:	7dbb      	ldrb	r3, [r7, #22]
 800391a:	005a      	lsls	r2, r3, #1
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	eb02 0c03 	add.w	ip, r2, r3
 8003922:	7dbb      	ldrb	r3, [r7, #22]
 8003924:	0119      	lsls	r1, r3, #4
 8003926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800392a:	f1c1 0620 	rsb	r6, r1, #32
 800392e:	f1a1 0020 	sub.w	r0, r1, #32
 8003932:	fa22 f401 	lsr.w	r4, r2, r1
 8003936:	fa03 f606 	lsl.w	r6, r3, r6
 800393a:	4334      	orrs	r4, r6
 800393c:	fa23 f000 	lsr.w	r0, r3, r0
 8003940:	4304      	orrs	r4, r0
 8003942:	fa23 f501 	lsr.w	r5, r3, r1
 8003946:	b2a3      	uxth	r3, r4
 8003948:	4619      	mov	r1, r3
 800394a:	4660      	mov	r0, ip
 800394c:	f000 f85a 	bl	8003a04 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003950:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003954:	f000 f872 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003958:	4603      	mov	r3, r0
 800395a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <HAL_FLASH_Program+0xdc>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <HAL_FLASH_Program+0xdc>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d107      	bne.n	800397e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800396e:	7dbb      	ldrb	r3, [r7, #22]
 8003970:	3301      	adds	r3, #1
 8003972:	75bb      	strb	r3, [r7, #22]
 8003974:	7dba      	ldrb	r2, [r7, #22]
 8003976:	7d7b      	ldrb	r3, [r7, #21]
 8003978:	429a      	cmp	r2, r3
 800397a:	d3cd      	bcc.n	8003918 <HAL_FLASH_Program+0x60>
 800397c:	e000      	b.n	8003980 <HAL_FLASH_Program+0xc8>
      {
        break;
 800397e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_FLASH_Program+0xd8>)
 8003982:	2200      	movs	r2, #0
 8003984:	761a      	strb	r2, [r3, #24]

  return status;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
}
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003990:	200006c8 	.word	0x200006c8
 8003994:	40022000 	.word	0x40022000

08003998 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_FLASH_Unlock+0x40>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_FLASH_Unlock+0x40>)
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <HAL_FLASH_Unlock+0x44>)
 80039b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_FLASH_Unlock+0x40>)
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <HAL_FLASH_Unlock+0x48>)
 80039b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <HAL_FLASH_Unlock+0x40>)
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80039ca:	79fb      	ldrb	r3, [r7, #7]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40022000 	.word	0x40022000
 80039dc:	45670123 	.word	0x45670123
 80039e0:	cdef89ab 	.word	0xcdef89ab

080039e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_FLASH_Lock+0x1c>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <HAL_FLASH_Lock+0x1c>)
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40022000 	.word	0x40022000

08003a04 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <FLASH_Program_HalfWord+0x30>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <FLASH_Program_HalfWord+0x34>)
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <FLASH_Program_HalfWord+0x34>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	887a      	ldrh	r2, [r7, #2]
 8003a26:	801a      	strh	r2, [r3, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	200006c8 	.word	0x200006c8
 8003a38:	40022000 	.word	0x40022000

08003a3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a44:	f7ff f8ee 	bl	8002c24 <HAL_GetTick>
 8003a48:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a4a:	e010      	b.n	8003a6e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d00c      	beq.n	8003a6e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <FLASH_WaitForLastOperation+0x2e>
 8003a5a:	f7ff f8e3 	bl	8002c24 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d201      	bcs.n	8003a6e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e025      	b.n	8003aba <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e8      	bne.n	8003a4c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a88:	2220      	movs	r2, #32
 8003a8a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d105      	bne.n	8003ab0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <FLASH_WaitForLastOperation+0x88>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ab0:	f000 f80a 	bl	8003ac8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40022000 	.word	0x40022000

08003ac8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003ae8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f043 0310 	orr.w	r3, r3, #16
 8003af0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003afe:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003b08:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003b12:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <FLASH_SetErrorCode+0x9c>)
 8003b28:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f240 1201 	movw	r2, #257	; 0x101
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d106      	bne.n	8003b4e <FLASH_SetErrorCode+0x86>
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	4a06      	ldr	r2, [pc, #24]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	61d3      	str	r3, [r2, #28]
}  
 8003b4c:	e002      	b.n	8003b54 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b4e:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <FLASH_SetErrorCode+0x98>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	60d3      	str	r3, [r2, #12]
}  
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40022000 	.word	0x40022000
 8003b64:	200006c8 	.word	0x200006c8

08003b68 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b7a:	4b2f      	ldr	r3, [pc, #188]	; (8003c38 <HAL_FLASHEx_Erase+0xd0>)
 8003b7c:	7e1b      	ldrb	r3, [r3, #24]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_FLASHEx_Erase+0x1e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e053      	b.n	8003c2e <HAL_FLASHEx_Erase+0xc6>
 8003b86:	4b2c      	ldr	r3, [pc, #176]	; (8003c38 <HAL_FLASHEx_Erase+0xd0>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d116      	bne.n	8003bc2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b98:	f7ff ff50 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d141      	bne.n	8003c26 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f000 f84c 	bl	8003c40 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ba8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bac:	f7ff ff46 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_FLASHEx_Erase+0xd4>)
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <HAL_FLASHEx_Erase+0xd4>)
 8003bba:	f023 0304 	bic.w	r3, r3, #4
 8003bbe:	6113      	str	r3, [r2, #16]
 8003bc0:	e031      	b.n	8003c26 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bc6:	f7ff ff39 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d12a      	bne.n	8003c26 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	e019      	b.n	8003c14 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003be0:	68b8      	ldr	r0, [r7, #8]
 8003be2:	f000 f849 	bl	8003c78 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003be6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bea:	f7ff ff27 	bl	8003a3c <FLASH_WaitForLastOperation>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bf2:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <HAL_FLASHEx_Erase+0xd4>)
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <HAL_FLASHEx_Erase+0xd4>)
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	601a      	str	r2, [r3, #0]
            break;
 8003c0a:	e00c      	b.n	8003c26 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c12:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	029a      	lsls	r2, r3, #10
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3dc      	bcc.n	8003be0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_FLASHEx_Erase+0xd0>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	761a      	strb	r2, [r3, #24]

  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200006c8 	.word	0x200006c8
 8003c3c:	40022000 	.word	0x40022000

08003c40 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <FLASH_MassErase+0x30>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <FLASH_MassErase+0x34>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <FLASH_MassErase+0x34>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <FLASH_MassErase+0x34>)
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <FLASH_MassErase+0x34>)
 8003c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c64:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr
 8003c70:	200006c8 	.word	0x200006c8
 8003c74:	40022000 	.word	0x40022000

08003c78 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <FLASH_PageErase+0x38>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <FLASH_PageErase+0x3c>)
 8003c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	200006c8 	.word	0x200006c8
 8003cb4:	40022000 	.word	0x40022000

08003cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b08b      	sub	sp, #44	; 0x2c
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cca:	e169      	b.n	8003fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	f040 8158 	bne.w	8003f9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4a9a      	ldr	r2, [pc, #616]	; (8003f58 <HAL_GPIO_Init+0x2a0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d05e      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003cf4:	4a98      	ldr	r2, [pc, #608]	; (8003f58 <HAL_GPIO_Init+0x2a0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d875      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003cfa:	4a98      	ldr	r2, [pc, #608]	; (8003f5c <HAL_GPIO_Init+0x2a4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d058      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003d00:	4a96      	ldr	r2, [pc, #600]	; (8003f5c <HAL_GPIO_Init+0x2a4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d86f      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d06:	4a96      	ldr	r2, [pc, #600]	; (8003f60 <HAL_GPIO_Init+0x2a8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d052      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003d0c:	4a94      	ldr	r2, [pc, #592]	; (8003f60 <HAL_GPIO_Init+0x2a8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d869      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d12:	4a94      	ldr	r2, [pc, #592]	; (8003f64 <HAL_GPIO_Init+0x2ac>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d04c      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003d18:	4a92      	ldr	r2, [pc, #584]	; (8003f64 <HAL_GPIO_Init+0x2ac>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d863      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d1e:	4a92      	ldr	r2, [pc, #584]	; (8003f68 <HAL_GPIO_Init+0x2b0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d046      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
 8003d24:	4a90      	ldr	r2, [pc, #576]	; (8003f68 <HAL_GPIO_Init+0x2b0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d85d      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d2a:	2b12      	cmp	r3, #18
 8003d2c:	d82a      	bhi.n	8003d84 <HAL_GPIO_Init+0xcc>
 8003d2e:	2b12      	cmp	r3, #18
 8003d30:	d859      	bhi.n	8003de6 <HAL_GPIO_Init+0x12e>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_GPIO_Init+0x80>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003db3 	.word	0x08003db3
 8003d3c:	08003d8d 	.word	0x08003d8d
 8003d40:	08003d9f 	.word	0x08003d9f
 8003d44:	08003de1 	.word	0x08003de1
 8003d48:	08003de7 	.word	0x08003de7
 8003d4c:	08003de7 	.word	0x08003de7
 8003d50:	08003de7 	.word	0x08003de7
 8003d54:	08003de7 	.word	0x08003de7
 8003d58:	08003de7 	.word	0x08003de7
 8003d5c:	08003de7 	.word	0x08003de7
 8003d60:	08003de7 	.word	0x08003de7
 8003d64:	08003de7 	.word	0x08003de7
 8003d68:	08003de7 	.word	0x08003de7
 8003d6c:	08003de7 	.word	0x08003de7
 8003d70:	08003de7 	.word	0x08003de7
 8003d74:	08003de7 	.word	0x08003de7
 8003d78:	08003de7 	.word	0x08003de7
 8003d7c:	08003d95 	.word	0x08003d95
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	4a79      	ldr	r2, [pc, #484]	; (8003f6c <HAL_GPIO_Init+0x2b4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d8a:	e02c      	b.n	8003de6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	623b      	str	r3, [r7, #32]
          break;
 8003d92:	e029      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	623b      	str	r3, [r7, #32]
          break;
 8003d9c:	e024      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	3308      	adds	r3, #8
 8003da4:	623b      	str	r3, [r7, #32]
          break;
 8003da6:	e01f      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	330c      	adds	r3, #12
 8003dae:	623b      	str	r3, [r7, #32]
          break;
 8003db0:	e01a      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dba:	2304      	movs	r3, #4
 8003dbc:	623b      	str	r3, [r7, #32]
          break;
 8003dbe:	e013      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dc8:	2308      	movs	r3, #8
 8003dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	611a      	str	r2, [r3, #16]
          break;
 8003dd2:	e009      	b.n	8003de8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	615a      	str	r2, [r3, #20]
          break;
 8003dde:	e003      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003de0:	2300      	movs	r3, #0
 8003de2:	623b      	str	r3, [r7, #32]
          break;
 8003de4:	e000      	b.n	8003de8 <HAL_GPIO_Init+0x130>
          break;
 8003de6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2bff      	cmp	r3, #255	; 0xff
 8003dec:	d801      	bhi.n	8003df2 <HAL_GPIO_Init+0x13a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	e001      	b.n	8003df6 <HAL_GPIO_Init+0x13e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2bff      	cmp	r3, #255	; 0xff
 8003dfc:	d802      	bhi.n	8003e04 <HAL_GPIO_Init+0x14c>
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	e002      	b.n	8003e0a <HAL_GPIO_Init+0x152>
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	3b08      	subs	r3, #8
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	210f      	movs	r1, #15
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	431a      	orrs	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80b1 	beq.w	8003f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e38:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <HAL_GPIO_Init+0x2b8>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	4a4c      	ldr	r2, [pc, #304]	; (8003f70 <HAL_GPIO_Init+0x2b8>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6193      	str	r3, [r2, #24]
 8003e44:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <HAL_GPIO_Init+0x2b8>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e50:	4a48      	ldr	r2, [pc, #288]	; (8003f74 <HAL_GPIO_Init+0x2bc>)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	3302      	adds	r3, #2
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	220f      	movs	r2, #15
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a40      	ldr	r2, [pc, #256]	; (8003f78 <HAL_GPIO_Init+0x2c0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_GPIO_Init+0x1ec>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <HAL_GPIO_Init+0x2c4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00d      	beq.n	8003ea0 <HAL_GPIO_Init+0x1e8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3e      	ldr	r2, [pc, #248]	; (8003f80 <HAL_GPIO_Init+0x2c8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <HAL_GPIO_Init+0x1e4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <HAL_GPIO_Init+0x2cc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d101      	bne.n	8003e98 <HAL_GPIO_Init+0x1e0>
 8003e94:	2303      	movs	r3, #3
 8003e96:	e006      	b.n	8003ea6 <HAL_GPIO_Init+0x1ee>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e004      	b.n	8003ea6 <HAL_GPIO_Init+0x1ee>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e002      	b.n	8003ea6 <HAL_GPIO_Init+0x1ee>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_GPIO_Init+0x1ee>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	f002 0203 	and.w	r2, r2, #3
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	4093      	lsls	r3, r2
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003eb6:	492f      	ldr	r1, [pc, #188]	; (8003f74 <HAL_GPIO_Init+0x2bc>)
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d006      	beq.n	8003ede <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ed0:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	492c      	ldr	r1, [pc, #176]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
 8003edc:	e006      	b.n	8003eec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ede:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	4928      	ldr	r1, [pc, #160]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d006      	beq.n	8003f06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4922      	ldr	r1, [pc, #136]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e006      	b.n	8003f14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	491e      	ldr	r1, [pc, #120]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4918      	ldr	r1, [pc, #96]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]
 8003f2c:	e006      	b.n	8003f3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	4914      	ldr	r1, [pc, #80]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d021      	beq.n	8003f8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	490e      	ldr	r1, [pc, #56]	; (8003f88 <HAL_GPIO_Init+0x2d0>)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60cb      	str	r3, [r1, #12]
 8003f54:	e021      	b.n	8003f9a <HAL_GPIO_Init+0x2e2>
 8003f56:	bf00      	nop
 8003f58:	10320000 	.word	0x10320000
 8003f5c:	10310000 	.word	0x10310000
 8003f60:	10220000 	.word	0x10220000
 8003f64:	10210000 	.word	0x10210000
 8003f68:	10120000 	.word	0x10120000
 8003f6c:	10110000 	.word	0x10110000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40010800 	.word	0x40010800
 8003f7c:	40010c00 	.word	0x40010c00
 8003f80:	40011000 	.word	0x40011000
 8003f84:	40011400 	.word	0x40011400
 8003f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_GPIO_Init+0x304>)
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	4909      	ldr	r1, [pc, #36]	; (8003fbc <HAL_GPIO_Init+0x304>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f47f ae8e 	bne.w	8003ccc <HAL_GPIO_Init+0x14>
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	372c      	adds	r7, #44	; 0x2c
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	40010400 	.word	0x40010400

08003fc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e001      	b.n	8003fe2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	807b      	strh	r3, [r7, #2]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ffe:	787b      	ldrb	r3, [r7, #1]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004004:	887a      	ldrh	r2, [r7, #2]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800400a:	e003      	b.n	8004014 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	041a      	lsls	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	611a      	str	r2, [r3, #16]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
	...

08004020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d006      	beq.n	8004044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004036:	4a05      	ldr	r2, [pc, #20]	; (800404c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fd98 	bl	8000b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40010400 	.word	0x40010400

08004050 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004052:	b08b      	sub	sp, #44	; 0x2c
 8004054:	af06      	add	r7, sp, #24
 8004056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0fd      	b.n	800425e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f007 f9fa 	bl	800b470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2203      	movs	r2, #3
 8004080:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f003 fa23 	bl	80074d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	687e      	ldr	r6, [r7, #4]
 8004096:	466d      	mov	r5, sp
 8004098:	f106 0410 	add.w	r4, r6, #16
 800409c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800409e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	1d33      	adds	r3, r6, #4
 80040a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a8:	6838      	ldr	r0, [r7, #0]
 80040aa:	f003 f9ed 	bl	8007488 <USB_CoreInit>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0ce      	b.n	800425e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fa1e 	bl	8007508 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e04c      	b.n	800416c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	440b      	add	r3, r1
 80040e2:	3301      	adds	r3, #1
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	440b      	add	r3, r1
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040fc:	7bfa      	ldrb	r2, [r7, #15]
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	b298      	uxth	r0, r3
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	3336      	adds	r3, #54	; 0x36
 8004110:	4602      	mov	r2, r0
 8004112:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	3303      	adds	r3, #3
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	3338      	adds	r3, #56	; 0x38
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	440b      	add	r3, r1
 800414c:	333c      	adds	r3, #60	; 0x3c
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	3340      	adds	r3, #64	; 0x40
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	3301      	adds	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d3ad      	bcc.n	80040d2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e044      	b.n	8004206 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3301      	adds	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3b5      	bcc.n	800417c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	687e      	ldr	r6, [r7, #4]
 8004218:	466d      	mov	r5, sp
 800421a:	f106 0410 	add.w	r4, r6, #16
 800421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	1d33      	adds	r3, r6, #4
 8004228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800422a:	6838      	ldr	r0, [r7, #0]
 800422c:	f003 f978 	bl	8007520 <USB_DevInit>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e00d      	b.n	800425e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f005 fae9 	bl	800982e <USB_DevDisconnect>

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004266 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_PCD_Start+0x16>
 8004278:	2302      	movs	r3, #2
 800427a:	e016      	b.n	80042aa <HAL_PCD_Start+0x44>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f003 f90d 	bl	80074a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800428e:	2101      	movs	r1, #1
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f007 fb60 	bl	800b956 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f005 fabd 	bl	800981a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b088      	sub	sp, #32
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f005 fabf 	bl	8009842 <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ce:	d102      	bne.n	80042d6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fb61 	bl	8004998 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f005 fab1 	bl	8009842 <USB_ReadInterrupts>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ea:	d112      	bne.n	8004312 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	b292      	uxth	r2, r2
 8004300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f007 f92e 	bl	800b566 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800430a:	2100      	movs	r1, #0
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f925 	bl	800455c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f005 fa93 	bl	8009842 <USB_ReadInterrupts>
 800431c:	4603      	mov	r3, r0
 800431e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004326:	d10b      	bne.n	8004340 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800433a:	b292      	uxth	r2, r2
 800433c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f005 fa7c 	bl	8009842 <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004354:	d10b      	bne.n	800436e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004368:	b292      	uxth	r2, r2
 800436a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f005 fa65 	bl	8009842 <USB_ReadInterrupts>
 8004378:	4603      	mov	r3, r0
 800437a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004382:	d126      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0204 	bic.w	r2, r2, #4
 8004396:	b292      	uxth	r2, r2
 8004398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0208 	bic.w	r2, r2, #8
 80043ae:	b292      	uxth	r2, r2
 80043b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f007 f90f 	bl	800b5d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043cc:	b292      	uxth	r2, r2
 80043ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f005 fa33 	bl	8009842 <USB_ReadInterrupts>
 80043dc:	4603      	mov	r3, r0
 80043de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e6:	f040 8084 	bne.w	80044f2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e011      	b.n	8004414 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	7ffb      	ldrb	r3, [r7, #31]
 80043fe:	8812      	ldrh	r2, [r2, #0]
 8004400:	b292      	uxth	r2, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	f107 0120 	add.w	r1, r7, #32
 8004408:	440b      	add	r3, r1
 800440a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	3301      	adds	r3, #1
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	7ffb      	ldrb	r3, [r7, #31]
 8004416:	2b07      	cmp	r3, #7
 8004418:	d9ea      	bls.n	80043f0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	b292      	uxth	r2, r2
 800442e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	b292      	uxth	r2, r2
 8004446:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800444a:	bf00      	nop
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004454:	b29b      	uxth	r3, r3
 8004456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f6      	beq.n	800444c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004470:	b292      	uxth	r2, r2
 8004472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004476:	2300      	movs	r3, #0
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e010      	b.n	800449e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800447c:	7ffb      	ldrb	r3, [r7, #31]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	4611      	mov	r1, r2
 8004484:	7ffa      	ldrb	r2, [r7, #31]
 8004486:	0092      	lsls	r2, r2, #2
 8004488:	440a      	add	r2, r1
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	f107 0120 	add.w	r1, r7, #32
 8004490:	440b      	add	r3, r1
 8004492:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004496:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004498:	7ffb      	ldrb	r3, [r7, #31]
 800449a:	3301      	adds	r3, #1
 800449c:	77fb      	strb	r3, [r7, #31]
 800449e:	7ffb      	ldrb	r3, [r7, #31]
 80044a0:	2b07      	cmp	r3, #7
 80044a2:	d9eb      	bls.n	800447c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	b292      	uxth	r2, r2
 80044b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ce:	b292      	uxth	r2, r2
 80044d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044dc:	b29a      	uxth	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0204 	orr.w	r2, r2, #4
 80044e6:	b292      	uxth	r2, r2
 80044e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f007 f859 	bl	800b5a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f005 f9a3 	bl	8009842 <USB_ReadInterrupts>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004506:	d10e      	bne.n	8004526 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800451a:	b292      	uxth	r2, r2
 800451c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f007 f812 	bl	800b54a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f005 f989 	bl	8009842 <USB_ReadInterrupts>
 8004530:	4603      	mov	r3, r0
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453a:	d10b      	bne.n	8004554 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800454e:	b292      	uxth	r2, r2
 8004550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004554:	bf00      	nop
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_PCD_SetAddress+0x1a>
 8004572:	2302      	movs	r3, #2
 8004574:	e013      	b.n	800459e <HAL_PCD_SetAddress+0x42>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f005 f930 	bl	80097f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	4608      	mov	r0, r1
 80045b0:	4611      	mov	r1, r2
 80045b2:	461a      	mov	r2, r3
 80045b4:	4603      	mov	r3, r0
 80045b6:	70fb      	strb	r3, [r7, #3]
 80045b8:	460b      	mov	r3, r1
 80045ba:	803b      	strh	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da0e      	bge.n	80045ea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4413      	add	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	705a      	strb	r2, [r3, #1]
 80045e8:	e00e      	b.n	8004608 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	f003 0207 	and.w	r2, r3, #7
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004614:	883a      	ldrh	r2, [r7, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	78ba      	ldrb	r2, [r7, #2]
 800461e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004632:	78bb      	ldrb	r3, [r7, #2]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d102      	bne.n	800463e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_PCD_EP_Open+0xa6>
 8004648:	2302      	movs	r3, #2
 800464a:	e00e      	b.n	800466a <HAL_PCD_EP_Open+0xc4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	4618      	mov	r0, r3
 800465c:	f002 ff80 	bl	8007560 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004668:	7afb      	ldrb	r3, [r7, #11]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800467e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004682:	2b00      	cmp	r3, #0
 8004684:	da0e      	bge.n	80046a4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	705a      	strb	r2, [r3, #1]
 80046a2:	e00e      	b.n	80046c2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	f003 0207 	and.w	r2, r3, #7
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_PCD_EP_Close+0x6a>
 80046d8:	2302      	movs	r3, #2
 80046da:	e00e      	b.n	80046fa <HAL_PCD_EP_Close+0x88>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f003 faa2 	bl	8007c34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	460b      	mov	r3, r1
 8004710:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004712:	7afb      	ldrb	r3, [r7, #11]
 8004714:	f003 0207 	and.w	r2, r3, #7
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2200      	movs	r2, #0
 8004740:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004742:	7afb      	ldrb	r3, [r7, #11]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	b2da      	uxtb	r2, r3
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800474e:	7afb      	ldrb	r3, [r7, #11]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6979      	ldr	r1, [r7, #20]
 800475e:	4618      	mov	r0, r3
 8004760:	f003 fc54 	bl	800800c <USB_EPStartXfer>
 8004764:	e005      	b.n	8004772 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6979      	ldr	r1, [r7, #20]
 800476c:	4618      	mov	r0, r3
 800476e:	f003 fc4d 	bl	800800c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	f003 0207 	and.w	r2, r3, #7
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	440b      	add	r3, r1
 800479a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	460b      	mov	r3, r1
 80047b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ba:	7afb      	ldrb	r3, [r7, #11]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2200      	movs	r2, #0
 80047ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2201      	movs	r2, #1
 80047f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f6:	7afb      	ldrb	r3, [r7, #11]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004802:	7afb      	ldrb	r3, [r7, #11]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6979      	ldr	r1, [r7, #20]
 8004812:	4618      	mov	r0, r3
 8004814:	f003 fbfa 	bl	800800c <USB_EPStartXfer>
 8004818:	e005      	b.n	8004826 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6979      	ldr	r1, [r7, #20]
 8004820:	4618      	mov	r0, r3
 8004822:	f003 fbf3 	bl	800800c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	f003 0207 	and.w	r2, r3, #7
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d901      	bls.n	800484e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e04c      	b.n	80048e8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800484e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	da0e      	bge.n	8004874 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	705a      	strb	r2, [r3, #1]
 8004872:	e00c      	b.n	800488e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_PCD_EP_SetStall+0x7e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e01c      	b.n	80048e8 <HAL_PCD_EP_SetStall+0xb8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	4618      	mov	r0, r3
 80048be:	f004 fe9c 	bl	80095fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f004 ffc1 	bl	8009860 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f003 020f 	and.w	r2, r3, #15
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d901      	bls.n	800490e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e040      	b.n	8004990 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800490e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004912:	2b00      	cmp	r3, #0
 8004914:	da0e      	bge.n	8004934 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	705a      	strb	r2, [r3, #1]
 8004932:	e00e      	b.n	8004952 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	f003 0207 	and.w	r2, r3, #7
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_PCD_EP_ClrStall+0x82>
 800496e:	2302      	movs	r3, #2
 8004970:	e00e      	b.n	8004990 <HAL_PCD_EP_ClrStall+0xa0>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	4618      	mov	r0, r3
 8004982:	f004 fe8a 	bl	800969a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08e      	sub	sp, #56	; 0x38
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049a0:	e2ec      	b.n	8004f7c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049aa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80049b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 8161 	bne.w	8004c84 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80049c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d152      	bne.n	8004a72 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	81fb      	strh	r3, [r7, #14]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	89fb      	ldrh	r3, [r7, #14]
 80049e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3328      	adds	r3, #40	; 0x28
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	4413      	add	r3, r2
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	441a      	add	r2, r3
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a30:	2100      	movs	r1, #0
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f006 fd6f 	bl	800b516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 829b 	beq.w	8004f7c <PCD_EP_ISR_Handler+0x5e4>
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 8296 	bne.w	8004f7c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	b292      	uxth	r2, r2
 8004a64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a70:	e284      	b.n	8004f7c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004a82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d034      	beq.n	8004af6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3306      	adds	r3, #6
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f004 ff18 	bl	8009900 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004adc:	4013      	ands	r3, r2
 8004ade:	823b      	strh	r3, [r7, #16]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	8a3a      	ldrh	r2, [r7, #16]
 8004ae6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aea:	b292      	uxth	r2, r2
 8004aec:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f006 fce4 	bl	800b4bc <HAL_PCD_SetupStageCallback>
 8004af4:	e242      	b.n	8004f7c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004af6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f280 823e 	bge.w	8004f7c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	83bb      	strh	r3, [r7, #28]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	8bba      	ldrh	r2, [r7, #28]
 8004b16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	3306      	adds	r3, #6
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d019      	beq.n	8004b86 <PCD_EP_ISR_Handler+0x1ee>
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d015      	beq.n	8004b86 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	6959      	ldr	r1, [r3, #20]
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f004 fec8 	bl	8009900 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	441a      	add	r2, r3
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f006 fcad 	bl	800b4e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 81f2 	bne.w	8004f7c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4413      	add	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d112      	bne.n	8004be6 <PCD_EP_ISR_Handler+0x24e>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	e02f      	b.n	8004c46 <PCD_EP_ISR_Handler+0x2ae>
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b3e      	cmp	r3, #62	; 0x3e
 8004bec:	d813      	bhi.n	8004c16 <PCD_EP_ISR_Handler+0x27e>
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <PCD_EP_ISR_Handler+0x270>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	3301      	adds	r3, #1
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	029b      	lsls	r3, r3, #10
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	801a      	strh	r2, [r3, #0]
 8004c14:	e017      	b.n	8004c46 <PCD_EP_ISR_Handler+0x2ae>
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <PCD_EP_ISR_Handler+0x298>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	029b      	lsls	r3, r3, #10
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	827b      	strh	r3, [r7, #18]
 8004c58:	8a7b      	ldrh	r3, [r7, #18]
 8004c5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c5e:	827b      	strh	r3, [r7, #18]
 8004c60:	8a7b      	ldrh	r3, [r7, #18]
 8004c62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c66:	827b      	strh	r3, [r7, #18]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	8a7b      	ldrh	r3, [r7, #18]
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]
 8004c82:	e17b      	b.n	8004f7c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c96:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f280 80ea 	bge.w	8004e74 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004cca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cce:	b292      	uxth	r2, r2
 8004cd0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004cd2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	7b1b      	ldrb	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d122      	bne.n	8004d36 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4413      	add	r3, r2
 8004d04:	3306      	adds	r3, #6
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d18:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004d1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8087 	beq.w	8004e30 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	6959      	ldr	r1, [r3, #20]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	88da      	ldrh	r2, [r3, #6]
 8004d2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d30:	f004 fde6 	bl	8009900 <USB_ReadPMA>
 8004d34:	e07c      	b.n	8004e30 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	78db      	ldrb	r3, [r3, #3]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d108      	bne.n	8004d50 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004d3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d40:	461a      	mov	r2, r3
 8004d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f927 	bl	8004f98 <HAL_PCD_EP_DB_Receive>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004d4e:	e06f      	b.n	8004e30 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d021      	beq.n	8004dee <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004dd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02a      	beq.n	8004e30 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	6959      	ldr	r1, [r3, #20]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	891a      	ldrh	r2, [r3, #8]
 8004de6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004de8:	f004 fd8a 	bl	8009900 <USB_ReadPMA>
 8004dec:	e020      	b.n	8004e30 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	4413      	add	r3, r2
 8004e02:	3306      	adds	r3, #6
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e16:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	895a      	ldrh	r2, [r3, #10]
 8004e2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e2c:	f004 fd68 	bl	8009900 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e36:	441a      	add	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e42:	441a      	add	r2, r3
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <PCD_EP_ISR_Handler+0x4c2>
 8004e50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d206      	bcs.n	8004e68 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f006 fb3d 	bl	800b4e0 <HAL_PCD_DataOutStageCallback>
 8004e66:	e005      	b.n	8004e74 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f003 f8cc 	bl	800800c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d07e      	beq.n	8004f7c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004e7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4413      	add	r3, r2
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	843b      	strh	r3, [r7, #32]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	8c3b      	ldrh	r3, [r7, #32]
 8004ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	78db      	ldrb	r3, [r3, #3]
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d00c      	beq.n	8004eec <PCD_EP_ISR_Handler+0x554>
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d146      	bne.n	8004f70 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004ee2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d141      	bne.n	8004f70 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	3302      	adds	r3, #2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f14:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	8bfb      	ldrh	r3, [r7, #30]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d906      	bls.n	8004f2e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	8bfb      	ldrh	r3, [r7, #30]
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	619a      	str	r2, [r3, #24]
 8004f2c:	e002      	b.n	8004f34 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	2200      	movs	r2, #0
 8004f32:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d106      	bne.n	8004f4a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f006 fae7 	bl	800b516 <HAL_PCD_DataInStageCallback>
 8004f48:	e018      	b.n	8004f7c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	8bfb      	ldrh	r3, [r7, #30]
 8004f50:	441a      	add	r2, r3
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	69da      	ldr	r2, [r3, #28]
 8004f5a:	8bfb      	ldrh	r3, [r7, #30]
 8004f5c:	441a      	add	r2, r3
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f003 f84f 	bl	800800c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f6e:	e005      	b.n	8004f7c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f72:	461a      	mov	r2, r3
 8004f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f91b 	bl	80051b2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	b21b      	sxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f6ff ad0a 	blt.w	80049a2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3738      	adds	r7, #56	; 0x38
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d07e      	beq.n	80050ae <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3302      	adds	r3, #2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	8b7b      	ldrh	r3, [r7, #26]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d306      	bcc.n	8004ff2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	8b7b      	ldrh	r3, [r7, #26]
 8004fea:	1ad2      	subs	r2, r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	619a      	str	r2, [r3, #24]
 8004ff0:	e002      	b.n	8004ff8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d123      	bne.n	8005048 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	833b      	strh	r3, [r7, #24]
 800501c:	8b3b      	ldrh	r3, [r7, #24]
 800501e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005022:	833b      	strh	r3, [r7, #24]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	8b3b      	ldrh	r3, [r7, #24]
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01f      	beq.n	8005092 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506c:	82fb      	strh	r3, [r7, #22]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	8afb      	ldrh	r3, [r7, #22]
 800507e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005092:	8b7b      	ldrh	r3, [r7, #26]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8087 	beq.w	80051a8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	6959      	ldr	r1, [r3, #20]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	891a      	ldrh	r2, [r3, #8]
 80050a6:	8b7b      	ldrh	r3, [r7, #26]
 80050a8:	f004 fc2a 	bl	8009900 <USB_ReadPMA>
 80050ac:	e07c      	b.n	80051a8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	3306      	adds	r3, #6
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	8b7b      	ldrh	r3, [r7, #26]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d306      	bcc.n	80050f0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	8b7b      	ldrh	r3, [r7, #26]
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	619a      	str	r2, [r3, #24]
 80050ee:	e002      	b.n	80050f6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2200      	movs	r2, #0
 80050f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d123      	bne.n	8005146 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005118:	83fb      	strh	r3, [r7, #30]
 800511a:	8bfb      	ldrh	r3, [r7, #30]
 800511c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005120:	83fb      	strh	r3, [r7, #30]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	8bfb      	ldrh	r3, [r7, #30]
 8005132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005142:	b29b      	uxth	r3, r3
 8005144:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11f      	bne.n	8005190 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	83bb      	strh	r3, [r7, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	441a      	add	r2, r3
 800517a:	8bbb      	ldrh	r3, [r7, #28]
 800517c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005188:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800518c:	b29b      	uxth	r3, r3
 800518e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005190:	8b7b      	ldrh	r3, [r7, #26]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6959      	ldr	r1, [r3, #20]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	895a      	ldrh	r2, [r3, #10]
 80051a2:	8b7b      	ldrh	r3, [r7, #26]
 80051a4:	f004 fbac 	bl	8009900 <USB_ReadPMA>
    }
  }

  return count;
 80051a8:	8b7b      	ldrh	r3, [r7, #26]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b0a2      	sub	sp, #136	; 0x88
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	4613      	mov	r3, r2
 80051be:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 81c7 	beq.w	800555a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	4413      	add	r3, r2
 80051e0:	3302      	adds	r3, #2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	699a      	ldr	r2, [r3, #24]
 80051fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005200:	429a      	cmp	r2, r3
 8005202:	d907      	bls.n	8005214 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800520c:	1ad2      	subs	r2, r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	619a      	str	r2, [r3, #24]
 8005212:	e002      	b.n	800521a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2200      	movs	r2, #0
 8005218:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f040 80b9 	bne.w	8005396 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d126      	bne.n	800527a <HAL_PCD_EP_DB_Transmit+0xc8>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	4413      	add	r3, r2
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	4413      	add	r3, r2
 800524e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800525e:	b29a      	uxth	r2, r3
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800526e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005272:	b29a      	uxth	r2, r3
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	e01a      	b.n	80052b0 <HAL_PCD_EP_DB_Transmit+0xfe>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	785b      	ldrb	r3, [r3, #1]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d116      	bne.n	80052b0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	633b      	str	r3, [r7, #48]	; 0x30
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005290:	b29b      	uxth	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	4413      	add	r3, r2
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	011a      	lsls	r2, r3, #4
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	4413      	add	r3, r2
 80052a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	2200      	movs	r2, #0
 80052ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	623b      	str	r3, [r7, #32]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d126      	bne.n	800530c <HAL_PCD_EP_DB_Transmit+0x15a>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	4413      	add	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	011a      	lsls	r2, r3, #4
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	4413      	add	r3, r2
 80052e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005304:	b29a      	uxth	r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e017      	b.n	800533c <HAL_PCD_EP_DB_Transmit+0x18a>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d113      	bne.n	800533c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531c:	b29b      	uxth	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	4413      	add	r3, r2
 8005324:	623b      	str	r3, [r7, #32]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	4413      	add	r3, r2
 8005330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	2200      	movs	r2, #0
 800533a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	4619      	mov	r1, r3
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f006 f8e7 	bl	800b516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 82d4 	beq.w	80058fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	827b      	strh	r3, [r7, #18]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	441a      	add	r2, r3
 800537e:	8a7b      	ldrh	r3, [r7, #18]
 8005380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800538c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005390:	b29b      	uxth	r3, r3
 8005392:	8013      	strh	r3, [r2, #0]
 8005394:	e2b2      	b.n	80058fc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d021      	beq.n	80053e4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	441a      	add	r2, r3
 80053cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80053d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	f040 8286 	bne.w	80058fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053f8:	441a      	add	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005406:	441a      	add	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	429a      	cmp	r2, r3
 8005416:	d309      	bcc.n	800542c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6a1a      	ldr	r2, [r3, #32]
 8005422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	621a      	str	r2, [r3, #32]
 800542a:	e015      	b.n	8005458 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d107      	bne.n	8005444 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005434:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005438:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005442:	e009      	b.n	8005458 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d155      	bne.n	800550c <HAL_PCD_EP_DB_Transmit+0x35a>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	63bb      	str	r3, [r7, #56]	; 0x38
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546e:	b29b      	uxth	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	4413      	add	r3, r2
 8005476:	63bb      	str	r3, [r7, #56]	; 0x38
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	011a      	lsls	r2, r3, #4
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	4413      	add	r3, r2
 8005482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
 8005488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548a:	2b00      	cmp	r3, #0
 800548c:	d112      	bne.n	80054b4 <HAL_PCD_EP_DB_Transmit+0x302>
 800548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005498:	b29a      	uxth	r2, r3
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	e047      	b.n	8005544 <HAL_PCD_EP_DB_Transmit+0x392>
 80054b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b6:	2b3e      	cmp	r3, #62	; 0x3e
 80054b8:	d811      	bhi.n	80054de <HAL_PCD_EP_DB_Transmit+0x32c>
 80054ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x31e>
 80054ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054cc:	3301      	adds	r3, #1
 80054ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80054d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	029b      	lsls	r3, r3, #10
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	e032      	b.n	8005544 <HAL_PCD_EP_DB_Transmit+0x392>
 80054de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <HAL_PCD_EP_DB_Transmit+0x342>
 80054ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f0:	3b01      	subs	r3, #1
 80054f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005504:	b29a      	uxth	r2, r3
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	e01b      	b.n	8005544 <HAL_PCD_EP_DB_Transmit+0x392>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d117      	bne.n	8005544 <HAL_PCD_EP_DB_Transmit+0x392>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	643b      	str	r3, [r7, #64]	; 0x40
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005528:	4413      	add	r3, r2
 800552a:	643b      	str	r3, [r7, #64]	; 0x40
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	011a      	lsls	r2, r3, #4
 8005532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005534:	4413      	add	r3, r2
 8005536:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553e:	b29a      	uxth	r2, r3
 8005540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005542:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	6959      	ldr	r1, [r3, #20]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	891a      	ldrh	r2, [r3, #8]
 8005550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005552:	b29b      	uxth	r3, r3
 8005554:	f004 f98f 	bl	8009876 <USB_WritePMA>
 8005558:	e1d0      	b.n	80058fc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005562:	b29b      	uxth	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	3306      	adds	r3, #6
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005582:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800558e:	429a      	cmp	r2, r3
 8005590:	d307      	bcc.n	80055a2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800559a:	1ad2      	subs	r2, r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	619a      	str	r2, [r3, #24]
 80055a0:	e002      	b.n	80055a8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2200      	movs	r2, #0
 80055a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 80c4 	bne.w	800573a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	785b      	ldrb	r3, [r3, #1]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d126      	bne.n	8005608 <HAL_PCD_EP_DB_Transmit+0x456>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ce:	4413      	add	r3, r2
 80055d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	011a      	lsls	r2, r3, #4
 80055d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055da:	4413      	add	r3, r2
 80055dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005600:	b29a      	uxth	r2, r3
 8005602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	e01a      	b.n	800563e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d116      	bne.n	800563e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	677b      	str	r3, [r7, #116]	; 0x74
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005624:	4413      	add	r3, r2
 8005626:	677b      	str	r3, [r7, #116]	; 0x74
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	011a      	lsls	r2, r3, #4
 800562e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005630:	4413      	add	r3, r2
 8005632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005636:	673b      	str	r3, [r7, #112]	; 0x70
 8005638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800563a:	2200      	movs	r2, #0
 800563c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	67bb      	str	r3, [r7, #120]	; 0x78
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d12f      	bne.n	80056ac <HAL_PCD_EP_DB_Transmit+0x4fa>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565c:	b29b      	uxth	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005664:	4413      	add	r3, r2
 8005666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	011a      	lsls	r2, r3, #4
 8005670:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005674:	4413      	add	r3, r2
 8005676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800567a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800567e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800568a:	b29a      	uxth	r2, r3
 800568c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	e017      	b.n	80056dc <HAL_PCD_EP_DB_Transmit+0x52a>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d113      	bne.n	80056dc <HAL_PCD_EP_DB_Transmit+0x52a>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056bc:	b29b      	uxth	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c2:	4413      	add	r3, r2
 80056c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	011a      	lsls	r2, r3, #4
 80056cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056d8:	2200      	movs	r2, #0
 80056da:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	4619      	mov	r1, r3
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f005 ff17 	bl	800b516 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8104 	bne.w	80058fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005734:	b29b      	uxth	r3, r3
 8005736:	8013      	strh	r3, [r2, #0]
 8005738:	e0e0      	b.n	80058fc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d121      	bne.n	8005788 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800578e:	2b01      	cmp	r3, #1
 8005790:	f040 80b4 	bne.w	80058fc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800579c:	441a      	add	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057aa:	441a      	add	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6a1a      	ldr	r2, [r3, #32]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d309      	bcc.n	80057d0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6a1a      	ldr	r2, [r3, #32]
 80057c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c8:	1ad2      	subs	r2, r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	621a      	str	r2, [r3, #32]
 80057ce:	e015      	b.n	80057fc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80057d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80057e6:	e009      	b.n	80057fc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2200      	movs	r2, #0
 80057f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	667b      	str	r3, [r7, #100]	; 0x64
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d155      	bne.n	80058b6 <HAL_PCD_EP_DB_Transmit+0x704>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581e:	4413      	add	r3, r2
 8005820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	011a      	lsls	r2, r3, #4
 8005828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800582a:	4413      	add	r3, r2
 800582c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005830:	65bb      	str	r3, [r7, #88]	; 0x58
 8005832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005834:	2b00      	cmp	r3, #0
 8005836:	d112      	bne.n	800585e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005842:	b29a      	uxth	r2, r3
 8005844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005856:	b29a      	uxth	r2, r3
 8005858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800585a:	801a      	strh	r2, [r3, #0]
 800585c:	e044      	b.n	80058e8 <HAL_PCD_EP_DB_Transmit+0x736>
 800585e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005860:	2b3e      	cmp	r3, #62	; 0x3e
 8005862:	d811      	bhi.n	8005888 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	657b      	str	r3, [r7, #84]	; 0x54
 800586a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005876:	3301      	adds	r3, #1
 8005878:	657b      	str	r3, [r7, #84]	; 0x54
 800587a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587c:	b29b      	uxth	r3, r3
 800587e:	029b      	lsls	r3, r3, #10
 8005880:	b29a      	uxth	r2, r3
 8005882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e02f      	b.n	80058e8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	657b      	str	r3, [r7, #84]	; 0x54
 800588e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800589a:	3b01      	subs	r3, #1
 800589c:	657b      	str	r3, [r7, #84]	; 0x54
 800589e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	e018      	b.n	80058e8 <HAL_PCD_EP_DB_Transmit+0x736>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d114      	bne.n	80058e8 <HAL_PCD_EP_DB_Transmit+0x736>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058cc:	4413      	add	r3, r2
 80058ce:	667b      	str	r3, [r7, #100]	; 0x64
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	011a      	lsls	r2, r3, #4
 80058d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d8:	4413      	add	r3, r2
 80058da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058de:	663b      	str	r3, [r7, #96]	; 0x60
 80058e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6959      	ldr	r1, [r3, #20]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	895a      	ldrh	r2, [r3, #10]
 80058f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f003 ffbd 	bl	8009876 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005916:	823b      	strh	r3, [r7, #16]
 8005918:	8a3b      	ldrh	r3, [r7, #16]
 800591a:	f083 0310 	eor.w	r3, r3, #16
 800591e:	823b      	strh	r3, [r7, #16]
 8005920:	8a3b      	ldrh	r3, [r7, #16]
 8005922:	f083 0320 	eor.w	r3, r3, #32
 8005926:	823b      	strh	r3, [r7, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	8a3b      	ldrh	r3, [r7, #16]
 8005938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005948:	b29b      	uxth	r3, r3
 800594a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3788      	adds	r7, #136	; 0x88
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005956:	b480      	push	{r7}
 8005958:	b087      	sub	sp, #28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	817b      	strh	r3, [r7, #10]
 8005964:	4613      	mov	r3, r2
 8005966:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005968:	897b      	ldrh	r3, [r7, #10]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005974:	897b      	ldrh	r3, [r7, #10]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e009      	b.n	80059a0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800598c:	897a      	ldrh	r2, [r7, #10]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059a0:	893b      	ldrh	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d107      	bne.n	80059b6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2200      	movs	r2, #0
 80059aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	80da      	strh	r2, [r3, #6]
 80059b4:	e00b      	b.n	80059ce <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2201      	movs	r2, #1
 80059ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	0c1b      	lsrs	r3, r3, #16
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e26c      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8087 	beq.w	8005b0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059fc:	4b92      	ldr	r3, [pc, #584]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 030c 	and.w	r3, r3, #12
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d00c      	beq.n	8005a22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a08:	4b8f      	ldr	r3, [pc, #572]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 030c 	and.w	r3, r3, #12
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d112      	bne.n	8005a3a <HAL_RCC_OscConfig+0x5e>
 8005a14:	4b8c      	ldr	r3, [pc, #560]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a20:	d10b      	bne.n	8005a3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a22:	4b89      	ldr	r3, [pc, #548]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d06c      	beq.n	8005b08 <HAL_RCC_OscConfig+0x12c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d168      	bne.n	8005b08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e246      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a42:	d106      	bne.n	8005a52 <HAL_RCC_OscConfig+0x76>
 8005a44:	4b80      	ldr	r3, [pc, #512]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a7f      	ldr	r2, [pc, #508]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	e02e      	b.n	8005ab0 <HAL_RCC_OscConfig+0xd4>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCC_OscConfig+0x98>
 8005a5a:	4b7b      	ldr	r3, [pc, #492]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a7a      	ldr	r2, [pc, #488]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b78      	ldr	r3, [pc, #480]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a77      	ldr	r2, [pc, #476]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e01d      	b.n	8005ab0 <HAL_RCC_OscConfig+0xd4>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCC_OscConfig+0xbc>
 8005a7e:	4b72      	ldr	r3, [pc, #456]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a71      	ldr	r2, [pc, #452]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	4b6f      	ldr	r3, [pc, #444]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a6e      	ldr	r2, [pc, #440]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e00b      	b.n	8005ab0 <HAL_RCC_OscConfig+0xd4>
 8005a98:	4b6b      	ldr	r3, [pc, #428]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a6a      	ldr	r2, [pc, #424]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	4b68      	ldr	r3, [pc, #416]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a67      	ldr	r2, [pc, #412]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d013      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab8:	f7fd f8b4 	bl	8002c24 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ac0:	f7fd f8b0 	bl	8002c24 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b64      	cmp	r3, #100	; 0x64
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e1fa      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad2:	4b5d      	ldr	r3, [pc, #372]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0xe4>
 8005ade:	e014      	b.n	8005b0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7fd f8a0 	bl	8002c24 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae8:	f7fd f89c 	bl	8002c24 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	; 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e1e6      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afa:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x10c>
 8005b06:	e000      	b.n	8005b0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d063      	beq.n	8005bde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b16:	4b4c      	ldr	r3, [pc, #304]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b22:	4b49      	ldr	r3, [pc, #292]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d11c      	bne.n	8005b68 <HAL_RCC_OscConfig+0x18c>
 8005b2e:	4b46      	ldr	r3, [pc, #280]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d116      	bne.n	8005b68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3a:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_RCC_OscConfig+0x176>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d001      	beq.n	8005b52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e1ba      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b52:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4939      	ldr	r1, [pc, #228]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b66:	e03a      	b.n	8005bde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d020      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b70:	4b36      	ldr	r3, [pc, #216]	; (8005c4c <HAL_RCC_OscConfig+0x270>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b76:	f7fd f855 	bl	8002c24 <HAL_GetTick>
 8005b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7e:	f7fd f851 	bl	8002c24 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e19b      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b90:	4b2d      	ldr	r3, [pc, #180]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9c:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4927      	ldr	r1, [pc, #156]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]
 8005bb0:	e015      	b.n	8005bde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb2:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <HAL_RCC_OscConfig+0x270>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb8:	f7fd f834 	bl	8002c24 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc0:	f7fd f830 	bl	8002c24 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e17a      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd2:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1f0      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d03a      	beq.n	8005c60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d019      	beq.n	8005c26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf2:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <HAL_RCC_OscConfig+0x274>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf8:	f7fd f814 	bl	8002c24 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c00:	f7fd f810 	bl	8002c24 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e15a      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c12:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <HAL_RCC_OscConfig+0x26c>)
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c1e:	2001      	movs	r0, #1
 8005c20:	f000 fac4 	bl	80061ac <RCC_Delay>
 8005c24:	e01c      	b.n	8005c60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_RCC_OscConfig+0x274>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2c:	f7fc fffa 	bl	8002c24 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c32:	e00f      	b.n	8005c54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c34:	f7fc fff6 	bl	8002c24 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d908      	bls.n	8005c54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e140      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	42420000 	.word	0x42420000
 8005c50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c54:	4b9e      	ldr	r3, [pc, #632]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e9      	bne.n	8005c34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80a6 	beq.w	8005dba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c72:	4b97      	ldr	r3, [pc, #604]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10d      	bne.n	8005c9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c7e:	4b94      	ldr	r3, [pc, #592]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	4a93      	ldr	r2, [pc, #588]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c88:	61d3      	str	r3, [r2, #28]
 8005c8a:	4b91      	ldr	r3, [pc, #580]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9a:	4b8e      	ldr	r3, [pc, #568]	; (8005ed4 <HAL_RCC_OscConfig+0x4f8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d118      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca6:	4b8b      	ldr	r3, [pc, #556]	; (8005ed4 <HAL_RCC_OscConfig+0x4f8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a8a      	ldr	r2, [pc, #552]	; (8005ed4 <HAL_RCC_OscConfig+0x4f8>)
 8005cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb2:	f7fc ffb7 	bl	8002c24 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cba:	f7fc ffb3 	bl	8002c24 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b64      	cmp	r3, #100	; 0x64
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e0fd      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ccc:	4b81      	ldr	r3, [pc, #516]	; (8005ed4 <HAL_RCC_OscConfig+0x4f8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d106      	bne.n	8005cee <HAL_RCC_OscConfig+0x312>
 8005ce0:	4b7b      	ldr	r3, [pc, #492]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	4a7a      	ldr	r2, [pc, #488]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6213      	str	r3, [r2, #32]
 8005cec:	e02d      	b.n	8005d4a <HAL_RCC_OscConfig+0x36e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x334>
 8005cf6:	4b76      	ldr	r3, [pc, #472]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	4a75      	ldr	r2, [pc, #468]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	6213      	str	r3, [r2, #32]
 8005d02:	4b73      	ldr	r3, [pc, #460]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	4a72      	ldr	r2, [pc, #456]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d08:	f023 0304 	bic.w	r3, r3, #4
 8005d0c:	6213      	str	r3, [r2, #32]
 8005d0e:	e01c      	b.n	8005d4a <HAL_RCC_OscConfig+0x36e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2b05      	cmp	r3, #5
 8005d16:	d10c      	bne.n	8005d32 <HAL_RCC_OscConfig+0x356>
 8005d18:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	4a6c      	ldr	r2, [pc, #432]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d1e:	f043 0304 	orr.w	r3, r3, #4
 8005d22:	6213      	str	r3, [r2, #32]
 8005d24:	4b6a      	ldr	r3, [pc, #424]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	4a69      	ldr	r2, [pc, #420]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	6213      	str	r3, [r2, #32]
 8005d30:	e00b      	b.n	8005d4a <HAL_RCC_OscConfig+0x36e>
 8005d32:	4b67      	ldr	r3, [pc, #412]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	4a66      	ldr	r2, [pc, #408]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	6213      	str	r3, [r2, #32]
 8005d3e:	4b64      	ldr	r3, [pc, #400]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	4a63      	ldr	r2, [pc, #396]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d44:	f023 0304 	bic.w	r3, r3, #4
 8005d48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d015      	beq.n	8005d7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d52:	f7fc ff67 	bl	8002c24 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d58:	e00a      	b.n	8005d70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d5a:	f7fc ff63 	bl	8002c24 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e0ab      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d70:	4b57      	ldr	r3, [pc, #348]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0ee      	beq.n	8005d5a <HAL_RCC_OscConfig+0x37e>
 8005d7c:	e014      	b.n	8005da8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7e:	f7fc ff51 	bl	8002c24 <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d84:	e00a      	b.n	8005d9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d86:	f7fc ff4d 	bl	8002c24 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e095      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9c:	4b4c      	ldr	r3, [pc, #304]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1ee      	bne.n	8005d86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d105      	bne.n	8005dba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dae:	4b48      	ldr	r3, [pc, #288]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	4a47      	ldr	r2, [pc, #284]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8081 	beq.w	8005ec6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc4:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f003 030c 	and.w	r3, r3, #12
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d061      	beq.n	8005e94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d146      	bne.n	8005e66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd8:	4b3f      	ldr	r3, [pc, #252]	; (8005ed8 <HAL_RCC_OscConfig+0x4fc>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dde:	f7fc ff21 	bl	8002c24 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de6:	f7fc ff1d 	bl	8002c24 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e067      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005df8:	4b35      	ldr	r3, [pc, #212]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f0      	bne.n	8005de6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0c:	d108      	bne.n	8005e20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e0e:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	492d      	ldr	r1, [pc, #180]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e20:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a19      	ldr	r1, [r3, #32]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	430b      	orrs	r3, r1
 8005e32:	4927      	ldr	r1, [pc, #156]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_RCC_OscConfig+0x4fc>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3e:	f7fc fef1 	bl	8002c24 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e46:	f7fc feed 	bl	8002c24 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e037      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e58:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0f0      	beq.n	8005e46 <HAL_RCC_OscConfig+0x46a>
 8005e64:	e02f      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e66:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <HAL_RCC_OscConfig+0x4fc>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fc feda 	bl	8002c24 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e74:	f7fc fed6 	bl	8002c24 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e020      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f0      	bne.n	8005e74 <HAL_RCC_OscConfig+0x498>
 8005e92:	e018      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e013      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_OscConfig+0x4f4>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d106      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d001      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e000      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40007000 	.word	0x40007000
 8005ed8:	42420060 	.word	0x42420060

08005edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0d0      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ef0:	4b6a      	ldr	r3, [pc, #424]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d910      	bls.n	8005f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efe:	4b67      	ldr	r3, [pc, #412]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 0207 	bic.w	r2, r3, #7
 8005f06:	4965      	ldr	r1, [pc, #404]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0e:	4b63      	ldr	r3, [pc, #396]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0b8      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d020      	beq.n	8005f6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f38:	4b59      	ldr	r3, [pc, #356]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a58      	ldr	r2, [pc, #352]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f50:	4b53      	ldr	r3, [pc, #332]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4a52      	ldr	r2, [pc, #328]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f5c:	4b50      	ldr	r3, [pc, #320]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	494d      	ldr	r1, [pc, #308]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d040      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d107      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	4b47      	ldr	r3, [pc, #284]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d115      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e07f      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d107      	bne.n	8005faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9a:	4b41      	ldr	r3, [pc, #260]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e073      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005faa:	4b3d      	ldr	r3, [pc, #244]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e06b      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fba:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f023 0203 	bic.w	r2, r3, #3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4936      	ldr	r1, [pc, #216]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fcc:	f7fc fe2a 	bl	8002c24 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd4:	f7fc fe26 	bl	8002c24 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e053      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 020c 	and.w	r2, r3, #12
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d1eb      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b27      	ldr	r3, [pc, #156]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d210      	bcs.n	800602c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b24      	ldr	r3, [pc, #144]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f023 0207 	bic.w	r2, r3, #7
 8006012:	4922      	ldr	r1, [pc, #136]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800601a:	4b20      	ldr	r3, [pc, #128]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0307 	and.w	r3, r3, #7
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d001      	beq.n	800602c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e032      	b.n	8006092 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006038:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	4916      	ldr	r1, [pc, #88]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006046:	4313      	orrs	r3, r2
 8006048:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	490e      	ldr	r1, [pc, #56]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	4313      	orrs	r3, r2
 8006068:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800606a:	f000 f821 	bl	80060b0 <HAL_RCC_GetSysClockFreq>
 800606e:	4602      	mov	r2, r0
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	490a      	ldr	r1, [pc, #40]	; (80060a4 <HAL_RCC_ClockConfig+0x1c8>)
 800607c:	5ccb      	ldrb	r3, [r1, r3]
 800607e:	fa22 f303 	lsr.w	r3, r2, r3
 8006082:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <HAL_RCC_ClockConfig+0x1cc>)
 8006084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <HAL_RCC_ClockConfig+0x1d0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc fd88 	bl	8002ba0 <HAL_InitTick>

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40022000 	.word	0x40022000
 80060a0:	40021000 	.word	0x40021000
 80060a4:	0800bab4 	.word	0x0800bab4
 80060a8:	20000028 	.word	0x20000028
 80060ac:	2000002c 	.word	0x2000002c

080060b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060b0:	b490      	push	{r4, r7}
 80060b2:	b08a      	sub	sp, #40	; 0x28
 80060b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060b6:	4b2a      	ldr	r3, [pc, #168]	; (8006160 <HAL_RCC_GetSysClockFreq+0xb0>)
 80060b8:	1d3c      	adds	r4, r7, #4
 80060ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060c0:	f240 2301 	movw	r3, #513	; 0x201
 80060c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	2300      	movs	r3, #0
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	2300      	movs	r3, #0
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80060da:	4b22      	ldr	r3, [pc, #136]	; (8006164 <HAL_RCC_GetSysClockFreq+0xb4>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 030c 	and.w	r3, r3, #12
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d002      	beq.n	80060f0 <HAL_RCC_GetSysClockFreq+0x40>
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d003      	beq.n	80060f6 <HAL_RCC_GetSysClockFreq+0x46>
 80060ee:	e02d      	b.n	800614c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060f0:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060f2:	623b      	str	r3, [r7, #32]
      break;
 80060f4:	e02d      	b.n	8006152 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	0c9b      	lsrs	r3, r3, #18
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006102:	4413      	add	r3, r2
 8006104:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006108:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d013      	beq.n	800613c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006114:	4b13      	ldr	r3, [pc, #76]	; (8006164 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	0c5b      	lsrs	r3, r3, #17
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006122:	4413      	add	r3, r2
 8006124:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006128:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4a0e      	ldr	r2, [pc, #56]	; (8006168 <HAL_RCC_GetSysClockFreq+0xb8>)
 800612e:	fb02 f203 	mul.w	r2, r2, r3
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
 800613a:	e004      	b.n	8006146 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4a0b      	ldr	r2, [pc, #44]	; (800616c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	623b      	str	r3, [r7, #32]
      break;
 800614a:	e002      	b.n	8006152 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800614c:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_RCC_GetSysClockFreq+0xb8>)
 800614e:	623b      	str	r3, [r7, #32]
      break;
 8006150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006152:	6a3b      	ldr	r3, [r7, #32]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3728      	adds	r7, #40	; 0x28
 8006158:	46bd      	mov	sp, r7
 800615a:	bc90      	pop	{r4, r7}
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	0800ba50 	.word	0x0800ba50
 8006164:	40021000 	.word	0x40021000
 8006168:	007a1200 	.word	0x007a1200
 800616c:	003d0900 	.word	0x003d0900

08006170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006174:	4b02      	ldr	r3, [pc, #8]	; (8006180 <HAL_RCC_GetHCLKFreq+0x10>)
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	20000028 	.word	0x20000028

08006184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006188:	f7ff fff2 	bl	8006170 <HAL_RCC_GetHCLKFreq>
 800618c:	4602      	mov	r2, r0
 800618e:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	0adb      	lsrs	r3, r3, #11
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	4903      	ldr	r1, [pc, #12]	; (80061a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800619a:	5ccb      	ldrb	r3, [r1, r3]
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000
 80061a8:	0800bac4 	.word	0x0800bac4

080061ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061b4:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <RCC_Delay+0x34>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a0a      	ldr	r2, [pc, #40]	; (80061e4 <RCC_Delay+0x38>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	0a5b      	lsrs	r3, r3, #9
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061c8:	bf00      	nop
  }
  while (Delay --);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1e5a      	subs	r2, r3, #1
 80061ce:	60fa      	str	r2, [r7, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f9      	bne.n	80061c8 <RCC_Delay+0x1c>
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	20000028 	.word	0x20000028
 80061e4:	10624dd3 	.word	0x10624dd3

080061e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d07d      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006204:	2300      	movs	r3, #0
 8006206:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006208:	4b4f      	ldr	r3, [pc, #316]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10d      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006214:	4b4c      	ldr	r3, [pc, #304]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	4a4b      	ldr	r2, [pc, #300]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800621a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621e:	61d3      	str	r3, [r2, #28]
 8006220:	4b49      	ldr	r3, [pc, #292]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800622c:	2301      	movs	r3, #1
 800622e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006230:	4b46      	ldr	r3, [pc, #280]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d118      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800623c:	4b43      	ldr	r3, [pc, #268]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a42      	ldr	r2, [pc, #264]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006248:	f7fc fcec 	bl	8002c24 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624e:	e008      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006250:	f7fc fce8 	bl	8002c24 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b64      	cmp	r3, #100	; 0x64
 800625c:	d901      	bls.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e06d      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006262:	4b3a      	ldr	r3, [pc, #232]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800626e:	4b36      	ldr	r3, [pc, #216]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006276:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d02e      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	429a      	cmp	r2, r3
 800628a:	d027      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800628c:	4b2e      	ldr	r3, [pc, #184]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006294:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006296:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800629c:	4b2c      	ldr	r3, [pc, #176]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062a2:	4a29      	ldr	r2, [pc, #164]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d014      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b2:	f7fc fcb7 	bl	8002c24 <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b8:	e00a      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ba:	f7fc fcb3 	bl	8002c24 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e036      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d0:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0ee      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062dc:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4917      	ldr	r1, [pc, #92]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d105      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f4:	4b14      	ldr	r3, [pc, #80]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	4a13      	ldr	r2, [pc, #76]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800630c:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	490b      	ldr	r1, [pc, #44]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631a:	4313      	orrs	r3, r2
 800631c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4904      	ldr	r1, [pc, #16]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006338:	4313      	orrs	r3, r2
 800633a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40021000 	.word	0x40021000
 800634c:	40007000 	.word	0x40007000
 8006350:	42420440 	.word	0x42420440

08006354 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006354:	b590      	push	{r4, r7, lr}
 8006356:	b08d      	sub	sp, #52	; 0x34
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800635c:	4b5a      	ldr	r3, [pc, #360]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800635e:	f107 040c 	add.w	r4, r7, #12
 8006362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006368:	f240 2301 	movw	r3, #513	; 0x201
 800636c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
 8006372:	2300      	movs	r3, #0
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006376:	2300      	movs	r3, #0
 8006378:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	61fb      	str	r3, [r7, #28]
 800637e:	2300      	movs	r3, #0
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b10      	cmp	r3, #16
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b10      	cmp	r3, #16
 800638c:	f200 8091 	bhi.w	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d04c      	beq.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d07c      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800639c:	e089      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800639e:	4b4b      	ldr	r3, [pc, #300]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80063a4:	4b49      	ldr	r3, [pc, #292]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8082 	beq.w	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	0c9b      	lsrs	r3, r3, #18
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063be:	4413      	add	r3, r2
 80063c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80063c4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d018      	beq.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063d0:	4b3e      	ldr	r3, [pc, #248]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0c5b      	lsrs	r3, r3, #17
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063de:	4413      	add	r3, r2
 80063e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80063f0:	4a37      	ldr	r2, [pc, #220]	; (80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006400:	e004      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800640c:	4b2f      	ldr	r3, [pc, #188]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006418:	d102      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800641e:	e04a      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4a2c      	ldr	r2, [pc, #176]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800642e:	e042      	b.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006430:	4b26      	ldr	r3, [pc, #152]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006440:	d108      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800644c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006450:	62bb      	str	r3, [r7, #40]	; 0x28
 8006452:	e01f      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800645e:	d109      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006460:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800646c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
 8006472:	e00f      	b.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647e:	d11c      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006480:	4b12      	ldr	r3, [pc, #72]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d016      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800648c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006492:	e012      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006494:	e011      	b.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006496:	f7ff fe75 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 800649a:	4602      	mov	r2, r0
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	0b9b      	lsrs	r3, r3, #14
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	3301      	adds	r3, #1
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80064b0:	e004      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80064b2:	bf00      	nop
 80064b4:	e002      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80064b6:	bf00      	nop
 80064b8:	e000      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80064ba:	bf00      	nop
    }
  }
  return (frequency);
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3734      	adds	r7, #52	; 0x34
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd90      	pop	{r4, r7, pc}
 80064c6:	bf00      	nop
 80064c8:	0800ba60 	.word	0x0800ba60
 80064cc:	40021000 	.word	0x40021000
 80064d0:	007a1200 	.word	0x007a1200
 80064d4:	003d0900 	.word	0x003d0900
 80064d8:	aaaaaaab 	.word	0xaaaaaaab

080064dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e041      	b.n	8006572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fc fa38 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f000 fca0 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d001      	beq.n	8006594 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e032      	b.n	80065fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a18      	ldr	r2, [pc, #96]	; (8006604 <HAL_TIM_Base_Start+0x88>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <HAL_TIM_Base_Start+0x48>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d009      	beq.n	80065c4 <HAL_TIM_Base_Start+0x48>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a14      	ldr	r2, [pc, #80]	; (8006608 <HAL_TIM_Base_Start+0x8c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_TIM_Base_Start+0x48>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a13      	ldr	r2, [pc, #76]	; (800660c <HAL_TIM_Base_Start+0x90>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d111      	bne.n	80065e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b06      	cmp	r3, #6
 80065d4:	d010      	beq.n	80065f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	e007      	b.n	80065f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800

08006610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d001      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e03a      	b.n	800669e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_TIM_Base_Start_IT+0x98>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x58>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006652:	d009      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x58>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a14      	ldr	r2, [pc, #80]	; (80066ac <HAL_TIM_Base_Start_IT+0x9c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x58>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d111      	bne.n	800668c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b06      	cmp	r3, #6
 8006678:	d010      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0201 	orr.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668a:	e007      	b.n	800669c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	40000400 	.word	0x40000400
 80066b0:	40000800 	.word	0x40000800

080066b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0201 	bic.w	r2, r2, #1
 80066ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a1a      	ldr	r2, [r3, #32]
 80066d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10f      	bne.n	80066fc <HAL_TIM_Base_Stop_IT+0x48>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	f240 4344 	movw	r3, #1092	; 0x444
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d107      	bne.n	80066fc <HAL_TIM_Base_Stop_IT+0x48>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e041      	b.n	80067a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d106      	bne.n	800673c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f839 	bl	80067ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f000 fb86 	bl	8006e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr

080067c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <HAL_TIM_PWM_Start+0x24>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	bf14      	ite	ne
 80067dc:	2301      	movne	r3, #1
 80067de:	2300      	moveq	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	e022      	b.n	800682a <HAL_TIM_PWM_Start+0x6a>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d109      	bne.n	80067fe <HAL_TIM_PWM_Start+0x3e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	bf14      	ite	ne
 80067f6:	2301      	movne	r3, #1
 80067f8:	2300      	moveq	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	e015      	b.n	800682a <HAL_TIM_PWM_Start+0x6a>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d109      	bne.n	8006818 <HAL_TIM_PWM_Start+0x58>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	bf14      	ite	ne
 8006810:	2301      	movne	r3, #1
 8006812:	2300      	moveq	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	e008      	b.n	800682a <HAL_TIM_PWM_Start+0x6a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	bf14      	ite	ne
 8006824:	2301      	movne	r3, #1
 8006826:	2300      	moveq	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e05e      	b.n	80068f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <HAL_TIM_PWM_Start+0x82>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006840:	e013      	b.n	800686a <HAL_TIM_PWM_Start+0xaa>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b04      	cmp	r3, #4
 8006846:	d104      	bne.n	8006852 <HAL_TIM_PWM_Start+0x92>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006850:	e00b      	b.n	800686a <HAL_TIM_PWM_Start+0xaa>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b08      	cmp	r3, #8
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start+0xa2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006860:	e003      	b.n	800686a <HAL_TIM_PWM_Start+0xaa>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2201      	movs	r2, #1
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fd74 	bl	8007360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1e      	ldr	r2, [pc, #120]	; (80068f8 <HAL_TIM_PWM_Start+0x138>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d107      	bne.n	8006892 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006890:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <HAL_TIM_PWM_Start+0x138>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <HAL_TIM_PWM_Start+0xfa>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a4:	d009      	beq.n	80068ba <HAL_TIM_PWM_Start+0xfa>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a14      	ldr	r2, [pc, #80]	; (80068fc <HAL_TIM_PWM_Start+0x13c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <HAL_TIM_PWM_Start+0xfa>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a12      	ldr	r2, [pc, #72]	; (8006900 <HAL_TIM_PWM_Start+0x140>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d111      	bne.n	80068de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	d010      	beq.n	80068ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068dc:	e007      	b.n	80068ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0201 	orr.w	r2, r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40000400 	.word	0x40000400
 8006900:	40000800 	.word	0x40000800

08006904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	d122      	bne.n	8006960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d11b      	bne.n	8006960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0202 	mvn.w	r2, #2
 8006930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa6f 	bl	8006e2a <HAL_TIM_IC_CaptureCallback>
 800694c:	e005      	b.n	800695a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa62 	bl	8006e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa71 	bl	8006e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d122      	bne.n	80069b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b04      	cmp	r3, #4
 800697a:	d11b      	bne.n	80069b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0204 	mvn.w	r2, #4
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa45 	bl	8006e2a <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa38 	bl	8006e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa47 	bl	8006e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d122      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d11b      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0208 	mvn.w	r2, #8
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2204      	movs	r2, #4
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa1b 	bl	8006e2a <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa0e 	bl	8006e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa1d 	bl	8006e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	2b10      	cmp	r3, #16
 8006a14:	d122      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0310 	and.w	r3, r3, #16
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d11b      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0210 	mvn.w	r2, #16
 8006a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2208      	movs	r2, #8
 8006a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f9f1 	bl	8006e2a <HAL_TIM_IC_CaptureCallback>
 8006a48:	e005      	b.n	8006a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9e4 	bl	8006e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f9f3 	bl	8006e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10e      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d107      	bne.n	8006a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0201 	mvn.w	r2, #1
 8006a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fa f85a 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d10e      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa0:	2b80      	cmp	r3, #128	; 0x80
 8006aa2:	d107      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fce1 	bl	8007476 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d107      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9b7 	bl	8006e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d10e      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d107      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0220 	mvn.w	r2, #32
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fcac 	bl	8007464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e0ac      	b.n	8006c88 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b0c      	cmp	r3, #12
 8006b3a:	f200 809f 	bhi.w	8006c7c <HAL_TIM_PWM_ConfigChannel+0x168>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b79 	.word	0x08006b79
 8006b48:	08006c7d 	.word	0x08006c7d
 8006b4c:	08006c7d 	.word	0x08006c7d
 8006b50:	08006c7d 	.word	0x08006c7d
 8006b54:	08006bb9 	.word	0x08006bb9
 8006b58:	08006c7d 	.word	0x08006c7d
 8006b5c:	08006c7d 	.word	0x08006c7d
 8006b60:	08006c7d 	.word	0x08006c7d
 8006b64:	08006bfb 	.word	0x08006bfb
 8006b68:	08006c7d 	.word	0x08006c7d
 8006b6c:	08006c7d 	.word	0x08006c7d
 8006b70:	08006c7d 	.word	0x08006c7d
 8006b74:	08006c3b 	.word	0x08006c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 f9d0 	bl	8006f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0208 	orr.w	r2, r2, #8
 8006b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0204 	bic.w	r2, r2, #4
 8006ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6999      	ldr	r1, [r3, #24]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	619a      	str	r2, [r3, #24]
      break;
 8006bb6:	e062      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fa16 	bl	8006ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6999      	ldr	r1, [r3, #24]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	619a      	str	r2, [r3, #24]
      break;
 8006bf8:	e041      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fa5f 	bl	80070c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0208 	orr.w	r2, r2, #8
 8006c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0204 	bic.w	r2, r2, #4
 8006c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69d9      	ldr	r1, [r3, #28]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	61da      	str	r2, [r3, #28]
      break;
 8006c38:	e021      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 faa9 	bl	8007198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69d9      	ldr	r1, [r3, #28]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	021a      	lsls	r2, r3, #8
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	61da      	str	r2, [r3, #28]
      break;
 8006c7a:	e000      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_TIM_ConfigClockSource+0x18>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e0b3      	b.n	8006e10 <HAL_TIM_ConfigClockSource+0x180>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce0:	d03e      	beq.n	8006d60 <HAL_TIM_ConfigClockSource+0xd0>
 8006ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce6:	f200 8087 	bhi.w	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	f000 8085 	beq.w	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf6:	d87f      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006cf8:	2b70      	cmp	r3, #112	; 0x70
 8006cfa:	d01a      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0xa2>
 8006cfc:	2b70      	cmp	r3, #112	; 0x70
 8006cfe:	d87b      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d00:	2b60      	cmp	r3, #96	; 0x60
 8006d02:	d050      	beq.n	8006da6 <HAL_TIM_ConfigClockSource+0x116>
 8006d04:	2b60      	cmp	r3, #96	; 0x60
 8006d06:	d877      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d08:	2b50      	cmp	r3, #80	; 0x50
 8006d0a:	d03c      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0xf6>
 8006d0c:	2b50      	cmp	r3, #80	; 0x50
 8006d0e:	d873      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d10:	2b40      	cmp	r3, #64	; 0x40
 8006d12:	d058      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0x136>
 8006d14:	2b40      	cmp	r3, #64	; 0x40
 8006d16:	d86f      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d18:	2b30      	cmp	r3, #48	; 0x30
 8006d1a:	d064      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x156>
 8006d1c:	2b30      	cmp	r3, #48	; 0x30
 8006d1e:	d86b      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d060      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x156>
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d867      	bhi.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d05c      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x156>
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d05a      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d30:	e062      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6899      	ldr	r1, [r3, #8]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f000 faee 	bl	8007322 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	609a      	str	r2, [r3, #8]
      break;
 8006d5e:	e04e      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6899      	ldr	r1, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f000 fad7 	bl	8007322 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d82:	609a      	str	r2, [r3, #8]
      break;
 8006d84:	e03b      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6859      	ldr	r1, [r3, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f000 fa4e 	bl	8007234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2150      	movs	r1, #80	; 0x50
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 faa5 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 8006da4:	e02b      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6859      	ldr	r1, [r3, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f000 fa6c 	bl	8007290 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2160      	movs	r1, #96	; 0x60
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fa95 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 8006dc4:	e01b      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6859      	ldr	r1, [r3, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f000 fa2e 	bl	8007234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2140      	movs	r1, #64	; 0x40
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fa85 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 8006de4:	e00b      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f000 fa7c 	bl	80072ee <TIM_ITRx_SetConfig>
        break;
 8006df6:	e002      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006df8:	bf00      	nop
 8006dfa:	e000      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006dfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr

08006e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a29      	ldr	r2, [pc, #164]	; (8006f18 <TIM_Base_SetConfig+0xb8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00b      	beq.n	8006e90 <TIM_Base_SetConfig+0x30>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7e:	d007      	beq.n	8006e90 <TIM_Base_SetConfig+0x30>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a26      	ldr	r2, [pc, #152]	; (8006f1c <TIM_Base_SetConfig+0xbc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_Base_SetConfig+0x30>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a25      	ldr	r2, [pc, #148]	; (8006f20 <TIM_Base_SetConfig+0xc0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d108      	bne.n	8006ea2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <TIM_Base_SetConfig+0xb8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00b      	beq.n	8006ec2 <TIM_Base_SetConfig+0x62>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb0:	d007      	beq.n	8006ec2 <TIM_Base_SetConfig+0x62>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a19      	ldr	r2, [pc, #100]	; (8006f1c <TIM_Base_SetConfig+0xbc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_Base_SetConfig+0x62>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a18      	ldr	r2, [pc, #96]	; (8006f20 <TIM_Base_SetConfig+0xc0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d108      	bne.n	8006ed4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a07      	ldr	r2, [pc, #28]	; (8006f18 <TIM_Base_SetConfig+0xb8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d103      	bne.n	8006f08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	615a      	str	r2, [r3, #20]
}
 8006f0e:	bf00      	nop
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr
 8006f18:	40012c00 	.word	0x40012c00
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800

08006f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0201 	bic.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f023 0302 	bic.w	r3, r3, #2
 8006f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <TIM_OC1_SetConfig+0xc8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d10c      	bne.n	8006f9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f023 0308 	bic.w	r3, r3, #8
 8006f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 0304 	bic.w	r3, r3, #4
 8006f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a13      	ldr	r2, [pc, #76]	; (8006fec <TIM_OC1_SetConfig+0xc8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d111      	bne.n	8006fc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	621a      	str	r2, [r3, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	371c      	adds	r7, #28
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	40012c00 	.word	0x40012c00

08006ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f023 0210 	bic.w	r2, r3, #16
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f023 0320 	bic.w	r3, r3, #32
 800703a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a1d      	ldr	r2, [pc, #116]	; (80070c0 <TIM_OC2_SetConfig+0xd0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10d      	bne.n	800706c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800706a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a14      	ldr	r2, [pc, #80]	; (80070c0 <TIM_OC2_SetConfig+0xd0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d113      	bne.n	800709c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800707a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bc80      	pop	{r7}
 80070be:	4770      	bx	lr
 80070c0:	40012c00 	.word	0x40012c00

080070c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800710c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <TIM_OC3_SetConfig+0xd0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d10d      	bne.n	800713e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800713c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a14      	ldr	r2, [pc, #80]	; (8007194 <TIM_OC3_SetConfig+0xd0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d113      	bne.n	800716e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800714c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	621a      	str	r2, [r3, #32]
}
 8007188:	bf00      	nop
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40012c00 	.word	0x40012c00

08007198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	031b      	lsls	r3, r3, #12
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <TIM_OC4_SetConfig+0x98>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d109      	bne.n	800720c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	019b      	lsls	r3, r3, #6
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr
 8007230:	40012c00 	.word	0x40012c00

08007234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f023 0201 	bic.w	r2, r3, #1
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800725e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f023 030a 	bic.w	r3, r3, #10
 8007270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4313      	orrs	r3, r2
 8007278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	bf00      	nop
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	f023 0210 	bic.w	r2, r3, #16
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	031b      	lsls	r3, r3, #12
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	621a      	str	r2, [r3, #32]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bc80      	pop	{r7}
 80072ec:	4770      	bx	lr

080072ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	f043 0307 	orr.w	r3, r3, #7
 8007310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	609a      	str	r2, [r3, #8]
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr

08007322 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007322:	b480      	push	{r7}
 8007324:	b087      	sub	sp, #28
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800733c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	021a      	lsls	r2, r3, #8
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	431a      	orrs	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4313      	orrs	r3, r2
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	609a      	str	r2, [r3, #8]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	bc80      	pop	{r7}
 800735e:	4770      	bx	lr

08007360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f003 031f 	and.w	r3, r3, #31
 8007372:	2201      	movs	r2, #1
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a1a      	ldr	r2, [r3, #32]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	43db      	mvns	r3, r3
 8007382:	401a      	ands	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1a      	ldr	r2, [r3, #32]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	fa01 f303 	lsl.w	r3, r1, r3
 8007398:	431a      	orrs	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr

080073a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073bc:	2302      	movs	r3, #2
 80073be:	e046      	b.n	800744e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a16      	ldr	r2, [pc, #88]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740c:	d009      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a10      	ldr	r2, [pc, #64]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d10c      	bne.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4313      	orrs	r3, r2
 8007432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800

08007464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr

08007476 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr

08007488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007488:	b084      	sub	sp, #16
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	f107 0014 	add.w	r0, r7, #20
 8007496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	b004      	add	sp, #16
 80074a6:	4770      	bx	lr

080074a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80074e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	43db      	mvns	r3, r3
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	4013      	ands	r3, r2
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr

08007508 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007520:	b084      	sub	sp, #16
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	f107 0014 	add.w	r0, r7, #20
 800752e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	bc80      	pop	{r7}
 800755c:	b004      	add	sp, #16
 800755e:	4770      	bx	lr

08007560 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007560:	b480      	push	{r7}
 8007562:	b09b      	sub	sp, #108	; 0x6c
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007586:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	78db      	ldrb	r3, [r3, #3]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d81f      	bhi.n	80075d2 <USB_ActivateEndpoint+0x72>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <USB_ActivateEndpoint+0x38>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075db 	.word	0x080075db
 80075a4:	080075b7 	.word	0x080075b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80075a8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075b4:	e012      	b.n	80075dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80075be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075c2:	e00b      	b.n	80075dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80075d0:	e004      	b.n	80075dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80075d8:	e000      	b.n	80075dc <USB_ActivateEndpoint+0x7c>
      break;
 80075da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	441a      	add	r2, r3
 80075e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80075ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007614:	b29a      	uxth	r2, r3
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	4313      	orrs	r3, r2
 800761e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	441a      	add	r2, r3
 800762c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007640:	b29b      	uxth	r3, r3
 8007642:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	7b1b      	ldrb	r3, [r3, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f040 8149 	bne.w	80078e0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8084 	beq.w	8007760 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	617b      	str	r3, [r7, #20]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007662:	b29b      	uxth	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	4413      	add	r3, r2
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	011a      	lsls	r2, r3, #4
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	88db      	ldrh	r3, [r3, #6]
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	b29b      	uxth	r3, r3
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	81fb      	strh	r3, [r7, #14]
 800769a:	89fb      	ldrh	r3, [r7, #14]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01b      	beq.n	80076dc <USB_ActivateEndpoint+0x17c>
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	81bb      	strh	r3, [r7, #12]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	441a      	add	r2, r3
 80076c6:	89bb      	ldrh	r3, [r7, #12]
 80076c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076d8:	b29b      	uxth	r3, r3
 80076da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	78db      	ldrb	r3, [r3, #3]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d020      	beq.n	8007726 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fa:	813b      	strh	r3, [r7, #8]
 80076fc:	893b      	ldrh	r3, [r7, #8]
 80076fe:	f083 0320 	eor.w	r3, r3, #32
 8007702:	813b      	strh	r3, [r7, #8]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	441a      	add	r2, r3
 800770e:	893b      	ldrh	r3, [r7, #8]
 8007710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	b29b      	uxth	r3, r3
 8007722:	8013      	strh	r3, [r2, #0]
 8007724:	e27f      	b.n	8007c26 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800773c:	817b      	strh	r3, [r7, #10]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	441a      	add	r2, r3
 8007748:	897b      	ldrh	r3, [r7, #10]
 800774a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800774e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775a:	b29b      	uxth	r3, r3
 800775c:	8013      	strh	r3, [r2, #0]
 800775e:	e262      	b.n	8007c26 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800776a:	b29b      	uxth	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	4413      	add	r3, r2
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	011a      	lsls	r2, r3, #4
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	4413      	add	r3, r2
 800777e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	88db      	ldrh	r3, [r3, #6]
 8007788:	085b      	lsrs	r3, r3, #1
 800778a:	b29b      	uxth	r3, r3
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800779e:	b29b      	uxth	r3, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	4413      	add	r3, r2
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	011a      	lsls	r2, r3, #4
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	4413      	add	r3, r2
 80077b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077b6:	623b      	str	r3, [r7, #32]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d112      	bne.n	80077e6 <USB_ActivateEndpoint+0x286>
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	801a      	strh	r2, [r3, #0]
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077de:	b29a      	uxth	r2, r3
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e02f      	b.n	8007846 <USB_ActivateEndpoint+0x2e6>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b3e      	cmp	r3, #62	; 0x3e
 80077ec:	d813      	bhi.n	8007816 <USB_ActivateEndpoint+0x2b6>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	663b      	str	r3, [r7, #96]	; 0x60
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <USB_ActivateEndpoint+0x2a8>
 8007802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007804:	3301      	adds	r3, #1
 8007806:	663b      	str	r3, [r7, #96]	; 0x60
 8007808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800780a:	b29b      	uxth	r3, r3
 800780c:	029b      	lsls	r3, r3, #10
 800780e:	b29a      	uxth	r2, r3
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	801a      	strh	r2, [r3, #0]
 8007814:	e017      	b.n	8007846 <USB_ActivateEndpoint+0x2e6>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	663b      	str	r3, [r7, #96]	; 0x60
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2b00      	cmp	r3, #0
 8007828:	d102      	bne.n	8007830 <USB_ActivateEndpoint+0x2d0>
 800782a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800782c:	3b01      	subs	r3, #1
 800782e:	663b      	str	r3, [r7, #96]	; 0x60
 8007830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007832:	b29b      	uxth	r3, r3
 8007834:	029b      	lsls	r3, r3, #10
 8007836:	b29b      	uxth	r3, r3
 8007838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800783c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007840:	b29a      	uxth	r2, r3
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	83fb      	strh	r3, [r7, #30]
 8007854:	8bfb      	ldrh	r3, [r7, #30]
 8007856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d01b      	beq.n	8007896 <USB_ActivateEndpoint+0x336>
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007874:	83bb      	strh	r3, [r7, #28]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	441a      	add	r2, r3
 8007880:	8bbb      	ldrh	r3, [r7, #28]
 8007882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800788a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800788e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007892:	b29b      	uxth	r3, r3
 8007894:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ac:	837b      	strh	r3, [r7, #26]
 80078ae:	8b7b      	ldrh	r3, [r7, #26]
 80078b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078b4:	837b      	strh	r3, [r7, #26]
 80078b6:	8b7b      	ldrh	r3, [r7, #26]
 80078b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80078bc:	837b      	strh	r3, [r7, #26]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	441a      	add	r2, r3
 80078c8:	8b7b      	ldrh	r3, [r7, #26]
 80078ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078da:	b29b      	uxth	r3, r3
 80078dc:	8013      	strh	r3, [r2, #0]
 80078de:	e1a2      	b.n	8007c26 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	441a      	add	r2, r3
 8007904:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007910:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007918:	b29b      	uxth	r3, r3
 800791a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007926:	b29b      	uxth	r3, r3
 8007928:	461a      	mov	r2, r3
 800792a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800792c:	4413      	add	r3, r2
 800792e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007938:	4413      	add	r3, r2
 800793a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800793e:	657b      	str	r3, [r7, #84]	; 0x54
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	891b      	ldrh	r3, [r3, #8]
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	b29b      	uxth	r3, r3
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	653b      	str	r3, [r7, #80]	; 0x50
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795a:	b29b      	uxth	r3, r3
 800795c:	461a      	mov	r2, r3
 800795e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007960:	4413      	add	r3, r2
 8007962:	653b      	str	r3, [r7, #80]	; 0x50
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	011a      	lsls	r2, r3, #4
 800796a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796c:	4413      	add	r3, r2
 800796e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	895b      	ldrh	r3, [r3, #10]
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	b29b      	uxth	r3, r3
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007982:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 8091 	bne.w	8007ab0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800799c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800799e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d01b      	beq.n	80079de <USB_ActivateEndpoint+0x47e>
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079bc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	441a      	add	r2, r3
 80079c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80079ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079da:	b29b      	uxth	r3, r3
 80079dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80079ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01b      	beq.n	8007a2e <USB_ActivateEndpoint+0x4ce>
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	441a      	add	r2, r3
 8007a18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	441a      	add	r2, r3
 8007a60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8c:	867b      	strh	r3, [r7, #50]	; 0x32
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	441a      	add	r2, r3
 8007a98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	8013      	strh	r3, [r2, #0]
 8007aae:	e0ba      	b.n	8007c26 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007ac0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01d      	beq.n	8007b08 <USB_ActivateEndpoint+0x5a8>
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	441a      	add	r2, r3
 8007af0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01d      	beq.n	8007b60 <USB_ActivateEndpoint+0x600>
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	441a      	add	r2, r3
 8007b48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d024      	beq.n	8007bb2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b86:	f083 0320 	eor.w	r3, r3, #32
 8007b8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	441a      	add	r2, r3
 8007b98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	8013      	strh	r3, [r2, #0]
 8007bb0:	e01d      	b.n	8007bee <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	441a      	add	r2, r3
 8007bd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	441a      	add	r2, r3
 8007c10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007c26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	376c      	adds	r7, #108	; 0x6c
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b08d      	sub	sp, #52	; 0x34
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	7b1b      	ldrb	r3, [r3, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f040 808e 	bne.w	8007d64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d044      	beq.n	8007cda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	81bb      	strh	r3, [r7, #12]
 8007c5e:	89bb      	ldrh	r3, [r7, #12]
 8007c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01b      	beq.n	8007ca0 <USB_DeactivateEndpoint+0x6c>
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7e:	817b      	strh	r3, [r7, #10]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	441a      	add	r2, r3
 8007c8a:	897b      	ldrh	r3, [r7, #10]
 8007c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb6:	813b      	strh	r3, [r7, #8]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	893b      	ldrh	r3, [r7, #8]
 8007cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	8013      	strh	r3, [r2, #0]
 8007cd8:	e192      	b.n	8008000 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	827b      	strh	r3, [r7, #18]
 8007ce8:	8a7b      	ldrh	r3, [r7, #18]
 8007cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01b      	beq.n	8007d2a <USB_DeactivateEndpoint+0xf6>
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d08:	823b      	strh	r3, [r7, #16]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	441a      	add	r2, r3
 8007d14:	8a3b      	ldrh	r3, [r7, #16]
 8007d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d40:	81fb      	strh	r3, [r7, #14]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	441a      	add	r2, r3
 8007d4c:	89fb      	ldrh	r3, [r7, #14]
 8007d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	8013      	strh	r3, [r2, #0]
 8007d62:	e14d      	b.n	8008000 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 80a5 	bne.w	8007eb8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	843b      	strh	r3, [r7, #32]
 8007d7c:	8c3b      	ldrh	r3, [r7, #32]
 8007d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d01b      	beq.n	8007dbe <USB_DeactivateEndpoint+0x18a>
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9c:	83fb      	strh	r3, [r7, #30]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	441a      	add	r2, r3
 8007da8:	8bfb      	ldrh	r3, [r7, #30]
 8007daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	83bb      	strh	r3, [r7, #28]
 8007dcc:	8bbb      	ldrh	r3, [r7, #28]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01b      	beq.n	8007e0e <USB_DeactivateEndpoint+0x1da>
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dec:	837b      	strh	r3, [r7, #26]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	8b7b      	ldrh	r3, [r7, #26]
 8007dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e24:	833b      	strh	r3, [r7, #24]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	441a      	add	r2, r3
 8007e30:	8b3b      	ldrh	r3, [r7, #24]
 8007e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5c:	82fb      	strh	r3, [r7, #22]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	441a      	add	r2, r3
 8007e68:	8afb      	ldrh	r3, [r7, #22]
 8007e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e94:	82bb      	strh	r3, [r7, #20]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	441a      	add	r2, r3
 8007ea0:	8abb      	ldrh	r3, [r7, #20]
 8007ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	8013      	strh	r3, [r2, #0]
 8007eb6:	e0a3      	b.n	8008000 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4413      	add	r3, r2
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ec6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01b      	beq.n	8007f08 <USB_DeactivateEndpoint+0x2d4>
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	441a      	add	r2, r3
 8007ef2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007f16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01b      	beq.n	8007f58 <USB_DeactivateEndpoint+0x324>
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f36:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	441a      	add	r2, r3
 8007f42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	441a      	add	r2, r3
 8007f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	441a      	add	r2, r3
 8007fb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fde:	847b      	strh	r3, [r7, #34]	; 0x22
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	441a      	add	r2, r3
 8007fea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3734      	adds	r7, #52	; 0x34
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr

0800800c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b0cc      	sub	sp, #304	; 0x130
 8008010:	af00      	add	r7, sp, #0
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	6018      	str	r0, [r3, #0]
 8008016:	463b      	mov	r3, r7
 8008018:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800801a:	463b      	mov	r3, r7
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b01      	cmp	r3, #1
 8008022:	f040 872e 	bne.w	8008e82 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008026:	463b      	mov	r3, r7
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	699a      	ldr	r2, [r3, #24]
 800802c:	463b      	mov	r3, r7
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	429a      	cmp	r2, r3
 8008034:	d905      	bls.n	8008042 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008036:	463b      	mov	r3, r7
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008040:	e004      	b.n	800804c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008042:	463b      	mov	r3, r7
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800804c:	463b      	mov	r3, r7
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	7b1b      	ldrb	r3, [r3, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d134      	bne.n	80080c0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008056:	463b      	mov	r3, r7
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6959      	ldr	r1, [r3, #20]
 800805c:	463b      	mov	r3, r7
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	88da      	ldrh	r2, [r3, #6]
 8008062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008066:	b29b      	uxth	r3, r3
 8008068:	1d38      	adds	r0, r7, #4
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	f001 fc03 	bl	8009876 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008070:	f107 0310 	add.w	r3, r7, #16
 8008074:	1d3a      	adds	r2, r7, #4
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008082:	b29b      	uxth	r3, r3
 8008084:	4619      	mov	r1, r3
 8008086:	f107 0310 	add.w	r3, r7, #16
 800808a:	f107 0210 	add.w	r2, r7, #16
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	440a      	add	r2, r1
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	463b      	mov	r3, r7
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	011a      	lsls	r2, r3, #4
 800809c:	f107 0310 	add.w	r3, r7, #16
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4413      	add	r3, r2
 80080a4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80080a8:	f107 030c 	add.w	r3, r7, #12
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f107 030c 	add.w	r3, r7, #12
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	f000 beac 	b.w	8008e18 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80080c0:	463b      	mov	r3, r7
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	78db      	ldrb	r3, [r3, #3]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	f040 838c 	bne.w	80087e4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80080cc:	463b      	mov	r3, r7
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6a1a      	ldr	r2, [r3, #32]
 80080d2:	463b      	mov	r3, r7
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	429a      	cmp	r2, r3
 80080da:	f240 8330 	bls.w	800873e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80080de:	1d3b      	adds	r3, r7, #4
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	463b      	mov	r3, r7
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80080fc:	1d3b      	adds	r3, r7, #4
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	463b      	mov	r3, r7
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	441a      	add	r2, r3
 800810a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800810e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008116:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800811a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811e:	b29b      	uxth	r3, r3
 8008120:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008122:	463b      	mov	r3, r7
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6a1a      	ldr	r2, [r3, #32]
 8008128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800812c:	1ad2      	subs	r2, r2, r3
 800812e:	463b      	mov	r3, r7
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008134:	1d3b      	adds	r3, r7, #4
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	463b      	mov	r3, r7
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	b29b      	uxth	r3, r3
 8008146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 819e 	beq.w	800848c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008150:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008154:	1d3a      	adds	r2, r7, #4
 8008156:	6812      	ldr	r2, [r2, #0]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	463b      	mov	r3, r7
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d17a      	bne.n	800825a <USB_EPStartXfer+0x24e>
 8008164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008168:	1d3a      	adds	r2, r7, #4
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	1d3b      	adds	r3, r7, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008176:	b29b      	uxth	r3, r3
 8008178:	4619      	mov	r1, r3
 800817a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800817e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	440a      	add	r2, r1
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	463b      	mov	r3, r7
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	011a      	lsls	r2, r3, #4
 8008190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4413      	add	r3, r2
 8008198:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800819c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d11a      	bne.n	80081e0 <USB_EPStartXfer+0x1d4>
 80081aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	801a      	strh	r2, [r3, #0]
 80081c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	e062      	b.n	80082a6 <USB_EPStartXfer+0x29a>
 80081e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e4:	2b3e      	cmp	r3, #62	; 0x3e
 80081e6:	d819      	bhi.n	800821c <USB_EPStartXfer+0x210>
 80081e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ec:	085b      	lsrs	r3, r3, #1
 80081ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80081f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <USB_EPStartXfer+0x1fc>
 80081fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008202:	3301      	adds	r3, #1
 8008204:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800820c:	b29b      	uxth	r3, r3
 800820e:	029b      	lsls	r3, r3, #10
 8008210:	b29a      	uxth	r2, r3
 8008212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	e044      	b.n	80082a6 <USB_EPStartXfer+0x29a>
 800821c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008220:	095b      	lsrs	r3, r3, #5
 8008222:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	2b00      	cmp	r3, #0
 8008230:	d104      	bne.n	800823c <USB_EPStartXfer+0x230>
 8008232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008236:	3b01      	subs	r3, #1
 8008238:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800823c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008240:	b29b      	uxth	r3, r3
 8008242:	029b      	lsls	r3, r3, #10
 8008244:	b29b      	uxth	r3, r3
 8008246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824e:	b29a      	uxth	r2, r3
 8008250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	e025      	b.n	80082a6 <USB_EPStartXfer+0x29a>
 800825a:	463b      	mov	r3, r7
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d120      	bne.n	80082a6 <USB_EPStartXfer+0x29a>
 8008264:	1d3b      	adds	r3, r7, #4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826c:	b29b      	uxth	r3, r3
 800826e:	4619      	mov	r1, r3
 8008270:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008274:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008278:	6812      	ldr	r2, [r2, #0]
 800827a:	440a      	add	r2, r1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	463b      	mov	r3, r7
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	011a      	lsls	r2, r3, #4
 8008286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4413      	add	r3, r2
 800828e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829c:	b29a      	uxth	r2, r3
 800829e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80082a6:	463b      	mov	r3, r7
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	895b      	ldrh	r3, [r3, #10]
 80082ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082b0:	463b      	mov	r3, r7
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6959      	ldr	r1, [r3, #20]
 80082b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80082c0:	1d38      	adds	r0, r7, #4
 80082c2:	6800      	ldr	r0, [r0, #0]
 80082c4:	f001 fad7 	bl	8009876 <USB_WritePMA>
            ep->xfer_buff += len;
 80082c8:	463b      	mov	r3, r7
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d2:	441a      	add	r2, r3
 80082d4:	463b      	mov	r3, r7
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80082da:	463b      	mov	r3, r7
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6a1a      	ldr	r2, [r3, #32]
 80082e0:	463b      	mov	r3, r7
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d909      	bls.n	80082fe <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80082ea:	463b      	mov	r3, r7
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6a1a      	ldr	r2, [r3, #32]
 80082f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f4:	1ad2      	subs	r2, r2, r3
 80082f6:	463b      	mov	r3, r7
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	621a      	str	r2, [r3, #32]
 80082fc:	e008      	b.n	8008310 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 80082fe:	463b      	mov	r3, r7
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008308:	463b      	mov	r3, r7
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2200      	movs	r2, #0
 800830e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008310:	463b      	mov	r3, r7
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d17a      	bne.n	8008410 <USB_EPStartXfer+0x404>
 800831a:	f107 0318 	add.w	r3, r7, #24
 800831e:	1d3a      	adds	r2, r7, #4
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	1d3b      	adds	r3, r7, #4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800832c:	b29b      	uxth	r3, r3
 800832e:	4619      	mov	r1, r3
 8008330:	f107 0318 	add.w	r3, r7, #24
 8008334:	f107 0218 	add.w	r2, r7, #24
 8008338:	6812      	ldr	r2, [r2, #0]
 800833a:	440a      	add	r2, r1
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	463b      	mov	r3, r7
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	011a      	lsls	r2, r3, #4
 8008346:	f107 0318 	add.w	r3, r7, #24
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4413      	add	r3, r2
 800834e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800835c:	2b00      	cmp	r3, #0
 800835e:	d11a      	bne.n	8008396 <USB_EPStartXfer+0x38a>
 8008360:	f107 0314 	add.w	r3, r7, #20
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800836e:	b29a      	uxth	r2, r3
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	801a      	strh	r2, [r3, #0]
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838a:	b29a      	uxth	r2, r3
 800838c:	f107 0314 	add.w	r3, r7, #20
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	801a      	strh	r2, [r3, #0]
 8008394:	e067      	b.n	8008466 <USB_EPStartXfer+0x45a>
 8008396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800839a:	2b3e      	cmp	r3, #62	; 0x3e
 800839c:	d819      	bhi.n	80083d2 <USB_EPStartXfer+0x3c6>
 800839e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a2:	085b      	lsrs	r3, r3, #1
 80083a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80083a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <USB_EPStartXfer+0x3b2>
 80083b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083b8:	3301      	adds	r3, #1
 80083ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80083be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	029b      	lsls	r3, r3, #10
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	f107 0314 	add.w	r3, r7, #20
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	801a      	strh	r2, [r3, #0]
 80083d0:	e049      	b.n	8008466 <USB_EPStartXfer+0x45a>
 80083d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80083dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <USB_EPStartXfer+0x3e6>
 80083e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083ec:	3b01      	subs	r3, #1
 80083ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80083f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	029b      	lsls	r3, r3, #10
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008404:	b29a      	uxth	r2, r3
 8008406:	f107 0314 	add.w	r3, r7, #20
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	801a      	strh	r2, [r3, #0]
 800840e:	e02a      	b.n	8008466 <USB_EPStartXfer+0x45a>
 8008410:	463b      	mov	r3, r7
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d125      	bne.n	8008466 <USB_EPStartXfer+0x45a>
 800841a:	f107 0320 	add.w	r3, r7, #32
 800841e:	1d3a      	adds	r2, r7, #4
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	1d3b      	adds	r3, r7, #4
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800842c:	b29b      	uxth	r3, r3
 800842e:	4619      	mov	r1, r3
 8008430:	f107 0320 	add.w	r3, r7, #32
 8008434:	f107 0220 	add.w	r2, r7, #32
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	440a      	add	r2, r1
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	463b      	mov	r3, r7
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	011a      	lsls	r2, r3, #4
 8008446:	f107 0320 	add.w	r3, r7, #32
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4413      	add	r3, r2
 800844e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008452:	f107 031c 	add.w	r3, r7, #28
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800845c:	b29a      	uxth	r2, r3
 800845e:	f107 031c 	add.w	r3, r7, #28
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008466:	463b      	mov	r3, r7
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	891b      	ldrh	r3, [r3, #8]
 800846c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008470:	463b      	mov	r3, r7
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6959      	ldr	r1, [r3, #20]
 8008476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800847a:	b29b      	uxth	r3, r3
 800847c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008480:	1d38      	adds	r0, r7, #4
 8008482:	6800      	ldr	r0, [r0, #0]
 8008484:	f001 f9f7 	bl	8009876 <USB_WritePMA>
 8008488:	f000 bcc6 	b.w	8008e18 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800848c:	463b      	mov	r3, r7
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d164      	bne.n	8008560 <USB_EPStartXfer+0x554>
 8008496:	1d3b      	adds	r3, r7, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	64bb      	str	r3, [r7, #72]	; 0x48
 800849c:	1d3b      	adds	r3, r7, #4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084aa:	4413      	add	r3, r2
 80084ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ae:	463b      	mov	r3, r7
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	011a      	lsls	r2, r3, #4
 80084b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b8:	4413      	add	r3, r2
 80084ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084be:	647b      	str	r3, [r7, #68]	; 0x44
 80084c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d112      	bne.n	80084ee <USB_EPStartXfer+0x4e2>
 80084c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d6:	801a      	strh	r2, [r3, #0]
 80084d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	e057      	b.n	800859e <USB_EPStartXfer+0x592>
 80084ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f2:	2b3e      	cmp	r3, #62	; 0x3e
 80084f4:	d817      	bhi.n	8008526 <USB_EPStartXfer+0x51a>
 80084f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fa:	085b      	lsrs	r3, r3, #1
 80084fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <USB_EPStartXfer+0x50a>
 800850c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008510:	3301      	adds	r3, #1
 8008512:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008516:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800851a:	b29b      	uxth	r3, r3
 800851c:	029b      	lsls	r3, r3, #10
 800851e:	b29a      	uxth	r2, r3
 8008520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008522:	801a      	strh	r2, [r3, #0]
 8008524:	e03b      	b.n	800859e <USB_EPStartXfer+0x592>
 8008526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852a:	095b      	lsrs	r3, r3, #5
 800852c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008534:	f003 031f 	and.w	r3, r3, #31
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <USB_EPStartXfer+0x53a>
 800853c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008540:	3b01      	subs	r3, #1
 8008542:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008546:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800854a:	b29b      	uxth	r3, r3
 800854c:	029b      	lsls	r3, r3, #10
 800854e:	b29b      	uxth	r3, r3
 8008550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008558:	b29a      	uxth	r2, r3
 800855a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800855c:	801a      	strh	r2, [r3, #0]
 800855e:	e01e      	b.n	800859e <USB_EPStartXfer+0x592>
 8008560:	463b      	mov	r3, r7
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	785b      	ldrb	r3, [r3, #1]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d119      	bne.n	800859e <USB_EPStartXfer+0x592>
 800856a:	1d3b      	adds	r3, r7, #4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	653b      	str	r3, [r7, #80]	; 0x50
 8008570:	1d3b      	adds	r3, r7, #4
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008578:	b29b      	uxth	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800857e:	4413      	add	r3, r2
 8008580:	653b      	str	r3, [r7, #80]	; 0x50
 8008582:	463b      	mov	r3, r7
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	011a      	lsls	r2, r3, #4
 800858a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800858c:	4413      	add	r3, r2
 800858e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008598:	b29a      	uxth	r2, r3
 800859a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800859c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800859e:	463b      	mov	r3, r7
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	891b      	ldrh	r3, [r3, #8]
 80085a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085a8:	463b      	mov	r3, r7
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6959      	ldr	r1, [r3, #20]
 80085ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80085b8:	1d38      	adds	r0, r7, #4
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	f001 f95b 	bl	8009876 <USB_WritePMA>
            ep->xfer_buff += len;
 80085c0:	463b      	mov	r3, r7
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695a      	ldr	r2, [r3, #20]
 80085c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ca:	441a      	add	r2, r3
 80085cc:	463b      	mov	r3, r7
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80085d2:	463b      	mov	r3, r7
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a1a      	ldr	r2, [r3, #32]
 80085d8:	463b      	mov	r3, r7
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d909      	bls.n	80085f6 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80085e2:	463b      	mov	r3, r7
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6a1a      	ldr	r2, [r3, #32]
 80085e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085ec:	1ad2      	subs	r2, r2, r3
 80085ee:	463b      	mov	r3, r7
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	621a      	str	r2, [r3, #32]
 80085f4:	e008      	b.n	8008608 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80085f6:	463b      	mov	r3, r7
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008600:	463b      	mov	r3, r7
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2200      	movs	r2, #0
 8008606:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008608:	1d3b      	adds	r3, r7, #4
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	643b      	str	r3, [r7, #64]	; 0x40
 800860e:	463b      	mov	r3, r7
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d164      	bne.n	80086e2 <USB_EPStartXfer+0x6d6>
 8008618:	1d3b      	adds	r3, r7, #4
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	63bb      	str	r3, [r7, #56]	; 0x38
 800861e:	1d3b      	adds	r3, r7, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008626:	b29b      	uxth	r3, r3
 8008628:	461a      	mov	r2, r3
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	4413      	add	r3, r2
 800862e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008630:	463b      	mov	r3, r7
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	011a      	lsls	r2, r3, #4
 8008638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863a:	4413      	add	r3, r2
 800863c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
 8008642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d112      	bne.n	8008670 <USB_EPStartXfer+0x664>
 800864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	b29b      	uxth	r3, r3
 8008650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008654:	b29a      	uxth	r2, r3
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	801a      	strh	r2, [r3, #0]
 800865a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008668:	b29a      	uxth	r2, r3
 800866a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	e054      	b.n	800871a <USB_EPStartXfer+0x70e>
 8008670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008674:	2b3e      	cmp	r3, #62	; 0x3e
 8008676:	d817      	bhi.n	80086a8 <USB_EPStartXfer+0x69c>
 8008678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800867c:	085b      	lsrs	r3, r3, #1
 800867e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d004      	beq.n	8008698 <USB_EPStartXfer+0x68c>
 800868e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008692:	3301      	adds	r3, #1
 8008694:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008698:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800869c:	b29b      	uxth	r3, r3
 800869e:	029b      	lsls	r3, r3, #10
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a4:	801a      	strh	r2, [r3, #0]
 80086a6:	e038      	b.n	800871a <USB_EPStartXfer+0x70e>
 80086a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ac:	095b      	lsrs	r3, r3, #5
 80086ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80086b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b6:	f003 031f 	and.w	r3, r3, #31
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d104      	bne.n	80086c8 <USB_EPStartXfer+0x6bc>
 80086be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80086c2:	3b01      	subs	r3, #1
 80086c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80086c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	029b      	lsls	r3, r3, #10
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086da:	b29a      	uxth	r2, r3
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	801a      	strh	r2, [r3, #0]
 80086e0:	e01b      	b.n	800871a <USB_EPStartXfer+0x70e>
 80086e2:	463b      	mov	r3, r7
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d116      	bne.n	800871a <USB_EPStartXfer+0x70e>
 80086ec:	1d3b      	adds	r3, r7, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	461a      	mov	r2, r3
 80086f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fa:	4413      	add	r3, r2
 80086fc:	643b      	str	r3, [r7, #64]	; 0x40
 80086fe:	463b      	mov	r3, r7
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	011a      	lsls	r2, r3, #4
 8008706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008708:	4413      	add	r3, r2
 800870a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008714:	b29a      	uxth	r2, r3
 8008716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008718:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800871a:	463b      	mov	r3, r7
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	895b      	ldrh	r3, [r3, #10]
 8008720:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008724:	463b      	mov	r3, r7
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6959      	ldr	r1, [r3, #20]
 800872a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872e:	b29b      	uxth	r3, r3
 8008730:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008734:	1d38      	adds	r0, r7, #4
 8008736:	6800      	ldr	r0, [r0, #0]
 8008738:	f001 f89d 	bl	8009876 <USB_WritePMA>
 800873c:	e36c      	b.n	8008e18 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800873e:	463b      	mov	r3, r7
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	463b      	mov	r3, r7
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b29b      	uxth	r3, r3
 800875a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800875e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008762:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008766:	1d3b      	adds	r3, r7, #4
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	463b      	mov	r3, r7
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	441a      	add	r2, r3
 8008774:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008788:	b29b      	uxth	r3, r3
 800878a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800878c:	1d3b      	adds	r3, r7, #4
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008792:	1d3b      	adds	r3, r7, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800879a:	b29b      	uxth	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a0:	4413      	add	r3, r2
 80087a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a4:	463b      	mov	r3, r7
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	011a      	lsls	r2, r3, #4
 80087ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087ae:	4413      	add	r3, r2
 80087b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80087b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80087c0:	463b      	mov	r3, r7
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	891b      	ldrh	r3, [r3, #8]
 80087c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087ca:	463b      	mov	r3, r7
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6959      	ldr	r1, [r3, #20]
 80087d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80087da:	1d38      	adds	r0, r7, #4
 80087dc:	6800      	ldr	r0, [r0, #0]
 80087de:	f001 f84a 	bl	8009876 <USB_WritePMA>
 80087e2:	e319      	b.n	8008e18 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80087e4:	1d3b      	adds	r3, r7, #4
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	463b      	mov	r3, r7
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fe:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008802:	1d3b      	adds	r3, r7, #4
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	463b      	mov	r3, r7
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	441a      	add	r2, r3
 8008810:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8008814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008824:	b29b      	uxth	r3, r3
 8008826:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008828:	463b      	mov	r3, r7
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6a1a      	ldr	r2, [r3, #32]
 800882e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008832:	1ad2      	subs	r2, r2, r3
 8008834:	463b      	mov	r3, r7
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800883a:	1d3b      	adds	r3, r7, #4
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	463b      	mov	r3, r7
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 8162 	beq.w	8008b1a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008856:	1d3b      	adds	r3, r7, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800885e:	463b      	mov	r3, r7
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d164      	bne.n	8008932 <USB_EPStartXfer+0x926>
 8008868:	1d3b      	adds	r3, r7, #4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	67bb      	str	r3, [r7, #120]	; 0x78
 800886e:	1d3b      	adds	r3, r7, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800887c:	4413      	add	r3, r2
 800887e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008880:	463b      	mov	r3, r7
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	011a      	lsls	r2, r3, #4
 8008888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800888a:	4413      	add	r3, r2
 800888c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008890:	677b      	str	r3, [r7, #116]	; 0x74
 8008892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d112      	bne.n	80088c0 <USB_EPStartXfer+0x8b4>
 800889a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088a8:	801a      	strh	r2, [r3, #0]
 80088aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088bc:	801a      	strh	r2, [r3, #0]
 80088be:	e057      	b.n	8008970 <USB_EPStartXfer+0x964>
 80088c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c4:	2b3e      	cmp	r3, #62	; 0x3e
 80088c6:	d817      	bhi.n	80088f8 <USB_EPStartXfer+0x8ec>
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	085b      	lsrs	r3, r3, #1
 80088ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80088d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d004      	beq.n	80088e8 <USB_EPStartXfer+0x8dc>
 80088de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088e2:	3301      	adds	r3, #1
 80088e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80088e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	029b      	lsls	r3, r3, #10
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	e03b      	b.n	8008970 <USB_EPStartXfer+0x964>
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008906:	f003 031f 	and.w	r3, r3, #31
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <USB_EPStartXfer+0x90c>
 800890e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008912:	3b01      	subs	r3, #1
 8008914:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008918:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800891c:	b29b      	uxth	r3, r3
 800891e:	029b      	lsls	r3, r3, #10
 8008920:	b29b      	uxth	r3, r3
 8008922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800892a:	b29a      	uxth	r2, r3
 800892c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800892e:	801a      	strh	r2, [r3, #0]
 8008930:	e01e      	b.n	8008970 <USB_EPStartXfer+0x964>
 8008932:	463b      	mov	r3, r7
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	785b      	ldrb	r3, [r3, #1]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d119      	bne.n	8008970 <USB_EPStartXfer+0x964>
 800893c:	1d3b      	adds	r3, r7, #4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008944:	b29b      	uxth	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800894c:	4413      	add	r3, r2
 800894e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008952:	463b      	mov	r3, r7
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	011a      	lsls	r2, r3, #4
 800895a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800895e:	4413      	add	r3, r2
 8008960:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008964:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896a:	b29a      	uxth	r2, r3
 800896c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800896e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008970:	463b      	mov	r3, r7
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	895b      	ldrh	r3, [r3, #10]
 8008976:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800897a:	463b      	mov	r3, r7
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6959      	ldr	r1, [r3, #20]
 8008980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008984:	b29b      	uxth	r3, r3
 8008986:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800898a:	1d38      	adds	r0, r7, #4
 800898c:	6800      	ldr	r0, [r0, #0]
 800898e:	f000 ff72 	bl	8009876 <USB_WritePMA>
          ep->xfer_buff += len;
 8008992:	463b      	mov	r3, r7
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	695a      	ldr	r2, [r3, #20]
 8008998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899c:	441a      	add	r2, r3
 800899e:	463b      	mov	r3, r7
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80089a4:	463b      	mov	r3, r7
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6a1a      	ldr	r2, [r3, #32]
 80089aa:	463b      	mov	r3, r7
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d909      	bls.n	80089c8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80089b4:	463b      	mov	r3, r7
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6a1a      	ldr	r2, [r3, #32]
 80089ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	463b      	mov	r3, r7
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	621a      	str	r2, [r3, #32]
 80089c6:	e008      	b.n	80089da <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80089c8:	463b      	mov	r3, r7
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80089d2:	463b      	mov	r3, r7
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2200      	movs	r2, #0
 80089d8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80089da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 821a 	beq.w	8008e18 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80089e4:	463b      	mov	r3, r7
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d164      	bne.n	8008ab8 <USB_EPStartXfer+0xaac>
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089f4:	1d3b      	adds	r3, r7, #4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	461a      	mov	r2, r3
 8008a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a02:	4413      	add	r3, r2
 8008a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a06:	463b      	mov	r3, r7
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	011a      	lsls	r2, r3, #4
 8008a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a10:	4413      	add	r3, r2
 8008a12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a16:	667b      	str	r3, [r7, #100]	; 0x64
 8008a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d112      	bne.n	8008a46 <USB_EPStartXfer+0xa3a>
 8008a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a2e:	801a      	strh	r2, [r3, #0]
 8008a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a42:	801a      	strh	r2, [r3, #0]
 8008a44:	e057      	b.n	8008af6 <USB_EPStartXfer+0xaea>
 8008a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008a4c:	d817      	bhi.n	8008a7e <USB_EPStartXfer+0xa72>
 8008a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <USB_EPStartXfer+0xa62>
 8008a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a68:	3301      	adds	r3, #1
 8008a6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	029b      	lsls	r3, r3, #10
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a7a:	801a      	strh	r2, [r3, #0]
 8008a7c:	e03b      	b.n	8008af6 <USB_EPStartXfer+0xaea>
 8008a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8c:	f003 031f 	and.w	r3, r3, #31
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d104      	bne.n	8008a9e <USB_EPStartXfer+0xa92>
 8008a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	029b      	lsls	r3, r3, #10
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	e01e      	b.n	8008af6 <USB_EPStartXfer+0xaea>
 8008ab8:	463b      	mov	r3, r7
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	785b      	ldrb	r3, [r3, #1]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d119      	bne.n	8008af6 <USB_EPStartXfer+0xaea>
 8008ac2:	1d3b      	adds	r3, r7, #4
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ac8:	1d3b      	adds	r3, r7, #4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ad6:	4413      	add	r3, r2
 8008ad8:	673b      	str	r3, [r7, #112]	; 0x70
 8008ada:	463b      	mov	r3, r7
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	011a      	lsls	r2, r3, #4
 8008ae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008af6:	463b      	mov	r3, r7
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	891b      	ldrh	r3, [r3, #8]
 8008afc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b00:	463b      	mov	r3, r7
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6959      	ldr	r1, [r3, #20]
 8008b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b10:	1d38      	adds	r0, r7, #4
 8008b12:	6800      	ldr	r0, [r0, #0]
 8008b14:	f000 feaf 	bl	8009876 <USB_WritePMA>
 8008b18:	e17e      	b.n	8008e18 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b1a:	463b      	mov	r3, r7
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d16f      	bne.n	8008c04 <USB_EPStartXfer+0xbf8>
 8008b24:	1d3b      	adds	r3, r7, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b2c:	1d3b      	adds	r3, r7, #4
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	461a      	mov	r2, r3
 8008b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b42:	463b      	mov	r3, r7
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	011a      	lsls	r2, r3, #4
 8008b4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b4e:	4413      	add	r3, r2
 8008b50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d116      	bne.n	8008b8e <USB_EPStartXfer+0xb82>
 8008b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b8a:	801a      	strh	r2, [r3, #0]
 8008b8c:	e05f      	b.n	8008c4e <USB_EPStartXfer+0xc42>
 8008b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b92:	2b3e      	cmp	r3, #62	; 0x3e
 8008b94:	d818      	bhi.n	8008bc8 <USB_EPStartXfer+0xbbc>
 8008b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <USB_EPStartXfer+0xbaa>
 8008bac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008bb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	029b      	lsls	r3, r3, #10
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bc4:	801a      	strh	r2, [r3, #0]
 8008bc6:	e042      	b.n	8008c4e <USB_EPStartXfer+0xc42>
 8008bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd6:	f003 031f 	and.w	r3, r3, #31
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d104      	bne.n	8008be8 <USB_EPStartXfer+0xbdc>
 8008bde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008be2:	3b01      	subs	r3, #1
 8008be4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008be8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	029b      	lsls	r3, r3, #10
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	e024      	b.n	8008c4e <USB_EPStartXfer+0xc42>
 8008c04:	463b      	mov	r3, r7
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d11f      	bne.n	8008c4e <USB_EPStartXfer+0xc42>
 8008c0e:	1d3b      	adds	r3, r7, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c16:	1d3b      	adds	r3, r7, #4
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c26:	4413      	add	r3, r2
 8008c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	011a      	lsls	r2, r3, #4
 8008c34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c38:	4413      	add	r3, r2
 8008c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c4e:	463b      	mov	r3, r7
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	891b      	ldrh	r3, [r3, #8]
 8008c54:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c58:	463b      	mov	r3, r7
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6959      	ldr	r1, [r3, #20]
 8008c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c68:	1d38      	adds	r0, r7, #4
 8008c6a:	6800      	ldr	r0, [r0, #0]
 8008c6c:	f000 fe03 	bl	8009876 <USB_WritePMA>
          ep->xfer_buff += len;
 8008c70:	463b      	mov	r3, r7
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	695a      	ldr	r2, [r3, #20]
 8008c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7a:	441a      	add	r2, r3
 8008c7c:	463b      	mov	r3, r7
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008c82:	463b      	mov	r3, r7
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6a1a      	ldr	r2, [r3, #32]
 8008c88:	463b      	mov	r3, r7
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d909      	bls.n	8008ca6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8008c92:	463b      	mov	r3, r7
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6a1a      	ldr	r2, [r3, #32]
 8008c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c9c:	1ad2      	subs	r2, r2, r3
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	621a      	str	r2, [r3, #32]
 8008ca4:	e008      	b.n	8008cb8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008cb0:	463b      	mov	r3, r7
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 80ab 	beq.w	8008e18 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008cc2:	1d3b      	adds	r3, r7, #4
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cca:	463b      	mov	r3, r7
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	785b      	ldrb	r3, [r3, #1]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d16f      	bne.n	8008db4 <USB_EPStartXfer+0xda8>
 8008cd4:	1d3b      	adds	r3, r7, #4
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cec:	4413      	add	r3, r2
 8008cee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cf2:	463b      	mov	r3, r7
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	011a      	lsls	r2, r3, #4
 8008cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cfe:	4413      	add	r3, r2
 8008d00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d116      	bne.n	8008d3e <USB_EPStartXfer+0xd32>
 8008d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d22:	801a      	strh	r2, [r3, #0]
 8008d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d3a:	801a      	strh	r2, [r3, #0]
 8008d3c:	e05b      	b.n	8008df6 <USB_EPStartXfer+0xdea>
 8008d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d42:	2b3e      	cmp	r3, #62	; 0x3e
 8008d44:	d818      	bhi.n	8008d78 <USB_EPStartXfer+0xd6c>
 8008d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d4a:	085b      	lsrs	r3, r3, #1
 8008d4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008d50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <USB_EPStartXfer+0xd5a>
 8008d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d60:	3301      	adds	r3, #1
 8008d62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	029b      	lsls	r3, r3, #10
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d74:	801a      	strh	r2, [r3, #0]
 8008d76:	e03e      	b.n	8008df6 <USB_EPStartXfer+0xdea>
 8008d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d7c:	095b      	lsrs	r3, r3, #5
 8008d7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d86:	f003 031f 	and.w	r3, r3, #31
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d104      	bne.n	8008d98 <USB_EPStartXfer+0xd8c>
 8008d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d92:	3b01      	subs	r3, #1
 8008d94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	029b      	lsls	r3, r3, #10
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008db0:	801a      	strh	r2, [r3, #0]
 8008db2:	e020      	b.n	8008df6 <USB_EPStartXfer+0xdea>
 8008db4:	463b      	mov	r3, r7
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	785b      	ldrb	r3, [r3, #1]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d11b      	bne.n	8008df6 <USB_EPStartXfer+0xdea>
 8008dbe:	1d3b      	adds	r3, r7, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dce:	4413      	add	r3, r2
 8008dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dd4:	463b      	mov	r3, r7
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	011a      	lsls	r2, r3, #4
 8008ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008de0:	4413      	add	r3, r2
 8008de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008df4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008df6:	463b      	mov	r3, r7
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	895b      	ldrh	r3, [r3, #10]
 8008dfc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e00:	463b      	mov	r3, r7
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6959      	ldr	r1, [r3, #20]
 8008e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e10:	1d38      	adds	r0, r7, #4
 8008e12:	6800      	ldr	r0, [r0, #0]
 8008e14:	f000 fd2f 	bl	8009876 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008e18:	1d3b      	adds	r3, r7, #4
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	463b      	mov	r3, r7
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	f107 020a 	add.w	r2, r7, #10
 8008e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e36:	8013      	strh	r3, [r2, #0]
 8008e38:	f107 030a 	add.w	r3, r7, #10
 8008e3c:	f107 020a 	add.w	r2, r7, #10
 8008e40:	8812      	ldrh	r2, [r2, #0]
 8008e42:	f082 0210 	eor.w	r2, r2, #16
 8008e46:	801a      	strh	r2, [r3, #0]
 8008e48:	f107 030a 	add.w	r3, r7, #10
 8008e4c:	f107 020a 	add.w	r2, r7, #10
 8008e50:	8812      	ldrh	r2, [r2, #0]
 8008e52:	f082 0220 	eor.w	r2, r2, #32
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	1d3b      	adds	r3, r7, #4
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	463b      	mov	r3, r7
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	441a      	add	r2, r3
 8008e66:	f107 030a 	add.w	r3, r7, #10
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	8013      	strh	r3, [r2, #0]
 8008e80:	e3b5      	b.n	80095ee <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008e82:	463b      	mov	r3, r7
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	7b1b      	ldrb	r3, [r3, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f040 8090 	bne.w	8008fae <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008e8e:	463b      	mov	r3, r7
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	463b      	mov	r3, r7
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d90e      	bls.n	8008ebc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8008e9e:	463b      	mov	r3, r7
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008ea8:	463b      	mov	r3, r7
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699a      	ldr	r2, [r3, #24]
 8008eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eb2:	1ad2      	subs	r2, r2, r3
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	619a      	str	r2, [r3, #24]
 8008eba:	e008      	b.n	8008ece <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008ec6:	463b      	mov	r3, r7
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ece:	1d3b      	adds	r3, r7, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ed6:	1d3b      	adds	r3, r7, #4
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008eec:	463b      	mov	r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	011a      	lsls	r2, r3, #4
 8008ef4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008ef8:	4413      	add	r3, r2
 8008efa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d116      	bne.n	8008f38 <USB_EPStartXfer+0xf2c>
 8008f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f1c:	801a      	strh	r2, [r3, #0]
 8008f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	e32c      	b.n	8009592 <USB_EPStartXfer+0x1586>
 8008f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008f3e:	d818      	bhi.n	8008f72 <USB_EPStartXfer+0xf66>
 8008f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f44:	085b      	lsrs	r3, r3, #1
 8008f46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d004      	beq.n	8008f60 <USB_EPStartXfer+0xf54>
 8008f56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008f60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	029b      	lsls	r3, r3, #10
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	e30f      	b.n	8009592 <USB_EPStartXfer+0x1586>
 8008f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f80:	f003 031f 	and.w	r3, r3, #31
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <USB_EPStartXfer+0xf86>
 8008f88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	029b      	lsls	r3, r3, #10
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008faa:	801a      	strh	r2, [r3, #0]
 8008fac:	e2f1      	b.n	8009592 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008fae:	463b      	mov	r3, r7
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	78db      	ldrb	r3, [r3, #3]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	f040 818f 	bne.w	80092d8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008fba:	463b      	mov	r3, r7
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d175      	bne.n	80090b0 <USB_EPStartXfer+0x10a4>
 8008fc4:	1d3b      	adds	r3, r7, #4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fcc:	1d3b      	adds	r3, r7, #4
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fdc:	4413      	add	r3, r2
 8008fde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	011a      	lsls	r2, r3, #4
 8008fea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fee:	4413      	add	r3, r2
 8008ff0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ff8:	463b      	mov	r3, r7
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d116      	bne.n	8009030 <USB_EPStartXfer+0x1024>
 8009002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	b29b      	uxth	r3, r3
 800900a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800900e:	b29a      	uxth	r2, r3
 8009010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009014:	801a      	strh	r2, [r3, #0]
 8009016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009026:	b29a      	uxth	r2, r3
 8009028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800902c:	801a      	strh	r2, [r3, #0]
 800902e:	e065      	b.n	80090fc <USB_EPStartXfer+0x10f0>
 8009030:	463b      	mov	r3, r7
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b3e      	cmp	r3, #62	; 0x3e
 8009038:	d81a      	bhi.n	8009070 <USB_EPStartXfer+0x1064>
 800903a:	463b      	mov	r3, r7
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	085b      	lsrs	r3, r3, #1
 8009042:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009046:	463b      	mov	r3, r7
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	d004      	beq.n	800905e <USB_EPStartXfer+0x1052>
 8009054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009058:	3301      	adds	r3, #1
 800905a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800905e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009062:	b29b      	uxth	r3, r3
 8009064:	029b      	lsls	r3, r3, #10
 8009066:	b29a      	uxth	r2, r3
 8009068:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800906c:	801a      	strh	r2, [r3, #0]
 800906e:	e045      	b.n	80090fc <USB_EPStartXfer+0x10f0>
 8009070:	463b      	mov	r3, r7
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	095b      	lsrs	r3, r3, #5
 8009078:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800907c:	463b      	mov	r3, r7
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	f003 031f 	and.w	r3, r3, #31
 8009086:	2b00      	cmp	r3, #0
 8009088:	d104      	bne.n	8009094 <USB_EPStartXfer+0x1088>
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	3b01      	subs	r3, #1
 8009090:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009098:	b29b      	uxth	r3, r3
 800909a:	029b      	lsls	r3, r3, #10
 800909c:	b29b      	uxth	r3, r3
 800909e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090ac:	801a      	strh	r2, [r3, #0]
 80090ae:	e025      	b.n	80090fc <USB_EPStartXfer+0x10f0>
 80090b0:	463b      	mov	r3, r7
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d120      	bne.n	80090fc <USB_EPStartXfer+0x10f0>
 80090ba:	1d3b      	adds	r3, r7, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090c2:	1d3b      	adds	r3, r7, #4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090d2:	4413      	add	r3, r2
 80090d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090d8:	463b      	mov	r3, r7
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	011a      	lsls	r2, r3, #4
 80090e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090e4:	4413      	add	r3, r2
 80090e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090ee:	463b      	mov	r3, r7
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	1d3b      	adds	r3, r7, #4
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009104:	463b      	mov	r3, r7
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	785b      	ldrb	r3, [r3, #1]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d175      	bne.n	80091fa <USB_EPStartXfer+0x11ee>
 800910e:	1d3b      	adds	r3, r7, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009116:	1d3b      	adds	r3, r7, #4
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800911e:	b29b      	uxth	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009126:	4413      	add	r3, r2
 8009128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800912c:	463b      	mov	r3, r7
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	011a      	lsls	r2, r3, #4
 8009134:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009138:	4413      	add	r3, r2
 800913a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800913e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009142:	463b      	mov	r3, r7
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d116      	bne.n	800917a <USB_EPStartXfer+0x116e>
 800914c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	b29b      	uxth	r3, r3
 8009154:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009158:	b29a      	uxth	r2, r3
 800915a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800915e:	801a      	strh	r2, [r3, #0]
 8009160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	b29b      	uxth	r3, r3
 8009168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800916c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009170:	b29a      	uxth	r2, r3
 8009172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009176:	801a      	strh	r2, [r3, #0]
 8009178:	e061      	b.n	800923e <USB_EPStartXfer+0x1232>
 800917a:	463b      	mov	r3, r7
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	2b3e      	cmp	r3, #62	; 0x3e
 8009182:	d81a      	bhi.n	80091ba <USB_EPStartXfer+0x11ae>
 8009184:	463b      	mov	r3, r7
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009190:	463b      	mov	r3, r7
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d004      	beq.n	80091a8 <USB_EPStartXfer+0x119c>
 800919e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80091a2:	3301      	adds	r3, #1
 80091a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	029b      	lsls	r3, r3, #10
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091b6:	801a      	strh	r2, [r3, #0]
 80091b8:	e041      	b.n	800923e <USB_EPStartXfer+0x1232>
 80091ba:	463b      	mov	r3, r7
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	095b      	lsrs	r3, r3, #5
 80091c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091c6:	463b      	mov	r3, r7
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <USB_EPStartXfer+0x11d2>
 80091d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80091d8:	3b01      	subs	r3, #1
 80091da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80091de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	029b      	lsls	r3, r3, #10
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091f6:	801a      	strh	r2, [r3, #0]
 80091f8:	e021      	b.n	800923e <USB_EPStartXfer+0x1232>
 80091fa:	463b      	mov	r3, r7
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	785b      	ldrb	r3, [r3, #1]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d11c      	bne.n	800923e <USB_EPStartXfer+0x1232>
 8009204:	1d3b      	adds	r3, r7, #4
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800920c:	b29b      	uxth	r3, r3
 800920e:	461a      	mov	r2, r3
 8009210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009214:	4413      	add	r3, r2
 8009216:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800921a:	463b      	mov	r3, r7
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	011a      	lsls	r2, r3, #4
 8009222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009226:	4413      	add	r3, r2
 8009228:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800922c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009230:	463b      	mov	r3, r7
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	b29a      	uxth	r2, r3
 8009238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800923c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800923e:	463b      	mov	r3, r7
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 81a4 	beq.w	8009592 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800924a:	1d3b      	adds	r3, r7, #4
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	463b      	mov	r3, r7
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800925e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d005      	beq.n	8009276 <USB_EPStartXfer+0x126a>
 800926a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800926e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10d      	bne.n	8009292 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009276:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800927a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800927e:	2b00      	cmp	r3, #0
 8009280:	f040 8187 	bne.w	8009592 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009284:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928c:	2b00      	cmp	r3, #0
 800928e:	f040 8180 	bne.w	8009592 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009292:	1d3b      	adds	r3, r7, #4
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	463b      	mov	r3, r7
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ac:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80092b0:	1d3b      	adds	r3, r7, #4
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	463b      	mov	r3, r7
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	441a      	add	r2, r3
 80092be:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80092c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	8013      	strh	r3, [r2, #0]
 80092d6:	e15c      	b.n	8009592 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80092d8:	463b      	mov	r3, r7
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	78db      	ldrb	r3, [r3, #3]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	f040 8155 	bne.w	800958e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80092e4:	463b      	mov	r3, r7
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	463b      	mov	r3, r7
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d90e      	bls.n	8009312 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80092f4:	463b      	mov	r3, r7
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80092fe:	463b      	mov	r3, r7
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	699a      	ldr	r2, [r3, #24]
 8009304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	463b      	mov	r3, r7
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	619a      	str	r2, [r3, #24]
 8009310:	e008      	b.n	8009324 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8009312:	463b      	mov	r3, r7
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800931c:	463b      	mov	r3, r7
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2200      	movs	r2, #0
 8009322:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009324:	463b      	mov	r3, r7
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d16f      	bne.n	800940e <USB_EPStartXfer+0x1402>
 800932e:	1d3b      	adds	r3, r7, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009336:	1d3b      	adds	r3, r7, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800933e:	b29b      	uxth	r3, r3
 8009340:	461a      	mov	r2, r3
 8009342:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009346:	4413      	add	r3, r2
 8009348:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800934c:	463b      	mov	r3, r7
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	011a      	lsls	r2, r3, #4
 8009354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009358:	4413      	add	r3, r2
 800935a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800935e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d116      	bne.n	8009398 <USB_EPStartXfer+0x138c>
 800936a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009376:	b29a      	uxth	r2, r3
 8009378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800937c:	801a      	strh	r2, [r3, #0]
 800937e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800938a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800938e:	b29a      	uxth	r2, r3
 8009390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009394:	801a      	strh	r2, [r3, #0]
 8009396:	e05f      	b.n	8009458 <USB_EPStartXfer+0x144c>
 8009398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800939c:	2b3e      	cmp	r3, #62	; 0x3e
 800939e:	d818      	bhi.n	80093d2 <USB_EPStartXfer+0x13c6>
 80093a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d004      	beq.n	80093c0 <USB_EPStartXfer+0x13b4>
 80093b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ba:	3301      	adds	r3, #1
 80093bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	029b      	lsls	r3, r3, #10
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093ce:	801a      	strh	r2, [r3, #0]
 80093d0:	e042      	b.n	8009458 <USB_EPStartXfer+0x144c>
 80093d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d6:	095b      	lsrs	r3, r3, #5
 80093d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e0:	f003 031f 	and.w	r3, r3, #31
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <USB_EPStartXfer+0x13e6>
 80093e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ec:	3b01      	subs	r3, #1
 80093ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	029b      	lsls	r3, r3, #10
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009404:	b29a      	uxth	r2, r3
 8009406:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	e024      	b.n	8009458 <USB_EPStartXfer+0x144c>
 800940e:	463b      	mov	r3, r7
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	785b      	ldrb	r3, [r3, #1]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d11f      	bne.n	8009458 <USB_EPStartXfer+0x144c>
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009420:	1d3b      	adds	r3, r7, #4
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009428:	b29b      	uxth	r3, r3
 800942a:	461a      	mov	r2, r3
 800942c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009430:	4413      	add	r3, r2
 8009432:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009436:	463b      	mov	r3, r7
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	011a      	lsls	r2, r3, #4
 800943e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009442:	4413      	add	r3, r2
 8009444:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009448:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800944c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009450:	b29a      	uxth	r2, r3
 8009452:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009456:	801a      	strh	r2, [r3, #0]
 8009458:	1d3b      	adds	r3, r7, #4
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009460:	463b      	mov	r3, r7
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	785b      	ldrb	r3, [r3, #1]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d16f      	bne.n	800954a <USB_EPStartXfer+0x153e>
 800946a:	1d3b      	adds	r3, r7, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009472:	1d3b      	adds	r3, r7, #4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800947a:	b29b      	uxth	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009482:	4413      	add	r3, r2
 8009484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009488:	463b      	mov	r3, r7
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	011a      	lsls	r2, r3, #4
 8009490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009494:	4413      	add	r3, r2
 8009496:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800949a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800949e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d116      	bne.n	80094d4 <USB_EPStartXfer+0x14c8>
 80094a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094b8:	801a      	strh	r2, [r3, #0]
 80094ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094be:	881b      	ldrh	r3, [r3, #0]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094d0:	801a      	strh	r2, [r3, #0]
 80094d2:	e05e      	b.n	8009592 <USB_EPStartXfer+0x1586>
 80094d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d8:	2b3e      	cmp	r3, #62	; 0x3e
 80094da:	d818      	bhi.n	800950e <USB_EPStartXfer+0x1502>
 80094dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094e0:	085b      	lsrs	r3, r3, #1
 80094e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80094e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d004      	beq.n	80094fc <USB_EPStartXfer+0x14f0>
 80094f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094f6:	3301      	adds	r3, #1
 80094f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80094fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009500:	b29b      	uxth	r3, r3
 8009502:	029b      	lsls	r3, r3, #10
 8009504:	b29a      	uxth	r2, r3
 8009506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800950a:	801a      	strh	r2, [r3, #0]
 800950c:	e041      	b.n	8009592 <USB_EPStartXfer+0x1586>
 800950e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	2b00      	cmp	r3, #0
 8009522:	d104      	bne.n	800952e <USB_EPStartXfer+0x1522>
 8009524:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009528:	3b01      	subs	r3, #1
 800952a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800952e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009532:	b29b      	uxth	r3, r3
 8009534:	029b      	lsls	r3, r3, #10
 8009536:	b29b      	uxth	r3, r3
 8009538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800953c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009540:	b29a      	uxth	r2, r3
 8009542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009546:	801a      	strh	r2, [r3, #0]
 8009548:	e023      	b.n	8009592 <USB_EPStartXfer+0x1586>
 800954a:	463b      	mov	r3, r7
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	785b      	ldrb	r3, [r3, #1]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d11e      	bne.n	8009592 <USB_EPStartXfer+0x1586>
 8009554:	1d3b      	adds	r3, r7, #4
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800955c:	b29b      	uxth	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009564:	4413      	add	r3, r2
 8009566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800956a:	463b      	mov	r3, r7
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	011a      	lsls	r2, r3, #4
 8009572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009576:	4413      	add	r3, r2
 8009578:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800957c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009584:	b29a      	uxth	r2, r3
 8009586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800958a:	801a      	strh	r2, [r3, #0]
 800958c:	e001      	b.n	8009592 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e02e      	b.n	80095f0 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009592:	1d3b      	adds	r3, r7, #4
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	463b      	mov	r3, r7
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ac:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80095b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80095b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095b8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80095bc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80095c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095c4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80095c8:	1d3b      	adds	r3, r7, #4
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	463b      	mov	r3, r7
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	441a      	add	r2, r3
 80095d6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80095da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b085      	sub	sp, #20
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	785b      	ldrb	r3, [r3, #1]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d020      	beq.n	800964e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	b29b      	uxth	r3, r3
 800961a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009622:	81bb      	strh	r3, [r7, #12]
 8009624:	89bb      	ldrh	r3, [r7, #12]
 8009626:	f083 0310 	eor.w	r3, r3, #16
 800962a:	81bb      	strh	r3, [r7, #12]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	441a      	add	r2, r3
 8009636:	89bb      	ldrh	r3, [r7, #12]
 8009638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800963c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009648:	b29b      	uxth	r3, r3
 800964a:	8013      	strh	r3, [r2, #0]
 800964c:	e01f      	b.n	800968e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	b29b      	uxth	r3, r3
 800965c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009664:	81fb      	strh	r3, [r7, #14]
 8009666:	89fb      	ldrh	r3, [r7, #14]
 8009668:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800966c:	81fb      	strh	r3, [r7, #14]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	441a      	add	r2, r3
 8009678:	89fb      	ldrh	r3, [r7, #14]
 800967a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800967e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968a:	b29b      	uxth	r3, r3
 800968c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr

0800969a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800969a:	b480      	push	{r7}
 800969c:	b087      	sub	sp, #28
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	7b1b      	ldrb	r3, [r3, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f040 809d 	bne.w	80097e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d04c      	beq.n	8009750 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	823b      	strh	r3, [r7, #16]
 80096c4:	8a3b      	ldrh	r3, [r7, #16]
 80096c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d01b      	beq.n	8009706 <USB_EPClearStall+0x6c>
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e4:	81fb      	strh	r3, [r7, #14]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	441a      	add	r2, r3
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	78db      	ldrb	r3, [r3, #3]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d06c      	beq.n	80097e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009724:	81bb      	strh	r3, [r7, #12]
 8009726:	89bb      	ldrh	r3, [r7, #12]
 8009728:	f083 0320 	eor.w	r3, r3, #32
 800972c:	81bb      	strh	r3, [r7, #12]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	441a      	add	r2, r3
 8009738:	89bb      	ldrh	r3, [r7, #12]
 800973a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974a:	b29b      	uxth	r3, r3
 800974c:	8013      	strh	r3, [r2, #0]
 800974e:	e04b      	b.n	80097e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	82fb      	strh	r3, [r7, #22]
 800975e:	8afb      	ldrh	r3, [r7, #22]
 8009760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01b      	beq.n	80097a0 <USB_EPClearStall+0x106>
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	4413      	add	r3, r2
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29b      	uxth	r3, r3
 8009776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977e:	82bb      	strh	r3, [r7, #20]
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	441a      	add	r2, r3
 800978a:	8abb      	ldrh	r3, [r7, #20]
 800978c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800979c:	b29b      	uxth	r3, r3
 800979e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b6:	827b      	strh	r3, [r7, #18]
 80097b8:	8a7b      	ldrh	r3, [r7, #18]
 80097ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097be:	827b      	strh	r3, [r7, #18]
 80097c0:	8a7b      	ldrh	r3, [r7, #18]
 80097c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80097c6:	827b      	strh	r3, [r7, #18]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	441a      	add	r2, r3
 80097d2:	8a7b      	ldrh	r3, [r7, #18]
 80097d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bc80      	pop	{r7}
 80097f2:	4770      	bx	lr

080097f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d103      	bne.n	800980e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2280      	movs	r2, #128	; 0x80
 800980a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	bc80      	pop	{r7}
 8009818:	4770      	bx	lr

0800981a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	bc80      	pop	{r7}
 800982c:	4770      	bx	lr

0800982e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800982e:	b480      	push	{r7}
 8009830:	b083      	sub	sp, #12
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	bc80      	pop	{r7}
 8009840:	4770      	bx	lr

08009842 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009842:	b480      	push	{r7}
 8009844:	b085      	sub	sp, #20
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009850:	b29b      	uxth	r3, r3
 8009852:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009854:	68fb      	ldr	r3, [r7, #12]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	bc80      	pop	{r7}
 800985e:	4770      	bx	lr

08009860 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	bc80      	pop	{r7}
 8009874:	4770      	bx	lr

08009876 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009876:	b480      	push	{r7}
 8009878:	b08d      	sub	sp, #52	; 0x34
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	4611      	mov	r1, r2
 8009882:	461a      	mov	r2, r3
 8009884:	460b      	mov	r3, r1
 8009886:	80fb      	strh	r3, [r7, #6]
 8009888:	4613      	mov	r3, r2
 800988a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800988c:	88bb      	ldrh	r3, [r7, #4]
 800988e:	3301      	adds	r3, #1
 8009890:	085b      	lsrs	r3, r3, #1
 8009892:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800989c:	88fb      	ldrh	r3, [r7, #6]
 800989e:	005a      	lsls	r2, r3, #1
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098a8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ae:	e01e      	b.n	80098ee <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	3301      	adds	r3, #1
 80098ba:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	021b      	lsls	r3, r3, #8
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	3302      	adds	r3, #2
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	3302      	adds	r3, #2
 80098e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	3301      	adds	r3, #1
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	3b01      	subs	r3, #1
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1dd      	bne.n	80098b0 <USB_WritePMA+0x3a>
  }
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop
 80098f8:	3734      	adds	r7, #52	; 0x34
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bc80      	pop	{r7}
 80098fe:	4770      	bx	lr

08009900 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009900:	b480      	push	{r7}
 8009902:	b08b      	sub	sp, #44	; 0x2c
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	4611      	mov	r1, r2
 800990c:	461a      	mov	r2, r3
 800990e:	460b      	mov	r3, r1
 8009910:	80fb      	strh	r3, [r7, #6]
 8009912:	4613      	mov	r3, r2
 8009914:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009916:	88bb      	ldrh	r3, [r7, #4]
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	b29b      	uxth	r3, r3
 800991c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009926:	88fb      	ldrh	r3, [r7, #6]
 8009928:	005a      	lsls	r2, r3, #1
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009932:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	627b      	str	r3, [r7, #36]	; 0x24
 8009938:	e01b      	b.n	8009972 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	b29b      	uxth	r3, r3
 8009940:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	3302      	adds	r3, #2
 8009946:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	b2da      	uxtb	r2, r3
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	3301      	adds	r3, #1
 8009954:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	0a1b      	lsrs	r3, r3, #8
 800995a:	b2da      	uxtb	r2, r3
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	3301      	adds	r3, #1
 8009964:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	3302      	adds	r3, #2
 800996a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	3b01      	subs	r3, #1
 8009970:	627b      	str	r3, [r7, #36]	; 0x24
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e0      	bne.n	800993a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009978:	88bb      	ldrh	r3, [r7, #4]
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	b29b      	uxth	r3, r3
 8009980:	2b00      	cmp	r3, #0
 8009982:	d007      	beq.n	8009994 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	b29b      	uxth	r3, r3
 800998a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	b2da      	uxtb	r2, r3
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	701a      	strb	r2, [r3, #0]
  }
}
 8009994:	bf00      	nop
 8009996:	372c      	adds	r7, #44	; 0x2c
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr

0800999e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	460b      	mov	r3, r1
 80099a8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	7c1b      	ldrb	r3, [r3, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d115      	bne.n	80099e2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ba:	2202      	movs	r2, #2
 80099bc:	2181      	movs	r1, #129	; 0x81
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f001 fe8d 	bl	800b6de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ce:	2202      	movs	r2, #2
 80099d0:	2101      	movs	r1, #1
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 fe83 	bl	800b6de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80099e0:	e012      	b.n	8009a08 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80099e2:	2340      	movs	r3, #64	; 0x40
 80099e4:	2202      	movs	r2, #2
 80099e6:	2181      	movs	r1, #129	; 0x81
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 fe78 	bl	800b6de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80099f4:	2340      	movs	r3, #64	; 0x40
 80099f6:	2202      	movs	r2, #2
 80099f8:	2101      	movs	r1, #1
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 fe6f 	bl	800b6de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a08:	2308      	movs	r3, #8
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	2182      	movs	r1, #130	; 0x82
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 fe65 	bl	800b6de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a1a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a1e:	f001 ff85 	bl	800b92c <USBD_static_malloc>
 8009a22:	4602      	mov	r2, r0
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d102      	bne.n	8009a3a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009a34:	2301      	movs	r3, #1
 8009a36:	73fb      	strb	r3, [r7, #15]
 8009a38:	e026      	b.n	8009a88 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a40:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	7c1b      	ldrb	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a6e:	2101      	movs	r1, #1
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 ff25 	bl	800b8c0 <USBD_LL_PrepareReceive>
 8009a76:	e007      	b.n	8009a88 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a7e:	2340      	movs	r3, #64	; 0x40
 8009a80:	2101      	movs	r1, #1
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 ff1c 	bl	800b8c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009aa2:	2181      	movs	r1, #129	; 0x81
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 fe40 	bl	800b72a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f001 fe39 	bl	800b72a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ac0:	2182      	movs	r1, #130	; 0x82
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 fe31 	bl	800b72a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00e      	beq.n	8009af6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 ff2b 	bl	800b944 <USBD_static_free>
    pdev->pClassData = NULL;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b10:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d039      	beq.n	8009b9e <USBD_CDC_Setup+0x9e>
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d17f      	bne.n	8009c2e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	88db      	ldrh	r3, [r3, #6]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d029      	beq.n	8009b8a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	b25b      	sxtb	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	da11      	bge.n	8009b64 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009b4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	88d2      	ldrh	r2, [r2, #6]
 8009b52:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b54:	6939      	ldr	r1, [r7, #16]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	88db      	ldrh	r3, [r3, #6]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 fa0a 	bl	800af76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009b62:	e06b      	b.n	8009c3c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	785a      	ldrb	r2, [r3, #1]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	88db      	ldrh	r3, [r3, #6]
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009b7a:	6939      	ldr	r1, [r7, #16]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	88db      	ldrh	r3, [r3, #6]
 8009b80:	461a      	mov	r2, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 fa25 	bl	800afd2 <USBD_CtlPrepareRx>
      break;
 8009b88:	e058      	b.n	8009c3c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	7850      	ldrb	r0, [r2, #1]
 8009b96:	2200      	movs	r2, #0
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	4798      	blx	r3
      break;
 8009b9c:	e04e      	b.n	8009c3c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	2b0b      	cmp	r3, #11
 8009ba4:	d02e      	beq.n	8009c04 <USBD_CDC_Setup+0x104>
 8009ba6:	2b0b      	cmp	r3, #11
 8009ba8:	dc38      	bgt.n	8009c1c <USBD_CDC_Setup+0x11c>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <USBD_CDC_Setup+0xb4>
 8009bae:	2b0a      	cmp	r3, #10
 8009bb0:	d014      	beq.n	8009bdc <USBD_CDC_Setup+0xdc>
 8009bb2:	e033      	b.n	8009c1c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d107      	bne.n	8009bce <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009bbe:	f107 030c 	add.w	r3, r7, #12
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 f9d5 	bl	800af76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bcc:	e02e      	b.n	8009c2c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 f966 	bl	800aea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8009bda:	e027      	b.n	8009c2c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d107      	bne.n	8009bf6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009be6:	f107 030f 	add.w	r3, r7, #15
 8009bea:	2201      	movs	r2, #1
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f001 f9c1 	bl	800af76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bf4:	e01a      	b.n	8009c2c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 f952 	bl	800aea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bfe:	2302      	movs	r3, #2
 8009c00:	75fb      	strb	r3, [r7, #23]
          break;
 8009c02:	e013      	b.n	8009c2c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d00d      	beq.n	8009c2a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f946 	bl	800aea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c16:	2302      	movs	r3, #2
 8009c18:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009c1a:	e006      	b.n	8009c2a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f93f 	bl	800aea2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c24:	2302      	movs	r3, #2
 8009c26:	75fb      	strb	r3, [r7, #23]
          break;
 8009c28:	e000      	b.n	8009c2c <USBD_CDC_Setup+0x12c>
          break;
 8009c2a:	bf00      	nop
      }
      break;
 8009c2c:	e006      	b.n	8009c3c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009c2e:	6839      	ldr	r1, [r7, #0]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f001 f936 	bl	800aea2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c36:	2302      	movs	r3, #2
 8009c38:	75fb      	strb	r3, [r7, #23]
      break;
 8009c3a:	bf00      	nop
  }

  return ret;
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c58:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c60:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d03a      	beq.n	8009ce2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c6c:	78fa      	ldrb	r2, [r7, #3]
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4613      	mov	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	440b      	add	r3, r1
 8009c7a:	331c      	adds	r3, #28
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d029      	beq.n	8009cd6 <USBD_CDC_DataIn+0x90>
 8009c82:	78fa      	ldrb	r2, [r7, #3]
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	331c      	adds	r3, #28
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	78f9      	ldrb	r1, [r7, #3]
 8009c96:	68b8      	ldr	r0, [r7, #8]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	440b      	add	r3, r1
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	4403      	add	r3, r0
 8009ca2:	3338      	adds	r3, #56	; 0x38
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	fbb2 f1f3 	udiv	r1, r2, r3
 8009caa:	fb03 f301 	mul.w	r3, r3, r1
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d110      	bne.n	8009cd6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009cb4:	78fa      	ldrb	r2, [r7, #3]
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	440b      	add	r3, r1
 8009cc2:	331c      	adds	r3, #28
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009cc8:	78f9      	ldrb	r1, [r7, #3]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2200      	movs	r2, #0
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 fdd3 	bl	800b87a <USBD_LL_Transmit>
 8009cd4:	e003      	b.n	8009cde <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e000      	b.n	8009ce4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009ce2:	2302      	movs	r3, #2
  }
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 fdfe 	bl	800b906 <USBD_LL_GetRxDataSize>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00d      	beq.n	8009d38 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009d30:	4611      	mov	r1, r2
 8009d32:	4798      	blx	r3

    return USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	e000      	b.n	8009d3a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009d38:	2302      	movs	r3, #2
  }
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d50:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d015      	beq.n	8009d88 <USBD_CDC_EP0_RxReady+0x46>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d62:	2bff      	cmp	r3, #255	; 0xff
 8009d64:	d010      	beq.n	8009d88 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009d74:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d7c:	b292      	uxth	r2, r2
 8009d7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	22ff      	movs	r2, #255	; 0xff
 8009d84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2243      	movs	r2, #67	; 0x43
 8009da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009da2:	4b03      	ldr	r3, [pc, #12]	; (8009db0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bc80      	pop	{r7}
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	200000bc 	.word	0x200000bc

08009db4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2243      	movs	r2, #67	; 0x43
 8009dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009dc2:	4b03      	ldr	r3, [pc, #12]	; (8009dd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bc80      	pop	{r7}
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	20000078 	.word	0x20000078

08009dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2243      	movs	r2, #67	; 0x43
 8009de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009de2:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bc80      	pop	{r7}
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20000100 	.word	0x20000100

08009df4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	220a      	movs	r2, #10
 8009e00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009e02:	4b03      	ldr	r3, [pc, #12]	; (8009e10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bc80      	pop	{r7}
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	20000034 	.word	0x20000034

08009e14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009e1e:	2302      	movs	r3, #2
 8009e20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bc80      	pop	{r7}
 8009e3e:	4770      	bx	lr

08009e40 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e54:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009e5e:	88fa      	ldrh	r2, [r7, #6]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	371c      	adds	r7, #28
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bc80      	pop	{r7}
 8009e70:	4770      	bx	lr

08009e72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009e72:	b480      	push	{r7}
 8009e74:	b085      	sub	sp, #20
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e82:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr

08009e98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01c      	beq.n	8009eec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d115      	bne.n	8009ee8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	2181      	movs	r1, #129	; 0x81
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f001 fccb 	bl	800b87a <USBD_LL_Transmit>

      return USBD_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e002      	b.n	8009eee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e000      	b.n	8009eee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009eec:	2302      	movs	r3, #2
  }
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f04:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d017      	beq.n	8009f40 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	7c1b      	ldrb	r3, [r3, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d109      	bne.n	8009f2c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f22:	2101      	movs	r1, #1
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fccb 	bl	800b8c0 <USBD_LL_PrepareReceive>
 8009f2a:	e007      	b.n	8009f3c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f32:	2340      	movs	r3, #64	; 0x40
 8009f34:	2101      	movs	r1, #1
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fcc2 	bl	800b8c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e000      	b.n	8009f42 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009f40:	2302      	movs	r3, #2
  }
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	4613      	mov	r3, r2
 8009f56:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e01a      	b.n	8009f98 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	79fa      	ldrb	r2, [r7, #7]
 8009f8e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f001 fb2f 	bl	800b5f4 <USBD_LL_Init>

  return USBD_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d006      	beq.n	8009fc2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
 8009fc0:	e001      	b.n	8009fc6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr

08009fd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fb64 	bl	800b6a8 <USBD_LL_Start>

  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bc80      	pop	{r7}
 8009ffc:	4770      	bx	lr

08009ffe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	460b      	mov	r3, r1
 800a008:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00c      	beq.n	800a032 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	4611      	mov	r1, r2
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	4798      	blx	r3
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	78fa      	ldrb	r2, [r7, #3]
 800a052:	4611      	mov	r1, r2
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	4798      	blx	r3

  return USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fed8 	bl	800ae2a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a088:	461a      	mov	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a096:	f003 031f 	and.w	r3, r3, #31
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d016      	beq.n	800a0cc <USBD_LL_SetupStage+0x6a>
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d81c      	bhi.n	800a0dc <USBD_LL_SetupStage+0x7a>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <USBD_LL_SetupStage+0x4a>
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d008      	beq.n	800a0bc <USBD_LL_SetupStage+0x5a>
 800a0aa:	e017      	b.n	800a0dc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f9cb 	bl	800a450 <USBD_StdDevReq>
      break;
 800a0ba:	e01a      	b.n	800a0f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fa2d 	bl	800a524 <USBD_StdItfReq>
      break;
 800a0ca:	e012      	b.n	800a0f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fa6d 	bl	800a5b4 <USBD_StdEPReq>
      break;
 800a0da:	e00a      	b.n	800a0f2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a0e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 fb3c 	bl	800b768 <USBD_LL_StallEP>
      break;
 800a0f0:	bf00      	nop
  }

  return USBD_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	460b      	mov	r3, r1
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d14b      	bne.n	800a1a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a116:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d134      	bne.n	800a18c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d919      	bls.n	800a162 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	68da      	ldr	r2, [r3, #12]
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	1ad2      	subs	r2, r2, r3
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a144:	429a      	cmp	r2, r3
 800a146:	d203      	bcs.n	800a150 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	e002      	b.n	800a156 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a154:	b29b      	uxth	r3, r3
 800a156:	461a      	mov	r2, r3
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f000 ff57 	bl	800b00e <USBD_CtlContinueRx>
 800a160:	e038      	b.n	800a1d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a174:	2b03      	cmp	r3, #3
 800a176:	d105      	bne.n	800a184 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 ff54 	bl	800b032 <USBD_CtlSendStatus>
 800a18a:	e023      	b.n	800a1d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a192:	2b05      	cmp	r3, #5
 800a194:	d11e      	bne.n	800a1d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a19e:	2100      	movs	r1, #0
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f001 fae1 	bl	800b768 <USBD_LL_StallEP>
 800a1a6:	e015      	b.n	800a1d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ae:	699b      	ldr	r3, [r3, #24]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00d      	beq.n	800a1d0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	d108      	bne.n	800a1d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	7afa      	ldrb	r2, [r7, #11]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	4798      	blx	r3
 800a1ce:	e001      	b.n	800a1d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e000      	b.n	800a1d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b086      	sub	sp, #24
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d17f      	bne.n	800a2f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3314      	adds	r3, #20
 800a1f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d15c      	bne.n	800a2bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d915      	bls.n	800a23a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	68da      	ldr	r2, [r3, #12]
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	1ad2      	subs	r2, r2, r3
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	b29b      	uxth	r3, r3
 800a222:	461a      	mov	r2, r3
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 fec1 	bl	800afae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a22c:	2300      	movs	r3, #0
 800a22e:	2200      	movs	r2, #0
 800a230:	2100      	movs	r1, #0
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f001 fb44 	bl	800b8c0 <USBD_LL_PrepareReceive>
 800a238:	e04e      	b.n	800a2d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	6912      	ldr	r2, [r2, #16]
 800a242:	fbb3 f1f2 	udiv	r1, r3, r2
 800a246:	fb02 f201 	mul.w	r2, r2, r1
 800a24a:	1a9b      	subs	r3, r3, r2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d11c      	bne.n	800a28a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a258:	429a      	cmp	r2, r3
 800a25a:	d316      	bcc.n	800a28a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a266:	429a      	cmp	r2, r3
 800a268:	d20f      	bcs.n	800a28a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a26a:	2200      	movs	r2, #0
 800a26c:	2100      	movs	r1, #0
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f000 fe9d 	bl	800afae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a27c:	2300      	movs	r3, #0
 800a27e:	2200      	movs	r2, #0
 800a280:	2100      	movs	r1, #0
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f001 fb1c 	bl	800b8c0 <USBD_LL_PrepareReceive>
 800a288:	e026      	b.n	800a2d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d105      	bne.n	800a2ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a2ac:	2180      	movs	r1, #128	; 0x80
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f001 fa5a 	bl	800b768 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 fecf 	bl	800b058 <USBD_CtlReceiveStatus>
 800a2ba:	e00d      	b.n	800a2d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2c2:	2b04      	cmp	r3, #4
 800a2c4:	d004      	beq.n	800a2d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d103      	bne.n	800a2d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a2d0:	2180      	movs	r1, #128	; 0x80
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f001 fa48 	bl	800b768 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d11d      	bne.n	800a31e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f7ff fe81 	bl	8009fea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2f0:	e015      	b.n	800a31e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00d      	beq.n	800a31a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a304:	2b03      	cmp	r3, #3
 800a306:	d108      	bne.n	800a31a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	7afa      	ldrb	r2, [r7, #11]
 800a312:	4611      	mov	r1, r2
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	4798      	blx	r3
 800a318:	e001      	b.n	800a31e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a31a:	2302      	movs	r3, #2
 800a31c:	e000      	b.n	800a320 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a330:	2340      	movs	r3, #64	; 0x40
 800a332:	2200      	movs	r2, #0
 800a334:	2100      	movs	r1, #0
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f001 f9d1 	bl	800b6de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2240      	movs	r2, #64	; 0x40
 800a348:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a34c:	2340      	movs	r3, #64	; 0x40
 800a34e:	2200      	movs	r2, #0
 800a350:	2180      	movs	r1, #128	; 0x80
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f001 f9c3 	bl	800b6de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2240      	movs	r2, #64	; 0x40
 800a362:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d009      	beq.n	800a3a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6852      	ldr	r2, [r2, #4]
 800a398:	b2d2      	uxtb	r2, r2
 800a39a:	4611      	mov	r1, r2
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	4798      	blx	r3
  }

  return USBD_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bc80      	pop	{r7}
 800a3c6:	4770      	bx	lr

0800a3c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2204      	movs	r2, #4
 800a3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d105      	bne.n	800a40e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr

0800a41a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d10b      	bne.n	800a444 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d005      	beq.n	800a444 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
	...

0800a450 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a466:	2b40      	cmp	r3, #64	; 0x40
 800a468:	d005      	beq.n	800a476 <USBD_StdDevReq+0x26>
 800a46a:	2b40      	cmp	r3, #64	; 0x40
 800a46c:	d84f      	bhi.n	800a50e <USBD_StdDevReq+0xbe>
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d009      	beq.n	800a486 <USBD_StdDevReq+0x36>
 800a472:	2b20      	cmp	r3, #32
 800a474:	d14b      	bne.n	800a50e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	4798      	blx	r3
      break;
 800a484:	e048      	b.n	800a518 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	785b      	ldrb	r3, [r3, #1]
 800a48a:	2b09      	cmp	r3, #9
 800a48c:	d839      	bhi.n	800a502 <USBD_StdDevReq+0xb2>
 800a48e:	a201      	add	r2, pc, #4	; (adr r2, 800a494 <USBD_StdDevReq+0x44>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a4e5 	.word	0x0800a4e5
 800a498:	0800a4f9 	.word	0x0800a4f9
 800a49c:	0800a503 	.word	0x0800a503
 800a4a0:	0800a4ef 	.word	0x0800a4ef
 800a4a4:	0800a503 	.word	0x0800a503
 800a4a8:	0800a4c7 	.word	0x0800a4c7
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a503 	.word	0x0800a503
 800a4b4:	0800a4db 	.word	0x0800a4db
 800a4b8:	0800a4d1 	.word	0x0800a4d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f9dc 	bl	800a87c <USBD_GetDescriptor>
          break;
 800a4c4:	e022      	b.n	800a50c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fb3f 	bl	800ab4c <USBD_SetAddress>
          break;
 800a4ce:	e01d      	b.n	800a50c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a4d0:	6839      	ldr	r1, [r7, #0]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fb7e 	bl	800abd4 <USBD_SetConfig>
          break;
 800a4d8:	e018      	b.n	800a50c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fc07 	bl	800acf0 <USBD_GetConfig>
          break;
 800a4e2:	e013      	b.n	800a50c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fc37 	bl	800ad5a <USBD_GetStatus>
          break;
 800a4ec:	e00e      	b.n	800a50c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fc65 	bl	800adc0 <USBD_SetFeature>
          break;
 800a4f6:	e009      	b.n	800a50c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fc74 	bl	800ade8 <USBD_ClrFeature>
          break;
 800a500:	e004      	b.n	800a50c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fccc 	bl	800aea2 <USBD_CtlError>
          break;
 800a50a:	bf00      	nop
      }
      break;
 800a50c:	e004      	b.n	800a518 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fcc6 	bl	800aea2 <USBD_CtlError>
      break;
 800a516:	bf00      	nop
  }

  return ret;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop

0800a524 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a53a:	2b40      	cmp	r3, #64	; 0x40
 800a53c:	d005      	beq.n	800a54a <USBD_StdItfReq+0x26>
 800a53e:	2b40      	cmp	r3, #64	; 0x40
 800a540:	d82e      	bhi.n	800a5a0 <USBD_StdItfReq+0x7c>
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <USBD_StdItfReq+0x26>
 800a546:	2b20      	cmp	r3, #32
 800a548:	d12a      	bne.n	800a5a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a550:	3b01      	subs	r3, #1
 800a552:	2b02      	cmp	r3, #2
 800a554:	d81d      	bhi.n	800a592 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	889b      	ldrh	r3, [r3, #4]
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d813      	bhi.n	800a588 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	88db      	ldrh	r3, [r3, #6]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d110      	bne.n	800a59c <USBD_StdItfReq+0x78>
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fd56 	bl	800b032 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a586:	e009      	b.n	800a59c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fc89 	bl	800aea2 <USBD_CtlError>
          break;
 800a590:	e004      	b.n	800a59c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fc84 	bl	800aea2 <USBD_CtlError>
          break;
 800a59a:	e000      	b.n	800a59e <USBD_StdItfReq+0x7a>
          break;
 800a59c:	bf00      	nop
      }
      break;
 800a59e:	e004      	b.n	800a5aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fc7d 	bl	800aea2 <USBD_CtlError>
      break;
 800a5a8:	bf00      	nop
  }

  return USBD_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	889b      	ldrh	r3, [r3, #4]
 800a5c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5d0:	2b40      	cmp	r3, #64	; 0x40
 800a5d2:	d007      	beq.n	800a5e4 <USBD_StdEPReq+0x30>
 800a5d4:	2b40      	cmp	r3, #64	; 0x40
 800a5d6:	f200 8146 	bhi.w	800a866 <USBD_StdEPReq+0x2b2>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00a      	beq.n	800a5f4 <USBD_StdEPReq+0x40>
 800a5de:	2b20      	cmp	r3, #32
 800a5e0:	f040 8141 	bne.w	800a866 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	4798      	blx	r3
      break;
 800a5f2:	e13d      	b.n	800a870 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	d10a      	bne.n	800a616 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	e12d      	b.n	800a872 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d007      	beq.n	800a62e <USBD_StdEPReq+0x7a>
 800a61e:	2b03      	cmp	r3, #3
 800a620:	f300 811b 	bgt.w	800a85a <USBD_StdEPReq+0x2a6>
 800a624:	2b00      	cmp	r3, #0
 800a626:	d072      	beq.n	800a70e <USBD_StdEPReq+0x15a>
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d03a      	beq.n	800a6a2 <USBD_StdEPReq+0xee>
 800a62c:	e115      	b.n	800a85a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a634:	2b02      	cmp	r3, #2
 800a636:	d002      	beq.n	800a63e <USBD_StdEPReq+0x8a>
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d015      	beq.n	800a668 <USBD_StdEPReq+0xb4>
 800a63c:	e02b      	b.n	800a696 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00c      	beq.n	800a65e <USBD_StdEPReq+0xaa>
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	2b80      	cmp	r3, #128	; 0x80
 800a648:	d009      	beq.n	800a65e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 f88a 	bl	800b768 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a654:	2180      	movs	r1, #128	; 0x80
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f001 f886 	bl	800b768 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a65c:	e020      	b.n	800a6a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fc1e 	bl	800aea2 <USBD_CtlError>
              break;
 800a666:	e01b      	b.n	800a6a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	885b      	ldrh	r3, [r3, #2]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10e      	bne.n	800a68e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00b      	beq.n	800a68e <USBD_StdEPReq+0xda>
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	2b80      	cmp	r3, #128	; 0x80
 800a67a:	d008      	beq.n	800a68e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	88db      	ldrh	r3, [r3, #6]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d104      	bne.n	800a68e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 f86d 	bl	800b768 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fccf 	bl	800b032 <USBD_CtlSendStatus>

              break;
 800a694:	e004      	b.n	800a6a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fc02 	bl	800aea2 <USBD_CtlError>
              break;
 800a69e:	bf00      	nop
          }
          break;
 800a6a0:	e0e0      	b.n	800a864 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d002      	beq.n	800a6b2 <USBD_StdEPReq+0xfe>
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	d015      	beq.n	800a6dc <USBD_StdEPReq+0x128>
 800a6b0:	e026      	b.n	800a700 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00c      	beq.n	800a6d2 <USBD_StdEPReq+0x11e>
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ba:	2b80      	cmp	r3, #128	; 0x80
 800a6bc:	d009      	beq.n	800a6d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a6be:	7bbb      	ldrb	r3, [r7, #14]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 f850 	bl	800b768 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a6c8:	2180      	movs	r1, #128	; 0x80
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f001 f84c 	bl	800b768 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6d0:	e01c      	b.n	800a70c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fbe4 	bl	800aea2 <USBD_CtlError>
              break;
 800a6da:	e017      	b.n	800a70c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	885b      	ldrh	r3, [r3, #2]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d112      	bne.n	800a70a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d004      	beq.n	800a6f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 f857 	bl	800b7a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fc9a 	bl	800b032 <USBD_CtlSendStatus>
              }
              break;
 800a6fe:	e004      	b.n	800a70a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fbcd 	bl	800aea2 <USBD_CtlError>
              break;
 800a708:	e000      	b.n	800a70c <USBD_StdEPReq+0x158>
              break;
 800a70a:	bf00      	nop
          }
          break;
 800a70c:	e0aa      	b.n	800a864 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a714:	2b02      	cmp	r3, #2
 800a716:	d002      	beq.n	800a71e <USBD_StdEPReq+0x16a>
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d032      	beq.n	800a782 <USBD_StdEPReq+0x1ce>
 800a71c:	e097      	b.n	800a84e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a71e:	7bbb      	ldrb	r3, [r7, #14]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d007      	beq.n	800a734 <USBD_StdEPReq+0x180>
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	2b80      	cmp	r3, #128	; 0x80
 800a728:	d004      	beq.n	800a734 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fbb8 	bl	800aea2 <USBD_CtlError>
                break;
 800a732:	e091      	b.n	800a858 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	da0b      	bge.n	800a754 <USBD_StdEPReq+0x1a0>
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a742:	4613      	mov	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	3310      	adds	r3, #16
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4413      	add	r3, r2
 800a750:	3304      	adds	r3, #4
 800a752:	e00b      	b.n	800a76c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a75a:	4613      	mov	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	4413      	add	r3, r2
 800a76a:	3304      	adds	r3, #4
 800a76c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2202      	movs	r2, #2
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fbfb 	bl	800af76 <USBD_CtlSendData>
              break;
 800a780:	e06a      	b.n	800a858 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a786:	2b00      	cmp	r3, #0
 800a788:	da11      	bge.n	800a7ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	f003 020f 	and.w	r2, r3, #15
 800a790:	6879      	ldr	r1, [r7, #4]
 800a792:	4613      	mov	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	440b      	add	r3, r1
 800a79c:	3318      	adds	r3, #24
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d117      	bne.n	800a7d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fb7b 	bl	800aea2 <USBD_CtlError>
                  break;
 800a7ac:	e054      	b.n	800a858 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	f003 020f 	and.w	r2, r3, #15
 800a7b4:	6879      	ldr	r1, [r7, #4]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	440b      	add	r3, r1
 800a7c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d104      	bne.n	800a7d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fb68 	bl	800aea2 <USBD_CtlError>
                  break;
 800a7d2:	e041      	b.n	800a858 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	da0b      	bge.n	800a7f4 <USBD_StdEPReq+0x240>
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	3310      	adds	r3, #16
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	e00b      	b.n	800a80c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7fa:	4613      	mov	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	4413      	add	r3, r2
 800a80a:	3304      	adds	r3, #4
 800a80c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <USBD_StdEPReq+0x266>
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	2b80      	cmp	r3, #128	; 0x80
 800a818:	d103      	bne.n	800a822 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
 800a820:	e00e      	b.n	800a840 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	4619      	mov	r1, r3
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 ffdc 	bl	800b7e4 <USBD_LL_IsStallEP>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d003      	beq.n	800a83a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2201      	movs	r2, #1
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	e002      	b.n	800a840 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2202      	movs	r2, #2
 800a844:	4619      	mov	r1, r3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fb95 	bl	800af76 <USBD_CtlSendData>
              break;
 800a84c:	e004      	b.n	800a858 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fb26 	bl	800aea2 <USBD_CtlError>
              break;
 800a856:	bf00      	nop
          }
          break;
 800a858:	e004      	b.n	800a864 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fb20 	bl	800aea2 <USBD_CtlError>
          break;
 800a862:	bf00      	nop
      }
      break;
 800a864:	e004      	b.n	800a870 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fb1a 	bl	800aea2 <USBD_CtlError>
      break;
 800a86e:	bf00      	nop
  }

  return ret;
 800a870:	7bfb      	ldrb	r3, [r7, #15]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a886:	2300      	movs	r3, #0
 800a888:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	885b      	ldrh	r3, [r3, #2]
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b29b      	uxth	r3, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	2b06      	cmp	r3, #6
 800a89e:	f200 8128 	bhi.w	800aaf2 <USBD_GetDescriptor+0x276>
 800a8a2:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <USBD_GetDescriptor+0x2c>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a8c5 	.word	0x0800a8c5
 800a8ac:	0800a8dd 	.word	0x0800a8dd
 800a8b0:	0800a91d 	.word	0x0800a91d
 800a8b4:	0800aaf3 	.word	0x0800aaf3
 800a8b8:	0800aaf3 	.word	0x0800aaf3
 800a8bc:	0800aa93 	.word	0x0800aa93
 800a8c0:	0800aabf 	.word	0x0800aabf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	7c12      	ldrb	r2, [r2, #16]
 800a8d0:	f107 0108 	add.w	r1, r7, #8
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
 800a8d8:	60f8      	str	r0, [r7, #12]
      break;
 800a8da:	e112      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	7c1b      	ldrb	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d10d      	bne.n	800a900 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ec:	f107 0208 	add.w	r2, r7, #8
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4798      	blx	r3
 800a8f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a8fe:	e100      	b.n	800ab02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	f107 0208 	add.w	r2, r7, #8
 800a90c:	4610      	mov	r0, r2
 800a90e:	4798      	blx	r3
 800a910:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3301      	adds	r3, #1
 800a916:	2202      	movs	r2, #2
 800a918:	701a      	strb	r2, [r3, #0]
      break;
 800a91a:	e0f2      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	885b      	ldrh	r3, [r3, #2]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b05      	cmp	r3, #5
 800a924:	f200 80ac 	bhi.w	800aa80 <USBD_GetDescriptor+0x204>
 800a928:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <USBD_GetDescriptor+0xb4>)
 800a92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92e:	bf00      	nop
 800a930:	0800a949 	.word	0x0800a949
 800a934:	0800a97d 	.word	0x0800a97d
 800a938:	0800a9b1 	.word	0x0800a9b1
 800a93c:	0800a9e5 	.word	0x0800a9e5
 800a940:	0800aa19 	.word	0x0800aa19
 800a944:	0800aa4d 	.word	0x0800aa4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	7c12      	ldrb	r2, [r2, #16]
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a96a:	e091      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fa97 	bl	800aea2 <USBD_CtlError>
            err++;
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	3301      	adds	r3, #1
 800a978:	72fb      	strb	r3, [r7, #11]
          break;
 800a97a:	e089      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	7c12      	ldrb	r2, [r2, #16]
 800a994:	f107 0108 	add.w	r1, r7, #8
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a99e:	e077      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa7d 	bl	800aea2 <USBD_CtlError>
            err++;
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ae:	e06f      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	7c12      	ldrb	r2, [r2, #16]
 800a9c8:	f107 0108 	add.w	r1, r7, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
 800a9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9d2:	e05d      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa63 	bl	800aea2 <USBD_CtlError>
            err++;
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9e2:	e055      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	7c12      	ldrb	r2, [r2, #16]
 800a9fc:	f107 0108 	add.w	r1, r7, #8
 800aa00:	4610      	mov	r0, r2
 800aa02:	4798      	blx	r3
 800aa04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa06:	e043      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa49 	bl	800aea2 <USBD_CtlError>
            err++;
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	3301      	adds	r3, #1
 800aa14:	72fb      	strb	r3, [r7, #11]
          break;
 800aa16:	e03b      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7c12      	ldrb	r2, [r2, #16]
 800aa30:	f107 0108 	add.w	r1, r7, #8
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa3a:	e029      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa2f 	bl	800aea2 <USBD_CtlError>
            err++;
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	3301      	adds	r3, #1
 800aa48:	72fb      	strb	r3, [r7, #11]
          break;
 800aa4a:	e021      	b.n	800aa90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa6e:	e00f      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa15 	bl	800aea2 <USBD_CtlError>
            err++;
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa7e:	e007      	b.n	800aa90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fa0d 	bl	800aea2 <USBD_CtlError>
          err++;
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800aa8e:	e038      	b.n	800ab02 <USBD_GetDescriptor+0x286>
 800aa90:	e037      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	7c1b      	ldrb	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d109      	bne.n	800aaae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa2:	f107 0208 	add.w	r2, r7, #8
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	4798      	blx	r3
 800aaaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaac:	e029      	b.n	800ab02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f9f6 	bl	800aea2 <USBD_CtlError>
        err++;
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	3301      	adds	r3, #1
 800aaba:	72fb      	strb	r3, [r7, #11]
      break;
 800aabc:	e021      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7c1b      	ldrb	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10d      	bne.n	800aae2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	f107 0208 	add.w	r2, r7, #8
 800aad2:	4610      	mov	r0, r2
 800aad4:	4798      	blx	r3
 800aad6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3301      	adds	r3, #1
 800aadc:	2207      	movs	r2, #7
 800aade:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aae0:	e00f      	b.n	800ab02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f9dc 	bl	800aea2 <USBD_CtlError>
        err++;
 800aaea:	7afb      	ldrb	r3, [r7, #11]
 800aaec:	3301      	adds	r3, #1
 800aaee:	72fb      	strb	r3, [r7, #11]
      break;
 800aaf0:	e007      	b.n	800ab02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f9d4 	bl	800aea2 <USBD_CtlError>
      err++;
 800aafa:	7afb      	ldrb	r3, [r7, #11]
 800aafc:	3301      	adds	r3, #1
 800aafe:	72fb      	strb	r3, [r7, #11]
      break;
 800ab00:	bf00      	nop
  }

  if (err != 0U)
 800ab02:	7afb      	ldrb	r3, [r7, #11]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11c      	bne.n	800ab42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ab08:	893b      	ldrh	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d011      	beq.n	800ab32 <USBD_GetDescriptor+0x2b6>
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	88db      	ldrh	r3, [r3, #6]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00d      	beq.n	800ab32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	88da      	ldrh	r2, [r3, #6]
 800ab1a:	893b      	ldrh	r3, [r7, #8]
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	bf28      	it	cs
 800ab20:	4613      	movcs	r3, r2
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab26:	893b      	ldrh	r3, [r7, #8]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	68f9      	ldr	r1, [r7, #12]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fa22 	bl	800af76 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	88db      	ldrh	r3, [r3, #6]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d104      	bne.n	800ab44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fa79 	bl	800b032 <USBD_CtlSendStatus>
 800ab40:	e000      	b.n	800ab44 <USBD_GetDescriptor+0x2c8>
    return;
 800ab42:	bf00      	nop
    }
  }
}
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop

0800ab4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	889b      	ldrh	r3, [r3, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d130      	bne.n	800abc0 <USBD_SetAddress+0x74>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	88db      	ldrh	r3, [r3, #6]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d12c      	bne.n	800abc0 <USBD_SetAddress+0x74>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	885b      	ldrh	r3, [r3, #2]
 800ab6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab6c:	d828      	bhi.n	800abc0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	885b      	ldrh	r3, [r3, #2]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d104      	bne.n	800ab8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ab84:	6839      	ldr	r1, [r7, #0]
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f98b 	bl	800aea2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab8c:	e01d      	b.n	800abca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	7bfa      	ldrb	r2, [r7, #15]
 800ab92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fe4e 	bl	800b83c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 fa46 	bl	800b032 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb4:	e009      	b.n	800abca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abbe:	e004      	b.n	800abca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f96d 	bl	800aea2 <USBD_CtlError>
  }
}
 800abc8:	bf00      	nop
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
	...

0800abd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	885b      	ldrh	r3, [r3, #2]
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	4b41      	ldr	r3, [pc, #260]	; (800acec <USBD_SetConfig+0x118>)
 800abe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abe8:	4b40      	ldr	r3, [pc, #256]	; (800acec <USBD_SetConfig+0x118>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d904      	bls.n	800abfa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f955 	bl	800aea2 <USBD_CtlError>
 800abf8:	e075      	b.n	800ace6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d002      	beq.n	800ac0a <USBD_SetConfig+0x36>
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d023      	beq.n	800ac50 <USBD_SetConfig+0x7c>
 800ac08:	e062      	b.n	800acd0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ac0a:	4b38      	ldr	r3, [pc, #224]	; (800acec <USBD_SetConfig+0x118>)
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d01a      	beq.n	800ac48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ac12:	4b36      	ldr	r3, [pc, #216]	; (800acec <USBD_SetConfig+0x118>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	461a      	mov	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2203      	movs	r2, #3
 800ac20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac24:	4b31      	ldr	r3, [pc, #196]	; (800acec <USBD_SetConfig+0x118>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff f9e7 	bl	8009ffe <USBD_SetClassConfig>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d104      	bne.n	800ac40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f932 	bl	800aea2 <USBD_CtlError>
            return;
 800ac3e:	e052      	b.n	800ace6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f9f6 	bl	800b032 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac46:	e04e      	b.n	800ace6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f9f2 	bl	800b032 <USBD_CtlSendStatus>
        break;
 800ac4e:	e04a      	b.n	800ace6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ac50:	4b26      	ldr	r3, [pc, #152]	; (800acec <USBD_SetConfig+0x118>)
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d112      	bne.n	800ac7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ac60:	4b22      	ldr	r3, [pc, #136]	; (800acec <USBD_SetConfig+0x118>)
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	461a      	mov	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ac6a:	4b20      	ldr	r3, [pc, #128]	; (800acec <USBD_SetConfig+0x118>)
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff f9e3 	bl	800a03c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f9db 	bl	800b032 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac7c:	e033      	b.n	800ace6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ac7e:	4b1b      	ldr	r3, [pc, #108]	; (800acec <USBD_SetConfig+0x118>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d01d      	beq.n	800acc8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff f9d1 	bl	800a03c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ac9a:	4b14      	ldr	r3, [pc, #80]	; (800acec <USBD_SetConfig+0x118>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aca4:	4b11      	ldr	r3, [pc, #68]	; (800acec <USBD_SetConfig+0x118>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff f9a7 	bl	8009ffe <USBD_SetClassConfig>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d104      	bne.n	800acc0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f8f2 	bl	800aea2 <USBD_CtlError>
            return;
 800acbe:	e012      	b.n	800ace6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 f9b6 	bl	800b032 <USBD_CtlSendStatus>
        break;
 800acc6:	e00e      	b.n	800ace6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f9b2 	bl	800b032 <USBD_CtlSendStatus>
        break;
 800acce:	e00a      	b.n	800ace6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f8e5 	bl	800aea2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800acd8:	4b04      	ldr	r3, [pc, #16]	; (800acec <USBD_SetConfig+0x118>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff f9ac 	bl	800a03c <USBD_ClrClassConfig>
        break;
 800ace4:	bf00      	nop
    }
  }
}
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	200001fe 	.word	0x200001fe

0800acf0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	88db      	ldrh	r3, [r3, #6]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d004      	beq.n	800ad0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f8cc 	bl	800aea2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ad0a:	e022      	b.n	800ad52 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	dc02      	bgt.n	800ad1c <USBD_GetConfig+0x2c>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dc03      	bgt.n	800ad22 <USBD_GetConfig+0x32>
 800ad1a:	e015      	b.n	800ad48 <USBD_GetConfig+0x58>
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d00b      	beq.n	800ad38 <USBD_GetConfig+0x48>
 800ad20:	e012      	b.n	800ad48 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f920 	bl	800af76 <USBD_CtlSendData>
        break;
 800ad36:	e00c      	b.n	800ad52 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f918 	bl	800af76 <USBD_CtlSendData>
        break;
 800ad46:	e004      	b.n	800ad52 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f8a9 	bl	800aea2 <USBD_CtlError>
        break;
 800ad50:	bf00      	nop
}
 800ad52:	bf00      	nop
 800ad54:	3708      	adds	r7, #8
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b082      	sub	sp, #8
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d81e      	bhi.n	800adae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	88db      	ldrh	r3, [r3, #6]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d004      	beq.n	800ad82 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f891 	bl	800aea2 <USBD_CtlError>
        break;
 800ad80:	e01a      	b.n	800adb8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d005      	beq.n	800ad9e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	f043 0202 	orr.w	r2, r3, #2
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	330c      	adds	r3, #12
 800ada2:	2202      	movs	r2, #2
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f8e5 	bl	800af76 <USBD_CtlSendData>
      break;
 800adac:	e004      	b.n	800adb8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f876 	bl	800aea2 <USBD_CtlError>
      break;
 800adb6:	bf00      	nop
  }
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	885b      	ldrh	r3, [r3, #2]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d106      	bne.n	800ade0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f929 	bl	800b032 <USBD_CtlSendStatus>
  }
}
 800ade0:	bf00      	nop
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf8:	3b01      	subs	r3, #1
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d80b      	bhi.n	800ae16 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	885b      	ldrh	r3, [r3, #2]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d10c      	bne.n	800ae20 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f90f 	bl	800b032 <USBD_CtlSendStatus>
      }
      break;
 800ae14:	e004      	b.n	800ae20 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f842 	bl	800aea2 <USBD_CtlError>
      break;
 800ae1e:	e000      	b.n	800ae22 <USBD_ClrFeature+0x3a>
      break;
 800ae20:	bf00      	nop
  }
}
 800ae22:	bf00      	nop
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781a      	ldrb	r2, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	785a      	ldrb	r2, [r3, #1]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	3302      	adds	r3, #2
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	3303      	adds	r3, #3
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	021b      	lsls	r3, r3, #8
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	4413      	add	r3, r2
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	3304      	adds	r3, #4
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	3305      	adds	r3, #5
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	021b      	lsls	r3, r3, #8
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	4413      	add	r3, r2
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	3306      	adds	r3, #6
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	3307      	adds	r3, #7
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	021b      	lsls	r3, r3, #8
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	4413      	add	r3, r2
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	80da      	strh	r2, [r3, #6]

}
 800ae98:	bf00      	nop
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bc80      	pop	{r7}
 800aea0:	4770      	bx	lr

0800aea2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aeac:	2180      	movs	r1, #128	; 0x80
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fc5a 	bl	800b768 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fc56 	bl	800b768 <USBD_LL_StallEP>
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d032      	beq.n	800af40 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f000 f834 	bl	800af48 <USBD_GetLen>
 800aee0:	4603      	mov	r3, r0
 800aee2:	3301      	adds	r3, #1
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	1c5a      	adds	r2, r3, #1
 800aef2:	75fa      	strb	r2, [r7, #23]
 800aef4:	461a      	mov	r2, r3
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	4413      	add	r3, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	7812      	ldrb	r2, [r2, #0]
 800aefe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	75fa      	strb	r2, [r7, #23]
 800af06:	461a      	mov	r2, r3
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	4413      	add	r3, r2
 800af0c:	2203      	movs	r2, #3
 800af0e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af10:	e012      	b.n	800af38 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	60fa      	str	r2, [r7, #12]
 800af18:	7dfa      	ldrb	r2, [r7, #23]
 800af1a:	1c51      	adds	r1, r2, #1
 800af1c:	75f9      	strb	r1, [r7, #23]
 800af1e:	4611      	mov	r1, r2
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	440a      	add	r2, r1
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	75fa      	strb	r2, [r7, #23]
 800af2e:	461a      	mov	r2, r3
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	4413      	add	r3, r2
 800af34:	2200      	movs	r2, #0
 800af36:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1e8      	bne.n	800af12 <USBD_GetString+0x4e>
    }
  }
}
 800af40:	bf00      	nop
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800af54:	e005      	b.n	800af62 <USBD_GetLen+0x1a>
  {
    len++;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	3301      	adds	r3, #1
 800af5a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3301      	adds	r3, #1
 800af60:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1f5      	bne.n	800af56 <USBD_GetLen+0xe>
  }

  return len;
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	bc80      	pop	{r7}
 800af74:	4770      	bx	lr

0800af76 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	4613      	mov	r3, r2
 800af82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2202      	movs	r2, #2
 800af88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af8c:	88fa      	ldrh	r2, [r7, #6]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800af92:	88fa      	ldrh	r2, [r7, #6]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	2100      	movs	r1, #0
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 fc6b 	bl	800b87a <USBD_LL_Transmit>

  return USBD_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	60f8      	str	r0, [r7, #12]
 800afb6:	60b9      	str	r1, [r7, #8]
 800afb8:	4613      	mov	r3, r2
 800afba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afbc:	88fb      	ldrh	r3, [r7, #6]
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	2100      	movs	r1, #0
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 fc59 	bl	800b87a <USBD_LL_Transmit>

  return USBD_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	60f8      	str	r0, [r7, #12]
 800afda:	60b9      	str	r1, [r7, #8]
 800afdc:	4613      	mov	r3, r2
 800afde:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2203      	movs	r2, #3
 800afe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afe8:	88fa      	ldrh	r2, [r7, #6]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aff0:	88fa      	ldrh	r2, [r7, #6]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	2100      	movs	r1, #0
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 fc5e 	bl	800b8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	4613      	mov	r3, r2
 800b01a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	2100      	movs	r1, #0
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f000 fc4c 	bl	800b8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2204      	movs	r2, #4
 800b03e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b042:	2300      	movs	r3, #0
 800b044:	2200      	movs	r2, #0
 800b046:	2100      	movs	r1, #0
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fc16 	bl	800b87a <USBD_LL_Transmit>

  return USBD_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2205      	movs	r2, #5
 800b064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b068:	2300      	movs	r3, #0
 800b06a:	2200      	movs	r2, #0
 800b06c:	2100      	movs	r1, #0
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fc26 	bl	800b8c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b084:	2200      	movs	r2, #0
 800b086:	4912      	ldr	r1, [pc, #72]	; (800b0d0 <MX_USB_DEVICE_Init+0x50>)
 800b088:	4812      	ldr	r0, [pc, #72]	; (800b0d4 <MX_USB_DEVICE_Init+0x54>)
 800b08a:	f7fe ff5e 	bl	8009f4a <USBD_Init>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b094:	f7f7 fbd6 	bl	8002844 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b098:	490f      	ldr	r1, [pc, #60]	; (800b0d8 <MX_USB_DEVICE_Init+0x58>)
 800b09a:	480e      	ldr	r0, [pc, #56]	; (800b0d4 <MX_USB_DEVICE_Init+0x54>)
 800b09c:	f7fe ff80 	bl	8009fa0 <USBD_RegisterClass>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b0a6:	f7f7 fbcd 	bl	8002844 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b0aa:	490c      	ldr	r1, [pc, #48]	; (800b0dc <MX_USB_DEVICE_Init+0x5c>)
 800b0ac:	4809      	ldr	r0, [pc, #36]	; (800b0d4 <MX_USB_DEVICE_Init+0x54>)
 800b0ae:	f7fe feb1 	bl	8009e14 <USBD_CDC_RegisterInterface>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b0b8:	f7f7 fbc4 	bl	8002844 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b0bc:	4805      	ldr	r0, [pc, #20]	; (800b0d4 <MX_USB_DEVICE_Init+0x54>)
 800b0be:	f7fe ff88 	bl	8009fd2 <USBD_Start>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b0c8:	f7f7 fbbc 	bl	8002844 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b0cc:	bf00      	nop
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20000154 	.word	0x20000154
 800b0d4:	200006e8 	.word	0x200006e8
 800b0d8:	20000040 	.word	0x20000040
 800b0dc:	20000144 	.word	0x20000144

0800b0e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	4905      	ldr	r1, [pc, #20]	; (800b0fc <CDC_Init_FS+0x1c>)
 800b0e8:	4805      	ldr	r0, [pc, #20]	; (800b100 <CDC_Init_FS+0x20>)
 800b0ea:	f7fe fea9 	bl	8009e40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0ee:	4905      	ldr	r1, [pc, #20]	; (800b104 <CDC_Init_FS+0x24>)
 800b0f0:	4803      	ldr	r0, [pc, #12]	; (800b100 <CDC_Init_FS+0x20>)
 800b0f2:	f7fe febe 	bl	8009e72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	20000d94 	.word	0x20000d94
 800b100:	200006e8 	.word	0x200006e8
 800b104:	200009ac 	.word	0x200009ac

0800b108 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b108:	b480      	push	{r7}
 800b10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b10c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b10e:	4618      	mov	r0, r3
 800b110:	46bd      	mov	sp, r7
 800b112:	bc80      	pop	{r7}
 800b114:	4770      	bx	lr
	...

0800b118 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	6039      	str	r1, [r7, #0]
 800b122:	71fb      	strb	r3, [r7, #7]
 800b124:	4613      	mov	r3, r2
 800b126:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b128:	79fb      	ldrb	r3, [r7, #7]
 800b12a:	2b23      	cmp	r3, #35	; 0x23
 800b12c:	d84a      	bhi.n	800b1c4 <CDC_Control_FS+0xac>
 800b12e:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <CDC_Control_FS+0x1c>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b1c5 	.word	0x0800b1c5
 800b138:	0800b1c5 	.word	0x0800b1c5
 800b13c:	0800b1c5 	.word	0x0800b1c5
 800b140:	0800b1c5 	.word	0x0800b1c5
 800b144:	0800b1c5 	.word	0x0800b1c5
 800b148:	0800b1c5 	.word	0x0800b1c5
 800b14c:	0800b1c5 	.word	0x0800b1c5
 800b150:	0800b1c5 	.word	0x0800b1c5
 800b154:	0800b1c5 	.word	0x0800b1c5
 800b158:	0800b1c5 	.word	0x0800b1c5
 800b15c:	0800b1c5 	.word	0x0800b1c5
 800b160:	0800b1c5 	.word	0x0800b1c5
 800b164:	0800b1c5 	.word	0x0800b1c5
 800b168:	0800b1c5 	.word	0x0800b1c5
 800b16c:	0800b1c5 	.word	0x0800b1c5
 800b170:	0800b1c5 	.word	0x0800b1c5
 800b174:	0800b1c5 	.word	0x0800b1c5
 800b178:	0800b1c5 	.word	0x0800b1c5
 800b17c:	0800b1c5 	.word	0x0800b1c5
 800b180:	0800b1c5 	.word	0x0800b1c5
 800b184:	0800b1c5 	.word	0x0800b1c5
 800b188:	0800b1c5 	.word	0x0800b1c5
 800b18c:	0800b1c5 	.word	0x0800b1c5
 800b190:	0800b1c5 	.word	0x0800b1c5
 800b194:	0800b1c5 	.word	0x0800b1c5
 800b198:	0800b1c5 	.word	0x0800b1c5
 800b19c:	0800b1c5 	.word	0x0800b1c5
 800b1a0:	0800b1c5 	.word	0x0800b1c5
 800b1a4:	0800b1c5 	.word	0x0800b1c5
 800b1a8:	0800b1c5 	.word	0x0800b1c5
 800b1ac:	0800b1c5 	.word	0x0800b1c5
 800b1b0:	0800b1c5 	.word	0x0800b1c5
 800b1b4:	0800b1c5 	.word	0x0800b1c5
 800b1b8:	0800b1c5 	.word	0x0800b1c5
 800b1bc:	0800b1c5 	.word	0x0800b1c5
 800b1c0:	0800b1c5 	.word	0x0800b1c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b1c4:	bf00      	nop
  }

  return (USBD_OK);
 800b1c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bc80      	pop	{r7}
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop

0800b1d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	4808      	ldr	r0, [pc, #32]	; (800b204 <CDC_Receive_FS+0x30>)
 800b1e2:	f7fe fe46 	bl	8009e72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1e6:	4807      	ldr	r0, [pc, #28]	; (800b204 <CDC_Receive_FS+0x30>)
 800b1e8:	f7fe fe85 	bl	8009ef6 <USBD_CDC_ReceivePacket>
USB_Packet_Received(&Buf[0], Len[0]);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7f6 fe34 	bl	8001e60 <USB_Packet_Received>
  return (USBD_OK);
 800b1f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	200006e8 	.word	0x200006e8

0800b208 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b218:	4b0d      	ldr	r3, [pc, #52]	; (800b250 <CDC_Transmit_FS+0x48>)
 800b21a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e00b      	b.n	800b246 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b22e:	887b      	ldrh	r3, [r7, #2]
 800b230:	461a      	mov	r2, r3
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	4806      	ldr	r0, [pc, #24]	; (800b250 <CDC_Transmit_FS+0x48>)
 800b236:	f7fe fe03 	bl	8009e40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b23a:	4805      	ldr	r0, [pc, #20]	; (800b250 <CDC_Transmit_FS+0x48>)
 800b23c:	f7fe fe2c 	bl	8009e98 <USBD_CDC_TransmitPacket>
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b244:	7bfb      	ldrb	r3, [r7, #15]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	200006e8 	.word	0x200006e8

0800b254 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	6039      	str	r1, [r7, #0]
 800b25e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2212      	movs	r2, #18
 800b264:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b266:	4b03      	ldr	r3, [pc, #12]	; (800b274 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b268:	4618      	mov	r0, r3
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bc80      	pop	{r7}
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20000170 	.word	0x20000170

0800b278 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	4603      	mov	r3, r0
 800b280:	6039      	str	r1, [r7, #0]
 800b282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2204      	movs	r2, #4
 800b288:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b28a:	4b03      	ldr	r3, [pc, #12]	; (800b298 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	bc80      	pop	{r7}
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	20000184 	.word	0x20000184

0800b29c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	6039      	str	r1, [r7, #0]
 800b2a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2a8:	79fb      	ldrb	r3, [r7, #7]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d105      	bne.n	800b2ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	4907      	ldr	r1, [pc, #28]	; (800b2d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2b2:	4808      	ldr	r0, [pc, #32]	; (800b2d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2b4:	f7ff fe06 	bl	800aec4 <USBD_GetString>
 800b2b8:	e004      	b.n	800b2c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	4904      	ldr	r1, [pc, #16]	; (800b2d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b2be:	4805      	ldr	r0, [pc, #20]	; (800b2d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2c0:	f7ff fe00 	bl	800aec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2c4:	4b02      	ldr	r3, [pc, #8]	; (800b2d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	2000117c 	.word	0x2000117c
 800b2d4:	0800ba70 	.word	0x0800ba70

0800b2d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	6039      	str	r1, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	4904      	ldr	r1, [pc, #16]	; (800b2f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2e8:	4804      	ldr	r0, [pc, #16]	; (800b2fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2ea:	f7ff fdeb 	bl	800aec4 <USBD_GetString>
  return USBD_StrDesc;
 800b2ee:	4b02      	ldr	r3, [pc, #8]	; (800b2f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	2000117c 	.word	0x2000117c
 800b2fc:	0800ba84 	.word	0x0800ba84

0800b300 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	6039      	str	r1, [r7, #0]
 800b30a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	221a      	movs	r2, #26
 800b310:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b312:	f000 f843 	bl	800b39c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b316:	4b02      	ldr	r3, [pc, #8]	; (800b320 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3708      	adds	r7, #8
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	20000188 	.word	0x20000188

0800b324 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	6039      	str	r1, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d105      	bne.n	800b342 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	4907      	ldr	r1, [pc, #28]	; (800b358 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b33a:	4808      	ldr	r0, [pc, #32]	; (800b35c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b33c:	f7ff fdc2 	bl	800aec4 <USBD_GetString>
 800b340:	e004      	b.n	800b34c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	4904      	ldr	r1, [pc, #16]	; (800b358 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b346:	4805      	ldr	r0, [pc, #20]	; (800b35c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b348:	f7ff fdbc 	bl	800aec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	2000117c 	.word	0x2000117c
 800b35c:	0800ba98 	.word	0x0800ba98

0800b360 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	4603      	mov	r3, r0
 800b368:	6039      	str	r1, [r7, #0]
 800b36a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b36c:	79fb      	ldrb	r3, [r7, #7]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d105      	bne.n	800b37e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	4907      	ldr	r1, [pc, #28]	; (800b394 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b376:	4808      	ldr	r0, [pc, #32]	; (800b398 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b378:	f7ff fda4 	bl	800aec4 <USBD_GetString>
 800b37c:	e004      	b.n	800b388 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	4904      	ldr	r1, [pc, #16]	; (800b394 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b382:	4805      	ldr	r0, [pc, #20]	; (800b398 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b384:	f7ff fd9e 	bl	800aec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b388:	4b02      	ldr	r3, [pc, #8]	; (800b394 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	2000117c 	.word	0x2000117c
 800b398:	0800baa4 	.word	0x0800baa4

0800b39c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3a2:	4b0f      	ldr	r3, [pc, #60]	; (800b3e0 <Get_SerialNum+0x44>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3a8:	4b0e      	ldr	r3, [pc, #56]	; (800b3e4 <Get_SerialNum+0x48>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3ae:	4b0e      	ldr	r3, [pc, #56]	; (800b3e8 <Get_SerialNum+0x4c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d009      	beq.n	800b3d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3c2:	2208      	movs	r2, #8
 800b3c4:	4909      	ldr	r1, [pc, #36]	; (800b3ec <Get_SerialNum+0x50>)
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f000 f814 	bl	800b3f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3cc:	2204      	movs	r2, #4
 800b3ce:	4908      	ldr	r1, [pc, #32]	; (800b3f0 <Get_SerialNum+0x54>)
 800b3d0:	68b8      	ldr	r0, [r7, #8]
 800b3d2:	f000 f80f 	bl	800b3f4 <IntToUnicode>
  }
}
 800b3d6:	bf00      	nop
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	1ffff7e8 	.word	0x1ffff7e8
 800b3e4:	1ffff7ec 	.word	0x1ffff7ec
 800b3e8:	1ffff7f0 	.word	0x1ffff7f0
 800b3ec:	2000018a 	.word	0x2000018a
 800b3f0:	2000019a 	.word	0x2000019a

0800b3f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	4613      	mov	r3, r2
 800b400:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b402:	2300      	movs	r3, #0
 800b404:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b406:	2300      	movs	r3, #0
 800b408:	75fb      	strb	r3, [r7, #23]
 800b40a:	e027      	b.n	800b45c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	0f1b      	lsrs	r3, r3, #28
 800b410:	2b09      	cmp	r3, #9
 800b412:	d80b      	bhi.n	800b42c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	0f1b      	lsrs	r3, r3, #28
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
 800b41c:	005b      	lsls	r3, r3, #1
 800b41e:	4619      	mov	r1, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	440b      	add	r3, r1
 800b424:	3230      	adds	r2, #48	; 0x30
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	701a      	strb	r2, [r3, #0]
 800b42a:	e00a      	b.n	800b442 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	0f1b      	lsrs	r3, r3, #28
 800b430:	b2da      	uxtb	r2, r3
 800b432:	7dfb      	ldrb	r3, [r7, #23]
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	4619      	mov	r1, r3
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	440b      	add	r3, r1
 800b43c:	3237      	adds	r2, #55	; 0x37
 800b43e:	b2d2      	uxtb	r2, r2
 800b440:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	011b      	lsls	r3, r3, #4
 800b446:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	3301      	adds	r3, #1
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	4413      	add	r3, r2
 800b452:	2200      	movs	r2, #0
 800b454:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b456:	7dfb      	ldrb	r3, [r7, #23]
 800b458:	3301      	adds	r3, #1
 800b45a:	75fb      	strb	r3, [r7, #23]
 800b45c:	7dfa      	ldrb	r2, [r7, #23]
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	429a      	cmp	r2, r3
 800b462:	d3d3      	bcc.n	800b40c <IntToUnicode+0x18>
  }
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bc80      	pop	{r7}
 800b46e:	4770      	bx	lr

0800b470 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a0d      	ldr	r2, [pc, #52]	; (800b4b4 <HAL_PCD_MspInit+0x44>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d113      	bne.n	800b4aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b482:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <HAL_PCD_MspInit+0x48>)
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	4a0c      	ldr	r2, [pc, #48]	; (800b4b8 <HAL_PCD_MspInit+0x48>)
 800b488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b48c:	61d3      	str	r3, [r2, #28]
 800b48e:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <HAL_PCD_MspInit+0x48>)
 800b490:	69db      	ldr	r3, [r3, #28]
 800b492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b49a:	2200      	movs	r2, #0
 800b49c:	2100      	movs	r1, #0
 800b49e:	2014      	movs	r0, #20
 800b4a0:	f7f8 f985 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b4a4:	2014      	movs	r0, #20
 800b4a6:	f7f8 f99e 	bl	80037e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	40005c00 	.word	0x40005c00
 800b4b8:	40021000 	.word	0x40021000

0800b4bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	f7fe fdc5 	bl	800a062 <USBD_LL_SetupStage>
}
 800b4d8:	bf00      	nop
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	440b      	add	r3, r1
 800b500:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	78fb      	ldrb	r3, [r7, #3]
 800b508:	4619      	mov	r1, r3
 800b50a:	f7fe fdf7 	bl	800a0fc <USBD_LL_DataOutStage>
}
 800b50e:	bf00      	nop
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b082      	sub	sp, #8
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	460b      	mov	r3, r1
 800b520:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b528:	78fa      	ldrb	r2, [r7, #3]
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	4613      	mov	r3, r2
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	4413      	add	r3, r2
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	440b      	add	r3, r1
 800b536:	333c      	adds	r3, #60	; 0x3c
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	78fb      	ldrb	r3, [r7, #3]
 800b53c:	4619      	mov	r1, r3
 800b53e:	f7fe fe4e 	bl	800a1de <USBD_LL_DataInStage>
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe ff5e 	bl	800a41a <USBD_LL_SOF>
}
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b56e:	2301      	movs	r3, #1
 800b570:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	2b02      	cmp	r3, #2
 800b578:	d001      	beq.n	800b57e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b57a:	f7f7 f963 	bl	8002844 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b584:	7bfa      	ldrb	r2, [r7, #15]
 800b586:	4611      	mov	r1, r2
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe ff0e 	bl	800a3aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe fec7 	bl	800a328 <USBD_LL_Reset>
}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe ff08 	bl	800a3c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d005      	beq.n	800b5cc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5c0:	4b04      	ldr	r3, [pc, #16]	; (800b5d4 <HAL_PCD_SuspendCallback+0x30>)
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	4a03      	ldr	r2, [pc, #12]	; (800b5d4 <HAL_PCD_SuspendCallback+0x30>)
 800b5c6:	f043 0306 	orr.w	r3, r3, #6
 800b5ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b5cc:	bf00      	nop
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	e000ed00 	.word	0xe000ed00

0800b5d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fe ff02 	bl	800a3f0 <USBD_LL_Resume>
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b5fc:	4a28      	ldr	r2, [pc, #160]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a26      	ldr	r2, [pc, #152]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b608:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b60c:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b60e:	4a25      	ldr	r2, [pc, #148]	; (800b6a4 <USBD_LL_Init+0xb0>)
 800b610:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b612:	4b23      	ldr	r3, [pc, #140]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b614:	2208      	movs	r2, #8
 800b616:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b618:	4b21      	ldr	r3, [pc, #132]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b61a:	2202      	movs	r2, #2
 800b61c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b61e:	4b20      	ldr	r3, [pc, #128]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b620:	2200      	movs	r2, #0
 800b622:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b624:	4b1e      	ldr	r3, [pc, #120]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b626:	2200      	movs	r2, #0
 800b628:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b62a:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b630:	481b      	ldr	r0, [pc, #108]	; (800b6a0 <USBD_LL_Init+0xac>)
 800b632:	f7f8 fd0d 	bl	8004050 <HAL_PCD_Init>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b63c:	f7f7 f902 	bl	8002844 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b646:	2318      	movs	r3, #24
 800b648:	2200      	movs	r2, #0
 800b64a:	2100      	movs	r1, #0
 800b64c:	f7fa f983 	bl	8005956 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b656:	2358      	movs	r3, #88	; 0x58
 800b658:	2200      	movs	r2, #0
 800b65a:	2180      	movs	r1, #128	; 0x80
 800b65c:	f7fa f97b 	bl	8005956 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b666:	23c0      	movs	r3, #192	; 0xc0
 800b668:	2200      	movs	r2, #0
 800b66a:	2181      	movs	r1, #129	; 0x81
 800b66c:	f7fa f973 	bl	8005956 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b676:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b67a:	2200      	movs	r2, #0
 800b67c:	2101      	movs	r1, #1
 800b67e:	f7fa f96a 	bl	8005956 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b68c:	2200      	movs	r2, #0
 800b68e:	2182      	movs	r1, #130	; 0x82
 800b690:	f7fa f961 	bl	8005956 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	2000137c 	.word	0x2000137c
 800b6a4:	40005c00 	.word	0x40005c00

0800b6a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f8 fdd1 	bl	8004266 <HAL_PCD_Start>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f94e 	bl	800b96c <USBD_Get_USB_Status>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	4608      	mov	r0, r1
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	70fb      	strb	r3, [r7, #3]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70bb      	strb	r3, [r7, #2]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b706:	78bb      	ldrb	r3, [r7, #2]
 800b708:	883a      	ldrh	r2, [r7, #0]
 800b70a:	78f9      	ldrb	r1, [r7, #3]
 800b70c:	f7f8 ff4b 	bl	80045a6 <HAL_PCD_EP_Open>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f928 	bl	800b96c <USBD_Get_USB_Status>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b720:	7bbb      	ldrb	r3, [r7, #14]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b084      	sub	sp, #16
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b744:	78fa      	ldrb	r2, [r7, #3]
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f7f8 ff92 	bl	8004672 <HAL_PCD_EP_Close>
 800b74e:	4603      	mov	r3, r0
 800b750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b752:	7bfb      	ldrb	r3, [r7, #15]
 800b754:	4618      	mov	r0, r3
 800b756:	f000 f909 	bl	800b96c <USBD_Get_USB_Status>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	460b      	mov	r3, r1
 800b772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b782:	78fa      	ldrb	r2, [r7, #3]
 800b784:	4611      	mov	r1, r2
 800b786:	4618      	mov	r0, r3
 800b788:	f7f9 f852 	bl	8004830 <HAL_PCD_EP_SetStall>
 800b78c:	4603      	mov	r3, r0
 800b78e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b790:	7bfb      	ldrb	r3, [r7, #15]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 f8ea 	bl	800b96c <USBD_Get_USB_Status>
 800b798:	4603      	mov	r3, r0
 800b79a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b79c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7c0:	78fa      	ldrb	r2, [r7, #3]
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7f9 f893 	bl	80048f0 <HAL_PCD_EP_ClrStall>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 f8cb 	bl	800b96c <USBD_Get_USB_Status>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	da0c      	bge.n	800b81a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b800:	78fb      	ldrb	r3, [r7, #3]
 800b802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b806:	68f9      	ldr	r1, [r7, #12]
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	440b      	add	r3, r1
 800b814:	3302      	adds	r3, #2
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	e00b      	b.n	800b832 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b81a:	78fb      	ldrb	r3, [r7, #3]
 800b81c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b820:	68f9      	ldr	r1, [r7, #12]
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	440b      	add	r3, r1
 800b82c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b830:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b832:	4618      	mov	r0, r3
 800b834:	3714      	adds	r7, #20
 800b836:	46bd      	mov	sp, r7
 800b838:	bc80      	pop	{r7}
 800b83a:	4770      	bx	lr

0800b83c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b856:	78fa      	ldrb	r2, [r7, #3]
 800b858:	4611      	mov	r1, r2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7f8 fe7e 	bl	800455c <HAL_PCD_SetAddress>
 800b860:	4603      	mov	r3, r0
 800b862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	4618      	mov	r0, r3
 800b868:	f000 f880 	bl	800b96c <USBD_Get_USB_Status>
 800b86c:	4603      	mov	r3, r0
 800b86e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b870:	7bbb      	ldrb	r3, [r7, #14]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b086      	sub	sp, #24
 800b87e:	af00      	add	r7, sp, #0
 800b880:	60f8      	str	r0, [r7, #12]
 800b882:	607a      	str	r2, [r7, #4]
 800b884:	461a      	mov	r2, r3
 800b886:	460b      	mov	r3, r1
 800b888:	72fb      	strb	r3, [r7, #11]
 800b88a:	4613      	mov	r3, r2
 800b88c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b89c:	893b      	ldrh	r3, [r7, #8]
 800b89e:	7af9      	ldrb	r1, [r7, #11]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	f7f8 ff82 	bl	80047aa <HAL_PCD_EP_Transmit>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 f85d 	bl	800b96c <USBD_Get_USB_Status>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	607a      	str	r2, [r7, #4]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	72fb      	strb	r3, [r7, #11]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b8e2:	893b      	ldrh	r3, [r7, #8]
 800b8e4:	7af9      	ldrb	r1, [r7, #11]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	f7f8 ff0b 	bl	8004702 <HAL_PCD_EP_Receive>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8f0:	7dfb      	ldrb	r3, [r7, #23]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 f83a 	bl	800b96c <USBD_Get_USB_Status>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b082      	sub	sp, #8
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	460b      	mov	r3, r1
 800b910:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b918:	78fa      	ldrb	r2, [r7, #3]
 800b91a:	4611      	mov	r1, r2
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7f8 ff2d 	bl	800477c <HAL_PCD_EP_GetRxCount>
 800b922:	4603      	mov	r3, r0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b934:	4b02      	ldr	r3, [pc, #8]	; (800b940 <USBD_static_malloc+0x14>)
}
 800b936:	4618      	mov	r0, r3
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bc80      	pop	{r7}
 800b93e:	4770      	bx	lr
 800b940:	20000200 	.word	0x20000200

0800b944 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]

}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	bc80      	pop	{r7}
 800b954:	4770      	bx	lr

0800b956 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b956:	b480      	push	{r7}
 800b958:	b083      	sub	sp, #12
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b962:	bf00      	nop
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	bc80      	pop	{r7}
 800b96a:	4770      	bx	lr

0800b96c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	4603      	mov	r3, r0
 800b974:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d817      	bhi.n	800b9b0 <USBD_Get_USB_Status+0x44>
 800b980:	a201      	add	r2, pc, #4	; (adr r2, 800b988 <USBD_Get_USB_Status+0x1c>)
 800b982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b986:	bf00      	nop
 800b988:	0800b999 	.word	0x0800b999
 800b98c:	0800b99f 	.word	0x0800b99f
 800b990:	0800b9a5 	.word	0x0800b9a5
 800b994:	0800b9ab 	.word	0x0800b9ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	73fb      	strb	r3, [r7, #15]
    break;
 800b99c:	e00b      	b.n	800b9b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b99e:	2302      	movs	r3, #2
 800b9a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a2:	e008      	b.n	800b9b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a8:	e005      	b.n	800b9b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9aa:	2302      	movs	r3, #2
 800b9ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ae:	e002      	b.n	800b9b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b4:	bf00      	nop
  }
  return usb_status;
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bc80      	pop	{r7}
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop

0800b9c4 <__libc_init_array>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	2600      	movs	r6, #0
 800b9c8:	4d0c      	ldr	r5, [pc, #48]	; (800b9fc <__libc_init_array+0x38>)
 800b9ca:	4c0d      	ldr	r4, [pc, #52]	; (800ba00 <__libc_init_array+0x3c>)
 800b9cc:	1b64      	subs	r4, r4, r5
 800b9ce:	10a4      	asrs	r4, r4, #2
 800b9d0:	42a6      	cmp	r6, r4
 800b9d2:	d109      	bne.n	800b9e8 <__libc_init_array+0x24>
 800b9d4:	f000 f830 	bl	800ba38 <_init>
 800b9d8:	2600      	movs	r6, #0
 800b9da:	4d0a      	ldr	r5, [pc, #40]	; (800ba04 <__libc_init_array+0x40>)
 800b9dc:	4c0a      	ldr	r4, [pc, #40]	; (800ba08 <__libc_init_array+0x44>)
 800b9de:	1b64      	subs	r4, r4, r5
 800b9e0:	10a4      	asrs	r4, r4, #2
 800b9e2:	42a6      	cmp	r6, r4
 800b9e4:	d105      	bne.n	800b9f2 <__libc_init_array+0x2e>
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ec:	4798      	blx	r3
 800b9ee:	3601      	adds	r6, #1
 800b9f0:	e7ee      	b.n	800b9d0 <__libc_init_array+0xc>
 800b9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f6:	4798      	blx	r3
 800b9f8:	3601      	adds	r6, #1
 800b9fa:	e7f2      	b.n	800b9e2 <__libc_init_array+0x1e>
 800b9fc:	0800bacc 	.word	0x0800bacc
 800ba00:	0800bacc 	.word	0x0800bacc
 800ba04:	0800bacc 	.word	0x0800bacc
 800ba08:	0800bad0 	.word	0x0800bad0

0800ba0c <memcpy>:
 800ba0c:	440a      	add	r2, r1
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba14:	d100      	bne.n	800ba18 <memcpy+0xc>
 800ba16:	4770      	bx	lr
 800ba18:	b510      	push	{r4, lr}
 800ba1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba1e:	4291      	cmp	r1, r2
 800ba20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba24:	d1f9      	bne.n	800ba1a <memcpy+0xe>
 800ba26:	bd10      	pop	{r4, pc}

0800ba28 <memset>:
 800ba28:	4603      	mov	r3, r0
 800ba2a:	4402      	add	r2, r0
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d100      	bne.n	800ba32 <memset+0xa>
 800ba30:	4770      	bx	lr
 800ba32:	f803 1b01 	strb.w	r1, [r3], #1
 800ba36:	e7f9      	b.n	800ba2c <memset+0x4>

0800ba38 <_init>:
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	bf00      	nop
 800ba3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3e:	bc08      	pop	{r3}
 800ba40:	469e      	mov	lr, r3
 800ba42:	4770      	bx	lr

0800ba44 <_fini>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	bf00      	nop
 800ba48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4a:	bc08      	pop	{r3}
 800ba4c:	469e      	mov	lr, r3
 800ba4e:	4770      	bx	lr
