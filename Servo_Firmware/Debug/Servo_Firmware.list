
Servo_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c75c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800c86c  0800c86c  0001c86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c92c  0800c92c  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c92c  0800c92c  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c92c  0800c92c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c92c  0800c92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c930  0800c930  0001c930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800c934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001684  20000180  0800cab0  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001804  0800cab0  00021804  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a7e  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c97  00000000  00000000  00039c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf8e  00000000  00000000  00041158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7c5  00000000  00000000  0005e0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b4d  00000000  00000000  0007b8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f3f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005764  00000000  00000000  0010f448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c854 	.word	0x0800c854

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	0800c854 	.word	0x0800c854

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_frsub>:
 80009fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	e002      	b.n	8000a08 <__addsf3>
 8000a02:	bf00      	nop

08000a04 <__aeabi_fsub>:
 8000a04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a08 <__addsf3>:
 8000a08:	0042      	lsls	r2, r0, #1
 8000a0a:	bf1f      	itttt	ne
 8000a0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a10:	ea92 0f03 	teqne	r2, r3
 8000a14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a1c:	d06a      	beq.n	8000af4 <__addsf3+0xec>
 8000a1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a26:	bfc1      	itttt	gt
 8000a28:	18d2      	addgt	r2, r2, r3
 8000a2a:	4041      	eorgt	r1, r0
 8000a2c:	4048      	eorgt	r0, r1
 8000a2e:	4041      	eorgt	r1, r0
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	2b19      	cmp	r3, #25
 8000a36:	bf88      	it	hi
 8000a38:	4770      	bxhi	lr
 8000a3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4249      	negne	r1, r1
 8000a5a:	ea92 0f03 	teq	r2, r3
 8000a5e:	d03f      	beq.n	8000ae0 <__addsf3+0xd8>
 8000a60:	f1a2 0201 	sub.w	r2, r2, #1
 8000a64:	fa41 fc03 	asr.w	ip, r1, r3
 8000a68:	eb10 000c 	adds.w	r0, r0, ip
 8000a6c:	f1c3 0320 	rsb	r3, r3, #32
 8000a70:	fa01 f103 	lsl.w	r1, r1, r3
 8000a74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__addsf3+0x78>
 8000a7a:	4249      	negs	r1, r1
 8000a7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a84:	d313      	bcc.n	8000aae <__addsf3+0xa6>
 8000a86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a8a:	d306      	bcc.n	8000a9a <__addsf3+0x92>
 8000a8c:	0840      	lsrs	r0, r0, #1
 8000a8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a92:	f102 0201 	add.w	r2, r2, #1
 8000a96:	2afe      	cmp	r2, #254	; 0xfe
 8000a98:	d251      	bcs.n	8000b3e <__addsf3+0x136>
 8000a9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa2:	bf08      	it	eq
 8000aa4:	f020 0001 	biceq.w	r0, r0, #1
 8000aa8:	ea40 0003 	orr.w	r0, r0, r3
 8000aac:	4770      	bx	lr
 8000aae:	0049      	lsls	r1, r1, #1
 8000ab0:	eb40 0000 	adc.w	r0, r0, r0
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000abc:	d2ed      	bcs.n	8000a9a <__addsf3+0x92>
 8000abe:	fab0 fc80 	clz	ip, r0
 8000ac2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ac6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ace:	bfaa      	itet	ge
 8000ad0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ad4:	4252      	neglt	r2, r2
 8000ad6:	4318      	orrge	r0, r3
 8000ad8:	bfbc      	itt	lt
 8000ada:	40d0      	lsrlt	r0, r2
 8000adc:	4318      	orrlt	r0, r3
 8000ade:	4770      	bx	lr
 8000ae0:	f092 0f00 	teq	r2, #0
 8000ae4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ae8:	bf06      	itte	eq
 8000aea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aee:	3201      	addeq	r2, #1
 8000af0:	3b01      	subne	r3, #1
 8000af2:	e7b5      	b.n	8000a60 <__addsf3+0x58>
 8000af4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000af8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000afc:	bf18      	it	ne
 8000afe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b02:	d021      	beq.n	8000b48 <__addsf3+0x140>
 8000b04:	ea92 0f03 	teq	r2, r3
 8000b08:	d004      	beq.n	8000b14 <__addsf3+0x10c>
 8000b0a:	f092 0f00 	teq	r2, #0
 8000b0e:	bf08      	it	eq
 8000b10:	4608      	moveq	r0, r1
 8000b12:	4770      	bx	lr
 8000b14:	ea90 0f01 	teq	r0, r1
 8000b18:	bf1c      	itt	ne
 8000b1a:	2000      	movne	r0, #0
 8000b1c:	4770      	bxne	lr
 8000b1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b22:	d104      	bne.n	8000b2e <__addsf3+0x126>
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	bf28      	it	cs
 8000b28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	4770      	bx	lr
 8000b2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b32:	bf3c      	itt	cc
 8000b34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bxcc	lr
 8000b3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b46:	4770      	bx	lr
 8000b48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b4c:	bf16      	itet	ne
 8000b4e:	4608      	movne	r0, r1
 8000b50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b54:	4601      	movne	r1, r0
 8000b56:	0242      	lsls	r2, r0, #9
 8000b58:	bf06      	itte	eq
 8000b5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b5e:	ea90 0f01 	teqeq	r0, r1
 8000b62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_ui2f>:
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e004      	b.n	8000b78 <__aeabi_i2f+0x8>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_i2f>:
 8000b70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b74:	bf48      	it	mi
 8000b76:	4240      	negmi	r0, r0
 8000b78:	ea5f 0c00 	movs.w	ip, r0
 8000b7c:	bf08      	it	eq
 8000b7e:	4770      	bxeq	lr
 8000b80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b84:	4601      	mov	r1, r0
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	e01c      	b.n	8000bc6 <__aeabi_l2f+0x2a>

08000b8c <__aeabi_ul2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e00a      	b.n	8000bb0 <__aeabi_l2f+0x14>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_l2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__aeabi_l2f+0x14>
 8000baa:	4240      	negs	r0, r0
 8000bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb0:	ea5f 0c01 	movs.w	ip, r1
 8000bb4:	bf02      	ittt	eq
 8000bb6:	4684      	moveq	ip, r0
 8000bb8:	4601      	moveq	r1, r0
 8000bba:	2000      	moveq	r0, #0
 8000bbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bca:	fabc f28c 	clz	r2, ip
 8000bce:	3a08      	subs	r2, #8
 8000bd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bd4:	db10      	blt.n	8000bf8 <__aeabi_l2f+0x5c>
 8000bd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bda:	4463      	add	r3, ip
 8000bdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000be8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f102 0220 	add.w	r2, r2, #32
 8000bfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c00:	f1c2 0220 	rsb	r2, r2, #32
 8000c04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c08:	fa21 f202 	lsr.w	r2, r1, r2
 8000c0c:	eb43 0002 	adc.w	r0, r3, r2
 8000c10:	bf08      	it	eq
 8000c12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_fmul>:
 8000c18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c20:	bf1e      	ittt	ne
 8000c22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c26:	ea92 0f0c 	teqne	r2, ip
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d06f      	beq.n	8000d10 <__aeabi_fmul+0xf8>
 8000c30:	441a      	add	r2, r3
 8000c32:	ea80 0c01 	eor.w	ip, r0, r1
 8000c36:	0240      	lsls	r0, r0, #9
 8000c38:	bf18      	it	ne
 8000c3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c3e:	d01e      	beq.n	8000c7e <__aeabi_fmul+0x66>
 8000c40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c58:	bf3e      	ittt	cc
 8000c5a:	0049      	lslcc	r1, r1, #1
 8000c5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c60:	005b      	lslcc	r3, r3, #1
 8000c62:	ea40 0001 	orr.w	r0, r0, r1
 8000c66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c6a:	2afd      	cmp	r2, #253	; 0xfd
 8000c6c:	d81d      	bhi.n	8000caa <__aeabi_fmul+0x92>
 8000c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	4770      	bx	lr
 8000c7e:	f090 0f00 	teq	r0, #0
 8000c82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c86:	bf08      	it	eq
 8000c88:	0249      	lsleq	r1, r1, #9
 8000c8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c92:	3a7f      	subs	r2, #127	; 0x7f
 8000c94:	bfc2      	ittt	gt
 8000c96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c9e:	4770      	bxgt	lr
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	dc5d      	bgt.n	8000d68 <__aeabi_fmul+0x150>
 8000cac:	f112 0f19 	cmn.w	r2, #25
 8000cb0:	bfdc      	itt	le
 8000cb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bxle	lr
 8000cb8:	f1c2 0200 	rsb	r2, r2, #0
 8000cbc:	0041      	lsls	r1, r0, #1
 8000cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000cc2:	f1c2 0220 	rsb	r2, r2, #32
 8000cc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cce:	f140 0000 	adc.w	r0, r0, #0
 8000cd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cd6:	bf08      	it	eq
 8000cd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cdc:	4770      	bx	lr
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0040      	lsleq	r0, r0, #1
 8000cea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cee:	3a01      	subeq	r2, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fmul+0xce>
 8000cf2:	ea40 000c 	orr.w	r0, r0, ip
 8000cf6:	f093 0f00 	teq	r3, #0
 8000cfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0049      	lsleq	r1, r1, #1
 8000d02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d06:	3b01      	subeq	r3, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xe6>
 8000d0a:	ea41 010c 	orr.w	r1, r1, ip
 8000d0e:	e78f      	b.n	8000c30 <__aeabi_fmul+0x18>
 8000d10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	bf18      	it	ne
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d00a      	beq.n	8000d36 <__aeabi_fmul+0x11e>
 8000d20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d24:	bf18      	it	ne
 8000d26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	d1d8      	bne.n	8000cde <__aeabi_fmul+0xc6>
 8000d2c:	ea80 0001 	eor.w	r0, r0, r1
 8000d30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	bf17      	itett	ne
 8000d3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d40:	4608      	moveq	r0, r1
 8000d42:	f091 0f00 	teqne	r1, #0
 8000d46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d4a:	d014      	beq.n	8000d76 <__aeabi_fmul+0x15e>
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fmul+0x13e>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d10f      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d56:	ea93 0f0c 	teq	r3, ip
 8000d5a:	d103      	bne.n	8000d64 <__aeabi_fmul+0x14c>
 8000d5c:	024b      	lsls	r3, r1, #9
 8000d5e:	bf18      	it	ne
 8000d60:	4608      	movne	r0, r1
 8000d62:	d108      	bne.n	8000d76 <__aeabi_fmul+0x15e>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fdiv>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d069      	beq.n	8000e6c <__aeabi_fdiv+0xec>
 8000d98:	eba2 0203 	sub.w	r2, r2, r3
 8000d9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000da0:	0249      	lsls	r1, r1, #9
 8000da2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000da6:	d037      	beq.n	8000e18 <__aeabi_fdiv+0x98>
 8000da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000db0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	428b      	cmp	r3, r1
 8000dba:	bf38      	it	cc
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	bf24      	itt	cs
 8000dca:	1a5b      	subcs	r3, r3, r1
 8000dcc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dd4:	bf24      	itt	cs
 8000dd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000de2:	bf24      	itt	cs
 8000de4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000de8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000df0:	bf24      	itt	cs
 8000df2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000df6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	bf18      	it	ne
 8000dfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e02:	d1e0      	bne.n	8000dc6 <__aeabi_fdiv+0x46>
 8000e04:	2afd      	cmp	r2, #253	; 0xfd
 8000e06:	f63f af50 	bhi.w	8000caa <__aeabi_fmul+0x92>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e20:	327f      	adds	r2, #127	; 0x7f
 8000e22:	bfc2      	ittt	gt
 8000e24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2c:	4770      	bxgt	lr
 8000e2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	3a01      	subs	r2, #1
 8000e38:	e737      	b.n	8000caa <__aeabi_fmul+0x92>
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fdiv+0xc2>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xda>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e795      	b.n	8000d98 <__aeabi_fdiv+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d108      	bne.n	8000e88 <__aeabi_fdiv+0x108>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	f47f af7d 	bne.w	8000d76 <__aeabi_fmul+0x15e>
 8000e7c:	ea93 0f0c 	teq	r3, ip
 8000e80:	f47f af70 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e776      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e88:	ea93 0f0c 	teq	r3, ip
 8000e8c:	d104      	bne.n	8000e98 <__aeabi_fdiv+0x118>
 8000e8e:	024b      	lsls	r3, r1, #9
 8000e90:	f43f af4c 	beq.w	8000d2c <__aeabi_fmul+0x114>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e76e      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000e98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e9c:	bf18      	it	ne
 8000e9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	d1ca      	bne.n	8000e3a <__aeabi_fdiv+0xba>
 8000ea4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ea8:	f47f af5c 	bne.w	8000d64 <__aeabi_fmul+0x14c>
 8000eac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000eb0:	f47f af3c 	bne.w	8000d2c <__aeabi_fmul+0x114>
 8000eb4:	e75f      	b.n	8000d76 <__aeabi_fmul+0x15e>
 8000eb6:	bf00      	nop

08000eb8 <__gesf2>:
 8000eb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ebc:	e006      	b.n	8000ecc <__cmpsf2+0x4>
 8000ebe:	bf00      	nop

08000ec0 <__lesf2>:
 8000ec0:	f04f 0c01 	mov.w	ip, #1
 8000ec4:	e002      	b.n	8000ecc <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__cmpsf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	bf18      	it	ne
 8000ede:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ee2:	d011      	beq.n	8000f08 <__cmpsf2+0x40>
 8000ee4:	b001      	add	sp, #4
 8000ee6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eea:	bf18      	it	ne
 8000eec:	ea90 0f01 	teqne	r0, r1
 8000ef0:	bf58      	it	pl
 8000ef2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ef6:	bf88      	it	hi
 8000ef8:	17c8      	asrhi	r0, r1, #31
 8000efa:	bf38      	it	cc
 8000efc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f00:	bf18      	it	ne
 8000f02:	f040 0001 	orrne.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f0c:	d102      	bne.n	8000f14 <__cmpsf2+0x4c>
 8000f0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f12:	d105      	bne.n	8000f20 <__cmpsf2+0x58>
 8000f14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f18:	d1e4      	bne.n	8000ee4 <__cmpsf2+0x1c>
 8000f1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f1e:	d0e1      	beq.n	8000ee4 <__cmpsf2+0x1c>
 8000f20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__aeabi_cfrcmple>:
 8000f28:	4684      	mov	ip, r0
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	4661      	mov	r1, ip
 8000f2e:	e7ff      	b.n	8000f30 <__aeabi_cfcmpeq>

08000f30 <__aeabi_cfcmpeq>:
 8000f30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f32:	f7ff ffc9 	bl	8000ec8 <__cmpsf2>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	bf48      	it	mi
 8000f3a:	f110 0f00 	cmnmi.w	r0, #0
 8000f3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f40 <__aeabi_fcmpeq>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff fff4 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f48:	bf0c      	ite	eq
 8000f4a:	2001      	moveq	r0, #1
 8000f4c:	2000      	movne	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmplt>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffea 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f5c:	bf34      	ite	cc
 8000f5e:	2001      	movcc	r0, #1
 8000f60:	2000      	movcs	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmple>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffe0 	bl	8000f30 <__aeabi_cfcmpeq>
 8000f70:	bf94      	ite	ls
 8000f72:	2001      	movls	r0, #1
 8000f74:	2000      	movhi	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_fcmpge>:
 8000f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f80:	f7ff ffd2 	bl	8000f28 <__aeabi_cfrcmple>
 8000f84:	bf94      	ite	ls
 8000f86:	2001      	movls	r0, #1
 8000f88:	2000      	movhi	r0, #0
 8000f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8e:	bf00      	nop

08000f90 <__aeabi_fcmpgt>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff ffc8 	bl	8000f28 <__aeabi_cfrcmple>
 8000f98:	bf34      	ite	cc
 8000f9a:	2001      	movcc	r0, #1
 8000f9c:	2000      	movcs	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_f2iz>:
 8000fa4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30f      	bcc.n	8000fce <__aeabi_f2iz+0x2a>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d90d      	bls.n	8000fd4 <__aeabi_f2iz+0x30>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	bf18      	it	ne
 8000fca:	4240      	negne	r0, r0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2iz+0x3a>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d105      	bne.n	8000fea <__aeabi_f2iz+0x46>
 8000fde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe2:	bf08      	it	eq
 8000fe4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe8:	4770      	bx	lr
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4770      	bx	lr

08000ff0 <CRC32_Get>:
#include "crc32.h"

extern CRC_HandleTypeDef hcrc;

//Returns 32bit hardware computed CRC of array
uint32_t CRC32_Get(uint32_t *data, uint32_t length_words){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	return HAL_CRC_Calculate(&hcrc, data, length_words);
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <CRC32_Get+0x20>)
 8001000:	f002 ffeb 	bl	8003fda <HAL_CRC_Calculate>
 8001004:	4603      	mov	r3, r0
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000528 	.word	0x20000528

08001014 <Flash_Read>:
#include "main.h"
#include "flash.h"

//Reads data from flash memory address with given length in bytes
void Flash_Read(uint8_t *data, uint32_t address, uint32_t length){
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001024:	e00b      	b.n	800103e <Flash_Read+0x2a>
		data[i] = *(uint8_t *)(address + i);
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	4619      	mov	r1, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	4413      	add	r3, r2
 8001034:	780a      	ldrb	r2, [r1, #0]
 8001036:	701a      	strb	r2, [r3, #0]
		i++;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
	while(i != length){
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d1ef      	bne.n	8001026 <Flash_Read+0x12>
	}
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <Flash_Write>:

//Writes data to flash memory address with given length in bytes
void Flash_Write(uint8_t *data, uint32_t address, uint32_t length){
 8001052:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = address;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
	uint32_t ErrorCode = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8001070:	f003 f856 	bl	8004120 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &ErrorCode);
 8001074:	f107 0210 	add.w	r2, r7, #16
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f003 f936 	bl	80042f0 <HAL_FLASHEx_Erase>

	uint16_t fpages = length/4;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t lbytes = length-(fpages*4);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	b29a      	uxth	r2, r3
 800108e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	b29b      	uxth	r3, r3
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t i = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 800109c:	e027      	b.n	80010ee <Flash_Write+0x9c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 800109e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	18d0      	adds	r0, r2, r3
				((uint32_t)data[i+3]<<24)|
 80010a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010a6:	3303      	adds	r3, #3
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	061a      	lsls	r2, r3, #24
				((uint32_t)data[i+2]<<16)|
 80010b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010b2:	3302      	adds	r3, #2
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	440b      	add	r3, r1
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	041b      	lsls	r3, r3, #16
				((uint32_t)data[i+3]<<24)|
 80010bc:	431a      	orrs	r2, r3
				((uint32_t)data[i+1]<<8)|
 80010be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010c0:	3301      	adds	r3, #1
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	440b      	add	r3, r1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	021b      	lsls	r3, r3, #8
				((uint32_t)data[i+2]<<16)|
 80010ca:	4313      	orrs	r3, r2
				(uint32_t)data[i]
 80010cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	440a      	add	r2, r1
 80010d2:	7812      	ldrb	r2, [r2, #0]
				((uint32_t)data[i+1]<<8)|
 80010d4:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 80010d6:	2200      	movs	r2, #0
 80010d8:	4698      	mov	r8, r3
 80010da:	4691      	mov	r9, r2
 80010dc:	4642      	mov	r2, r8
 80010de:	464b      	mov	r3, r9
 80010e0:	4601      	mov	r1, r0
 80010e2:	2002      	movs	r0, #2
 80010e4:	f002 ffac 	bl	8004040 <HAL_FLASH_Program>
		);
		i+=4;
 80010e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010ea:	3304      	adds	r3, #4
 80010ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(i != (fpages*4)){
 80010ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d1d2      	bne.n	800109e <Flash_Write+0x4c>
	}
	if(lbytes != 0){
 80010f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d03f      	beq.n	800117e <Flash_Write+0x12c>
		uint32_t wdata = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
		if(lbytes == 3){
 8001102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001104:	2b03      	cmp	r3, #3
 8001106:	d114      	bne.n	8001132 <Flash_Write+0xe0>
			wdata = ((uint32_t)data[i+2]<<24)|((uint32_t)data[i+1]<<16)|((uint32_t)data[i]<<8);
 8001108:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800110a:	3302      	adds	r3, #2
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	061a      	lsls	r2, r3, #24
 8001114:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001116:	3301      	adds	r3, #1
 8001118:	68f9      	ldr	r1, [r7, #12]
 800111a:	440b      	add	r3, r1
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	041b      	lsls	r3, r3, #16
 8001120:	431a      	orrs	r2, r3
 8001122:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	440b      	add	r3, r1
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	4313      	orrs	r3, r2
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001130:	e019      	b.n	8001166 <Flash_Write+0x114>
		}
		else if(lbytes == 2){
 8001132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001134:	2b02      	cmp	r3, #2
 8001136:	d10d      	bne.n	8001154 <Flash_Write+0x102>
			wdata = ((uint32_t)data[i+1]<<24)|((uint32_t)data[i]<<16);
 8001138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800113a:	3301      	adds	r3, #1
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	061a      	lsls	r2, r3, #24
 8001144:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	440b      	add	r3, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	041b      	lsls	r3, r3, #16
 800114e:	4313      	orrs	r3, r2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
 8001152:	e008      	b.n	8001166 <Flash_Write+0x114>
		}
		else if(lbytes == 1){
 8001154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001156:	2b01      	cmp	r3, #1
 8001158:	d105      	bne.n	8001166 <Flash_Write+0x114>
			wdata = ((uint32_t)data[i]<<24);
 800115a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	061b      	lsls	r3, r3, #24
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, wdata);
 8001166:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	18d1      	adds	r1, r2, r3
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	2200      	movs	r2, #0
 8001170:	461c      	mov	r4, r3
 8001172:	4615      	mov	r5, r2
 8001174:	4622      	mov	r2, r4
 8001176:	462b      	mov	r3, r5
 8001178:	2002      	movs	r0, #2
 800117a:	f002 ff61 	bl	8004040 <HAL_FLASH_Program>
	}

	HAL_FLASH_Lock();
 800117e:	f002 fff5 	bl	800416c <HAL_FLASH_Lock>
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800118c <LED_On>:

//Working variable, counter for turning off LED in "LED_MODE_POSITION_CHANGE" mode
static uint32_t systick;

//Function used only in this file
static void LED_On(bool on){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	if(on){
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <LED_On+0x1c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <LED_On+0x34>)
 80011a2:	f003 fae8 	bl	8004776 <HAL_GPIO_WritePin>
 80011a6:	e004      	b.n	80011b2 <LED_On+0x26>
	}else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <LED_On+0x34>)
 80011ae:	f003 fae2 	bl	8004776 <HAL_GPIO_WritePin>
	}
	led_o.on = on;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <LED_On+0x38>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	7013      	strb	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40010800 	.word	0x40010800
 80011c4:	200001a4 	.word	0x200001a4

080011c8 <LED_SysTick_Interrupt>:

//SysTick interrupt for LED, called in every millisecond, with lowest interrupt priority (highest number)
void LED_SysTick_Interrupt(){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	if(led_ctr.mode == LED_MODE_POSITION_CHANGE){
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <LED_SysTick_Interrupt+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d104      	bne.n	80011de <LED_SysTick_Interrupt+0x16>
		systick++;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <LED_SysTick_Interrupt+0x24>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <LED_SysTick_Interrupt+0x24>)
 80011dc:	6013      	str	r3, [r2, #0]
	}
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000019c 	.word	0x2000019c
 80011ec:	200001a8 	.word	0x200001a8

080011f0 <LED_Update>:

//Should be called from app main loop function to make LED work
void LED_Update(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	switch(led_ctr.mode){
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <LED_Update+0x80>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d837      	bhi.n	800126c <LED_Update+0x7c>
 80011fc:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <LED_Update+0x14>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001215 	.word	0x08001215
 8001208:	0800121d 	.word	0x0800121d
 800120c:	08001225 	.word	0x08001225
 8001210:	0800123d 	.word	0x0800123d
		case LED_MODE_OFF:
			LED_On(false);
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ffb9 	bl	800118c <LED_On>
		break;
 800121a:	e027      	b.n	800126c <LED_Update+0x7c>
		case LED_MODE_POWER:
			LED_On(true);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff ffb5 	bl	800118c <LED_On>
		break;
 8001222:	e023      	b.n	800126c <LED_Update+0x7c>
		case LED_MODE_PID:
			if(led_i.pid_running){
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <LED_Update+0x84>)
 8001226:	785b      	ldrb	r3, [r3, #1]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <LED_Update+0x44>
				LED_On(true);
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff ffad 	bl	800118c <LED_On>
			}else{
				LED_On(false);
			}
		break;
 8001232:	e01b      	b.n	800126c <LED_Update+0x7c>
				LED_On(false);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ffa9 	bl	800118c <LED_On>
		break;
 800123a:	e017      	b.n	800126c <LED_Update+0x7c>
		case LED_MODE_POSITION_CHANGE:
			if(led_i.position_changed){
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <LED_Update+0x84>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <LED_Update+0x66>
				led_i.position_changed = false;
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <LED_Update+0x84>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
				systick = 0;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <LED_Update+0x88>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
				LED_On(true);
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ff9b 	bl	800118c <LED_On>
			}
			if(systick >= LED_POSITION_CHANGE_MODE_TIMEOUT_MS){
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <LED_Update+0x88>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b13      	cmp	r3, #19
 800125c:	d905      	bls.n	800126a <LED_Update+0x7a>
				LED_On(false);
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff94 	bl	800118c <LED_On>
				systick = 0;
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LED_Update+0x88>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
			}
		break;
 800126a:	bf00      	nop
	}
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000019c 	.word	0x2000019c
 8001274:	200001a0 	.word	0x200001a0
 8001278:	200001a8 	.word	0x200001a8

0800127c <Motor_SysTick_Interrupt>:

//Working variable, counter for motor turn off in test mode
static uint32_t systick;

//SysTick interrupt for motor, called in every millisecond, with lowest interrupt priority (highest number)
void Motor_SysTick_Interrupt(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	if(!motor_i.pid_running){
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <Motor_SysTick_Interrupt+0x3c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d012      	beq.n	80012b4 <Motor_SysTick_Interrupt+0x38>
		if(motor_o.running){
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <Motor_SysTick_Interrupt+0x40>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00e      	beq.n	80012b4 <Motor_SysTick_Interrupt+0x38>
			systick++;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <Motor_SysTick_Interrupt+0x44>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <Motor_SysTick_Interrupt+0x44>)
 800129e:	6013      	str	r3, [r2, #0]
			if(systick == MOTOR_TEST_TIMEOUT_MS){
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <Motor_SysTick_Interrupt+0x44>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b64      	cmp	r3, #100	; 0x64
 80012a6:	d105      	bne.n	80012b4 <Motor_SysTick_Interrupt+0x38>
				Motor_Set(0);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 f80b 	bl	80012c4 <Motor_Set>
				systick = 0;
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <Motor_SysTick_Interrupt+0x44>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200001b0 	.word	0x200001b0
 80012bc:	200001b4 	.word	0x200001b4
 80012c0:	200001b8 	.word	0x200001b8

080012c4 <Motor_Set>:

//Sets motor rotation direction and power, value from -1000 to 1000. Zero means off
void Motor_Set(int16_t strength){
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	if(motor_ctr.invert == MOTOR_INVERT){
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <Motor_Set+0xc0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <Motor_Set+0x1a>
		strength = strength - (2 * strength);
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	425b      	negs	r3, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	80fb      	strh	r3, [r7, #6]
	}

	systick = 0;
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <Motor_Set+0xc4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
	if(strength == 0){
 80012e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10d      	bne.n	8001308 <Motor_Set+0x44>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <Motor_Set+0xc8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <Motor_Set+0xc8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = false;
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <Motor_Set+0xcc>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
	}else if(strength > 0){
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000 - (strength / (1000 / motor_ctr.max_power)));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
		motor_o.running = true;
	}
}
 8001306:	e038      	b.n	800137a <Motor_Set+0xb6>
	}else if(strength < 0){
 8001308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da18      	bge.n	8001342 <Motor_Set+0x7e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <Motor_Set+0xc8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000 + (strength / (1000 / motor_ctr.max_power)));
 800131a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <Motor_Set+0xc0>)
 8001320:	885b      	ldrh	r3, [r3, #2]
 8001322:	4619      	mov	r1, r3
 8001324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001328:	fb93 f3f1 	sdiv	r3, r3, r1
 800132c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001330:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <Motor_Set+0xc8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = true;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <Motor_Set+0xcc>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
}
 8001340:	e01b      	b.n	800137a <Motor_Set+0xb6>
	}else if(strength > 0){
 8001342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dd17      	ble.n	800137a <Motor_Set+0xb6>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000 - (strength / (1000 / motor_ctr.max_power)));
 800134a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <Motor_Set+0xc0>)
 8001350:	885b      	ldrh	r3, [r3, #2]
 8001352:	4619      	mov	r1, r3
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	fb93 f3f1 	sdiv	r3, r3, r1
 800135c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001360:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <Motor_Set+0xc8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <Motor_Set+0xc8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001372:	639a      	str	r2, [r3, #56]	; 0x38
		motor_o.running = true;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <Motor_Set+0xcc>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200001ac 	.word	0x200001ac
 8001388:	200001b8 	.word	0x200001b8
 800138c:	20000530 	.word	0x20000530
 8001390:	200001b4 	.word	0x200001b4

08001394 <Motor_Get>:

//Returns current motor rotation direction and power, value from -1000 to 1000
int16_t Motor_Get(){
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1) != 1000){
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <Motor_Get+0x78>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a2:	d013      	beq.n	80013cc <Motor_Get+0x38>
		return (1000 - (int16_t)__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1)) * (1000 / motor_ctr.max_power);
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <Motor_Get+0x78>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <Motor_Get+0x7c>)
 80013b4:	8852      	ldrh	r2, [r2, #2]
 80013b6:	4611      	mov	r1, r2
 80013b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013bc:	fb92 f2f1 	sdiv	r2, r2, r1
 80013c0:	b292      	uxth	r2, r2
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	e01a      	b.n	8001402 <Motor_Get+0x6e>
	}else if(TIM2 -> CCR2 != 1000){
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d6:	d013      	beq.n	8001400 <Motor_Get+0x6c>
		return ((int16_t)__HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_2) - 1000) * (1000 / motor_ctr.max_power);
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <Motor_Get+0x78>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013de:	b21b      	sxth	r3, r3
 80013e0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <Motor_Get+0x7c>)
 80013e8:	8852      	ldrh	r2, [r2, #2]
 80013ea:	4611      	mov	r1, r2
 80013ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f0:	fb92 f2f1 	sdiv	r2, r2, r1
 80013f4:	b292      	uxth	r2, r2
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	e000      	b.n	8001402 <Motor_Get+0x6e>
	}
	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000530 	.word	0x20000530
 8001410:	200001ac 	.word	0x200001ac

08001414 <Motor_Init>:

//Init function, should be called once at start
void Motor_Init(){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001418:	2100      	movs	r1, #0
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <Motor_Init+0x18>)
 800141c:	f005 fd44 	bl	8006ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001420:	2104      	movs	r1, #4
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <Motor_Init+0x18>)
 8001424:	f005 fd40 	bl	8006ea8 <HAL_TIM_PWM_Start>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000530 	.word	0x20000530

08001430 <PID_Timer_Stop>:
//Working variables
static float last_input;
static float output_sum;

//Functions used only in this file
static void PID_Timer_Stop(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <PID_Timer_Stop+0x10>)
 8001436:	f005 fcb1 	bl	8006d9c <HAL_TIM_Base_Stop_IT>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000578 	.word	0x20000578

08001444 <PID_Timer_Restart>:
static void PID_Timer_Restart(){
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <PID_Timer_Restart+0x1c>)
 800144a:	f005 fca7 	bl	8006d9c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <PID_Timer_Restart+0x1c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim3);
 8001456:	4802      	ldr	r0, [pc, #8]	; (8001460 <PID_Timer_Restart+0x1c>)
 8001458:	f005 fc4e 	bl	8006cf8 <HAL_TIM_Base_Start_IT>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000578 	.word	0x20000578

08001464 <PID_Compute>:
static void PID_Compute(){
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
	float input = pid_i.input;
 800146a:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <PID_Compute+0x1b0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]
	float error = pid_i.setpoint - input;
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <PID_Compute+0x1b0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	68f9      	ldr	r1, [r7, #12]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fac4 	bl	8000a04 <__aeabi_fsub>
 800147c:	4603      	mov	r3, r0
 800147e:	60bb      	str	r3, [r7, #8]
	float input_d = (input - last_input);
 8001480:	4b65      	ldr	r3, [pc, #404]	; (8001618 <PID_Compute+0x1b4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff fabc 	bl	8000a04 <__aeabi_fsub>
 800148c:	4603      	mov	r3, r0
 800148e:	607b      	str	r3, [r7, #4]
	float output = 0;
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]

	//Select parameters for range
	float kp, ki, kd;
	if(error >= pid_ctr.split_1){
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <PID_Compute+0x1b8>)
 8001498:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fb68 	bl	8000b70 <__aeabi_i2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	68b8      	ldr	r0, [r7, #8]
 80014a6:	f7ff fd69 	bl	8000f7c <__aeabi_fcmpge>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d009      	beq.n	80014c4 <PID_Compute+0x60>
		kp = pid_ctr.kp_1;
 80014b0:	4b5a      	ldr	r3, [pc, #360]	; (800161c <PID_Compute+0x1b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_1;
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <PID_Compute+0x1b8>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_1;
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <PID_Compute+0x1b8>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e02c      	b.n	800151e <PID_Compute+0xba>
	}else if((error < pid_ctr.split_1) && (error >= pid_ctr.split_2)){
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <PID_Compute+0x1b8>)
 80014c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fb51 	bl	8000b70 <__aeabi_i2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4619      	mov	r1, r3
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff fd3e 	bl	8000f54 <__aeabi_fcmplt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d016      	beq.n	800150c <PID_Compute+0xa8>
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <PID_Compute+0x1b8>)
 80014e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fb44 	bl	8000b70 <__aeabi_i2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4619      	mov	r1, r3
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f7ff fd45 	bl	8000f7c <__aeabi_fcmpge>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d009      	beq.n	800150c <PID_Compute+0xa8>
		kp = pid_ctr.kp_2;
 80014f8:	4b48      	ldr	r3, [pc, #288]	; (800161c <PID_Compute+0x1b8>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_2;
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <PID_Compute+0x1b8>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_2;
 8001504:	4b45      	ldr	r3, [pc, #276]	; (800161c <PID_Compute+0x1b8>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	e008      	b.n	800151e <PID_Compute+0xba>
	}else{
		kp = pid_ctr.kp_3;
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <PID_Compute+0x1b8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	61bb      	str	r3, [r7, #24]
		ki = pid_ctr.ki_3;
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <PID_Compute+0x1b8>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	617b      	str	r3, [r7, #20]
		kd = pid_ctr.kd_3;
 8001518:	4b40      	ldr	r3, [pc, #256]	; (800161c <PID_Compute+0x1b8>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	613b      	str	r3, [r7, #16]
	}

	//Calculate output
	output_sum += ki * error;
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	6978      	ldr	r0, [r7, #20]
 8001522:	f7ff fb79 	bl	8000c18 <__aeabi_fmul>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <PID_Compute+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f7ff fa69 	bl	8000a08 <__addsf3>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <PID_Compute+0x1bc>)
 800153c:	601a      	str	r2, [r3, #0]
	if(pid_ctr.on_e_m == PID_ON_M){
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <PID_Compute+0x1b8>)
 8001540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00e      	beq.n	8001566 <PID_Compute+0x102>
		output_sum -= kp * input_d;
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <PID_Compute+0x1bc>)
 800154a:	681c      	ldr	r4, [r3, #0]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	69b8      	ldr	r0, [r7, #24]
 8001550:	f7ff fb62 	bl	8000c18 <__aeabi_fmul>
 8001554:	4603      	mov	r3, r0
 8001556:	4619      	mov	r1, r3
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff fa53 	bl	8000a04 <__aeabi_fsub>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <PID_Compute+0x1bc>)
 8001564:	601a      	str	r2, [r3, #0]
	}

	if(output_sum > 1000.0f){
 8001566:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <PID_Compute+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	492e      	ldr	r1, [pc, #184]	; (8001624 <PID_Compute+0x1c0>)
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fd0f 	bl	8000f90 <__aeabi_fcmpgt>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <PID_Compute+0x11c>
		output_sum = 1000.0f;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <PID_Compute+0x1bc>)
 800157a:	4a2a      	ldr	r2, [pc, #168]	; (8001624 <PID_Compute+0x1c0>)
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e00b      	b.n	8001598 <PID_Compute+0x134>
	}else if(output_sum < -1000.0f){
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <PID_Compute+0x1bc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4928      	ldr	r1, [pc, #160]	; (8001628 <PID_Compute+0x1c4>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fce4 	bl	8000f54 <__aeabi_fcmplt>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <PID_Compute+0x134>
		output_sum = -1000.0f;
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <PID_Compute+0x1bc>)
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <PID_Compute+0x1c4>)
 8001596:	601a      	str	r2, [r3, #0]
	}

	if(pid_ctr.on_e_m == PID_ON_E){
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <PID_Compute+0x1b8>)
 800159a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800159e:	f083 0301 	eor.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <PID_Compute+0x150>
		output = kp * error;
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	69b8      	ldr	r0, [r7, #24]
 80015ac:	f7ff fb34 	bl	8000c18 <__aeabi_fmul>
 80015b0:	4603      	mov	r3, r0
 80015b2:	61fb      	str	r3, [r7, #28]
	}

	output += output_sum - kd * input_d;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <PID_Compute+0x1bc>)
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6938      	ldr	r0, [r7, #16]
 80015bc:	f7ff fb2c 	bl	8000c18 <__aeabi_fmul>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff fa1d 	bl	8000a04 <__aeabi_fsub>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4619      	mov	r1, r3
 80015ce:	69f8      	ldr	r0, [r7, #28]
 80015d0:	f7ff fa1a 	bl	8000a08 <__addsf3>
 80015d4:	4603      	mov	r3, r0
 80015d6:	61fb      	str	r3, [r7, #28]
	if(output > 1000.0f){
 80015d8:	4912      	ldr	r1, [pc, #72]	; (8001624 <PID_Compute+0x1c0>)
 80015da:	69f8      	ldr	r0, [r7, #28]
 80015dc:	f7ff fcd8 	bl	8000f90 <__aeabi_fcmpgt>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <PID_Compute+0x188>
		output = 1000.0f;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <PID_Compute+0x1c0>)
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e008      	b.n	80015fe <PID_Compute+0x19a>
	}
	else if(output < -1000.0f){
 80015ec:	490e      	ldr	r1, [pc, #56]	; (8001628 <PID_Compute+0x1c4>)
 80015ee:	69f8      	ldr	r0, [r7, #28]
 80015f0:	f7ff fcb0 	bl	8000f54 <__aeabi_fcmplt>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <PID_Compute+0x19a>
		output = -1000.0f;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <PID_Compute+0x1c4>)
 80015fc:	61fb      	str	r3, [r7, #28]
	}

	//Store
	pid_o.output = output;
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <PID_Compute+0x1c8>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	6053      	str	r3, [r2, #4]
	last_input = input;
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <PID_Compute+0x1b4>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6013      	str	r3, [r2, #0]
}
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	200001e8 	.word	0x200001e8
 8001618:	200001f8 	.word	0x200001f8
 800161c:	200001bc 	.word	0x200001bc
 8001620:	200001fc 	.word	0x200001fc
 8001624:	447a0000 	.word	0x447a0000
 8001628:	c47a0000 	.word	0xc47a0000
 800162c:	200001f0 	.word	0x200001f0

08001630 <PID_Timer_Interrupt>:

//Timer interrupt
void PID_Timer_Interrupt(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	PID_Compute();
 8001634:	f7ff ff16 	bl	8001464 <PID_Compute>
	PID_Ready(pid_o.output);
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <PID_Timer_Interrupt+0x18>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fea7 	bl	8002390 <PID_Ready>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001f0 	.word	0x200001f0

0800164c <PID_Set_Sampling_Time>:
//Returns sampling time in milliseconds
uint16_t PID_Get_Sampling_Time(){
	return (__HAL_TIM_GET_AUTORELOAD(&htim3) / 100);
}
//Sets PID sampling time
void PID_Set_Sampling_Time(uint16_t ms){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim3, ms * 100);
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	2264      	movs	r2, #100	; 0x64
 800165a:	fb03 f202 	mul.w	r2, r3, r2
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <PID_Set_Sampling_Time+0x30>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	2264      	movs	r2, #100	; 0x64
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	461a      	mov	r2, r3
 800166e:	4b03      	ldr	r3, [pc, #12]	; (800167c <PID_Set_Sampling_Time+0x30>)
 8001670:	60da      	str	r2, [r3, #12]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000578 	.word	0x20000578

08001680 <PID_Start>:
//Starts PID. Before calling this, correct sampling time should be set
void PID_Start(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	if(!pid_o.running){
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <PID_Start+0x30>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00c      	beq.n	80016ac <PID_Start+0x2c>
		last_input = pid_i.input;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <PID_Start+0x34>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <PID_Start+0x38>)
 8001698:	6013      	str	r3, [r2, #0]
		output_sum = 0;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <PID_Start+0x3c>)
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
		PID_Timer_Restart();
 80016a2:	f7ff fecf 	bl	8001444 <PID_Timer_Restart>
		pid_o.running = true;
 80016a6:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <PID_Start+0x30>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
	}
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001f0 	.word	0x200001f0
 80016b4:	200001e8 	.word	0x200001e8
 80016b8:	200001f8 	.word	0x200001f8
 80016bc:	200001fc 	.word	0x200001fc

080016c0 <PID_Stop>:
//Stops PID
void PID_Stop(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	if(pid_o.running){
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <PID_Stop+0x24>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <PID_Stop+0x1e>
		PID_Timer_Stop();
 80016cc:	f7ff feb0 	bl	8001430 <PID_Timer_Stop>
		PID_Ready(0);
 80016d0:	f04f 0000 	mov.w	r0, #0
 80016d4:	f000 fe5c 	bl	8002390 <PID_Ready>
		pid_o.running = false;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <PID_Stop+0x24>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
	}
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001f0 	.word	0x200001f0

080016e8 <Potentiometer_ADC_Interrupt>:
static uint32_t adctmp; //Buffer variable for collecting ADC measurements sum
static uint16_t adccnt; //Counter for how many measurements were performed
static bool init_cplt; //Set to "true" once ADC initialization is complete and measurement is working

//ADC Interrupt
void Potentiometer_ADC_Interrupt(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	adctmp += HAL_ADC_GetValue(&hadc1);
 80016ec:	4816      	ldr	r0, [pc, #88]	; (8001748 <Potentiometer_ADC_Interrupt+0x60>)
 80016ee:	f002 f829 	bl	8003744 <HAL_ADC_GetValue>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <Potentiometer_ADC_Interrupt+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <Potentiometer_ADC_Interrupt+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]
	adccnt++;
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <Potentiometer_ADC_Interrupt+0x68>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <Potentiometer_ADC_Interrupt+0x68>)
 8001708:	801a      	strh	r2, [r3, #0]
	if(adccnt == POTENTIOMETER_SAMPLE_CNT){
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <Potentiometer_ADC_Interrupt+0x68>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d115      	bne.n	800173e <Potentiometer_ADC_Interrupt+0x56>
		potentiometer_o.position = (float)adctmp / (float)POTENTIOMETER_SAMPLE_CNT;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <Potentiometer_ADC_Interrupt+0x64>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fa26 	bl	8000b68 <__aeabi_ui2f>
 800171c:	4603      	mov	r3, r0
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <Potentiometer_ADC_Interrupt+0x6c>)
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fb2d 	bl	8000d80 <__aeabi_fdiv>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <Potentiometer_ADC_Interrupt+0x70>)
 800172c:	601a      	str	r2, [r3, #0]
		Potentiometer_Ready();
 800172e:	f000 fe3f 	bl	80023b0 <Potentiometer_Ready>
		adccnt = 0;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <Potentiometer_ADC_Interrupt+0x68>)
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]
		adctmp = 0;
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <Potentiometer_ADC_Interrupt+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	}
	init_cplt = true;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <Potentiometer_ADC_Interrupt+0x74>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200004f8 	.word	0x200004f8
 800174c:	20000204 	.word	0x20000204
 8001750:	20000208 	.word	0x20000208
 8001754:	42c80000 	.word	0x42c80000
 8001758:	20000200 	.word	0x20000200
 800175c:	2000020a 	.word	0x2000020a

08001760 <Potentiometer_Init>:

//Runs measurement, called once at start
void Potentiometer_Init(){
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001764:	bf00      	nop
 8001766:	480a      	ldr	r0, [pc, #40]	; (8001790 <Potentiometer_Init+0x30>)
 8001768:	f002 fa58 	bl	8003c1c <HAL_ADCEx_Calibration_Start>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <Potentiometer_Init+0x6>
	HAL_ADC_Start_IT(&hadc1);
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <Potentiometer_Init+0x30>)
 8001774:	f001 ff30 	bl	80035d8 <HAL_ADC_Start_IT>
	while(!init_cplt);
 8001778:	bf00      	nop
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <Potentiometer_Init+0x34>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	f083 0301 	eor.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f8      	bne.n	800177a <Potentiometer_Init+0x1a>
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200004f8 	.word	0x200004f8
 8001794:	2000020a 	.word	0x2000020a

08001798 <Signal_Timer_Stop>:
static uint32_t timeout_passed_ms = 0; //Counter for measuring time since getting first edge of signal
static bool signal_reading;
static bool signal_present;

//Functions used only in this file
static void Signal_Timer_Stop(){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <Signal_Timer_Stop+0x10>)
 800179e:	f005 fafd 	bl	8006d9c <HAL_TIM_Base_Stop_IT>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200005c0 	.word	0x200005c0

080017ac <Signal_Timer_Restart>:
static void Signal_Timer_Restart(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <Signal_Timer_Restart+0x1c>)
 80017b2:	f005 faf3 	bl	8006d9c <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <Signal_Timer_Restart+0x1c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim4);
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <Signal_Timer_Restart+0x1c>)
 80017c0:	f005 fa9a 	bl	8006cf8 <HAL_TIM_Base_Start_IT>
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200005c0 	.word	0x200005c0

080017cc <Signal_Read_Timer>:
static uint32_t Signal_Read_Timer(){
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim4);
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <Signal_Read_Timer+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200005c0 	.word	0x200005c0

080017e4 <Signal_Read_Pin>:
static uint8_t Signal_Read_Pin(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
	uint8_t level;
	uint8_t i;

	while(retry != SIGNAL_DEBOUNCE_RETRIES){
 80017ee:	e024      	b.n	800183a <Signal_Read_Pin+0x56>
		retry++;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	3301      	adds	r3, #1
 80017f4:	71fb      	strb	r3, [r7, #7]
		level = HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 80017f6:	2102      	movs	r1, #2
 80017f8:	4815      	ldr	r0, [pc, #84]	; (8001850 <Signal_Read_Pin+0x6c>)
 80017fa:	f002 ffa5 	bl	8004748 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	71bb      	strb	r3, [r7, #6]
		i = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	717b      	strb	r3, [r7, #5]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 8001806:	e010      	b.n	800182a <Signal_Read_Pin+0x46>
			if(HAL_GPIO_ReadPin(SIGNAL_GPIO_Port, SIGNAL_Pin) != level){
 8001808:	2102      	movs	r1, #2
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <Signal_Read_Pin+0x6c>)
 800180c:	f002 ff9c 	bl	8004748 <HAL_GPIO_ReadPin>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	79bb      	ldrb	r3, [r7, #6]
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <Signal_Read_Pin+0x40>
				if(retry == SIGNAL_DEBOUNCE_RETRIES){
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d108      	bne.n	8001832 <Signal_Read_Pin+0x4e>
					//If this is a last retry and still can't determine signal level correctly, just return low
					return SIGNAL_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	e010      	b.n	8001846 <Signal_Read_Pin+0x62>
				}
				break;
			}
			i++;
 8001824:	797b      	ldrb	r3, [r7, #5]
 8001826:	3301      	adds	r3, #1
 8001828:	717b      	strb	r3, [r7, #5]
		while(i != SIGNAL_DEBOUNCE_SAMPLES){
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d1eb      	bne.n	8001808 <Signal_Read_Pin+0x24>
 8001830:	e000      	b.n	8001834 <Signal_Read_Pin+0x50>
				break;
 8001832:	bf00      	nop
		}
		if(i == SIGNAL_DEBOUNCE_SAMPLES){
 8001834:	797b      	ldrb	r3, [r7, #5]
 8001836:	2b05      	cmp	r3, #5
 8001838:	d003      	beq.n	8001842 <Signal_Read_Pin+0x5e>
	while(retry != SIGNAL_DEBOUNCE_RETRIES){
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d1d7      	bne.n	80017f0 <Signal_Read_Pin+0xc>
 8001840:	e000      	b.n	8001844 <Signal_Read_Pin+0x60>
			break;
 8001842:	bf00      	nop
		}
	}
	return level;
 8001844:	79bb      	ldrb	r3, [r7, #6]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010c00 	.word	0x40010c00

08001854 <Signal_SysTick_Interrupt>:

//SysTick interrupt, used for detecting signal timeout
void Signal_SysTick_Interrupt(){
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	if(signal_reading || signal_present){
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <Signal_SysTick_Interrupt+0x3c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d103      	bne.n	8001868 <Signal_SysTick_Interrupt+0x14>
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <Signal_SysTick_Interrupt+0x40>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d010      	beq.n	800188a <Signal_SysTick_Interrupt+0x36>
		if(timeout_passed_ms >= signal_ctr.timeout_ms){
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <Signal_SysTick_Interrupt+0x44>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <Signal_SysTick_Interrupt+0x48>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d805      	bhi.n	8001880 <Signal_SysTick_Interrupt+0x2c>
			signal_present = false;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <Signal_SysTick_Interrupt+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
			Signal_Gone();
 800187a:	f000 fde7 	bl	800244c <Signal_Gone>
		}else{
			timeout_passed_ms++;
		}
	}
}
 800187e:	e004      	b.n	800188a <Signal_SysTick_Interrupt+0x36>
			timeout_passed_ms++;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <Signal_SysTick_Interrupt+0x48>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <Signal_SysTick_Interrupt+0x48>)
 8001888:	6013      	str	r3, [r2, #0]
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000214 	.word	0x20000214
 8001894:	20000215 	.word	0x20000215
 8001898:	2000020c 	.word	0x2000020c
 800189c:	20000210 	.word	0x20000210

080018a0 <Signal_Timer_Interrupt>:
void Signal_Timer_Interrupt(){
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	signal_reading = false;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <Signal_Timer_Interrupt+0x14>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000214 	.word	0x20000214

080018b8 <Signal_Pin_Interrupt>:
//Signal pin interrupt
void Signal_Pin_Interrupt(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	if(Signal_Read_Pin() == SIGNAL_HIGH){
 80018be:	f7ff ff91 	bl	80017e4 <Signal_Read_Pin>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d108      	bne.n	80018da <Signal_Pin_Interrupt+0x22>
		//Start measuring signal length
		Signal_Timer_Restart();
 80018c8:	f7ff ff70 	bl	80017ac <Signal_Timer_Restart>
		timeout_passed_ms = 0;
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <Signal_Pin_Interrupt+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
		signal_reading = true;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <Signal_Pin_Interrupt+0x68>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
		Signal_Timer_Stop();
		signal_reading = false;
		signal_present = true;
		Signal_Received(length_ms);
	}
}
 80018d8:	e01c      	b.n	8001914 <Signal_Pin_Interrupt+0x5c>
	}else if(signal_reading){
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <Signal_Pin_Interrupt+0x68>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d018      	beq.n	8001914 <Signal_Pin_Interrupt+0x5c>
		float length_ms  = (float)((uint32_t)Signal_Read_Timer() + (uint32_t)1) / 24000.0f;
 80018e2:	f7ff ff73 	bl	80017cc <Signal_Read_Timer>
 80018e6:	4603      	mov	r3, r0
 80018e8:	3301      	adds	r3, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f93c 	bl	8000b68 <__aeabi_ui2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	490c      	ldr	r1, [pc, #48]	; (8001924 <Signal_Pin_Interrupt+0x6c>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa43 	bl	8000d80 <__aeabi_fdiv>
 80018fa:	4603      	mov	r3, r0
 80018fc:	607b      	str	r3, [r7, #4]
		Signal_Timer_Stop();
 80018fe:	f7ff ff4b 	bl	8001798 <Signal_Timer_Stop>
		signal_reading = false;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <Signal_Pin_Interrupt+0x68>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
		signal_present = true;
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <Signal_Pin_Interrupt+0x70>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
		Signal_Received(length_ms);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fdc6 	bl	80024a0 <Signal_Received>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000210 	.word	0x20000210
 8001920:	20000214 	.word	0x20000214
 8001924:	46bb8000 	.word	0x46bb8000
 8001928:	20000215 	.word	0x20000215

0800192c <_memcpy>:
//Received status and configuration data pointers from host
usb_config_t usb_rx_config;
usb_rx_status_t usb_rx_status;

//Function used only in this file, simple data copy loop for unaligned memory access
static void _memcpy(uint32_t dst_addr, uint32_t src_addr, uint32_t length){
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
	while(i != length){
 800193c:	e00b      	b.n	8001956 <_memcpy+0x2a>
		*(uint8_t *)(dst_addr + i) = *(uint8_t *)(src_addr + i);
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	4413      	add	r3, r2
 8001944:	4619      	mov	r1, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4413      	add	r3, r2
 800194c:	780a      	ldrb	r2, [r1, #0]
 800194e:	701a      	strb	r2, [r3, #0]
		i++;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
	while(i != length){
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	d1ef      	bne.n	800193e <_memcpy+0x12>
	}
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
	...

0800196c <USB_Packet_Received>:

//Called from USB packet received interrupt
void USB_Packet_Received(uint8_t *data, uint32_t length){
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
		each time "*data" will contain 64 or less bytes, "length" will indicate how many bytes
		can be read from "*data".
	*/

	//Ignore any packet if previous packet request is still pending or size could not be correct
	if((usb_o.usb_rq != USB_RQ_NONE) || (length % sizeof(uint32_t))){
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <USB_Packet_Received+0xf0>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 81c3 	bne.w	8001d06 <USB_Packet_Received+0x39a>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 81bd 	bne.w	8001d06 <USB_Packet_Received+0x39a>
		return;
	}

	//Variables for CRCs
	uint32_t stored_crc = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
	uint32_t actual_crc = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
	
	//Calculate expecting configuration request packet length without CRC padding symbols
	uint32_t cmd_rx_config_rq_length = 2 + sizeof(uint8_t) + sizeof(uint32_t);
 8001994:	2307      	movs	r3, #7
 8001996:	617b      	str	r3, [r7, #20]
	//Include CRC padding symbols in length
	while(cmd_rx_config_rq_length % sizeof(uint32_t)) cmd_rx_config_rq_length++;
 8001998:	e002      	b.n	80019a0 <USB_Packet_Received+0x34>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f7      	bne.n	800199a <USB_Packet_Received+0x2e>

	//Configuration request from host, length is less than 64
	if(
		(data[1] == USB_CMD_CONFIG) &&
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3301      	adds	r3, #1
 80019ae:	781b      	ldrb	r3, [r3, #0]
	if(
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d129      	bne.n	8001a08 <USB_Packet_Received+0x9c>
		((uint32_t)data[0] == cmd_rx_config_rq_length) &&
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
		(data[1] == USB_CMD_CONFIG) &&
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4293      	cmp	r3, r2
 80019be:	d123      	bne.n	8001a08 <USB_Packet_Received+0x9c>
		((uint32_t)data[0] == cmd_rx_config_rq_length) &&
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d11f      	bne.n	8001a08 <USB_Packet_Received+0x9c>
		(length == cmd_rx_config_rq_length)
	){
		_memcpy((uint32_t)&stored_crc, (uint32_t)&data[length - sizeof(uint32_t)], sizeof(uint32_t));
 80019c8:	f107 0008 	add.w	r0, r7, #8
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3b04      	subs	r3, #4
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	2204      	movs	r2, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff ffa8 	bl	800192c <_memcpy>
		actual_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)data, (length / sizeof(uint32_t)) - 1);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3b01      	subs	r3, #1
 80019e2:	461a      	mov	r2, r3
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	481e      	ldr	r0, [pc, #120]	; (8001a60 <USB_Packet_Received+0xf4>)
 80019e8:	f002 faf7 	bl	8003fda <HAL_CRC_Calculate>
 80019ec:	60f8      	str	r0, [r7, #12]
		if(stored_crc == actual_crc){
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	f040 8189 	bne.w	8001d0a <USB_Packet_Received+0x39e>
			//Parse received request
			usb_o.set_revert_flash_rq = data[2];
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	789a      	ldrb	r2, [r3, #2]
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <USB_Packet_Received+0xf0>)
 80019fe:	709a      	strb	r2, [r3, #2]
			usb_o.usb_rq = USB_RQ_CONF;
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <USB_Packet_Received+0xf0>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	705a      	strb	r2, [r3, #1]
		}
		return;
 8001a06:	e180      	b.n	8001d0a <USB_Packet_Received+0x39e>
	}

	//Calculate expecting status request packet length without CRC padding symbols
	//Length and command bytes
	uint32_t cmd_rx_status_rq_length = 2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
	//Append "usb_config_t" length
	cmd_rx_status_rq_length +=
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	333e      	adds	r3, #62	; 0x3e
 8001a10:	613b      	str	r3, [r7, #16]
		sizeof(float) +
		sizeof(uint16_t) +
		sizeof(uint16_t) +
		sizeof(uint8_t);
	//Append "usb_rx_status_t" length
	cmd_rx_status_rq_length +=
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3306      	adds	r3, #6
 8001a16:	613b      	str	r3, [r7, #16]
		sizeof(float) +
		sizeof(bool) +
		sizeof(uint8_t);
	//Append CRC length
	cmd_rx_status_rq_length +=
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	613b      	str	r3, [r7, #16]
		sizeof(uint32_t);
	
	//Include CRC padding symbols in length
	while(cmd_rx_status_rq_length % sizeof(uint32_t)) cmd_rx_status_rq_length++;
 8001a1e:	e002      	b.n	8001a26 <USB_Packet_Received+0xba>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	3301      	adds	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f7      	bne.n	8001a20 <USB_Packet_Received+0xb4>

	//Status request from host, length is more than 64, so here we store first 64 bytes
	if(
		(data[1] == USB_CMD_STATUS) &&
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3301      	adds	r3, #1
 8001a34:	781b      	ldrb	r3, [r3, #0]
	if(
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d116      	bne.n	8001a68 <USB_Packet_Received+0xfc>
		((uint32_t)data[0] == cmd_rx_status_rq_length) &&
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
		(data[1] == USB_CMD_STATUS) &&
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d110      	bne.n	8001a68 <USB_Packet_Received+0xfc>
		((uint32_t)data[0] == cmd_rx_status_rq_length) &&
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b40      	cmp	r3, #64	; 0x40
 8001a4a:	d10d      	bne.n	8001a68 <USB_Packet_Received+0xfc>
		(length == 64)
	){
		_memcpy((uint32_t)&rx_buffer[0], (uint32_t)&data[0], 64);
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <USB_Packet_Received+0xf8>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2240      	movs	r2, #64	; 0x40
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff ff6a 	bl	800192c <_memcpy>
		return;
 8001a58:	e158      	b.n	8001d0c <USB_Packet_Received+0x3a0>
 8001a5a:	bf00      	nop
 8001a5c:	20000418 	.word	0x20000418
 8001a60:	20000528 	.word	0x20000528
 8001a64:	20000318 	.word	0x20000318
	}

	//Status request from host, here we store remaining bytes and parse results
	if(
		(rx_buffer[0] == cmd_rx_status_rq_length) &&
 8001a68:	4baa      	ldr	r3, [pc, #680]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
	if(
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4293      	cmp	r3, r2
 8001a72:	f040 8141 	bne.w	8001cf8 <USB_Packet_Received+0x38c>
		(rx_buffer[1] == USB_CMD_STATUS) &&
 8001a76:	4ba7      	ldr	r3, [pc, #668]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001a78:	785b      	ldrb	r3, [r3, #1]
		(rx_buffer[0] == cmd_rx_status_rq_length) &&
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	f040 813c 	bne.w	8001cf8 <USB_Packet_Received+0x38c>
		(64 + length == cmd_rx_status_rq_length)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	3340      	adds	r3, #64	; 0x40
		(rx_buffer[1] == USB_CMD_STATUS) &&
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	f040 8136 	bne.w	8001cf8 <USB_Packet_Received+0x38c>
	){
		//Copy remaining data
		_memcpy((uint32_t)&rx_buffer[64], (uint32_t)&data[0], length);
 8001a8c:	48a2      	ldr	r0, [pc, #648]	; (8001d18 <USB_Packet_Received+0x3ac>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff ff4a 	bl	800192c <_memcpy>
		//Check CRC
		_memcpy((uint32_t)&stored_crc, (uint32_t)&rx_buffer[cmd_rx_status_rq_length - sizeof(uint32_t)], sizeof(uint32_t));
 8001a98:	f107 0008 	add.w	r0, r7, #8
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	4a9c      	ldr	r2, [pc, #624]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff ff40 	bl	800192c <_memcpy>
		actual_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)rx_buffer, (cmd_rx_status_rq_length / sizeof(uint32_t)) - 1);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4997      	ldr	r1, [pc, #604]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001ab6:	4899      	ldr	r0, [pc, #612]	; (8001d1c <USB_Packet_Received+0x3b0>)
 8001ab8:	f002 fa8f 	bl	8003fda <HAL_CRC_Calculate>
 8001abc:	60f8      	str	r0, [r7, #12]
		if(stored_crc == actual_crc){
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	f040 8118 	bne.w	8001cf8 <USB_Packet_Received+0x38c>
			//We don't copy size and command bytes here
			length = 2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	603b      	str	r3, [r7, #0]

			//Copy config to global struct variables
			_memcpy((uint32_t)&usb_rx_config.potentiometer_min, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001acc:	4894      	ldr	r0, [pc, #592]	; (8001d20 <USB_Packet_Received+0x3b4>)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4a90      	ldr	r2, [pc, #576]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001ad2:	4413      	add	r3, r2
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff ff28 	bl	800192c <_memcpy>
			length += sizeof(uint16_t);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.potentiometer_max, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001ae2:	4890      	ldr	r0, [pc, #576]	; (8001d24 <USB_Packet_Received+0x3b8>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4a8b      	ldr	r2, [pc, #556]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001ae8:	4413      	add	r3, r2
 8001aea:	2202      	movs	r2, #2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff ff1d 	bl	800192c <_memcpy>
			length += sizeof(uint16_t);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3302      	adds	r3, #2
 8001af6:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.motor_max_power, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001af8:	488b      	ldr	r0, [pc, #556]	; (8001d28 <USB_Packet_Received+0x3bc>)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	4a85      	ldr	r2, [pc, #532]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001afe:	4413      	add	r3, r2
 8001b00:	2201      	movs	r2, #1
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff ff12 	bl	800192c <_memcpy>
			length += sizeof(uint8_t);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.motor_invert, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001b0e:	4887      	ldr	r0, [pc, #540]	; (8001d2c <USB_Packet_Received+0x3c0>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4a80      	ldr	r2, [pc, #512]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001b14:	4413      	add	r3, r2
 8001b16:	2201      	movs	r2, #1
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff ff07 	bl	800192c <_memcpy>
			length += sizeof(bool);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_ignore, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001b24:	4882      	ldr	r0, [pc, #520]	; (8001d30 <USB_Packet_Received+0x3c4>)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	4a7a      	ldr	r2, [pc, #488]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff fefc 	bl	800192c <_memcpy>
			length += sizeof(bool);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_min, (uint32_t)&rx_buffer[length], sizeof(float));
 8001b3a:	487e      	ldr	r0, [pc, #504]	; (8001d34 <USB_Packet_Received+0x3c8>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4a75      	ldr	r2, [pc, #468]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001b40:	4413      	add	r3, r2
 8001b42:	2204      	movs	r2, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7ff fef1 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_max, (uint32_t)&rx_buffer[length], sizeof(float));
 8001b50:	4879      	ldr	r0, [pc, #484]	; (8001d38 <USB_Packet_Received+0x3cc>)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	4a6f      	ldr	r2, [pc, #444]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001b56:	4413      	add	r3, r2
 8001b58:	2204      	movs	r2, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7ff fee6 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3304      	adds	r3, #4
 8001b64:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.signal_timeout, (uint32_t)&rx_buffer[length], sizeof(uint32_t));
 8001b66:	4875      	ldr	r0, [pc, #468]	; (8001d3c <USB_Packet_Received+0x3d0>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4a6a      	ldr	r2, [pc, #424]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff fedb 	bl	800192c <_memcpy>
			length += sizeof(uint32_t);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.led_mode, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001b7c:	4870      	ldr	r0, [pc, #448]	; (8001d40 <USB_Packet_Received+0x3d4>)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4a64      	ldr	r2, [pc, #400]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001b82:	4413      	add	r3, r2
 8001b84:	2201      	movs	r2, #1
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7ff fed0 	bl	800192c <_memcpy>
			length += sizeof(uint8_t);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_on_e_m, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001b92:	486c      	ldr	r0, [pc, #432]	; (8001d44 <USB_Packet_Received+0x3d8>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4a5f      	ldr	r2, [pc, #380]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001b98:	4413      	add	r3, r2
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff fec5 	bl	800192c <_memcpy>
			length += sizeof(bool);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001ba8:	4867      	ldr	r0, [pc, #412]	; (8001d48 <USB_Packet_Received+0x3dc>)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4a59      	ldr	r2, [pc, #356]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001bae:	4413      	add	r3, r2
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7ff feba 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bbe:	4863      	ldr	r0, [pc, #396]	; (8001d4c <USB_Packet_Received+0x3e0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4a54      	ldr	r2, [pc, #336]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7ff feaf 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_1, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bd4:	485e      	ldr	r0, [pc, #376]	; (8001d50 <USB_Packet_Received+0x3e4>)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4a4e      	ldr	r2, [pc, #312]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	2204      	movs	r2, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff fea4 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3304      	adds	r3, #4
 8001be8:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001bea:	485a      	ldr	r0, [pc, #360]	; (8001d54 <USB_Packet_Received+0x3e8>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7ff fe99 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c00:	4855      	ldr	r0, [pc, #340]	; (8001d58 <USB_Packet_Received+0x3ec>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	4a43      	ldr	r2, [pc, #268]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001c06:	4413      	add	r3, r2
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7ff fe8e 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	3304      	adds	r3, #4
 8001c14:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_2, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c16:	4851      	ldr	r0, [pc, #324]	; (8001d5c <USB_Packet_Received+0x3f0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4a3e      	ldr	r2, [pc, #248]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001c1c:	4413      	add	r3, r2
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7ff fe83 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kp_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c2c:	484c      	ldr	r0, [pc, #304]	; (8001d60 <USB_Packet_Received+0x3f4>)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4a38      	ldr	r2, [pc, #224]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001c32:	4413      	add	r3, r2
 8001c34:	2204      	movs	r2, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7ff fe78 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_ki_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c42:	4848      	ldr	r0, [pc, #288]	; (8001d64 <USB_Packet_Received+0x3f8>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4a33      	ldr	r2, [pc, #204]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7ff fe6d 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3304      	adds	r3, #4
 8001c56:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_kd_3, (uint32_t)&rx_buffer[length], sizeof(float));
 8001c58:	4843      	ldr	r0, [pc, #268]	; (8001d68 <USB_Packet_Received+0x3fc>)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	4a2d      	ldr	r2, [pc, #180]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	2204      	movs	r2, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7ff fe62 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_split_steps_1, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001c6e:	483f      	ldr	r0, [pc, #252]	; (8001d6c <USB_Packet_Received+0x400>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4a28      	ldr	r2, [pc, #160]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001c74:	4413      	add	r3, r2
 8001c76:	2202      	movs	r2, #2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7ff fe57 	bl	800192c <_memcpy>
			length += sizeof(uint16_t);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	3302      	adds	r3, #2
 8001c82:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_split_steps_2, (uint32_t)&rx_buffer[length], sizeof(uint16_t));
 8001c84:	483a      	ldr	r0, [pc, #232]	; (8001d70 <USB_Packet_Received+0x404>)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001c8a:	4413      	add	r3, r2
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7ff fe4c 	bl	800192c <_memcpy>
			length += sizeof(uint16_t);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	3302      	adds	r3, #2
 8001c98:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_config.pid_sampling_ms, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001c9a:	4836      	ldr	r0, [pc, #216]	; (8001d74 <USB_Packet_Received+0x408>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7ff fe41 	bl	800192c <_memcpy>
			length += sizeof(uint8_t);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	603b      	str	r3, [r7, #0]

			//Copy status
			_memcpy((uint32_t)&usb_rx_status.pid_setpoint, (uint32_t)&rx_buffer[length], sizeof(float));
 8001cb0:	4831      	ldr	r0, [pc, #196]	; (8001d78 <USB_Packet_Received+0x40c>)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001cb6:	4413      	add	r3, r2
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7ff fe36 	bl	800192c <_memcpy>
			length += sizeof(float);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_status.usb_rq_stat_phold, (uint32_t)&rx_buffer[length], sizeof(bool));
 8001cc6:	482d      	ldr	r0, [pc, #180]	; (8001d7c <USB_Packet_Received+0x410>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001ccc:	4413      	add	r3, r2
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7ff fe2b 	bl	800192c <_memcpy>
			length += sizeof(bool);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	603b      	str	r3, [r7, #0]
			_memcpy((uint32_t)&usb_rx_status.usb_rq_stat_motor, (uint32_t)&rx_buffer[length], sizeof(uint8_t));
 8001cdc:	4828      	ldr	r0, [pc, #160]	; (8001d80 <USB_Packet_Received+0x414>)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7ff fe20 	bl	800192c <_memcpy>
			length += sizeof(uint8_t);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	603b      	str	r3, [r7, #0]

			//Set status request flag
			usb_o.usb_rq = USB_RQ_STAT;
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <USB_Packet_Received+0x418>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	705a      	strb	r2, [r3, #1]
		}
	}

	//Clear length and command bytes in buffer
	rx_buffer[0] = 0x00;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
	rx_buffer[1] = 0xff;
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <USB_Packet_Received+0x3a8>)
 8001d00:	22ff      	movs	r2, #255	; 0xff
 8001d02:	705a      	strb	r2, [r3, #1]
 8001d04:	e002      	b.n	8001d0c <USB_Packet_Received+0x3a0>
		return;
 8001d06:	bf00      	nop
 8001d08:	e000      	b.n	8001d0c <USB_Packet_Received+0x3a0>
		return;
 8001d0a:	bf00      	nop
}
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000318 	.word	0x20000318
 8001d18:	20000358 	.word	0x20000358
 8001d1c:	20000528 	.word	0x20000528
 8001d20:	2000041c 	.word	0x2000041c
 8001d24:	2000041e 	.word	0x2000041e
 8001d28:	20000420 	.word	0x20000420
 8001d2c:	20000421 	.word	0x20000421
 8001d30:	20000422 	.word	0x20000422
 8001d34:	20000424 	.word	0x20000424
 8001d38:	20000428 	.word	0x20000428
 8001d3c:	2000042c 	.word	0x2000042c
 8001d40:	20000430 	.word	0x20000430
 8001d44:	20000431 	.word	0x20000431
 8001d48:	20000434 	.word	0x20000434
 8001d4c:	20000438 	.word	0x20000438
 8001d50:	2000043c 	.word	0x2000043c
 8001d54:	20000440 	.word	0x20000440
 8001d58:	20000444 	.word	0x20000444
 8001d5c:	20000448 	.word	0x20000448
 8001d60:	2000044c 	.word	0x2000044c
 8001d64:	20000450 	.word	0x20000450
 8001d68:	20000454 	.word	0x20000454
 8001d6c:	20000458 	.word	0x20000458
 8001d70:	2000045a 	.word	0x2000045a
 8001d74:	2000045c 	.word	0x2000045c
 8001d78:	20000460 	.word	0x20000460
 8001d7c:	20000464 	.word	0x20000464
 8001d80:	20000465 	.word	0x20000465
 8001d84:	20000418 	.word	0x20000418

08001d88 <USB_Send_Status>:

//Sends status, clears pending request flag
void USB_Send_Status(usb_tx_status_t *status){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	//Keep track of written data
	uint8_t length = 0; //Total length should not be more than 255 bytes
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]

	//First byte of tx array contains total data length, we write it last
	length++;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	3301      	adds	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
	
	//Write command byte
	tx_buffer[length] = USB_CMD_STATUS;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	4a39      	ldr	r2, [pc, #228]	; (8001e84 <USB_Send_Status+0xfc>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	54d1      	strb	r1, [r2, r3]
	length++;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	3301      	adds	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]

	//Write data
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->pid_running, sizeof(bool));
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4a36      	ldr	r2, [pc, #216]	; (8001e84 <USB_Send_Status+0xfc>)
 8001dac:	4413      	add	r3, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7ff fdb9 	bl	800192c <_memcpy>
	length += sizeof(bool);
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->pid_setpoint, sizeof(float));
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	4a30      	ldr	r2, [pc, #192]	; (8001e84 <USB_Send_Status+0xfc>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	2204      	movs	r2, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f7ff fdac 	bl	800192c <_memcpy>
	length += sizeof(float);
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->potentiometer_position, sizeof(float));
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <USB_Send_Status+0xfc>)
 8001dde:	4413      	add	r3, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3308      	adds	r3, #8
 8001de6:	2204      	movs	r2, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7ff fd9f 	bl	800192c <_memcpy>
	length += sizeof(float);
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3304      	adds	r3, #4
 8001df2:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&status->motor_power, sizeof(int16_t));
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <USB_Send_Status+0xfc>)
 8001df8:	4413      	add	r3, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	330c      	adds	r3, #12
 8001e00:	2202      	movs	r2, #2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7ff fd92 	bl	800192c <_memcpy>
	length += sizeof(int16_t);
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	73fb      	strb	r3, [r7, #15]

	//Write CRC padding bytes
	while(length % sizeof(uint32_t)){
 8001e0e:	e006      	b.n	8001e1e <USB_Send_Status+0x96>
		tx_buffer[length] = USB_CRC_PADDING_SYMBOL;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <USB_Send_Status+0xfc>)
 8001e14:	2100      	movs	r1, #0
 8001e16:	54d1      	strb	r1, [r2, r3]
		length++;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
	while(length % sizeof(uint32_t)){
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f2      	bne.n	8001e10 <USB_Send_Status+0x88>
	}

	//Set length at start now
	tx_buffer[0] = length + sizeof(uint32_t);
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <USB_Send_Status+0xfc>)
 8001e32:	701a      	strb	r2, [r3, #0]

	//Write CRC
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&tx_buffer, (length / sizeof(uint32_t)));
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4911      	ldr	r1, [pc, #68]	; (8001e84 <USB_Send_Status+0xfc>)
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <USB_Send_Status+0x100>)
 8001e40:	f002 f8cb 	bl	8003fda <HAL_CRC_Calculate>
 8001e44:	4603      	mov	r3, r0
 8001e46:	60bb      	str	r3, [r7, #8]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&crc, sizeof(uint32_t));
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <USB_Send_Status+0xfc>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	2204      	movs	r2, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7ff fd68 	bl	800192c <_memcpy>
	length += sizeof(uint32_t);
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	73fb      	strb	r3, [r7, #15]
	
	//Send
	CDC_Transmit_FS((uint8_t *)&tx_buffer, length);
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4619      	mov	r1, r3
 8001e68:	4806      	ldr	r0, [pc, #24]	; (8001e84 <USB_Send_Status+0xfc>)
 8001e6a:	f00a f8db 	bl	800c024 <CDC_Transmit_FS>

	//Clear flags
	usb_o.set_revert_flash_rq = USB_SETTINGS_KEEP;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <USB_Send_Status+0x104>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	709a      	strb	r2, [r3, #2]
	usb_o.usb_rq = USB_RQ_NONE;
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <USB_Send_Status+0x104>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	705a      	strb	r2, [r3, #1]
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000218 	.word	0x20000218
 8001e88:	20000528 	.word	0x20000528
 8001e8c:	20000418 	.word	0x20000418

08001e90 <USB_Send_Config>:
//Sends config, clears pending request flag
void USB_Send_Config(usb_config_t *config){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	//Keep track of written data
	uint8_t length = 0; //Total length should not be more than 255 bytes
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]

	//First byte of tx array contains total data length, we write it last
	length++;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	73fb      	strb	r3, [r7, #15]
	
	//Write command byte
	tx_buffer[length] = USB_CMD_CONFIG;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	4aae      	ldr	r2, [pc, #696]	; (8002160 <USB_Send_Config+0x2d0>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	54d1      	strb	r1, [r2, r3]
	length++;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	3301      	adds	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]

	//Write data
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->potentiometer_min, sizeof(uint16_t));
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	4aab      	ldr	r2, [pc, #684]	; (8002160 <USB_Send_Config+0x2d0>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7ff fd35 	bl	800192c <_memcpy>
	length += sizeof(uint16_t);
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->potentiometer_max, sizeof(uint16_t));
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	4aa5      	ldr	r2, [pc, #660]	; (8002160 <USB_Send_Config+0x2d0>)
 8001ecc:	4413      	add	r3, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7ff fd28 	bl	800192c <_memcpy>
	length += sizeof(uint16_t);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->motor_max_power, sizeof(uint8_t));
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	4a9e      	ldr	r2, [pc, #632]	; (8002160 <USB_Send_Config+0x2d0>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7ff fd1b 	bl	800192c <_memcpy>
	length += sizeof(uint8_t);
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->motor_invert, sizeof(bool));
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	4a98      	ldr	r2, [pc, #608]	; (8002160 <USB_Send_Config+0x2d0>)
 8001f00:	4413      	add	r3, r2
 8001f02:	4618      	mov	r0, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3305      	adds	r3, #5
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7ff fd0e 	bl	800192c <_memcpy>
	length += sizeof(bool);
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	3301      	adds	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_ignore, sizeof(bool));
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	4a91      	ldr	r2, [pc, #580]	; (8002160 <USB_Send_Config+0x2d0>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3306      	adds	r3, #6
 8001f22:	2201      	movs	r2, #1
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7ff fd01 	bl	800192c <_memcpy>
	length += sizeof(bool);
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_min, sizeof(float));
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	4a8b      	ldr	r2, [pc, #556]	; (8002160 <USB_Send_Config+0x2d0>)
 8001f34:	4413      	add	r3, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3308      	adds	r3, #8
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7ff fcf4 	bl	800192c <_memcpy>
	length += sizeof(float);
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	3304      	adds	r3, #4
 8001f48:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_max, sizeof(float));
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	4a84      	ldr	r2, [pc, #528]	; (8002160 <USB_Send_Config+0x2d0>)
 8001f4e:	4413      	add	r3, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	330c      	adds	r3, #12
 8001f56:	2204      	movs	r2, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7ff fce7 	bl	800192c <_memcpy>
	length += sizeof(float);
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	3304      	adds	r3, #4
 8001f62:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->signal_timeout, sizeof(uint32_t));
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	4a7e      	ldr	r2, [pc, #504]	; (8002160 <USB_Send_Config+0x2d0>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3310      	adds	r3, #16
 8001f70:	2204      	movs	r2, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	f7ff fcda 	bl	800192c <_memcpy>
	length += sizeof(uint32_t);
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->led_mode, sizeof(uint8_t));
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	4a77      	ldr	r2, [pc, #476]	; (8002160 <USB_Send_Config+0x2d0>)
 8001f82:	4413      	add	r3, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3314      	adds	r3, #20
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7ff fccd 	bl	800192c <_memcpy>
	length += sizeof(uint8_t);
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	3301      	adds	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_on_e_m, sizeof(bool));
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	4a71      	ldr	r2, [pc, #452]	; (8002160 <USB_Send_Config+0x2d0>)
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3315      	adds	r3, #21
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7ff fcc0 	bl	800192c <_memcpy>
	length += sizeof(bool);
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_1, sizeof(float));
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	; (8002160 <USB_Send_Config+0x2d0>)
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3318      	adds	r3, #24
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7ff fcb3 	bl	800192c <_memcpy>
	length += sizeof(float);
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_1, sizeof(float));
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	4a64      	ldr	r2, [pc, #400]	; (8002160 <USB_Send_Config+0x2d0>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	331c      	adds	r3, #28
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7ff fca6 	bl	800192c <_memcpy>
	length += sizeof(float);
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_1, sizeof(float));
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <USB_Send_Config+0x2d0>)
 8001fea:	4413      	add	r3, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3320      	adds	r3, #32
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7ff fc99 	bl	800192c <_memcpy>
	length += sizeof(float);
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_2, sizeof(float));
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	4a57      	ldr	r2, [pc, #348]	; (8002160 <USB_Send_Config+0x2d0>)
 8002004:	4413      	add	r3, r2
 8002006:	4618      	mov	r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3324      	adds	r3, #36	; 0x24
 800200c:	2204      	movs	r2, #4
 800200e:	4619      	mov	r1, r3
 8002010:	f7ff fc8c 	bl	800192c <_memcpy>
	length += sizeof(float);
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	3304      	adds	r3, #4
 8002018:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_2, sizeof(float));
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	4a50      	ldr	r2, [pc, #320]	; (8002160 <USB_Send_Config+0x2d0>)
 800201e:	4413      	add	r3, r2
 8002020:	4618      	mov	r0, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3328      	adds	r3, #40	; 0x28
 8002026:	2204      	movs	r2, #4
 8002028:	4619      	mov	r1, r3
 800202a:	f7ff fc7f 	bl	800192c <_memcpy>
	length += sizeof(float);
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	3304      	adds	r3, #4
 8002032:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_2, sizeof(float));
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <USB_Send_Config+0x2d0>)
 8002038:	4413      	add	r3, r2
 800203a:	4618      	mov	r0, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	332c      	adds	r3, #44	; 0x2c
 8002040:	2204      	movs	r2, #4
 8002042:	4619      	mov	r1, r3
 8002044:	f7ff fc72 	bl	800192c <_memcpy>
	length += sizeof(float);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	3304      	adds	r3, #4
 800204c:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kp_3, sizeof(float));
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	4a43      	ldr	r2, [pc, #268]	; (8002160 <USB_Send_Config+0x2d0>)
 8002052:	4413      	add	r3, r2
 8002054:	4618      	mov	r0, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3330      	adds	r3, #48	; 0x30
 800205a:	2204      	movs	r2, #4
 800205c:	4619      	mov	r1, r3
 800205e:	f7ff fc65 	bl	800192c <_memcpy>
	length += sizeof(float);
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3304      	adds	r3, #4
 8002066:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_ki_3, sizeof(float));
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <USB_Send_Config+0x2d0>)
 800206c:	4413      	add	r3, r2
 800206e:	4618      	mov	r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3334      	adds	r3, #52	; 0x34
 8002074:	2204      	movs	r2, #4
 8002076:	4619      	mov	r1, r3
 8002078:	f7ff fc58 	bl	800192c <_memcpy>
	length += sizeof(float);
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	3304      	adds	r3, #4
 8002080:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_kd_3, sizeof(float));
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	4a36      	ldr	r2, [pc, #216]	; (8002160 <USB_Send_Config+0x2d0>)
 8002086:	4413      	add	r3, r2
 8002088:	4618      	mov	r0, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3338      	adds	r3, #56	; 0x38
 800208e:	2204      	movs	r2, #4
 8002090:	4619      	mov	r1, r3
 8002092:	f7ff fc4b 	bl	800192c <_memcpy>
	length += sizeof(float);
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	3304      	adds	r3, #4
 800209a:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_split_steps_1, sizeof(uint16_t));
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4a30      	ldr	r2, [pc, #192]	; (8002160 <USB_Send_Config+0x2d0>)
 80020a0:	4413      	add	r3, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	333c      	adds	r3, #60	; 0x3c
 80020a8:	2202      	movs	r2, #2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7ff fc3e 	bl	800192c <_memcpy>
	length += sizeof(uint16_t);
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3302      	adds	r3, #2
 80020b4:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_split_steps_2, sizeof(uint16_t));
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	4a29      	ldr	r2, [pc, #164]	; (8002160 <USB_Send_Config+0x2d0>)
 80020ba:	4413      	add	r3, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	333e      	adds	r3, #62	; 0x3e
 80020c2:	2202      	movs	r2, #2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7ff fc31 	bl	800192c <_memcpy>
	length += sizeof(uint16_t);
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	3302      	adds	r3, #2
 80020ce:	73fb      	strb	r3, [r7, #15]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&config->pid_sampling_ms, sizeof(uint8_t));
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	4a23      	ldr	r2, [pc, #140]	; (8002160 <USB_Send_Config+0x2d0>)
 80020d4:	4413      	add	r3, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3340      	adds	r3, #64	; 0x40
 80020dc:	2201      	movs	r2, #1
 80020de:	4619      	mov	r1, r3
 80020e0:	f7ff fc24 	bl	800192c <_memcpy>
	length += sizeof(uint8_t);
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	3301      	adds	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]

	//Write CRC padding bytes
	while(length % sizeof(uint32_t)){
 80020ea:	e006      	b.n	80020fa <USB_Send_Config+0x26a>
		tx_buffer[length] = USB_CRC_PADDING_SYMBOL;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <USB_Send_Config+0x2d0>)
 80020f0:	2100      	movs	r1, #0
 80020f2:	54d1      	strb	r1, [r2, r3]
		length++;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	3301      	adds	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
	while(length % sizeof(uint32_t)){
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f2      	bne.n	80020ec <USB_Send_Config+0x25c>
	}

	//Set length at start now
	tx_buffer[0] = length + sizeof(uint32_t);
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3304      	adds	r3, #4
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <USB_Send_Config+0x2d0>)
 800210e:	701a      	strb	r2, [r3, #0]

	//Write CRC
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)&tx_buffer, (length / sizeof(uint32_t)));
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	4911      	ldr	r1, [pc, #68]	; (8002160 <USB_Send_Config+0x2d0>)
 800211a:	4812      	ldr	r0, [pc, #72]	; (8002164 <USB_Send_Config+0x2d4>)
 800211c:	f001 ff5d 	bl	8003fda <HAL_CRC_Calculate>
 8002120:	4603      	mov	r3, r0
 8002122:	60bb      	str	r3, [r7, #8]
	_memcpy((uint32_t)&tx_buffer[length], (uint32_t)&crc, sizeof(uint32_t));
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <USB_Send_Config+0x2d0>)
 8002128:	4413      	add	r3, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f107 0308 	add.w	r3, r7, #8
 8002130:	2204      	movs	r2, #4
 8002132:	4619      	mov	r1, r3
 8002134:	f7ff fbfa 	bl	800192c <_memcpy>
	length += sizeof(uint32_t);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	3304      	adds	r3, #4
 800213c:	73fb      	strb	r3, [r7, #15]

	//Send
	CDC_Transmit_FS((uint8_t *)&tx_buffer, length);
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	4806      	ldr	r0, [pc, #24]	; (8002160 <USB_Send_Config+0x2d0>)
 8002146:	f009 ff6d 	bl	800c024 <CDC_Transmit_FS>

	//Clear flags
	usb_o.set_revert_flash_rq = USB_SETTINGS_KEEP;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <USB_Send_Config+0x2d8>)
 800214c:	2200      	movs	r2, #0
 800214e:	709a      	strb	r2, [r3, #2]
	usb_o.usb_rq = USB_RQ_NONE;
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <USB_Send_Config+0x2d8>)
 8002152:	2200      	movs	r2, #0
 8002154:	705a      	strb	r2, [r3, #1]
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000218 	.word	0x20000218
 8002164:	20000528 	.word	0x20000528
 8002168:	20000418 	.word	0x20000418

0800216c <USB_Det>:
//Checks if USB is connected and updates "usb_o.usb_present" variable
void USB_Det(){
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
	usb_o.usb_present = (hUsbDeviceFS.dev_state == USBD_STATE_ADDRESSED) || (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED);
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <USB_Det+0x30>)
 8002172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002176:	2b02      	cmp	r3, #2
 8002178:	d004      	beq.n	8002184 <USB_Det+0x18>
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <USB_Det+0x30>)
 800217c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8002180:	2b03      	cmp	r3, #3
 8002182:	d101      	bne.n	8002188 <USB_Det+0x1c>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <USB_Det+0x1e>
 8002188:	2300      	movs	r3, #0
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <USB_Det+0x34>)
 8002192:	701a      	strb	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	20000634 	.word	0x20000634
 80021a0:	20000418 	.word	0x20000418

080021a4 <HAL_ADC_ConvCpltCallback>:
#include "Drivers/signal.h"
#include "Drivers/motor.h"
#include "Drivers/led.h"

//ADC Conversation complete interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_ADC_ConvCpltCallback+0x20>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConvCpltCallback+0x16>
        Potentiometer_ADC_Interrupt();
 80021b6:	f7ff fa97 	bl	80016e8 <Potentiometer_ADC_Interrupt>
    }
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40012400 	.word	0x40012400

080021c8 <HAL_TIM_PeriodElapsedCallback>:

//Timer period elapsed interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d102      	bne.n	80021e0 <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_Timer_Interrupt();
 80021da:	f7ff fa29 	bl	8001630 <PID_Timer_Interrupt>
	}
	else if(htim->Instance == TIM4){
		Signal_Timer_Interrupt();
	}
}
 80021de:	e006      	b.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x26>
	else if(htim->Instance == TIM4){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x26>
		Signal_Timer_Interrupt();
 80021ea:	f7ff fb59 	bl	80018a0 <Signal_Timer_Interrupt>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40000400 	.word	0x40000400
 80021fc:	40000800 	.word	0x40000800

08002200 <HAL_GPIO_EXTI_Callback>:

//GPIO interrupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SIGNAL_Pin){
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d101      	bne.n	8002214 <HAL_GPIO_EXTI_Callback+0x14>
		Signal_Pin_Interrupt();
 8002210:	f7ff fb52 	bl	80018b8 <Signal_Pin_Interrupt>
	}
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <Interrupts_SysTick>:

//Interrupt function called in every millisecond by system timer
void Interrupts_SysTick(){
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	Signal_SysTick_Interrupt();
 8002220:	f7ff fb18 	bl	8001854 <Signal_SysTick_Interrupt>
	Motor_SysTick_Interrupt();
 8002224:	f7ff f82a 	bl	800127c <Motor_SysTick_Interrupt>
	LED_SysTick_Interrupt();
 8002228:	f7fe ffce 	bl	80011c8 <LED_SysTick_Interrupt>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}

08002230 <App_Init>:
#include "System/Drivers/usb.h"
#include "app.h"
#include "settings.h"

//Runs once at start
void App_Init(){
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	//Read configuration from flash into "settings_data" global struct
	Settings_Read();
 8002234:	f000 fa30 	bl	8002698 <Settings_Read>
	//Apply configuration to functions
	Settings_Apply();
 8002238:	f000 fc08 	bl	8002a4c <Settings_Apply>

	//Start motor PWM
	Motor_Init();
 800223c:	f7ff f8ea 	bl	8001414 <Motor_Init>
	//Start potentiometer measurements
	Potentiometer_Init();
 8002240:	f7ff fa8e 	bl	8001760 <Potentiometer_Init>
}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}

08002248 <App_Loop>:

//Runs forever in cycle
void App_Loop(){
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
	//Reply and handle USB requests
	switch(usb_o.usb_rq){
 800224e:	4b47      	ldr	r3, [pc, #284]	; (800236c <App_Loop+0x124>)
 8002250:	785b      	ldrb	r3, [r3, #1]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d002      	beq.n	800225c <App_Loop+0x14>
 8002256:	2b02      	cmp	r3, #2
 8002258:	d013      	beq.n	8002282 <App_Loop+0x3a>
 800225a:	e07a      	b.n	8002352 <App_Loop+0x10a>
		//Configuration request from host
		case USB_RQ_CONF:
			//Flash update or revert if "set_revert_flash_rq" byte is set so in received packet
			switch(usb_o.set_revert_flash_rq){
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <App_Loop+0x124>)
 800225e:	789b      	ldrb	r3, [r3, #2]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d002      	beq.n	800226a <App_Loop+0x22>
 8002264:	2b02      	cmp	r3, #2
 8002266:	d005      	beq.n	8002274 <App_Loop+0x2c>
 8002268:	e007      	b.n	800227a <App_Loop+0x32>
				case USB_SETTINGS_REVERT:
					Settings_Read();
 800226a:	f000 fa15 	bl	8002698 <Settings_Read>
					Settings_Apply();
 800226e:	f000 fbed 	bl	8002a4c <Settings_Apply>
				break;
 8002272:	e002      	b.n	800227a <App_Loop+0x32>
				case USB_SETTINGS_FLASH:
					Settings_Write();
 8002274:	f000 fc46 	bl	8002b04 <Settings_Write>
				break;
 8002278:	bf00      	nop
			}

			//Reply with configuration
			USB_Send_Config(&settings_data);
 800227a:	483d      	ldr	r0, [pc, #244]	; (8002370 <App_Loop+0x128>)
 800227c:	f7ff fe08 	bl	8001e90 <USB_Send_Config>
		break;
 8002280:	e067      	b.n	8002352 <App_Loop+0x10a>

		//Status request from host (incoming packet also contains configuration which we should set)
		case USB_RQ_STAT:
			//Copy packed struct to unpacked struct and apply configuration to functions
			settings_data = usb_rx_config;
 8002282:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <App_Loop+0x128>)
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <App_Loop+0x12c>)
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	2344      	movs	r3, #68	; 0x44
 800228c:	461a      	mov	r2, r3
 800228e:	f00a facb 	bl	800c828 <memcpy>
			Settings_Apply();
 8002292:	f000 fbdb 	bl	8002a4c <Settings_Apply>

			//Rotate motor with MOTOR_USB_TEST_TIMEOUT_MS timeout if "usb_rq_stat_motor" is set in received packet
			switch(usb_rx_status.usb_rq_stat_motor){
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <App_Loop+0x130>)
 8002298:	795b      	ldrb	r3, [r3, #5]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d002      	beq.n	80022a4 <App_Loop+0x5c>
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d014      	beq.n	80022cc <App_Loop+0x84>
 80022a2:	e028      	b.n	80022f6 <App_Loop+0xae>
				case USB_MOTOR_BACKWARD:
					if(potentiometer_o.position > settings_data.potentiometer_min){
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <App_Loop+0x134>)
 80022a6:	681c      	ldr	r4, [r3, #0]
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <App_Loop+0x128>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe fc5f 	bl	8000b70 <__aeabi_i2f>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4619      	mov	r1, r3
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7fe fe6a 	bl	8000f90 <__aeabi_fcmpgt>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <App_Loop+0x7c>
						Motor_Set(-1000);
					}
				break;
 80022c2:	e018      	b.n	80022f6 <App_Loop+0xae>
						Motor_Set(-1000);
 80022c4:	482e      	ldr	r0, [pc, #184]	; (8002380 <App_Loop+0x138>)
 80022c6:	f7fe fffd 	bl	80012c4 <Motor_Set>
				break;
 80022ca:	e014      	b.n	80022f6 <App_Loop+0xae>
				case USB_MOTOR_FORWARD:
					if(potentiometer_o.position < settings_data.potentiometer_max){
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <App_Loop+0x134>)
 80022ce:	681c      	ldr	r4, [r3, #0]
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <App_Loop+0x128>)
 80022d2:	885b      	ldrh	r3, [r3, #2]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fc4b 	bl	8000b70 <__aeabi_i2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	4619      	mov	r1, r3
 80022de:	4620      	mov	r0, r4
 80022e0:	f7fe fe38 	bl	8000f54 <__aeabi_fcmplt>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d100      	bne.n	80022ec <App_Loop+0xa4>
						Motor_Set(1000);
					}
				break;
 80022ea:	e003      	b.n	80022f4 <App_Loop+0xac>
						Motor_Set(1000);
 80022ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f0:	f7fe ffe8 	bl	80012c4 <Motor_Set>
				break;
 80022f4:	bf00      	nop
			}

			//Hold position with PID request if "usb_rq_stat_phold" is set in received packet
			if(usb_rx_status.usb_rq_stat_phold){
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <App_Loop+0x130>)
 80022f8:	791b      	ldrb	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <App_Loop+0xd2>
				pid_i.setpoint = usb_rx_status.pid_setpoint;
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <App_Loop+0x130>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a20      	ldr	r2, [pc, #128]	; (8002384 <App_Loop+0x13c>)
 8002304:	6053      	str	r3, [r2, #4]
				if(!pid_o.running){
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <App_Loop+0x140>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	f083 0301 	eor.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <App_Loop+0xe6>
					//In this mode PID and motor operation automatically stops after signal_ctr.timeout_ms milliseconds unless renewed
					PID_Start();
 8002314:	f7ff f9b4 	bl	8001680 <PID_Start>
 8002318:	e009      	b.n	800232e <App_Loop+0xe6>
				}
			}else if(settings_data.signal_ignore && pid_o.running){
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <App_Loop+0x128>)
 800231c:	799b      	ldrb	r3, [r3, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <App_Loop+0xe6>
 8002322:	4b19      	ldr	r3, [pc, #100]	; (8002388 <App_Loop+0x140>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <App_Loop+0xe6>
				PID_Stop();
 800232a:	f7ff f9c9 	bl	80016c0 <PID_Stop>
			}

			//Reply with status packet
			usb_tx_status_t status = {
				.pid_running = pid_o.running,
 800232e:	4b16      	ldr	r3, [pc, #88]	; (8002388 <App_Loop+0x140>)
 8002330:	781b      	ldrb	r3, [r3, #0]
			usb_tx_status_t status = {
 8002332:	703b      	strb	r3, [r7, #0]
				.pid_setpoint = pid_i.setpoint,
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <App_Loop+0x13c>)
 8002336:	685b      	ldr	r3, [r3, #4]
			usb_tx_status_t status = {
 8002338:	607b      	str	r3, [r7, #4]
				.potentiometer_position = potentiometer_o.position,
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <App_Loop+0x134>)
 800233c:	681b      	ldr	r3, [r3, #0]
			usb_tx_status_t status = {
 800233e:	60bb      	str	r3, [r7, #8]
				.motor_power = Motor_Get()
 8002340:	f7ff f828 	bl	8001394 <Motor_Get>
 8002344:	4603      	mov	r3, r0
			usb_tx_status_t status = {
 8002346:	81bb      	strh	r3, [r7, #12]
			};
			USB_Send_Status(&status);
 8002348:	463b      	mov	r3, r7
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fd1c 	bl	8001d88 <USB_Send_Status>
		break;
 8002350:	bf00      	nop
	}

	//Update USB is connected or not status variable
	USB_Det();
 8002352:	f7ff ff0b 	bl	800216c <USB_Det>
	//Operate LED
	led_i.pid_running = pid_o.running;
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <App_Loop+0x140>)
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <App_Loop+0x144>)
 800235c:	705a      	strb	r2, [r3, #1]
	LED_Update();
 800235e:	f7fe ff47 	bl	80011f0 <LED_Update>
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	bf00      	nop
 800236c:	20000418 	.word	0x20000418
 8002370:	20000468 	.word	0x20000468
 8002374:	2000041c 	.word	0x2000041c
 8002378:	20000460 	.word	0x20000460
 800237c:	20000200 	.word	0x20000200
 8002380:	fffffc18 	.word	0xfffffc18
 8002384:	200001e8 	.word	0x200001e8
 8002388:	200001f0 	.word	0x200001f0
 800238c:	200001a0 	.word	0x200001a0

08002390 <PID_Ready>:
#include "System/Drivers/signal.h"
#include "System/Drivers/usb.h"
#include "settings.h"

//PID
void PID_Ready(float output){
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	Motor_Set(output);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fe fe03 	bl	8000fa4 <__aeabi_f2iz>
 800239e:	4603      	mov	r3, r0
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ff8e 	bl	80012c4 <Motor_Set>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <Potentiometer_Ready>:

//Potentiometer
void Potentiometer_Ready(){
 80023b0:	b598      	push	{r3, r4, r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	pid_i.input = potentiometer_o.position;
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <Potentiometer_Ready+0x88>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <Potentiometer_Ready+0x8c>)
 80023ba:	6013      	str	r3, [r2, #0]
	if(!pid_o.running){
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <Potentiometer_Ready+0x90>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f083 0301 	eor.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d033      	beq.n	8002432 <Potentiometer_Ready+0x82>
		if(motor_o.running){
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <Potentiometer_Ready+0x94>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02f      	beq.n	8002432 <Potentiometer_Ready+0x82>
			if((potentiometer_o.position <= settings_data.potentiometer_min) && (Motor_Get() < 0)){
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <Potentiometer_Ready+0x88>)
 80023d4:	681c      	ldr	r4, [r3, #0]
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <Potentiometer_Ready+0x98>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fbc8 	bl	8000b70 <__aeabi_i2f>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7fe fdbf 	bl	8000f68 <__aeabi_fcmple>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <Potentiometer_Ready+0x52>
 80023f0:	f7fe ffd0 	bl	8001394 <Motor_Get>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	da03      	bge.n	8002402 <Potentiometer_Ready+0x52>
				Motor_Set(0);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7fe ff62 	bl	80012c4 <Motor_Set>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
				Motor_Set(0);
			}
		}
	}
}
 8002400:	e017      	b.n	8002432 <Potentiometer_Ready+0x82>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
 8002402:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <Potentiometer_Ready+0x88>)
 8002404:	681c      	ldr	r4, [r3, #0]
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <Potentiometer_Ready+0x98>)
 8002408:	885b      	ldrh	r3, [r3, #2]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fbb0 	bl	8000b70 <__aeabi_i2f>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f7fe fdb1 	bl	8000f7c <__aeabi_fcmpge>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d100      	bne.n	8002422 <Potentiometer_Ready+0x72>
}
 8002420:	e007      	b.n	8002432 <Potentiometer_Ready+0x82>
			}else if((potentiometer_o.position >= settings_data.potentiometer_max) && (Motor_Get() > 0)){
 8002422:	f7fe ffb7 	bl	8001394 <Motor_Get>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	dd02      	ble.n	8002432 <Potentiometer_Ready+0x82>
				Motor_Set(0);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe ff49 	bl	80012c4 <Motor_Set>
}
 8002432:	bf00      	nop
 8002434:	bd98      	pop	{r3, r4, r7, pc}
 8002436:	bf00      	nop
 8002438:	20000200 	.word	0x20000200
 800243c:	200001e8 	.word	0x200001e8
 8002440:	200001f0 	.word	0x200001f0
 8002444:	200001b4 	.word	0x200001b4
 8002448:	20000468 	.word	0x20000468

0800244c <Signal_Gone>:

//Signal
void Signal_Gone(){
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	if(!settings_data.signal_ignore || (settings_data.signal_ignore && (!usb_o.usb_present))){
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <Signal_Gone+0x40>)
 8002452:	799b      	ldrb	r3, [r3, #6]
 8002454:	f083 0301 	eor.w	r3, r3, #1
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <Signal_Gone+0x28>
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <Signal_Gone+0x40>)
 8002460:	799b      	ldrb	r3, [r3, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d010      	beq.n	8002488 <Signal_Gone+0x3c>
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <Signal_Gone+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	f083 0301 	eor.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <Signal_Gone+0x3c>
		if(pid_o.running){
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <Signal_Gone+0x48>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <Signal_Gone+0x34>
			PID_Stop();
 800247c:	f7ff f920 	bl	80016c0 <PID_Stop>
		}
		pid_i.setpoint = 0;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <Signal_Gone+0x4c>)
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
	}
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000468 	.word	0x20000468
 8002490:	20000418 	.word	0x20000418
 8002494:	200001f0 	.word	0x200001f0
 8002498:	200001e8 	.word	0x200001e8
 800249c:	00000000 	.word	0x00000000

080024a0 <Signal_Received>:
void Signal_Received(float length_ms){
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	if(!usb_o.usb_present || (!settings_data.signal_ignore && usb_o.usb_present)){
 80024a8:	4b65      	ldr	r3, [pc, #404]	; (8002640 <Signal_Received+0x1a0>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <Signal_Received+0x30>
 80024b6:	4b63      	ldr	r3, [pc, #396]	; (8002644 <Signal_Received+0x1a4>)
 80024b8:	799b      	ldrb	r3, [r3, #6]
 80024ba:	f083 0301 	eor.w	r3, r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80b2 	beq.w	800262a <Signal_Received+0x18a>
 80024c6:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <Signal_Received+0x1a0>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80ad 	beq.w	800262a <Signal_Received+0x18a>
		if((length_ms <= settings_data.signal_max) && (length_ms >= settings_data.signal_min)){
 80024d0:	4b5c      	ldr	r3, [pc, #368]	; (8002644 <Signal_Received+0x1a4>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fd46 	bl	8000f68 <__aeabi_fcmple>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d100      	bne.n	80024e4 <Signal_Received+0x44>
			if(!pid_o.running){
				PID_Start();
			}
		}
	}
}
 80024e2:	e0a2      	b.n	800262a <Signal_Received+0x18a>
		if((length_ms <= settings_data.signal_max) && (length_ms >= settings_data.signal_min)){
 80024e4:	4b57      	ldr	r3, [pc, #348]	; (8002644 <Signal_Received+0x1a4>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fd46 	bl	8000f7c <__aeabi_fcmpge>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d100      	bne.n	80024f8 <Signal_Received+0x58>
}
 80024f6:	e098      	b.n	800262a <Signal_Received+0x18a>
						((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) * //Total enabled potentiometer scale
 80024f8:	4b52      	ldr	r3, [pc, #328]	; (8002644 <Signal_Received+0x1a4>)
 80024fa:	885b      	ldrh	r3, [r3, #2]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fb33 	bl	8000b68 <__aeabi_ui2f>
 8002502:	4604      	mov	r4, r0
 8002504:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <Signal_Received+0x1a4>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fb2d 	bl	8000b68 <__aeabi_ui2f>
 800250e:	4603      	mov	r3, r0
 8002510:	4619      	mov	r1, r3
 8002512:	4620      	mov	r0, r4
 8002514:	f7fe fa76 	bl	8000a04 <__aeabi_fsub>
 8002518:	4603      	mov	r3, r0
 800251a:	461c      	mov	r4, r3
						((length_ms - settings_data.signal_min) / (settings_data.signal_max - settings_data.signal_min)) //Received signal to total signal scale ratio
 800251c:	4b49      	ldr	r3, [pc, #292]	; (8002644 <Signal_Received+0x1a4>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe fa6e 	bl	8000a04 <__aeabi_fsub>
 8002528:	4603      	mov	r3, r0
 800252a:	461d      	mov	r5, r3
 800252c:	4b45      	ldr	r3, [pc, #276]	; (8002644 <Signal_Received+0x1a4>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a44      	ldr	r2, [pc, #272]	; (8002644 <Signal_Received+0x1a4>)
 8002532:	6892      	ldr	r2, [r2, #8]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fa64 	bl	8000a04 <__aeabi_fsub>
 800253c:	4603      	mov	r3, r0
 800253e:	4619      	mov	r1, r3
 8002540:	4628      	mov	r0, r5
 8002542:	f7fe fc1d 	bl	8000d80 <__aeabi_fdiv>
 8002546:	4603      	mov	r3, r0
						((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) * //Total enabled potentiometer scale
 8002548:	4619      	mov	r1, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f7fe fb64 	bl	8000c18 <__aeabi_fmul>
 8002550:	4603      	mov	r3, r0
 8002552:	461c      	mov	r4, r3
					) + (float)settings_data.potentiometer_min;
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <Signal_Received+0x1a4>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fb05 	bl	8000b68 <__aeabi_ui2f>
 800255e:	4603      	mov	r3, r0
			float new_pid_setpoint =
 8002560:	4619      	mov	r1, r3
 8002562:	4620      	mov	r0, r4
 8002564:	f7fe fa50 	bl	8000a08 <__addsf3>
 8002568:	4603      	mov	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]
				fabs((new_pid_setpoint - (float)settings_data.potentiometer_min) - (pid_i.setpoint - (float)settings_data.potentiometer_min)) /
 800256c:	4b35      	ldr	r3, [pc, #212]	; (8002644 <Signal_Received+0x1a4>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe faf9 	bl	8000b68 <__aeabi_ui2f>
 8002576:	4603      	mov	r3, r0
 8002578:	4619      	mov	r1, r3
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7fe fa42 	bl	8000a04 <__aeabi_fsub>
 8002580:	4603      	mov	r3, r0
 8002582:	461d      	mov	r5, r3
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <Signal_Received+0x1a8>)
 8002586:	685c      	ldr	r4, [r3, #4]
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <Signal_Received+0x1a4>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe faeb 	bl	8000b68 <__aeabi_ui2f>
 8002592:	4603      	mov	r3, r0
 8002594:	4619      	mov	r1, r3
 8002596:	4620      	mov	r0, r4
 8002598:	f7fe fa34 	bl	8000a04 <__aeabi_fsub>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	4628      	mov	r0, r5
 80025a2:	f7fe fa2f 	bl	8000a04 <__aeabi_fsub>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ff33 	bl	8000418 <__aeabi_f2d>
 80025b2:	4604      	mov	r4, r0
 80025b4:	460d      	mov	r5, r1
					((float)settings_data.potentiometer_max - (float)settings_data.potentiometer_min) / 100.0f
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <Signal_Received+0x1a4>)
 80025b8:	885b      	ldrh	r3, [r3, #2]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fad4 	bl	8000b68 <__aeabi_ui2f>
 80025c0:	4606      	mov	r6, r0
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <Signal_Received+0x1a4>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe face 	bl	8000b68 <__aeabi_ui2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4619      	mov	r1, r3
 80025d0:	4630      	mov	r0, r6
 80025d2:	f7fe fa17 	bl	8000a04 <__aeabi_fsub>
 80025d6:	4603      	mov	r3, r0
 80025d8:	491c      	ldr	r1, [pc, #112]	; (800264c <Signal_Received+0x1ac>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fbd0 	bl	8000d80 <__aeabi_fdiv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff18 	bl	8000418 <__aeabi_f2d>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
				fabs((new_pid_setpoint - (float)settings_data.potentiometer_min) - (pid_i.setpoint - (float)settings_data.potentiometer_min)) /
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fe f894 	bl	800071c <__aeabi_ddiv>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
			if(
 80025fc:	a30e      	add	r3, pc, #56	; (adr r3, 8002638 <Signal_Received+0x198>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fe f9e7 	bl	80009d4 <__aeabi_dcmpge>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <Signal_Received+0x172>
				led_i.position_changed = true;
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <Signal_Received+0x1b0>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
			pid_i.setpoint = new_pid_setpoint;
 8002612:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <Signal_Received+0x1a8>)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6053      	str	r3, [r2, #4]
			if(!pid_o.running){
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <Signal_Received+0x1b4>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	f083 0301 	eor.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <Signal_Received+0x18a>
				PID_Start();
 8002626:	f7ff f82b 	bl	8001680 <PID_Start>
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002632:	bf00      	nop
 8002634:	f3af 8000 	nop.w
 8002638:	20000000 	.word	0x20000000
 800263c:	3fa1eb85 	.word	0x3fa1eb85
 8002640:	20000418 	.word	0x20000418
 8002644:	20000468 	.word	0x20000468
 8002648:	200001e8 	.word	0x200001e8
 800264c:	42c80000 	.word	0x42c80000
 8002650:	200001a0 	.word	0x200001a0
 8002654:	200001f0 	.word	0x200001f0

08002658 <_memcpy>:

//Buffer for data + CRC padding bytes + CRC for writing to/reading from flash
static uint8_t settings_data_buff[sizeof(usb_config_t) + (sizeof(uint32_t) - 1) + sizeof(uint32_t)]; //Data size + maximum amount of CRC padding bytes + CRC size

//Function used only in this file, simple data copy loop for unaligned memory access
static void _memcpy(uint32_t dst_addr, uint32_t src_addr, uint32_t length){
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
	while(i != length){
 8002668:	e00b      	b.n	8002682 <_memcpy+0x2a>
		*(uint8_t *)(dst_addr + i) = *(uint8_t *)(src_addr + i);
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	4413      	add	r3, r2
 8002670:	4619      	mov	r1, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	4413      	add	r3, r2
 8002678:	780a      	ldrb	r2, [r1, #0]
 800267a:	701a      	strb	r2, [r3, #0]
		i++;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3301      	adds	r3, #1
 8002680:	617b      	str	r3, [r7, #20]
	while(i != length){
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d1ef      	bne.n	800266a <_memcpy+0x12>
	}
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
	...

08002698 <Settings_Read>:

//Reads settings to "settings_data" global variable from flash. If does not exist in flash or wrong data, writes default values
void Settings_Read(){
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
	//Calculate CRC padding bytes count
	uint8_t i = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 80026a2:	e002      	b.n	80026aa <Settings_Read+0x12>
		i++;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f7      	bne.n	80026a4 <Settings_Read+0xc>
	}

	//Read from flash
	Flash_Read(&settings_data_buff[0], SETTINGS_FLASH_ADDRESS, sizeof(usb_config_t) + i + sizeof(uint32_t));
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	3348      	adds	r3, #72	; 0x48
 80026b8:	461a      	mov	r2, r3
 80026ba:	4912      	ldr	r1, [pc, #72]	; (8002704 <Settings_Read+0x6c>)
 80026bc:	4812      	ldr	r0, [pc, #72]	; (8002708 <Settings_Read+0x70>)
 80026be:	f7fe fca9 	bl	8001014 <Flash_Read>

	//Get CRCs
	uint32_t actual_crc = CRC32_Get((uint32_t *)&settings_data_buff[0], (sizeof(usb_config_t) + i) / sizeof(uint32_t));
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	3344      	adds	r3, #68	; 0x44
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	4619      	mov	r1, r3
 80026ca:	480f      	ldr	r0, [pc, #60]	; (8002708 <Settings_Read+0x70>)
 80026cc:	f7fe fc90 	bl	8000ff0 <CRC32_Get>
 80026d0:	60b8      	str	r0, [r7, #8]
	uint32_t stored_crc = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
	_memcpy((uint32_t)&stored_crc, (uint32_t)&settings_data_buff[sizeof(usb_config_t) + i], sizeof(uint32_t));
 80026d6:	1d38      	adds	r0, r7, #4
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	3344      	adds	r3, #68	; 0x44
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <Settings_Read+0x70>)
 80026de:	4413      	add	r3, r2
 80026e0:	2204      	movs	r2, #4
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7ff ffb8 	bl	8002658 <_memcpy>

	//Check if CRC is correct
	if(actual_crc != stored_crc){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d011      	beq.n	8002714 <Settings_Read+0x7c>
		settings_data = settings_data_defaults;
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <Settings_Read+0x74>)
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <Settings_Read+0x78>)
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	2344      	movs	r3, #68	; 0x44
 80026fa:	461a      	mov	r2, r3
 80026fc:	f00a f894 	bl	800c828 <memcpy>
 8002700:	e19b      	b.n	8002a3a <Settings_Read+0x3a2>
 8002702:	bf00      	nop
 8002704:	0800fc00 	.word	0x0800fc00
 8002708:	200004ac 	.word	0x200004ac
 800270c:	20000468 	.word	0x20000468
 8002710:	0800c8d0 	.word	0x0800c8d0
		return;
	}

	//Copy to global variable from flash buffer
	_memcpy((uint32_t)&settings_data, (uint32_t)&settings_data_buff[0], sizeof(usb_config_t));
 8002714:	4ba8      	ldr	r3, [pc, #672]	; (80029b8 <Settings_Read+0x320>)
 8002716:	49a9      	ldr	r1, [pc, #676]	; (80029bc <Settings_Read+0x324>)
 8002718:	2244      	movs	r2, #68	; 0x44
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff9c 	bl	8002658 <_memcpy>

	//Verify that all configuration values are in range
	if(
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 8002720:	4ba5      	ldr	r3, [pc, #660]	; (80029b8 <Settings_Read+0x320>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	2200      	movs	r2, #0
	if(
 8002726:	4293      	cmp	r3, r2
 8002728:	f0c0 817f 	bcc.w	8002a2a <Settings_Read+0x392>
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 800272c:	4ba2      	ldr	r3, [pc, #648]	; (80029b8 <Settings_Read+0x320>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f640 727f 	movw	r2, #3967	; 0xf7f
 8002734:	4293      	cmp	r3, r2
 8002736:	f200 8178 	bhi.w	8002a2a <Settings_Read+0x392>
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 800273a:	4b9f      	ldr	r3, [pc, #636]	; (80029b8 <Settings_Read+0x320>)
 800273c:	885b      	ldrh	r3, [r3, #2]
 800273e:	2280      	movs	r2, #128	; 0x80
		(settings_data.potentiometer_min < settings_data_min.potentiometer_min) || (settings_data.potentiometer_min > settings_data_max.potentiometer_min) ||
 8002740:	4293      	cmp	r3, r2
 8002742:	f0c0 8172 	bcc.w	8002a2a <Settings_Read+0x392>
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 8002746:	4b9c      	ldr	r3, [pc, #624]	; (80029b8 <Settings_Read+0x320>)
 8002748:	885b      	ldrh	r3, [r3, #2]
 800274a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800274e:	4293      	cmp	r3, r2
 8002750:	f200 816b 	bhi.w	8002a2a <Settings_Read+0x392>
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 8002754:	4b98      	ldr	r3, [pc, #608]	; (80029b8 <Settings_Read+0x320>)
 8002756:	791b      	ldrb	r3, [r3, #4]
 8002758:	2200      	movs	r2, #0
		(settings_data.potentiometer_max < settings_data_min.potentiometer_max) || (settings_data.potentiometer_max > settings_data_max.potentiometer_max) ||
 800275a:	4293      	cmp	r3, r2
 800275c:	f0c0 8165 	bcc.w	8002a2a <Settings_Read+0x392>
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 8002760:	4b95      	ldr	r3, [pc, #596]	; (80029b8 <Settings_Read+0x320>)
 8002762:	791b      	ldrb	r3, [r3, #4]
 8002764:	2264      	movs	r2, #100	; 0x64
 8002766:	4293      	cmp	r3, r2
 8002768:	f200 815f 	bhi.w	8002a2a <Settings_Read+0x392>
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 800276c:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <Settings_Read+0x320>)
 800276e:	795b      	ldrb	r3, [r3, #5]
 8002770:	2200      	movs	r2, #0
		(settings_data.motor_max_power < settings_data_min.motor_max_power) || (settings_data.motor_max_power > settings_data_max.motor_max_power) ||
 8002772:	4293      	cmp	r3, r2
 8002774:	f0c0 8159 	bcc.w	8002a2a <Settings_Read+0x392>
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 8002778:	4b8f      	ldr	r3, [pc, #572]	; (80029b8 <Settings_Read+0x320>)
 800277a:	795b      	ldrb	r3, [r3, #5]
 800277c:	2201      	movs	r2, #1
 800277e:	4293      	cmp	r3, r2
 8002780:	f200 8153 	bhi.w	8002a2a <Settings_Read+0x392>
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 8002784:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <Settings_Read+0x320>)
 8002786:	799b      	ldrb	r3, [r3, #6]
 8002788:	2200      	movs	r2, #0
		(settings_data.motor_invert < settings_data_min.motor_invert) || (settings_data.motor_invert > settings_data_max.motor_invert) ||
 800278a:	4293      	cmp	r3, r2
 800278c:	f0c0 814d 	bcc.w	8002a2a <Settings_Read+0x392>
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 8002790:	4b89      	ldr	r3, [pc, #548]	; (80029b8 <Settings_Read+0x320>)
 8002792:	795b      	ldrb	r3, [r3, #5]
 8002794:	2201      	movs	r2, #1
 8002796:	4293      	cmp	r3, r2
 8002798:	f200 8147 	bhi.w	8002a2a <Settings_Read+0x392>
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 800279c:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <Settings_Read+0x320>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a87      	ldr	r2, [pc, #540]	; (80029c0 <Settings_Read+0x328>)
		(settings_data.signal_ignore < settings_data_min.signal_ignore) || (settings_data.motor_invert > settings_data_max.signal_ignore) ||
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fbd5 	bl	8000f54 <__aeabi_fcmplt>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f040 813c 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 80027b2:	4b81      	ldr	r3, [pc, #516]	; (80029b8 <Settings_Read+0x320>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a83      	ldr	r2, [pc, #524]	; (80029c4 <Settings_Read+0x32c>)
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fbe8 	bl	8000f90 <__aeabi_fcmpgt>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 8131 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027c8:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <Settings_Read+0x320>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
		(settings_data.signal_min < settings_data_min.signal_min) || (settings_data.signal_min > settings_data_max.signal_min) ||
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fbbe 	bl	8000f54 <__aeabi_fcmplt>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 8125 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027e0:	4b75      	ldr	r3, [pc, #468]	; (80029b8 <Settings_Read+0x320>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a78      	ldr	r2, [pc, #480]	; (80029c8 <Settings_Read+0x330>)
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fbd1 	bl	8000f90 <__aeabi_fcmpgt>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 811a 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 80027f6:	4b70      	ldr	r3, [pc, #448]	; (80029b8 <Settings_Read+0x320>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2206      	movs	r2, #6
		(settings_data.signal_max < settings_data_min.signal_max) || (settings_data.signal_max > settings_data_max.signal_max) ||
 80027fc:	4293      	cmp	r3, r2
 80027fe:	f0c0 8114 	bcc.w	8002a2a <Settings_Read+0x392>
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 8002802:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <Settings_Read+0x320>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	22c8      	movs	r2, #200	; 0xc8
 8002808:	4293      	cmp	r3, r2
 800280a:	f200 810e 	bhi.w	8002a2a <Settings_Read+0x392>
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 800280e:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <Settings_Read+0x320>)
 8002810:	7d1b      	ldrb	r3, [r3, #20]
 8002812:	2200      	movs	r2, #0
		(settings_data.signal_timeout < settings_data_min.signal_timeout) || (settings_data.signal_timeout > settings_data_max.signal_timeout) ||
 8002814:	4293      	cmp	r3, r2
 8002816:	f0c0 8108 	bcc.w	8002a2a <Settings_Read+0x392>
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <Settings_Read+0x320>)
 800281c:	7d1b      	ldrb	r3, [r3, #20]
 800281e:	2203      	movs	r2, #3
 8002820:	4293      	cmp	r3, r2
 8002822:	f200 8102 	bhi.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 8002826:	4b64      	ldr	r3, [pc, #400]	; (80029b8 <Settings_Read+0x320>)
 8002828:	7d5b      	ldrb	r3, [r3, #21]
 800282a:	2200      	movs	r2, #0
		(settings_data.led_mode < settings_data_min.led_mode) || (settings_data.led_mode > settings_data_max.led_mode) ||
 800282c:	4293      	cmp	r3, r2
 800282e:	f0c0 80fc 	bcc.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 8002832:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <Settings_Read+0x320>)
 8002834:	7d5b      	ldrb	r3, [r3, #21]
 8002836:	2201      	movs	r2, #1
 8002838:	4293      	cmp	r3, r2
 800283a:	f200 80f6 	bhi.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 800283e:	4b5e      	ldr	r3, [pc, #376]	; (80029b8 <Settings_Read+0x320>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_on_e_m < settings_data_min.pid_on_e_m) || (settings_data.pid_on_e_m > settings_data_max.pid_on_e_m) ||
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fb83 	bl	8000f54 <__aeabi_fcmplt>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 80ea 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 8002856:	4b58      	ldr	r3, [pc, #352]	; (80029b8 <Settings_Read+0x320>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4a5c      	ldr	r2, [pc, #368]	; (80029cc <Settings_Read+0x334>)
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fb96 	bl	8000f90 <__aeabi_fcmpgt>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 80df 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 800286c:	4b52      	ldr	r3, [pc, #328]	; (80029b8 <Settings_Read+0x320>)
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_1 < settings_data_min.pid_kp_1) || (settings_data.pid_kp_1 > settings_data_max.pid_kp_1) ||
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fb6c 	bl	8000f54 <__aeabi_fcmplt>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 80d3 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 8002884:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <Settings_Read+0x320>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	4a50      	ldr	r2, [pc, #320]	; (80029cc <Settings_Read+0x334>)
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fb7f 	bl	8000f90 <__aeabi_fcmpgt>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 80c8 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <Settings_Read+0x320>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_1 < settings_data_min.pid_ki_1) || (settings_data.pid_ki_1 > settings_data_max.pid_ki_1) ||
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fb55 	bl	8000f54 <__aeabi_fcmplt>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 80bc 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <Settings_Read+0x320>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a45      	ldr	r2, [pc, #276]	; (80029cc <Settings_Read+0x334>)
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fb68 	bl	8000f90 <__aeabi_fcmpgt>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 80b1 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028c8:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <Settings_Read+0x320>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kd_1 < settings_data_min.pid_kd_1) || (settings_data.pid_kd_1 > settings_data_max.pid_kd_1) ||
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fb3e 	bl	8000f54 <__aeabi_fcmplt>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f040 80a5 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028e0:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <Settings_Read+0x320>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	4a39      	ldr	r2, [pc, #228]	; (80029cc <Settings_Read+0x334>)
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fb51 	bl	8000f90 <__aeabi_fcmpgt>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 809a 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 80028f6:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <Settings_Read+0x320>)
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_2 < settings_data_min.pid_kp_2) || (settings_data.pid_kp_2 > settings_data_max.pid_kp_2) ||
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe fb27 	bl	8000f54 <__aeabi_fcmplt>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 808e 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 800290e:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <Settings_Read+0x320>)
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	4a2e      	ldr	r2, [pc, #184]	; (80029cc <Settings_Read+0x334>)
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fb3a 	bl	8000f90 <__aeabi_fcmpgt>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 8083 	bne.w	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <Settings_Read+0x320>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_2 < settings_data_min.pid_ki_2) || (settings_data.pid_ki_2 > settings_data_max.pid_ki_2) ||
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fb10 	bl	8000f54 <__aeabi_fcmplt>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d177      	bne.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 800293a:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <Settings_Read+0x320>)
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	4a23      	ldr	r2, [pc, #140]	; (80029cc <Settings_Read+0x334>)
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fb24 	bl	8000f90 <__aeabi_fcmpgt>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d16d      	bne.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <Settings_Read+0x320>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kd_2 < settings_data_min.pid_kd_2) || (settings_data.pid_kd_2 > settings_data_max.pid_kd_2) ||
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe fafb 	bl	8000f54 <__aeabi_fcmplt>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d162      	bne.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <Settings_Read+0x320>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <Settings_Read+0x334>)
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fb0f 	bl	8000f90 <__aeabi_fcmpgt>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d158      	bne.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <Settings_Read+0x320>)
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_kp_3 < settings_data_min.pid_kp_3) || (settings_data.pid_kp_3 > settings_data_max.pid_kp_3) ||
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fae6 	bl	8000f54 <__aeabi_fcmplt>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d14d      	bne.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <Settings_Read+0x320>)
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <Settings_Read+0x334>)
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fafa 	bl	8000f90 <__aeabi_fcmpgt>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d143      	bne.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <Settings_Read+0x320>)
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	f04f 0200 	mov.w	r2, #0
		(settings_data.pid_ki_3 < settings_data_min.pid_ki_3) || (settings_data.pid_ki_3 > settings_data_max.pid_ki_3) ||
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fad1 	bl	8000f54 <__aeabi_fcmplt>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	e00b      	b.n	80029d0 <Settings_Read+0x338>
 80029b8:	20000468 	.word	0x20000468
 80029bc:	200004ac 	.word	0x200004ac
 80029c0:	3dcccccd 	.word	0x3dcccccd
 80029c4:	40066666 	.word	0x40066666
 80029c8:	402ccccd 	.word	0x402ccccd
 80029cc:	42c80000 	.word	0x42c80000
 80029d0:	d12b      	bne.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <Settings_Read+0x3a8>)
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <Settings_Read+0x3ac>)
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fad8 	bl	8000f90 <__aeabi_fcmpgt>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d121      	bne.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <Settings_Read+0x3a8>)
 80029e8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80029ea:	2200      	movs	r2, #0
		(settings_data.pid_kd_3 < settings_data_min.pid_kd_3) || (settings_data.pid_kd_3 > settings_data_max.pid_kd_3) ||
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d31c      	bcc.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <Settings_Read+0x3a8>)
 80029f2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80029f4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d816      	bhi.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <Settings_Read+0x3a8>)
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	2200      	movs	r2, #0
		(settings_data.pid_split_steps_1 < settings_data_min.pid_split_steps_1) || (settings_data.pid_split_steps_1 > settings_data_max.pid_split_steps_1) ||
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d311      	bcc.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <Settings_Read+0x3a8>)
 8002a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d80b      	bhi.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_sampling_ms < settings_data_min.pid_sampling_ms) || (settings_data.pid_sampling_ms > settings_data_max.pid_sampling_ms)
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <Settings_Read+0x3a8>)
 8002a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a18:	2205      	movs	r2, #5
		(settings_data.pid_split_steps_2 < settings_data_min.pid_split_steps_2) || (settings_data.pid_split_steps_2 > settings_data_max.pid_split_steps_2) ||
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d305      	bcc.n	8002a2a <Settings_Read+0x392>
		(settings_data.pid_sampling_ms < settings_data_min.pid_sampling_ms) || (settings_data.pid_sampling_ms > settings_data_max.pid_sampling_ms)
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <Settings_Read+0x3a8>)
 8002a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a24:	2264      	movs	r2, #100	; 0x64
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d907      	bls.n	8002a3a <Settings_Read+0x3a2>
	){
		//If anything is aout of range, copy defaults
		settings_data = settings_data_defaults;
 8002a2a:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <Settings_Read+0x3a8>)
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <Settings_Read+0x3b0>)
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	2344      	movs	r3, #68	; 0x44
 8002a34:	461a      	mov	r2, r3
 8002a36:	f009 fef7 	bl	800c828 <memcpy>
	}
}
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000468 	.word	0x20000468
 8002a44:	42c80000 	.word	0x42c80000
 8002a48:	0800c8d0 	.word	0x0800c8d0

08002a4c <Settings_Apply>:

//Copies values from "settings_data" to functions configurations variables
void Settings_Apply(){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	motor_ctr.max_power = settings_data.motor_max_power * 10;
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <Settings_Apply+0xa4>)
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	0092      	lsls	r2, r2, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <Settings_Apply+0xa8>)
 8002a62:	805a      	strh	r2, [r3, #2]
	motor_ctr.invert = settings_data.motor_invert;
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <Settings_Apply+0xa4>)
 8002a66:	795a      	ldrb	r2, [r3, #5]
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <Settings_Apply+0xa8>)
 8002a6a:	701a      	strb	r2, [r3, #0]
	signal_ctr.timeout_ms = settings_data.signal_timeout;
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <Settings_Apply+0xa4>)
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <Settings_Apply+0xac>)
 8002a72:	6013      	str	r3, [r2, #0]
	led_ctr.mode = settings_data.led_mode;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <Settings_Apply+0xa4>)
 8002a76:	7d1a      	ldrb	r2, [r3, #20]
 8002a78:	4b20      	ldr	r3, [pc, #128]	; (8002afc <Settings_Apply+0xb0>)
 8002a7a:	701a      	strb	r2, [r3, #0]
	pid_ctr.on_e_m = settings_data.pid_on_e_m;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <Settings_Apply+0xa4>)
 8002a7e:	7d5a      	ldrb	r2, [r3, #21]
 8002a80:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <Settings_Apply+0xb4>)
 8002a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pid_ctr.kp_1 = settings_data.pid_kp_1;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <Settings_Apply+0xa4>)
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <Settings_Apply+0xb4>)
 8002a8c:	6013      	str	r3, [r2, #0]
	pid_ctr.ki_1 = settings_data.pid_ki_1;
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <Settings_Apply+0xa4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <Settings_Apply+0xb4>)
 8002a94:	6053      	str	r3, [r2, #4]
	pid_ctr.kd_1 = settings_data.pid_kd_1;
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <Settings_Apply+0xa4>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <Settings_Apply+0xb4>)
 8002a9c:	6093      	str	r3, [r2, #8]
	pid_ctr.kp_2 = settings_data.pid_kp_2;
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <Settings_Apply+0xa4>)
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	4a17      	ldr	r2, [pc, #92]	; (8002b00 <Settings_Apply+0xb4>)
 8002aa4:	60d3      	str	r3, [r2, #12]
	pid_ctr.ki_2 = settings_data.pid_ki_2;
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <Settings_Apply+0xa4>)
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <Settings_Apply+0xb4>)
 8002aac:	6113      	str	r3, [r2, #16]
	pid_ctr.kd_2 = settings_data.pid_kd_2;
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <Settings_Apply+0xa4>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <Settings_Apply+0xb4>)
 8002ab4:	6153      	str	r3, [r2, #20]
	pid_ctr.kp_3 = settings_data.pid_kp_3;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <Settings_Apply+0xa4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <Settings_Apply+0xb4>)
 8002abc:	6193      	str	r3, [r2, #24]
	pid_ctr.ki_3 = settings_data.pid_ki_3;
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <Settings_Apply+0xa4>)
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <Settings_Apply+0xb4>)
 8002ac4:	61d3      	str	r3, [r2, #28]
	pid_ctr.kd_3 = settings_data.pid_kd_3;
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <Settings_Apply+0xa4>)
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <Settings_Apply+0xb4>)
 8002acc:	6213      	str	r3, [r2, #32]
	pid_ctr.split_1 = settings_data.pid_split_steps_1;
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <Settings_Apply+0xa4>)
 8002ad0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <Settings_Apply+0xb4>)
 8002ad4:	849a      	strh	r2, [r3, #36]	; 0x24
	pid_ctr.split_2 = settings_data.pid_split_steps_2;
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <Settings_Apply+0xa4>)
 8002ad8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <Settings_Apply+0xb4>)
 8002adc:	84da      	strh	r2, [r3, #38]	; 0x26
	PID_Set_Sampling_Time(settings_data.pid_sampling_ms);
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <Settings_Apply+0xa4>)
 8002ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fdb0 	bl	800164c <PID_Set_Sampling_Time>
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000468 	.word	0x20000468
 8002af4:	200001ac 	.word	0x200001ac
 8002af8:	2000020c 	.word	0x2000020c
 8002afc:	2000019c 	.word	0x2000019c
 8002b00:	200001bc 	.word	0x200001bc

08002b04 <Settings_Write>:

//Writes "settings_data" global variable to flash
void Settings_Write(){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
	//Copy data to temporary buffer
	_memcpy((uint32_t)&settings_data_buff[0], (uint32_t)&settings_data, sizeof(usb_config_t));
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <Settings_Write+0x70>)
 8002b0c:	491a      	ldr	r1, [pc, #104]	; (8002b78 <Settings_Write+0x74>)
 8002b0e:	2244      	movs	r2, #68	; 0x44
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fda1 	bl	8002658 <_memcpy>
	//Append CRC padding symbols if necessary
	uint8_t i = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	71fb      	strb	r3, [r7, #7]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 8002b1a:	e007      	b.n	8002b2c <Settings_Write+0x28>
		settings_data_buff[sizeof(usb_config_t) + i] = USB_CRC_PADDING_SYMBOL;
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	3344      	adds	r3, #68	; 0x44
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <Settings_Write+0x70>)
 8002b22:	2100      	movs	r1, #0
 8002b24:	54d1      	strb	r1, [r2, r3]
		i++;
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	71fb      	strb	r3, [r7, #7]
	while((sizeof(usb_config_t) + i) % sizeof(uint32_t)){
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f2      	bne.n	8002b1c <Settings_Write+0x18>
	}

	//Append CRC
	uint32_t crc = CRC32_Get((uint32_t *)&settings_data_buff[0], (sizeof(usb_config_t) + i) / sizeof(uint32_t));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	3344      	adds	r3, #68	; 0x44
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	480d      	ldr	r0, [pc, #52]	; (8002b74 <Settings_Write+0x70>)
 8002b40:	f7fe fa56 	bl	8000ff0 <CRC32_Get>
 8002b44:	4603      	mov	r3, r0
 8002b46:	603b      	str	r3, [r7, #0]
	_memcpy((uint32_t)&settings_data_buff[sizeof(usb_config_t) + i], (uint32_t)&crc, sizeof(uint32_t));
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	3344      	adds	r3, #68	; 0x44
 8002b4c:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <Settings_Write+0x70>)
 8002b4e:	4413      	add	r3, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	463b      	mov	r3, r7
 8002b54:	2204      	movs	r2, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7ff fd7e 	bl	8002658 <_memcpy>
	
	//Write to flash
	Flash_Write(&settings_data_buff[0], SETTINGS_FLASH_ADDRESS, sizeof(usb_config_t) + i + sizeof(uint32_t));
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	3348      	adds	r3, #72	; 0x48
 8002b60:	461a      	mov	r2, r3
 8002b62:	4906      	ldr	r1, [pc, #24]	; (8002b7c <Settings_Write+0x78>)
 8002b64:	4803      	ldr	r0, [pc, #12]	; (8002b74 <Settings_Write+0x70>)
 8002b66:	f7fe fa74 	bl	8001052 <Flash_Write>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200004ac 	.word	0x200004ac
 8002b78:	20000468 	.word	0x20000468
 8002b7c:	0800fc00 	.word	0x0800fc00

08002b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b84:	f000 fbee 	bl	8003364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b88:	f000 f813 	bl	8002bb2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b8c:	f000 f9e6 	bl	8002f5c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b90:	f000 f86c 	bl	8002c6c <MX_ADC1_Init>
  MX_CRC_Init();
 8002b94:	f000 f8a8 	bl	8002ce8 <MX_CRC_Init>
  MX_TIM2_Init();
 8002b98:	f000 f8ba 	bl	8002d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b9c:	f000 f93a 	bl	8002e14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ba0:	f000 f986 	bl	8002eb0 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002ba4:	f009 f97a 	bl	800be9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  App_Init();
 8002ba8:	f7ff fb42 	bl	8002230 <App_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    App_Loop();
 8002bac:	f7ff fb4c 	bl	8002248 <App_Loop>
 8002bb0:	e7fc      	b.n	8002bac <main+0x2c>

08002bb2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b094      	sub	sp, #80	; 0x50
 8002bb6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bbc:	2228      	movs	r2, #40	; 0x28
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f009 fe3f 	bl	800c844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002bec:	2300      	movs	r3, #0
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bfe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 faa9 	bl	8006160 <HAL_RCC_OscConfig>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002c14:	f000 fa04 	bl	8003020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c18:	230f      	movs	r3, #15
 8002c1a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	2102      	movs	r1, #2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fd15 	bl	8006664 <HAL_RCC_ClockConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002c40:	f000 f9ee 	bl	8003020 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002c44:	2312      	movs	r3, #18
 8002c46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fe89 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002c60:	f000 f9de 	bl	8003020 <Error_Handler>
  }
}
 8002c64:	bf00      	nop
 8002c66:	3750      	adds	r7, #80	; 0x50
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002c7e:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <MX_ADC1_Init+0x78>)
 8002c80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002c96:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ca8:	480d      	ldr	r0, [pc, #52]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002caa:	f000 fbbd 	bl	8003428 <HAL_ADC_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002cb4:	f000 f9b4 	bl	8003020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4805      	ldr	r0, [pc, #20]	; (8002ce0 <MX_ADC1_Init+0x74>)
 8002cca:	f000 fe13 	bl	80038f4 <HAL_ADC_ConfigChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002cd4:	f000 f9a4 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200004f8 	.word	0x200004f8
 8002ce4:	40012400 	.word	0x40012400

08002ce8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_CRC_Init+0x20>)
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <MX_CRC_Init+0x24>)
 8002cf0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_CRC_Init+0x20>)
 8002cf4:	f001 f955 	bl	8003fa2 <HAL_CRC_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002cfe:	f000 f98f 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000528 	.word	0x20000528
 8002d0c:	40023000 	.word	0x40023000

08002d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	; 0x38
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d24:	f107 0320 	add.w	r3, r7, #32
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
 8002d3c:	615a      	str	r2, [r3, #20]
 8002d3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d40:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002d54:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5c:	4b2c      	ldr	r3, [pc, #176]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d68:	4829      	ldr	r0, [pc, #164]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d6a:	f003 ff75 	bl	8006c58 <HAL_TIM_Base_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d74:	f000 f954 	bl	8003020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d82:	4619      	mov	r1, r3
 8002d84:	4822      	ldr	r0, [pc, #136]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d86:	f004 fb51 	bl	800742c <HAL_TIM_ConfigClockSource>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d90:	f000 f946 	bl	8003020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d94:	481e      	ldr	r0, [pc, #120]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002d96:	f004 f82f 	bl	8006df8 <HAL_TIM_PWM_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002da0:	f000 f93e 	bl	8003020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da4:	2300      	movs	r3, #0
 8002da6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dac:	f107 0320 	add.w	r3, r7, #32
 8002db0:	4619      	mov	r1, r3
 8002db2:	4817      	ldr	r0, [pc, #92]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002db4:	f004 fec6 	bl	8007b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002dbe:	f000 f92f 	bl	8003020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc2:	2360      	movs	r3, #96	; 0x60
 8002dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4619      	mov	r1, r3
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002ddc:	f004 fa68 	bl	80072b0 <HAL_TIM_PWM_ConfigChannel>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002de6:	f000 f91b 	bl	8003020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	2204      	movs	r2, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4807      	ldr	r0, [pc, #28]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002df2:	f004 fa5d 	bl	80072b0 <HAL_TIM_PWM_ConfigChannel>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002dfc:	f000 f910 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e00:	4803      	ldr	r0, [pc, #12]	; (8002e10 <MX_TIM2_Init+0x100>)
 8002e02:	f000 f9fb 	bl	80031fc <HAL_TIM_MspPostInit>

}
 8002e06:	bf00      	nop
 8002e08:	3738      	adds	r7, #56	; 0x38
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000530 	.word	0x20000530

08002e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e28:	463b      	mov	r3, r7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <MX_TIM3_Init+0x98>)
 8002e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e38:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002e3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e46:	22c7      	movs	r2, #199	; 0xc7
 8002e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e56:	4814      	ldr	r0, [pc, #80]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e58:	f003 fefe 	bl	8006c58 <HAL_TIM_Base_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002e62:	f000 f8dd 	bl	8003020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	4619      	mov	r1, r3
 8002e72:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e74:	f004 fada 	bl	800742c <HAL_TIM_ConfigClockSource>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002e7e:	f000 f8cf 	bl	8003020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e8a:	463b      	mov	r3, r7
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4806      	ldr	r0, [pc, #24]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e90:	f004 fe58 	bl	8007b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002e9a:	f000 f8c1 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000578 	.word	0x20000578
 8002eac:	40000400 	.word	0x40000400

08002eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ecc:	4b21      	ldr	r3, [pc, #132]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002ece:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <MX_TIM4_Init+0xa8>)
 8002ed0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ef2:	4818      	ldr	r0, [pc, #96]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002ef4:	f003 feb0 	bl	8006c58 <HAL_TIM_Base_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002efe:	f000 f88f 	bl	8003020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f08:	f107 0308 	add.w	r3, r7, #8
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4811      	ldr	r0, [pc, #68]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002f10:	f004 fa8c 	bl	800742c <HAL_TIM_ConfigClockSource>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002f1a:	f000 f881 	bl	8003020 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8002f1e:	2108      	movs	r1, #8
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002f22:	f004 f863 	bl	8006fec <HAL_TIM_OnePulse_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002f2c:	f000 f878 	bl	8003020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f38:	463b      	mov	r3, r7
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4805      	ldr	r0, [pc, #20]	; (8002f54 <MX_TIM4_Init+0xa4>)
 8002f3e:	f004 fe01 	bl	8007b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002f48:	f000 f86a 	bl	8003020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f4c:	bf00      	nop
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200005c0 	.word	0x200005c0
 8002f58:	40000800 	.word	0x40000800

08002f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f62:	f107 0310 	add.w	r3, r7, #16
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f70:	4b27      	ldr	r3, [pc, #156]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002f76:	f043 0320 	orr.w	r3, r3, #32
 8002f7a:	6193      	str	r3, [r2, #24]
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	4a20      	ldr	r2, [pc, #128]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	6193      	str	r3, [r2, #24]
 8002f94:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002fa6:	f043 0308 	orr.w	r3, r3, #8
 8002faa:	6193      	str	r3, [r2, #24]
 8002fac:	4b18      	ldr	r3, [pc, #96]	; (8003010 <MX_GPIO_Init+0xb4>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2180      	movs	r1, #128	; 0x80
 8002fbc:	4815      	ldr	r0, [pc, #84]	; (8003014 <MX_GPIO_Init+0xb8>)
 8002fbe:	f001 fbda 	bl	8004776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	480e      	ldr	r0, [pc, #56]	; (8003014 <MX_GPIO_Init+0xb8>)
 8002fda:	f001 fa31 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <MX_GPIO_Init+0xbc>)
 8002fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4619      	mov	r1, r3
 8002ff0:	480a      	ldr	r0, [pc, #40]	; (800301c <MX_GPIO_Init+0xc0>)
 8002ff2:	f001 fa25 	bl	8004440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2007      	movs	r0, #7
 8002ffc:	f000 ff9b 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003000:	2007      	movs	r0, #7
 8003002:	f000 ffb4 	bl	8003f6e <HAL_NVIC_EnableIRQ>

}
 8003006:	bf00      	nop
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40010800 	.word	0x40010800
 8003018:	10310000 	.word	0x10310000
 800301c:	40010c00 	.word	0x40010c00

08003020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003024:	b672      	cpsid	i
}
 8003026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003028:	e7fe      	b.n	8003028 <Error_Handler+0x8>
	...

0800302c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_MspInit+0x5c>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4a14      	ldr	r2, [pc, #80]	; (8003088 <HAL_MspInit+0x5c>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6193      	str	r3, [r2, #24]
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_MspInit+0x5c>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <HAL_MspInit+0x5c>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <HAL_MspInit+0x5c>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	61d3      	str	r3, [r2, #28]
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_MspInit+0x5c>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_MspInit+0x60>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <HAL_MspInit+0x60>)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40021000 	.word	0x40021000
 800308c:	40010000 	.word	0x40010000

08003090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a18      	ldr	r2, [pc, #96]	; (800310c <HAL_ADC_MspInit+0x7c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d129      	bne.n	8003104 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <HAL_ADC_MspInit+0x80>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	4a16      	ldr	r2, [pc, #88]	; (8003110 <HAL_ADC_MspInit+0x80>)
 80030b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ba:	6193      	str	r3, [r2, #24]
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_ADC_MspInit+0x80>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_ADC_MspInit+0x80>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a10      	ldr	r2, [pc, #64]	; (8003110 <HAL_ADC_MspInit+0x80>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	6193      	str	r3, [r2, #24]
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <HAL_ADC_MspInit+0x80>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 80030e0:	2310      	movs	r3, #16
 80030e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e4:	2303      	movs	r3, #3
 80030e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 80030e8:	f107 0310 	add.w	r3, r7, #16
 80030ec:	4619      	mov	r1, r3
 80030ee:	4809      	ldr	r0, [pc, #36]	; (8003114 <HAL_ADC_MspInit+0x84>)
 80030f0:	f001 f9a6 	bl	8004440 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2102      	movs	r1, #2
 80030f8:	2012      	movs	r0, #18
 80030fa:	f000 ff1c 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80030fe:	2012      	movs	r0, #18
 8003100:	f000 ff35 	bl	8003f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003104:	bf00      	nop
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40012400 	.word	0x40012400
 8003110:	40021000 	.word	0x40021000
 8003114:	40010800 	.word	0x40010800

08003118 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a09      	ldr	r2, [pc, #36]	; (800314c <HAL_CRC_MspInit+0x34>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10b      	bne.n	8003142 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_CRC_MspInit+0x38>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_CRC_MspInit+0x38>)
 8003130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003134:	6153      	str	r3, [r2, #20]
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_CRC_MspInit+0x38>)
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	40023000 	.word	0x40023000
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d10c      	bne.n	8003180 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	61d3      	str	r3, [r2, #28]
 8003172:	4b1f      	ldr	r3, [pc, #124]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800317e:	e032      	b.n	80031e6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_TIM_Base_MspInit+0xa0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d114      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800318a:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	61d3      	str	r3, [r2, #28]
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2101      	movs	r1, #1
 80031a6:	201d      	movs	r0, #29
 80031a8:	f000 fec5 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031ac:	201d      	movs	r0, #29
 80031ae:	f000 fede 	bl	8003f6e <HAL_NVIC_EnableIRQ>
}
 80031b2:	e018      	b.n	80031e6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <HAL_TIM_Base_MspInit+0xa4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d113      	bne.n	80031e6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	61d3      	str	r3, [r2, #28]
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_TIM_Base_MspInit+0x9c>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	201e      	movs	r0, #30
 80031dc:	f000 feab 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031e0:	201e      	movs	r0, #30
 80031e2:	f000 fec4 	bl	8003f6e <HAL_NVIC_EnableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800

080031fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d117      	bne.n	800324c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_TIM_MspPostInit+0x58>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <HAL_TIM_MspPostInit+0x58>)
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	6193      	str	r3, [r2, #24]
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_TIM_MspPostInit+0x58>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_Pin|MOTOR_B_Pin;
 8003234:	2303      	movs	r3, #3
 8003236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003238:	2302      	movs	r3, #2
 800323a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003240:	f107 0310 	add.w	r3, r7, #16
 8003244:	4619      	mov	r1, r3
 8003246:	4804      	ldr	r0, [pc, #16]	; (8003258 <HAL_TIM_MspPostInit+0x5c>)
 8003248:	f001 f8fa 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800324c:	bf00      	nop
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	40010800 	.word	0x40010800

0800325c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <NMI_Handler+0x4>

08003262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <HardFault_Handler+0x4>

08003268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <MemManage_Handler+0x4>

0800326e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003272:	e7fe      	b.n	8003272 <BusFault_Handler+0x4>

08003274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <UsageFault_Handler+0x4>

0800327a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a2:	f000 f8a5 	bl	80033f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
Interrupts_SysTick();
 80032a6:	f7fe ffb9 	bl	800221c <Interrupts_SysTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}

080032ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIGNAL_Pin);
 80032b2:	2002      	movs	r0, #2
 80032b4:	f001 fa78 	bl	80047a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}

080032bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <ADC1_2_IRQHandler+0x10>)
 80032c2:	f000 fa4b 	bl	800375c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200004f8 	.word	0x200004f8

080032d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80032d6:	f001 fbb0 	bl	8004a3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200012f8 	.word	0x200012f8

080032e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <TIM3_IRQHandler+0x10>)
 80032ea:	f003 fed8 	bl	800709e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000578 	.word	0x20000578

080032f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <TIM4_IRQHandler+0x10>)
 80032fe:	f003 fece 	bl	800709e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200005c0 	.word	0x200005c0

0800330c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003318:	480c      	ldr	r0, [pc, #48]	; (800334c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800331a:	490d      	ldr	r1, [pc, #52]	; (8003350 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800331c:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800331e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003320:	e002      	b.n	8003328 <LoopCopyDataInit>

08003322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003326:	3304      	adds	r3, #4

08003328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800332a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800332c:	d3f9      	bcc.n	8003322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003330:	4c0a      	ldr	r4, [pc, #40]	; (800335c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003334:	e001      	b.n	800333a <LoopFillZerobss>

08003336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003338:	3204      	adds	r2, #4

0800333a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800333a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800333c:	d3fb      	bcc.n	8003336 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800333e:	f7ff ffe5 	bl	800330c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003342:	f009 fa4d 	bl	800c7e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003346:	f7ff fc1b 	bl	8002b80 <main>
  bx lr
 800334a:	4770      	bx	lr
  ldr r0, =_sdata
 800334c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003350:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003354:	0800c934 	.word	0x0800c934
  ldr r2, =_sbss
 8003358:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800335c:	20001804 	.word	0x20001804

08003360 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003360:	e7fe      	b.n	8003360 <CAN1_RX1_IRQHandler>
	...

08003364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_Init+0x28>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a07      	ldr	r2, [pc, #28]	; (800338c <HAL_Init+0x28>)
 800336e:	f043 0310 	orr.w	r3, r3, #16
 8003372:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003374:	2003      	movs	r0, #3
 8003376:	f000 fdd3 	bl	8003f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800337a:	2004      	movs	r0, #4
 800337c:	f000 f808 	bl	8003390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003380:	f7ff fe54 	bl	800302c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40022000 	.word	0x40022000

08003390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_InitTick+0x54>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_InitTick+0x58>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4619      	mov	r1, r3
 80033a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fdeb 	bl	8003f8a <HAL_SYSTICK_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00e      	b.n	80033dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d80a      	bhi.n	80033da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c4:	2200      	movs	r2, #0
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f000 fdb3 	bl	8003f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d0:	4a06      	ldr	r2, [pc, #24]	; (80033ec <HAL_InitTick+0x5c>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000008 	.word	0x20000008
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_IncTick+0x1c>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_IncTick+0x20>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4413      	add	r3, r2
 8003400:	4a03      	ldr	r2, [pc, #12]	; (8003410 <HAL_IncTick+0x20>)
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	20000008 	.word	0x20000008
 8003410:	20000608 	.word	0x20000608

08003414 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b02      	ldr	r3, [pc, #8]	; (8003424 <HAL_GetTick+0x10>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000608 	.word	0x20000608

08003428 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0be      	b.n	80035c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fe12 	bl	8003090 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fb93 	bl	8003b98 <ADC_ConversionStop_Disable>
 8003472:	4603      	mov	r3, r0
 8003474:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 8099 	bne.w	80035b6 <HAL_ADC_Init+0x18e>
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8095 	bne.w	80035b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003494:	f023 0302 	bic.w	r3, r3, #2
 8003498:	f043 0202 	orr.w	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7b1b      	ldrb	r3, [r3, #12]
 80034ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c0:	d003      	beq.n	80034ca <HAL_ADC_Init+0xa2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d102      	bne.n	80034d0 <HAL_ADC_Init+0xa8>
 80034ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_Init+0xaa>
 80034d0:	2300      	movs	r3, #0
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7d1b      	ldrb	r3, [r3, #20]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d119      	bne.n	8003514 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7b1b      	ldrb	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	035a      	lsls	r2, r3, #13
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	e00b      	b.n	8003514 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_ADC_Init+0x1a8>)
 8003530:	4013      	ands	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	430b      	orrs	r3, r1
 800353a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003544:	d003      	beq.n	800354e <HAL_ADC_Init+0x126>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d104      	bne.n	8003558 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	3b01      	subs	r3, #1
 8003554:	051b      	lsls	r3, r3, #20
 8003556:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	430a      	orrs	r2, r1
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_ADC_Init+0x1ac>)
 8003574:	4013      	ands	r3, r2
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	d10b      	bne.n	8003594 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003592:	e018      	b.n	80035c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	f023 0312 	bic.w	r3, r3, #18
 800359c:	f043 0210 	orr.w	r2, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035b4:	e007      	b.n	80035c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	ffe1f7fd 	.word	0xffe1f7fd
 80035d4:	ff1f0efe 	.word	0xff1f0efe

080035d8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_ADC_Start_IT+0x1a>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0a0      	b.n	8003734 <HAL_ADC_Start_IT+0x15c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa72 	bl	8003ae4 <ADC_Enable>
 8003600:	4603      	mov	r3, r0
 8003602:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 808f 	bne.w	800372a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a45      	ldr	r2, [pc, #276]	; (800373c <HAL_ADC_Start_IT+0x164>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d105      	bne.n	8003636 <HAL_ADC_Start_IT+0x5e>
 800362a:	4b45      	ldr	r3, [pc, #276]	; (8003740 <HAL_ADC_Start_IT+0x168>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d115      	bne.n	8003662 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d026      	beq.n	800369e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003660:	e01d      	b.n	800369e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_ADC_Start_IT+0x168>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_ADC_Start_IT+0xaa>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2f      	ldr	r2, [pc, #188]	; (800373c <HAL_ADC_Start_IT+0x164>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10d      	bne.n	800369e <HAL_ADC_Start_IT+0xc6>
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <HAL_ADC_Start_IT+0x168>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003696:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f023 0206 	bic.w	r2, r3, #6
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036b6:	e002      	b.n	80036be <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f06f 0202 	mvn.w	r2, #2
 80036ce:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0220 	orr.w	r2, r2, #32
 80036de:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036ee:	d113      	bne.n	8003718 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_ADC_Start_IT+0x164>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d105      	bne.n	8003706 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_ADC_Start_IT+0x168>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	d108      	bne.n	8003718 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	e00c      	b.n	8003732 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	e003      	b.n	8003732 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40012800 	.word	0x40012800
 8003740:	40012400 	.word	0x40012400

08003744 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b20      	cmp	r3, #32
 8003770:	d140      	bne.n	80037f4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b02      	cmp	r3, #2
 800377e:	d139      	bne.n	80037f4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037a6:	d11d      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d119      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0220 	bic.w	r2, r2, #32
 80037be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fe fcdd 	bl	80021a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f06f 0212 	mvn.w	r2, #18
 80037f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d14f      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d148      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d105      	bne.n	8003828 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003832:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003836:	d012      	beq.n	800385e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003842:	2b00      	cmp	r3, #0
 8003844:	d125      	bne.n	8003892 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003850:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003854:	d11d      	bne.n	8003892 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800385a:	2b00      	cmp	r3, #0
 800385c:	d119      	bne.n	8003892 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d105      	bne.n	8003892 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa6e 	bl	8003d74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 020c 	mvn.w	r2, #12
 80038a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d114      	bne.n	80038da <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10d      	bne.n	80038da <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f809 	bl	80038e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0201 	mvn.w	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x20>
 8003910:	2302      	movs	r3, #2
 8003912:	e0dc      	b.n	8003ace <HAL_ADC_ConfigChannel+0x1da>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b06      	cmp	r3, #6
 8003922:	d81c      	bhi.n	800395e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	3b05      	subs	r3, #5
 8003936:	221f      	movs	r2, #31
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	4019      	ands	r1, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	3b05      	subs	r3, #5
 8003950:	fa00 f203 	lsl.w	r2, r0, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	635a      	str	r2, [r3, #52]	; 0x34
 800395c:	e03c      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d81c      	bhi.n	80039a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	3b23      	subs	r3, #35	; 0x23
 8003978:	221f      	movs	r2, #31
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	4019      	ands	r1, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	3b23      	subs	r3, #35	; 0x23
 8003992:	fa00 f203 	lsl.w	r2, r0, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
 800399e:	e01b      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	3b41      	subs	r3, #65	; 0x41
 80039b2:	221f      	movs	r2, #31
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	4019      	ands	r1, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	3b41      	subs	r3, #65	; 0x41
 80039cc:	fa00 f203 	lsl.w	r2, r0, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d91c      	bls.n	8003a1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68d9      	ldr	r1, [r3, #12]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	3b1e      	subs	r3, #30
 80039f2:	2207      	movs	r2, #7
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4019      	ands	r1, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6898      	ldr	r0, [r3, #8]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	3b1e      	subs	r3, #30
 8003a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	e019      	b.n	8003a4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6919      	ldr	r1, [r3, #16]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	4019      	ands	r1, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6898      	ldr	r0, [r3, #8]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	fa00 f203 	lsl.w	r2, r0, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d003      	beq.n	8003a5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a5a:	2b11      	cmp	r3, #17
 8003a5c:	d132      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d125      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d126      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d11a      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_ADC_ConfigChannel+0x1e8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	0c9a      	lsrs	r2, r3, #18
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aa4:	e002      	b.n	8003aac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f9      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x1b2>
 8003ab2:	e007      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	40012400 	.word	0x40012400
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	431bde83 	.word	0x431bde83

08003ae4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d040      	beq.n	8003b84 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <ADC_Enable+0xac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <ADC_Enable+0xb0>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	0c9b      	lsrs	r3, r3, #18
 8003b1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b20:	e002      	b.n	8003b28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f9      	bne.n	8003b22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b2e:	f7ff fc71 	bl	8003414 <HAL_GetTick>
 8003b32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b34:	e01f      	b.n	8003b76 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b36:	f7ff fc6d 	bl	8003414 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d918      	bls.n	8003b76 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d011      	beq.n	8003b76 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e007      	b.n	8003b86 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d1d8      	bne.n	8003b36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000000 	.word	0x20000000
 8003b94:	431bde83 	.word	0x431bde83

08003b98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d12e      	bne.n	8003c10 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bc2:	f7ff fc27 	bl	8003414 <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bc8:	e01b      	b.n	8003c02 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bca:	f7ff fc23 	bl	8003414 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d914      	bls.n	8003c02 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10d      	bne.n	8003c02 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	f043 0210 	orr.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e007      	b.n	8003c12 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d0dc      	beq.n	8003bca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADCEx_Calibration_Start+0x1e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e095      	b.n	8003d66 <HAL_ADCEx_Calibration_Start+0x14a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ffa8 	bl	8003b98 <ADC_ConversionStop_Disable>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 8084 	bne.w	8003d5c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c5c:	f023 0302 	bic.w	r3, r3, #2
 8003c60:	f043 0202 	orr.w	r2, r3, #2
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c68:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_ADCEx_Calibration_Start+0x154>)
 8003c6a:	681c      	ldr	r4, [r3, #0]
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	f002 ff33 	bl	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c72:	4603      	mov	r3, r0
 8003c74:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c78:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003c7a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003c7c:	e002      	b.n	8003c84 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f9      	bne.n	8003c7e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ff2a 	bl	8003ae4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0208 	orr.w	r2, r2, #8
 8003c9e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003ca0:	f7ff fbb8 	bl	8003414 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003ca6:	e01b      	b.n	8003ce0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ca8:	f7ff fbb4 	bl	8003414 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b0a      	cmp	r3, #10
 8003cb4:	d914      	bls.n	8003ce0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f023 0312 	bic.w	r3, r3, #18
 8003ccc:	f043 0210 	orr.w	r2, r3, #16
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e042      	b.n	8003d66 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1dc      	bne.n	8003ca8 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0204 	orr.w	r2, r2, #4
 8003cfc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cfe:	f7ff fb89 	bl	8003414 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d04:	e01b      	b.n	8003d3e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003d06:	f7ff fb85 	bl	8003414 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b0a      	cmp	r3, #10
 8003d12:	d914      	bls.n	8003d3e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f023 0312 	bic.w	r3, r3, #18
 8003d2a:	f043 0210 	orr.w	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e013      	b.n	8003d66 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1dc      	bne.n	8003d06 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f023 0303 	bic.w	r3, r3, #3
 8003d54:	f043 0201 	orr.w	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000000 	.word	0x20000000

08003d74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
	...

08003d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dba:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <__NVIC_SetPriorityGrouping+0x44>)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	60d3      	str	r3, [r2, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 0307 	and.w	r3, r3, #7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	db0b      	blt.n	8003e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	4906      	ldr	r1, [pc, #24]	; (8003e20 <__NVIC_EnableIRQ+0x34>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	; (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	; (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	; 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
         );
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	; 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eec:	d301      	bcc.n	8003ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <SysTick_Config+0x40>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efa:	210f      	movs	r1, #15
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	f7ff ff90 	bl	8003e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <SysTick_Config+0x40>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <SysTick_Config+0x40>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff2d 	bl	8003d88 <__NVIC_SetPriorityGrouping>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f48:	f7ff ff42 	bl	8003dd0 <__NVIC_GetPriorityGrouping>
 8003f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff ff90 	bl	8003e78 <NVIC_EncodePriority>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff5f 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f66:	bf00      	nop
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	4603      	mov	r3, r0
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff35 	bl	8003dec <__NVIC_EnableIRQ>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff ffa2 	bl	8003edc <SysTick_Config>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e00e      	b.n	8003fd2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	795b      	ldrb	r3, [r3, #5]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d105      	bne.n	8003fca <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff f8a7 	bl	8003118 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b087      	sub	sp, #28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2202      	movs	r2, #2
 8003fee:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e00a      	b.n	800401c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	441a      	add	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3301      	adds	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d3f0      	bcc.n	8004006 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004032:	693b      	ldr	r3, [r7, #16]
}
 8004034:	4618      	mov	r0, r3
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
	...

08004040 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_FLASH_Program+0xd8>)
 800405c:	7e1b      	ldrb	r3, [r3, #24]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_FLASH_Program+0x26>
 8004062:	2302      	movs	r3, #2
 8004064:	e054      	b.n	8004110 <HAL_FLASH_Program+0xd0>
 8004066:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_FLASH_Program+0xd8>)
 8004068:	2201      	movs	r2, #1
 800406a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800406c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004070:	f000 f8a8 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d144      	bne.n	8004108 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d102      	bne.n	800408a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004084:	2301      	movs	r3, #1
 8004086:	757b      	strb	r3, [r7, #21]
 8004088:	e007      	b.n	800409a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d102      	bne.n	8004096 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004090:	2302      	movs	r3, #2
 8004092:	757b      	strb	r3, [r7, #21]
 8004094:	e001      	b.n	800409a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004096:	2304      	movs	r3, #4
 8004098:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800409a:	2300      	movs	r3, #0
 800409c:	75bb      	strb	r3, [r7, #22]
 800409e:	e02d      	b.n	80040fc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80040a0:	7dbb      	ldrb	r3, [r7, #22]
 80040a2:	005a      	lsls	r2, r3, #1
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	eb02 0c03 	add.w	ip, r2, r3
 80040aa:	7dbb      	ldrb	r3, [r7, #22]
 80040ac:	0119      	lsls	r1, r3, #4
 80040ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040b2:	f1c1 0620 	rsb	r6, r1, #32
 80040b6:	f1a1 0020 	sub.w	r0, r1, #32
 80040ba:	fa22 f401 	lsr.w	r4, r2, r1
 80040be:	fa03 f606 	lsl.w	r6, r3, r6
 80040c2:	4334      	orrs	r4, r6
 80040c4:	fa23 f000 	lsr.w	r0, r3, r0
 80040c8:	4304      	orrs	r4, r0
 80040ca:	fa23 f501 	lsr.w	r5, r3, r1
 80040ce:	b2a3      	uxth	r3, r4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4660      	mov	r0, ip
 80040d4:	f000 f85a 	bl	800418c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040dc:	f000 f872 	bl	80041c4 <FLASH_WaitForLastOperation>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_FLASH_Program+0xdc>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <HAL_FLASH_Program+0xdc>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80040f6:	7dbb      	ldrb	r3, [r7, #22]
 80040f8:	3301      	adds	r3, #1
 80040fa:	75bb      	strb	r3, [r7, #22]
 80040fc:	7dba      	ldrb	r2, [r7, #22]
 80040fe:	7d7b      	ldrb	r3, [r7, #21]
 8004100:	429a      	cmp	r2, r3
 8004102:	d3cd      	bcc.n	80040a0 <HAL_FLASH_Program+0x60>
 8004104:	e000      	b.n	8004108 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004106:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_FLASH_Program+0xd8>)
 800410a:	2200      	movs	r2, #0
 800410c:	761a      	strb	r2, [r3, #24]

  return status;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004118:	20000610 	.word	0x20000610
 800411c:	40022000 	.word	0x40022000

08004120 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <HAL_FLASH_Unlock+0x40>)
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00d      	beq.n	8004152 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_FLASH_Unlock+0x40>)
 8004138:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <HAL_FLASH_Unlock+0x44>)
 800413a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_FLASH_Unlock+0x40>)
 800413e:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <HAL_FLASH_Unlock+0x48>)
 8004140:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004142:	4b07      	ldr	r3, [pc, #28]	; (8004160 <HAL_FLASH_Unlock+0x40>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004152:	79fb      	ldrb	r3, [r7, #7]
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	45670123 	.word	0x45670123
 8004168:	cdef89ab 	.word	0xcdef89ab

0800416c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_FLASH_Lock+0x1c>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_FLASH_Lock+0x1c>)
 8004176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40022000 	.word	0x40022000

0800418c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <FLASH_Program_HalfWord+0x30>)
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <FLASH_Program_HalfWord+0x34>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <FLASH_Program_HalfWord+0x34>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	887a      	ldrh	r2, [r7, #2]
 80041ae:	801a      	strh	r2, [r3, #0]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000610 	.word	0x20000610
 80041c0:	40022000 	.word	0x40022000

080041c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff f922 	bl	8003414 <HAL_GetTick>
 80041d0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041d2:	e010      	b.n	80041f6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d00c      	beq.n	80041f6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <FLASH_WaitForLastOperation+0x2e>
 80041e2:	f7ff f917 	bl	8003414 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d201      	bcs.n	80041f6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e025      	b.n	8004242 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e8      	bne.n	80041d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 8004210:	2220      	movs	r2, #32
 8004212:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <FLASH_WaitForLastOperation+0x88>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004238:	f000 f80a 	bl	8004250 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40022000 	.word	0x40022000

08004250 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800425a:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004266:	4b21      	ldr	r3, [pc, #132]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 8004270:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d009      	beq.n	800429a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004286:	4b19      	ldr	r3, [pc, #100]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	4a17      	ldr	r2, [pc, #92]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 8004290:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f043 0304 	orr.w	r3, r3, #4
 8004298:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f043 0304 	orr.w	r3, r3, #4
 80042ae:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <FLASH_SetErrorCode+0x9c>)
 80042b0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f240 1201 	movw	r2, #257	; 0x101
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d106      	bne.n	80042d6 <FLASH_SetErrorCode+0x86>
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4a06      	ldr	r2, [pc, #24]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	61d3      	str	r3, [r2, #28]
}  
 80042d4:	e002      	b.n	80042dc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042d6:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <FLASH_SetErrorCode+0x98>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60d3      	str	r3, [r2, #12]
}  
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40022000 	.word	0x40022000
 80042ec:	20000610 	.word	0x20000610

080042f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_FLASHEx_Erase+0xd0>)
 8004304:	7e1b      	ldrb	r3, [r3, #24]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_FLASHEx_Erase+0x1e>
 800430a:	2302      	movs	r3, #2
 800430c:	e053      	b.n	80043b6 <HAL_FLASHEx_Erase+0xc6>
 800430e:	4b2c      	ldr	r3, [pc, #176]	; (80043c0 <HAL_FLASHEx_Erase+0xd0>)
 8004310:	2201      	movs	r2, #1
 8004312:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d116      	bne.n	800434a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800431c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004320:	f7ff ff50 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d141      	bne.n	80043ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800432a:	2001      	movs	r0, #1
 800432c:	f000 f84c 	bl	80043c8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004330:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004334:	f7ff ff46 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004338:	4603      	mov	r3, r0
 800433a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_FLASHEx_Erase+0xd4>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <HAL_FLASHEx_Erase+0xd4>)
 8004342:	f023 0304 	bic.w	r3, r3, #4
 8004346:	6113      	str	r3, [r2, #16]
 8004348:	e031      	b.n	80043ae <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800434a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800434e:	f7ff ff39 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d12a      	bne.n	80043ae <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f04f 32ff 	mov.w	r2, #4294967295
 800435e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	e019      	b.n	800439c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004368:	68b8      	ldr	r0, [r7, #8]
 800436a:	f000 f849 	bl	8004400 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800436e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004372:	f7ff ff27 	bl	80041c4 <FLASH_WaitForLastOperation>
 8004376:	4603      	mov	r3, r0
 8004378:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_FLASHEx_Erase+0xd4>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <HAL_FLASHEx_Erase+0xd4>)
 8004380:	f023 0302 	bic.w	r3, r3, #2
 8004384:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	601a      	str	r2, [r3, #0]
            break;
 8004392:	e00c      	b.n	80043ae <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800439a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	029a      	lsls	r2, r3, #10
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d3dc      	bcc.n	8004368 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <HAL_FLASHEx_Erase+0xd0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	761a      	strb	r2, [r3, #24]

  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000610 	.word	0x20000610
 80043c4:	40022000 	.word	0x40022000

080043c8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <FLASH_MassErase+0x30>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <FLASH_MassErase+0x34>)
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <FLASH_MassErase+0x34>)
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <FLASH_MassErase+0x34>)
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	4a05      	ldr	r2, [pc, #20]	; (80043fc <FLASH_MassErase+0x34>)
 80043e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ec:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	20000610 	.word	0x20000610
 80043fc:	40022000 	.word	0x40022000

08004400 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <FLASH_PageErase+0x38>)
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <FLASH_PageErase+0x3c>)
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <FLASH_PageErase+0x3c>)
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <FLASH_PageErase+0x3c>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004420:	4b06      	ldr	r3, [pc, #24]	; (800443c <FLASH_PageErase+0x3c>)
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	4a05      	ldr	r2, [pc, #20]	; (800443c <FLASH_PageErase+0x3c>)
 8004426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000610 	.word	0x20000610
 800443c:	40022000 	.word	0x40022000

08004440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b08b      	sub	sp, #44	; 0x2c
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004452:	e169      	b.n	8004728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004454:	2201      	movs	r2, #1
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69fa      	ldr	r2, [r7, #28]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	429a      	cmp	r2, r3
 800446e:	f040 8158 	bne.w	8004722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4a9a      	ldr	r2, [pc, #616]	; (80046e0 <HAL_GPIO_Init+0x2a0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d05e      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 800447c:	4a98      	ldr	r2, [pc, #608]	; (80046e0 <HAL_GPIO_Init+0x2a0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d875      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 8004482:	4a98      	ldr	r2, [pc, #608]	; (80046e4 <HAL_GPIO_Init+0x2a4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d058      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 8004488:	4a96      	ldr	r2, [pc, #600]	; (80046e4 <HAL_GPIO_Init+0x2a4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d86f      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 800448e:	4a96      	ldr	r2, [pc, #600]	; (80046e8 <HAL_GPIO_Init+0x2a8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d052      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 8004494:	4a94      	ldr	r2, [pc, #592]	; (80046e8 <HAL_GPIO_Init+0x2a8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d869      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 800449a:	4a94      	ldr	r2, [pc, #592]	; (80046ec <HAL_GPIO_Init+0x2ac>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d04c      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 80044a0:	4a92      	ldr	r2, [pc, #584]	; (80046ec <HAL_GPIO_Init+0x2ac>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d863      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 80044a6:	4a92      	ldr	r2, [pc, #584]	; (80046f0 <HAL_GPIO_Init+0x2b0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d046      	beq.n	800453a <HAL_GPIO_Init+0xfa>
 80044ac:	4a90      	ldr	r2, [pc, #576]	; (80046f0 <HAL_GPIO_Init+0x2b0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d85d      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 80044b2:	2b12      	cmp	r3, #18
 80044b4:	d82a      	bhi.n	800450c <HAL_GPIO_Init+0xcc>
 80044b6:	2b12      	cmp	r3, #18
 80044b8:	d859      	bhi.n	800456e <HAL_GPIO_Init+0x12e>
 80044ba:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <HAL_GPIO_Init+0x80>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	0800453b 	.word	0x0800453b
 80044c4:	08004515 	.word	0x08004515
 80044c8:	08004527 	.word	0x08004527
 80044cc:	08004569 	.word	0x08004569
 80044d0:	0800456f 	.word	0x0800456f
 80044d4:	0800456f 	.word	0x0800456f
 80044d8:	0800456f 	.word	0x0800456f
 80044dc:	0800456f 	.word	0x0800456f
 80044e0:	0800456f 	.word	0x0800456f
 80044e4:	0800456f 	.word	0x0800456f
 80044e8:	0800456f 	.word	0x0800456f
 80044ec:	0800456f 	.word	0x0800456f
 80044f0:	0800456f 	.word	0x0800456f
 80044f4:	0800456f 	.word	0x0800456f
 80044f8:	0800456f 	.word	0x0800456f
 80044fc:	0800456f 	.word	0x0800456f
 8004500:	0800456f 	.word	0x0800456f
 8004504:	0800451d 	.word	0x0800451d
 8004508:	08004531 	.word	0x08004531
 800450c:	4a79      	ldr	r2, [pc, #484]	; (80046f4 <HAL_GPIO_Init+0x2b4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004512:	e02c      	b.n	800456e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	623b      	str	r3, [r7, #32]
          break;
 800451a:	e029      	b.n	8004570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	3304      	adds	r3, #4
 8004522:	623b      	str	r3, [r7, #32]
          break;
 8004524:	e024      	b.n	8004570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	3308      	adds	r3, #8
 800452c:	623b      	str	r3, [r7, #32]
          break;
 800452e:	e01f      	b.n	8004570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	330c      	adds	r3, #12
 8004536:	623b      	str	r3, [r7, #32]
          break;
 8004538:	e01a      	b.n	8004570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004542:	2304      	movs	r3, #4
 8004544:	623b      	str	r3, [r7, #32]
          break;
 8004546:	e013      	b.n	8004570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004550:	2308      	movs	r3, #8
 8004552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	611a      	str	r2, [r3, #16]
          break;
 800455a:	e009      	b.n	8004570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800455c:	2308      	movs	r3, #8
 800455e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	615a      	str	r2, [r3, #20]
          break;
 8004566:	e003      	b.n	8004570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004568:	2300      	movs	r3, #0
 800456a:	623b      	str	r3, [r7, #32]
          break;
 800456c:	e000      	b.n	8004570 <HAL_GPIO_Init+0x130>
          break;
 800456e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2bff      	cmp	r3, #255	; 0xff
 8004574:	d801      	bhi.n	800457a <HAL_GPIO_Init+0x13a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	e001      	b.n	800457e <HAL_GPIO_Init+0x13e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2bff      	cmp	r3, #255	; 0xff
 8004584:	d802      	bhi.n	800458c <HAL_GPIO_Init+0x14c>
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	e002      	b.n	8004592 <HAL_GPIO_Init+0x152>
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	3b08      	subs	r3, #8
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	210f      	movs	r1, #15
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	6a39      	ldr	r1, [r7, #32]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	431a      	orrs	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80b1 	beq.w	8004722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045c0:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_GPIO_Init+0x2b8>)
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4a4c      	ldr	r2, [pc, #304]	; (80046f8 <HAL_GPIO_Init+0x2b8>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6193      	str	r3, [r2, #24]
 80045cc:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <HAL_GPIO_Init+0x2b8>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045d8:	4a48      	ldr	r2, [pc, #288]	; (80046fc <HAL_GPIO_Init+0x2bc>)
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	220f      	movs	r2, #15
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a40      	ldr	r2, [pc, #256]	; (8004700 <HAL_GPIO_Init+0x2c0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_GPIO_Init+0x1ec>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3f      	ldr	r2, [pc, #252]	; (8004704 <HAL_GPIO_Init+0x2c4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00d      	beq.n	8004628 <HAL_GPIO_Init+0x1e8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a3e      	ldr	r2, [pc, #248]	; (8004708 <HAL_GPIO_Init+0x2c8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <HAL_GPIO_Init+0x1e4>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a3d      	ldr	r2, [pc, #244]	; (800470c <HAL_GPIO_Init+0x2cc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_GPIO_Init+0x1e0>
 800461c:	2303      	movs	r3, #3
 800461e:	e006      	b.n	800462e <HAL_GPIO_Init+0x1ee>
 8004620:	2304      	movs	r3, #4
 8004622:	e004      	b.n	800462e <HAL_GPIO_Init+0x1ee>
 8004624:	2302      	movs	r3, #2
 8004626:	e002      	b.n	800462e <HAL_GPIO_Init+0x1ee>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <HAL_GPIO_Init+0x1ee>
 800462c:	2300      	movs	r3, #0
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	f002 0203 	and.w	r2, r2, #3
 8004634:	0092      	lsls	r2, r2, #2
 8004636:	4093      	lsls	r3, r2
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800463e:	492f      	ldr	r1, [pc, #188]	; (80046fc <HAL_GPIO_Init+0x2bc>)
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	3302      	adds	r3, #2
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004658:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	492c      	ldr	r1, [pc, #176]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
 8004664:	e006      	b.n	8004674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004666:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	43db      	mvns	r3, r3
 800466e:	4928      	ldr	r1, [pc, #160]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004670:	4013      	ands	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d006      	beq.n	800468e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004680:	4b23      	ldr	r3, [pc, #140]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	4922      	ldr	r1, [pc, #136]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	43db      	mvns	r3, r3
 8004696:	491e      	ldr	r1, [pc, #120]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 8004698:	4013      	ands	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046a8:	4b19      	ldr	r3, [pc, #100]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	4918      	ldr	r1, [pc, #96]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
 80046b4:	e006      	b.n	80046c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	43db      	mvns	r3, r3
 80046be:	4914      	ldr	r1, [pc, #80]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d021      	beq.n	8004714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	490e      	ldr	r1, [pc, #56]	; (8004710 <HAL_GPIO_Init+0x2d0>)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60cb      	str	r3, [r1, #12]
 80046dc:	e021      	b.n	8004722 <HAL_GPIO_Init+0x2e2>
 80046de:	bf00      	nop
 80046e0:	10320000 	.word	0x10320000
 80046e4:	10310000 	.word	0x10310000
 80046e8:	10220000 	.word	0x10220000
 80046ec:	10210000 	.word	0x10210000
 80046f0:	10120000 	.word	0x10120000
 80046f4:	10110000 	.word	0x10110000
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40010000 	.word	0x40010000
 8004700:	40010800 	.word	0x40010800
 8004704:	40010c00 	.word	0x40010c00
 8004708:	40011000 	.word	0x40011000
 800470c:	40011400 	.word	0x40011400
 8004710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_GPIO_Init+0x304>)
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	43db      	mvns	r3, r3
 800471c:	4909      	ldr	r1, [pc, #36]	; (8004744 <HAL_GPIO_Init+0x304>)
 800471e:	4013      	ands	r3, r2
 8004720:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	3301      	adds	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	f47f ae8e 	bne.w	8004454 <HAL_GPIO_Init+0x14>
  }
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	372c      	adds	r7, #44	; 0x2c
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr
 8004744:	40010400 	.word	0x40010400

08004748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	887b      	ldrh	r3, [r7, #2]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	e001      	b.n	800476a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
 8004782:	4613      	mov	r3, r2
 8004784:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004786:	787b      	ldrb	r3, [r7, #1]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800478c:	887a      	ldrh	r2, [r7, #2]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004792:	e003      	b.n	800479c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004794:	887b      	ldrh	r3, [r7, #2]
 8004796:	041a      	lsls	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	611a      	str	r2, [r3, #16]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	4603      	mov	r3, r0
 80047b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047b2:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d006      	beq.n	80047cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd fd1a 	bl	8002200 <HAL_GPIO_EXTI_Callback>
  }
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40010400 	.word	0x40010400

080047d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047da:	b08b      	sub	sp, #44	; 0x2c
 80047dc:	af06      	add	r7, sp, #24
 80047de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e0fd      	b.n	80049e6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f007 fd44 	bl	800c28c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2203      	movs	r2, #3
 8004808:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f003 fa2d 	bl	8007c70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	687e      	ldr	r6, [r7, #4]
 800481e:	466d      	mov	r5, sp
 8004820:	f106 0410 	add.w	r4, r6, #16
 8004824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	1d33      	adds	r3, r6, #4
 800482e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f003 f9f7 	bl	8007c24 <USB_CoreInit>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0ce      	b.n	80049e6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f003 fa28 	bl	8007ca4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	e04c      	b.n	80048f4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	440b      	add	r3, r1
 800486a:	3301      	adds	r3, #1
 800486c:	2201      	movs	r2, #1
 800486e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	440b      	add	r3, r1
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004884:	7bfa      	ldrb	r2, [r7, #15]
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	b298      	uxth	r0, r3
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	440b      	add	r3, r1
 8004896:	3336      	adds	r3, #54	; 0x36
 8004898:	4602      	mov	r2, r0
 800489a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	440b      	add	r3, r1
 80048ac:	3303      	adds	r3, #3
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	440b      	add	r3, r1
 80048c0:	3338      	adds	r3, #56	; 0x38
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048c6:	7bfa      	ldrb	r2, [r7, #15]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	333c      	adds	r3, #60	; 0x3c
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	440b      	add	r3, r1
 80048e8:	3340      	adds	r3, #64	; 0x40
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	3301      	adds	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3ad      	bcc.n	800485a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
 8004902:	e044      	b.n	800498e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	440b      	add	r3, r1
 8004912:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	440b      	add	r3, r1
 8004928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800492c:	7bfa      	ldrb	r2, [r7, #15]
 800492e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004930:	7bfa      	ldrb	r2, [r7, #15]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	440b      	add	r3, r1
 800493e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	440b      	add	r3, r1
 8004954:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	440b      	add	r3, r1
 800496a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004972:	7bfa      	ldrb	r2, [r7, #15]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	3301      	adds	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d3b5      	bcc.n	8004904 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	687e      	ldr	r6, [r7, #4]
 80049a0:	466d      	mov	r5, sp
 80049a2:	f106 0410 	add.w	r4, r6, #16
 80049a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	602b      	str	r3, [r5, #0]
 80049ae:	1d33      	adds	r3, r6, #4
 80049b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b2:	6838      	ldr	r0, [r7, #0]
 80049b4:	f003 f982 	bl	8007cbc <USB_DevInit>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e00d      	b.n	80049e6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f005 fe34 	bl	800a64c <USB_DevDisconnect>

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_PCD_Start+0x16>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e016      	b.n	8004a32 <HAL_PCD_Start+0x44>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f003 f917 	bl	8007c44 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004a16:	2101      	movs	r1, #1
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f007 feaa 	bl	800c772 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f005 fe08 	bl	800a638 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b088      	sub	sp, #32
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f005 fe0a 	bl	800a660 <USB_ReadInterrupts>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a56:	d102      	bne.n	8004a5e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fb5f 	bl	800511c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f005 fdfc 	bl	800a660 <USB_ReadInterrupts>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d112      	bne.n	8004a9a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a86:	b292      	uxth	r2, r2
 8004a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f007 fc78 	bl	800c382 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004a92:	2100      	movs	r1, #0
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f923 	bl	8004ce0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f005 fdde 	bl	800a660 <USB_ReadInterrupts>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aae:	d10b      	bne.n	8004ac8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ac2:	b292      	uxth	r2, r2
 8004ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f005 fdc7 	bl	800a660 <USB_ReadInterrupts>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004adc:	d10b      	bne.n	8004af6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004af0:	b292      	uxth	r2, r2
 8004af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f005 fdb0 	bl	800a660 <USB_ReadInterrupts>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d126      	bne.n	8004b5a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0204 	bic.w	r2, r2, #4
 8004b1e:	b292      	uxth	r2, r2
 8004b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0208 	bic.w	r2, r2, #8
 8004b36:	b292      	uxth	r2, r2
 8004b38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f007 fc59 	bl	800c3f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b54:	b292      	uxth	r2, r2
 8004b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f005 fd7e 	bl	800a660 <USB_ReadInterrupts>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6e:	f040 8082 	bne.w	8004c76 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004b72:	2300      	movs	r3, #0
 8004b74:	77fb      	strb	r3, [r7, #31]
 8004b76:	e010      	b.n	8004b9a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	7ffb      	ldrb	r3, [r7, #31]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	7ffb      	ldrb	r3, [r7, #31]
 8004b86:	8812      	ldrh	r2, [r2, #0]
 8004b88:	b292      	uxth	r2, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	3320      	adds	r3, #32
 8004b8e:	443b      	add	r3, r7
 8004b90:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004b94:	7ffb      	ldrb	r3, [r7, #31]
 8004b96:	3301      	adds	r3, #1
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	7ffb      	ldrb	r3, [r7, #31]
 8004b9c:	2b07      	cmp	r3, #7
 8004b9e:	d9eb      	bls.n	8004b78 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	b292      	uxth	r2, r2
 8004bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004bd0:	bf00      	nop
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f6      	beq.n	8004bd2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	b292      	uxth	r2, r2
 8004bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e00f      	b.n	8004c22 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004c02:	7ffb      	ldrb	r3, [r7, #31]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	7ffa      	ldrb	r2, [r7, #31]
 8004c0c:	0092      	lsls	r2, r2, #2
 8004c0e:	440a      	add	r2, r1
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	3320      	adds	r3, #32
 8004c14:	443b      	add	r3, r7
 8004c16:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c1a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004c1c:	7ffb      	ldrb	r3, [r7, #31]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	7ffb      	ldrb	r3, [r7, #31]
 8004c24:	2b07      	cmp	r3, #7
 8004c26:	d9ec      	bls.n	8004c02 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0208 	orr.w	r2, r2, #8
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c52:	b292      	uxth	r2, r2
 8004c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0204 	orr.w	r2, r2, #4
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f007 fba5 	bl	800c3c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f005 fcf0 	bl	800a660 <USB_ReadInterrupts>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8a:	d10e      	bne.n	8004caa <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c9e:	b292      	uxth	r2, r2
 8004ca0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f007 fb5e 	bl	800c366 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f005 fcd6 	bl	800a660 <USB_ReadInterrupts>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbe:	d10b      	bne.n	8004cd8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cd2:	b292      	uxth	r2, r2
 8004cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004cd8:	bf00      	nop
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_PCD_SetAddress+0x1a>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e013      	b.n	8004d22 <HAL_PCD_SetAddress+0x42>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f005 fc7d 	bl	800a612 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	4608      	mov	r0, r1
 8004d34:	4611      	mov	r1, r2
 8004d36:	461a      	mov	r2, r3
 8004d38:	4603      	mov	r3, r0
 8004d3a:	70fb      	strb	r3, [r7, #3]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	803b      	strh	r3, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da0e      	bge.n	8004d6e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4413      	add	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	705a      	strb	r2, [r3, #1]
 8004d6c:	e00e      	b.n	8004d8c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	f003 0207 	and.w	r2, r3, #7
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4413      	add	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d98:	883a      	ldrh	r2, [r7, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	78ba      	ldrb	r2, [r7, #2]
 8004da2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004db6:	78bb      	ldrb	r3, [r7, #2]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d102      	bne.n	8004dc2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_PCD_EP_Open+0xa6>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e00e      	b.n	8004dee <HAL_PCD_EP_Open+0xc4>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68f9      	ldr	r1, [r7, #12]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f002 ff8c 	bl	8007cfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004dec:	7afb      	ldrb	r3, [r7, #11]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da0e      	bge.n	8004e28 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	705a      	strb	r2, [r3, #1]
 8004e26:	e00e      	b.n	8004e46 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	f003 0207 	and.w	r2, r3, #7
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_PCD_EP_Close+0x6a>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e00e      	b.n	8004e7e <HAL_PCD_EP_Close+0x88>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68f9      	ldr	r1, [r7, #12]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f003 faae 	bl	80083d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b086      	sub	sp, #24
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	460b      	mov	r3, r1
 8004e94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e96:	7afb      	ldrb	r3, [r7, #11]
 8004e98:	f003 0207 	and.w	r2, r3, #7
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ed2:	7afb      	ldrb	r3, [r7, #11]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6979      	ldr	r1, [r7, #20]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f003 fc60 	bl	80087a8 <USB_EPStartXfer>
 8004ee8:	e005      	b.n	8004ef6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6979      	ldr	r1, [r7, #20]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f003 fc59 	bl	80087a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	f003 0207 	and.w	r2, r3, #7
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f22:	681b      	ldr	r3, [r3, #0]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f3e:	7afb      	ldrb	r3, [r7, #11]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2201      	movs	r2, #1
 8004f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f7a:	7afb      	ldrb	r3, [r7, #11]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f86:	7afb      	ldrb	r3, [r7, #11]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6979      	ldr	r1, [r7, #20]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f003 fc06 	bl	80087a8 <USB_EPStartXfer>
 8004f9c:	e005      	b.n	8004faa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6979      	ldr	r1, [r7, #20]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 fbff 	bl	80087a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	f003 0207 	and.w	r2, r3, #7
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d901      	bls.n	8004fd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e04c      	b.n	800506c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da0e      	bge.n	8004ff8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	705a      	strb	r2, [r3, #1]
 8004ff6:	e00c      	b.n	8005012 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	4413      	add	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_PCD_EP_SetStall+0x7e>
 800502e:	2302      	movs	r3, #2
 8005030:	e01c      	b.n	800506c <HAL_PCD_EP_SetStall+0xb8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	4618      	mov	r0, r3
 8005042:	f005 f9e9 	bl	800a418 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f005 fb0e 	bl	800a67e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	f003 020f 	and.w	r2, r3, #15
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d901      	bls.n	8005092 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e040      	b.n	8005114 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	da0e      	bge.n	80050b8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	705a      	strb	r2, [r3, #1]
 80050b6:	e00e      	b.n	80050d6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	f003 0207 	and.w	r2, r3, #7
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_PCD_EP_ClrStall+0x82>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e00e      	b.n	8005114 <HAL_PCD_EP_ClrStall+0xa0>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	4618      	mov	r0, r3
 8005106:	f005 f9d7 	bl	800a4b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08e      	sub	sp, #56	; 0x38
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005124:	e2ec      	b.n	8005700 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800512e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005132:	b2db      	uxtb	r3, r3
 8005134:	f003 030f 	and.w	r3, r3, #15
 8005138:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800513c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 8161 	bne.w	8005408 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d152      	bne.n	80051f6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005160:	81fb      	strh	r3, [r7, #14]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	89fb      	ldrh	r3, [r7, #14]
 8005168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800516c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3328      	adds	r3, #40	; 0x28
 8005178:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	3302      	adds	r3, #2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	441a      	add	r2, r3
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051b4:	2100      	movs	r1, #0
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f007 f8bb 	bl	800c332 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 829b 	beq.w	8005700 <PCD_EP_ISR_Handler+0x5e4>
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f040 8296 	bne.w	8005700 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	b292      	uxth	r2, r2
 80051e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051f4:	e284      	b.n	8005700 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005206:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520c:	2b00      	cmp	r3, #0
 800520e:	d034      	beq.n	800527a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005218:	b29b      	uxth	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4413      	add	r3, r2
 8005224:	3306      	adds	r3, #6
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6812      	ldr	r2, [r2, #0]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800524e:	b29b      	uxth	r3, r3
 8005250:	f005 fa65 	bl	800a71e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29a      	uxth	r2, r3
 800525c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005260:	4013      	ands	r3, r2
 8005262:	823b      	strh	r3, [r7, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	8a3a      	ldrh	r2, [r7, #16]
 800526a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800526e:	b292      	uxth	r2, r2
 8005270:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f007 f830 	bl	800c2d8 <HAL_PCD_SetupStageCallback>
 8005278:	e242      	b.n	8005700 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800527a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800527e:	2b00      	cmp	r3, #0
 8005280:	f280 823e 	bge.w	8005700 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29a      	uxth	r2, r3
 800528c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005290:	4013      	ands	r3, r2
 8005292:	83bb      	strh	r3, [r7, #28]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	8bba      	ldrh	r2, [r7, #28]
 800529a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800529e:	b292      	uxth	r2, r2
 80052a0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4413      	add	r3, r2
 80052b6:	3306      	adds	r3, #6
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d019      	beq.n	800530a <PCD_EP_ISR_Handler+0x1ee>
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d015      	beq.n	800530a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	6959      	ldr	r1, [r3, #20]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f005 fa15 	bl	800a71e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	441a      	add	r2, r3
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005302:	2100      	movs	r1, #0
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f006 fff9 	bl	800c2fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005316:	2b00      	cmp	r3, #0
 8005318:	f040 81f2 	bne.w	8005700 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800532a:	b29b      	uxth	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4413      	add	r3, r2
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d112      	bne.n	800536a <PCD_EP_ISR_Handler+0x24e>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800534e:	b29a      	uxth	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005362:	b29a      	uxth	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e02f      	b.n	80053ca <PCD_EP_ISR_Handler+0x2ae>
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b3e      	cmp	r3, #62	; 0x3e
 8005370:	d813      	bhi.n	800539a <PCD_EP_ISR_Handler+0x27e>
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	633b      	str	r3, [r7, #48]	; 0x30
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <PCD_EP_ISR_Handler+0x270>
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	3301      	adds	r3, #1
 800538a:	633b      	str	r3, [r7, #48]	; 0x30
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	b29b      	uxth	r3, r3
 8005390:	029b      	lsls	r3, r3, #10
 8005392:	b29a      	uxth	r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e017      	b.n	80053ca <PCD_EP_ISR_Handler+0x2ae>
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	633b      	str	r3, [r7, #48]	; 0x30
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <PCD_EP_ISR_Handler+0x298>
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	3b01      	subs	r3, #1
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	029b      	lsls	r3, r3, #10
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	827b      	strh	r3, [r7, #18]
 80053dc:	8a7b      	ldrh	r3, [r7, #18]
 80053de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053e2:	827b      	strh	r3, [r7, #18]
 80053e4:	8a7b      	ldrh	r3, [r7, #18]
 80053e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053ea:	827b      	strh	r3, [r7, #18]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	8a7b      	ldrh	r3, [r7, #18]
 80053f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]
 8005406:	e17b      	b.n	8005700 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800541a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800541e:	2b00      	cmp	r3, #0
 8005420:	f280 80ea 	bge.w	80055f8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29a      	uxth	r2, r3
 8005436:	f640 738f 	movw	r3, #3983	; 0xf8f
 800543a:	4013      	ands	r3, r2
 800543c:	853b      	strh	r3, [r7, #40]	; 0x28
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800544e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005452:	b292      	uxth	r2, r2
 8005454:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005456:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4413      	add	r3, r2
 800546a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	7b1b      	ldrb	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d122      	bne.n	80054ba <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4413      	add	r3, r2
 8005488:	3306      	adds	r3, #6
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800549e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8087 	beq.w	80055b4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	6959      	ldr	r1, [r3, #20]
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	88da      	ldrh	r2, [r3, #6]
 80054b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80054b4:	f005 f933 	bl	800a71e <USB_ReadPMA>
 80054b8:	e07c      	b.n	80055b4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d108      	bne.n	80054d4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054c4:	461a      	mov	r2, r3
 80054c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f927 	bl	800571c <HAL_PCD_EP_DB_Receive>
 80054ce:	4603      	mov	r3, r0
 80054d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80054d2:	e06f      	b.n	80055b4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	441a      	add	r2, r3
 80054fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005510:	b29b      	uxth	r3, r3
 8005512:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d021      	beq.n	8005572 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	3302      	adds	r3, #2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005556:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800555a:	2b00      	cmp	r3, #0
 800555c:	d02a      	beq.n	80055b4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	6959      	ldr	r1, [r3, #20]
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	891a      	ldrh	r2, [r3, #8]
 800556a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800556c:	f005 f8d7 	bl	800a71e <USB_ReadPMA>
 8005570:	e020      	b.n	80055b4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	3306      	adds	r3, #6
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800559a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800559c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	6959      	ldr	r1, [r3, #20]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	895a      	ldrh	r2, [r3, #10]
 80055ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055b0:	f005 f8b5 	bl	800a71e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ba:	441a      	add	r2, r3
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055c6:	441a      	add	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <PCD_EP_ISR_Handler+0x4c2>
 80055d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d206      	bcs.n	80055ec <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f006 fe89 	bl	800c2fc <HAL_PCD_DataOutStageCallback>
 80055ea:	e005      	b.n	80055f8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f003 f8d8 	bl	80087a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80055f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d07e      	beq.n	8005700 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005602:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4413      	add	r3, r2
 8005614:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	843b      	strh	r3, [r7, #32]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	8c3b      	ldrh	r3, [r7, #32]
 8005642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	78db      	ldrb	r3, [r3, #3]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d00c      	beq.n	8005670 <PCD_EP_ISR_Handler+0x554>
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	78db      	ldrb	r3, [r3, #3]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005662:	2b02      	cmp	r3, #2
 8005664:	d146      	bne.n	80056f4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005666:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d141      	bne.n	80056f4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	3302      	adds	r3, #2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005698:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	8bfb      	ldrh	r3, [r7, #30]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d906      	bls.n	80056b2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	8bfb      	ldrh	r3, [r7, #30]
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	619a      	str	r2, [r3, #24]
 80056b0:	e002      	b.n	80056b8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2200      	movs	r2, #0
 80056b6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f006 fe33 	bl	800c332 <HAL_PCD_DataInStageCallback>
 80056cc:	e018      	b.n	8005700 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	695a      	ldr	r2, [r3, #20]
 80056d2:	8bfb      	ldrh	r3, [r7, #30]
 80056d4:	441a      	add	r2, r3
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	69da      	ldr	r2, [r3, #28]
 80056de:	8bfb      	ldrh	r3, [r7, #30]
 80056e0:	441a      	add	r2, r3
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f003 f85b 	bl	80087a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80056f2:	e005      	b.n	8005700 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056f6:	461a      	mov	r2, r3
 80056f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f91b 	bl	8005936 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005708:	b29b      	uxth	r3, r3
 800570a:	b21b      	sxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	f6ff ad0a 	blt.w	8005126 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3738      	adds	r7, #56	; 0x38
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d07e      	beq.n	8005832 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573c:	b29b      	uxth	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4413      	add	r3, r2
 8005748:	3302      	adds	r3, #2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	8b7b      	ldrh	r3, [r7, #26]
 8005764:	429a      	cmp	r2, r3
 8005766:	d306      	bcc.n	8005776 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	8b7b      	ldrh	r3, [r7, #26]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	619a      	str	r2, [r3, #24]
 8005774:	e002      	b.n	800577c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d123      	bne.n	80057cc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	833b      	strh	r3, [r7, #24]
 80057a0:	8b3b      	ldrh	r3, [r7, #24]
 80057a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057a6:	833b      	strh	r3, [r7, #24]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	441a      	add	r2, r3
 80057b6:	8b3b      	ldrh	r3, [r7, #24]
 80057b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01f      	beq.n	8005816 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	82fb      	strh	r3, [r7, #22]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	441a      	add	r2, r3
 8005800:	8afb      	ldrh	r3, [r7, #22]
 8005802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800580e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005812:	b29b      	uxth	r3, r3
 8005814:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005816:	8b7b      	ldrh	r3, [r7, #26]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8087 	beq.w	800592c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6959      	ldr	r1, [r3, #20]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	891a      	ldrh	r2, [r3, #8]
 800582a:	8b7b      	ldrh	r3, [r7, #26]
 800582c:	f004 ff77 	bl	800a71e <USB_ReadPMA>
 8005830:	e07c      	b.n	800592c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4413      	add	r3, r2
 8005846:	3306      	adds	r3, #6
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800585a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	8b7b      	ldrh	r3, [r7, #26]
 8005862:	429a      	cmp	r2, r3
 8005864:	d306      	bcc.n	8005874 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	8b7b      	ldrh	r3, [r7, #26]
 800586c:	1ad2      	subs	r2, r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	619a      	str	r2, [r3, #24]
 8005872:	e002      	b.n	800587a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d123      	bne.n	80058ca <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589c:	83fb      	strh	r3, [r7, #30]
 800589e:	8bfb      	ldrh	r3, [r7, #30]
 80058a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058a4:	83fb      	strh	r3, [r7, #30]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	8bfb      	ldrh	r3, [r7, #30]
 80058b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11f      	bne.n	8005914 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	83bb      	strh	r3, [r7, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	8bbb      	ldrh	r3, [r7, #28]
 8005900:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005904:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005910:	b29b      	uxth	r3, r3
 8005912:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005914:	8b7b      	ldrh	r3, [r7, #26]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	6959      	ldr	r1, [r3, #20]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	895a      	ldrh	r2, [r3, #10]
 8005926:	8b7b      	ldrh	r3, [r7, #26]
 8005928:	f004 fef9 	bl	800a71e <USB_ReadPMA>
    }
  }

  return count;
 800592c:	8b7b      	ldrh	r3, [r7, #26]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b0a2      	sub	sp, #136	; 0x88
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	4613      	mov	r3, r2
 8005942:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 81c7 	beq.w	8005cde <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	3302      	adds	r3, #2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005978:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005984:	429a      	cmp	r2, r3
 8005986:	d907      	bls.n	8005998 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	699a      	ldr	r2, [r3, #24]
 800598c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005990:	1ad2      	subs	r2, r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	619a      	str	r2, [r3, #24]
 8005996:	e002      	b.n	800599e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 80b9 	bne.w	8005b1a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d126      	bne.n	80059fe <HAL_PCD_EP_DB_Transmit+0xc8>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059be:	b29b      	uxth	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	4413      	add	r3, r2
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	011a      	lsls	r2, r3, #4
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	4413      	add	r3, r2
 80059d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e01a      	b.n	8005a34 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d116      	bne.n	8005a34 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	4413      	add	r3, r2
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	011a      	lsls	r2, r3, #4
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	4413      	add	r3, r2
 8005a28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	2200      	movs	r2, #0
 8005a32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	623b      	str	r3, [r7, #32]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d126      	bne.n	8005a90 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	4413      	add	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	011a      	lsls	r2, r3, #4
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	4413      	add	r3, r2
 8005a64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e017      	b.n	8005ac0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d113      	bne.n	8005ac0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	623b      	str	r3, [r7, #32]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	011a      	lsls	r2, r3, #4
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2200      	movs	r2, #0
 8005abe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f006 fc33 	bl	800c332 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 82d4 	beq.w	8006080 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	827b      	strh	r3, [r7, #18]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	8a7b      	ldrh	r3, [r7, #18]
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]
 8005b18:	e2b2      	b.n	8006080 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d021      	beq.n	8005b68 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	441a      	add	r2, r3
 8005b50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	f040 8286 	bne.w	8006080 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b7c:	441a      	add	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	69da      	ldr	r2, [r3, #28]
 8005b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d309      	bcc.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6a1a      	ldr	r2, [r3, #32]
 8005ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba8:	1ad2      	subs	r2, r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	621a      	str	r2, [r3, #32]
 8005bae:	e015      	b.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d107      	bne.n	8005bc8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005bb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bbc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005bc6:	e009      	b.n	8005bdc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d155      	bne.n	8005c90 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	4413      	add	r3, r2
 8005bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d112      	bne.n	8005c38 <HAL_PCD_EP_DB_Transmit+0x302>
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	801a      	strh	r2, [r3, #0]
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c34:	801a      	strh	r2, [r3, #0]
 8005c36:	e047      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c3c:	d811      	bhi.n	8005c62 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c50:	3301      	adds	r3, #1
 8005c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	029b      	lsls	r3, r3, #10
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	e032      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d102      	bne.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x342>
 8005c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c74:	3b01      	subs	r3, #1
 8005c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e01b      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d117      	bne.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cac:	4413      	add	r3, r2
 8005cae:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb8:	4413      	add	r3, r2
 8005cba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6959      	ldr	r1, [r3, #20]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	891a      	ldrh	r2, [r3, #8]
 8005cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f004 fcdc 	bl	800a694 <USB_WritePMA>
 8005cdc:	e1d0      	b.n	8006080 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3306      	adds	r3, #6
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d307      	bcc.n	8005d26 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	619a      	str	r2, [r3, #24]
 8005d24:	e002      	b.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 80c4 	bne.w	8005ebe <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d126      	bne.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x456>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d52:	4413      	add	r3, r2
 8005d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	011a      	lsls	r2, r3, #4
 8005d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5e:	4413      	add	r3, r2
 8005d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e01a      	b.n	8005dc2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d116      	bne.n	8005dc2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	677b      	str	r3, [r7, #116]	; 0x74
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da8:	4413      	add	r3, r2
 8005daa:	677b      	str	r3, [r7, #116]	; 0x74
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	011a      	lsls	r2, r3, #4
 8005db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005db4:	4413      	add	r3, r2
 8005db6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dba:	673b      	str	r3, [r7, #112]	; 0x70
 8005dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d12f      	bne.n	8005e30 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005de8:	4413      	add	r3, r2
 8005dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005df8:	4413      	add	r3, r2
 8005dfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	e017      	b.n	8005e60 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d113      	bne.n	8005e60 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e46:	4413      	add	r3, r2
 8005e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	011a      	lsls	r2, r3, #4
 8005e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f006 fa63 	bl	800c332 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f040 8104 	bne.w	8006080 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
 8005ebc:	e0e0      	b.n	8006080 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d121      	bne.n	8005f0c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	f040 80b4 	bne.w	8006080 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	695a      	ldr	r2, [r3, #20]
 8005f1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f20:	441a      	add	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	69da      	ldr	r2, [r3, #28]
 8005f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f2e:	441a      	add	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d309      	bcc.n	8005f54 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6a1a      	ldr	r2, [r3, #32]
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4c:	1ad2      	subs	r2, r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	621a      	str	r2, [r3, #32]
 8005f52:	e015      	b.n	8005f80 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d107      	bne.n	8005f6c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005f5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f6a:	e009      	b.n	8005f80 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2200      	movs	r2, #0
 8005f76:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	667b      	str	r3, [r7, #100]	; 0x64
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d155      	bne.n	800603a <HAL_PCD_EP_DB_Transmit+0x704>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa2:	4413      	add	r3, r2
 8005fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	011a      	lsls	r2, r3, #4
 8005fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fae:	4413      	add	r3, r2
 8005fb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d112      	bne.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	e044      	b.n	800606c <HAL_PCD_EP_DB_Transmit+0x736>
 8005fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe6:	d811      	bhi.n	800600c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	657b      	str	r3, [r7, #84]	; 0x54
 8005fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	657b      	str	r3, [r7, #84]	; 0x54
 8005ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006000:	b29b      	uxth	r3, r3
 8006002:	029b      	lsls	r3, r3, #10
 8006004:	b29a      	uxth	r2, r3
 8006006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e02f      	b.n	800606c <HAL_PCD_EP_DB_Transmit+0x736>
 800600c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	657b      	str	r3, [r7, #84]	; 0x54
 8006012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	3b01      	subs	r3, #1
 8006020:	657b      	str	r3, [r7, #84]	; 0x54
 8006022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006024:	b29b      	uxth	r3, r3
 8006026:	029b      	lsls	r3, r3, #10
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e018      	b.n	800606c <HAL_PCD_EP_DB_Transmit+0x736>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d114      	bne.n	800606c <HAL_PCD_EP_DB_Transmit+0x736>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604a:	b29b      	uxth	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006050:	4413      	add	r3, r2
 8006052:	667b      	str	r3, [r7, #100]	; 0x64
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	011a      	lsls	r2, r3, #4
 800605a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605c:	4413      	add	r3, r2
 800605e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006062:	663b      	str	r3, [r7, #96]	; 0x60
 8006064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006066:	b29a      	uxth	r2, r3
 8006068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800606a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6959      	ldr	r1, [r3, #20]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	895a      	ldrh	r2, [r3, #10]
 8006078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607a:	b29b      	uxth	r3, r3
 800607c:	f004 fb0a 	bl	800a694 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609a:	823b      	strh	r3, [r7, #16]
 800609c:	8a3b      	ldrh	r3, [r7, #16]
 800609e:	f083 0310 	eor.w	r3, r3, #16
 80060a2:	823b      	strh	r3, [r7, #16]
 80060a4:	8a3b      	ldrh	r3, [r7, #16]
 80060a6:	f083 0320 	eor.w	r3, r3, #32
 80060aa:	823b      	strh	r3, [r7, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	8a3b      	ldrh	r3, [r7, #16]
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3788      	adds	r7, #136	; 0x88
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060da:	b480      	push	{r7}
 80060dc:	b087      	sub	sp, #28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	817b      	strh	r3, [r7, #10]
 80060e8:	4613      	mov	r3, r2
 80060ea:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060ec:	897b      	ldrh	r3, [r7, #10]
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f8:	897b      	ldrh	r3, [r7, #10]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	e009      	b.n	8006124 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006110:	897a      	ldrh	r2, [r7, #10]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006124:	893b      	ldrh	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	b29a      	uxth	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	80da      	strh	r2, [r3, #6]
 8006138:	e00b      	b.n	8006152 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	2201      	movs	r2, #1
 800613e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	b29a      	uxth	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	0c1b      	lsrs	r3, r3, #16
 800614c:	b29a      	uxth	r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	bc80      	pop	{r7}
 800615c:	4770      	bx	lr
	...

08006160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e272      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8087 	beq.w	800628e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006180:	4b92      	ldr	r3, [pc, #584]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 030c 	and.w	r3, r3, #12
 8006188:	2b04      	cmp	r3, #4
 800618a:	d00c      	beq.n	80061a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800618c:	4b8f      	ldr	r3, [pc, #572]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 030c 	and.w	r3, r3, #12
 8006194:	2b08      	cmp	r3, #8
 8006196:	d112      	bne.n	80061be <HAL_RCC_OscConfig+0x5e>
 8006198:	4b8c      	ldr	r3, [pc, #560]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a4:	d10b      	bne.n	80061be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d06c      	beq.n	800628c <HAL_RCC_OscConfig+0x12c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d168      	bne.n	800628c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e24c      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c6:	d106      	bne.n	80061d6 <HAL_RCC_OscConfig+0x76>
 80061c8:	4b80      	ldr	r3, [pc, #512]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a7f      	ldr	r2, [pc, #508]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e02e      	b.n	8006234 <HAL_RCC_OscConfig+0xd4>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10c      	bne.n	80061f8 <HAL_RCC_OscConfig+0x98>
 80061de:	4b7b      	ldr	r3, [pc, #492]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a7a      	ldr	r2, [pc, #488]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	4b78      	ldr	r3, [pc, #480]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a77      	ldr	r2, [pc, #476]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80061f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e01d      	b.n	8006234 <HAL_RCC_OscConfig+0xd4>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006200:	d10c      	bne.n	800621c <HAL_RCC_OscConfig+0xbc>
 8006202:	4b72      	ldr	r3, [pc, #456]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a71      	ldr	r2, [pc, #452]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b6f      	ldr	r3, [pc, #444]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a6e      	ldr	r2, [pc, #440]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e00b      	b.n	8006234 <HAL_RCC_OscConfig+0xd4>
 800621c:	4b6b      	ldr	r3, [pc, #428]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a6a      	ldr	r2, [pc, #424]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	4b68      	ldr	r3, [pc, #416]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a67      	ldr	r2, [pc, #412]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800622e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d013      	beq.n	8006264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fd f8ea 	bl	8003414 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006244:	f7fd f8e6 	bl	8003414 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b64      	cmp	r3, #100	; 0x64
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e200      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006256:	4b5d      	ldr	r3, [pc, #372]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0xe4>
 8006262:	e014      	b.n	800628e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fd f8d6 	bl	8003414 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626c:	f7fd f8d2 	bl	8003414 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e1ec      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800627e:	4b53      	ldr	r3, [pc, #332]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x10c>
 800628a:	e000      	b.n	800628e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800628c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d063      	beq.n	8006362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800629a:	4b4c      	ldr	r3, [pc, #304]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f003 030c 	and.w	r3, r3, #12
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80062a6:	4b49      	ldr	r3, [pc, #292]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f003 030c 	and.w	r3, r3, #12
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d11c      	bne.n	80062ec <HAL_RCC_OscConfig+0x18c>
 80062b2:	4b46      	ldr	r3, [pc, #280]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d116      	bne.n	80062ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062be:	4b43      	ldr	r3, [pc, #268]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_RCC_OscConfig+0x176>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e1c0      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d6:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4939      	ldr	r1, [pc, #228]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ea:	e03a      	b.n	8006362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d020      	beq.n	8006336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062f4:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <HAL_RCC_OscConfig+0x270>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fa:	f7fd f88b 	bl	8003414 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006302:	f7fd f887 	bl	8003414 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e1a1      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006314:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006320:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4927      	ldr	r1, [pc, #156]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006330:	4313      	orrs	r3, r2
 8006332:	600b      	str	r3, [r1, #0]
 8006334:	e015      	b.n	8006362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006336:	4b26      	ldr	r3, [pc, #152]	; (80063d0 <HAL_RCC_OscConfig+0x270>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633c:	f7fd f86a 	bl	8003414 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006344:	f7fd f866 	bl	8003414 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e180      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d03a      	beq.n	80063e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d019      	beq.n	80063aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006376:	4b17      	ldr	r3, [pc, #92]	; (80063d4 <HAL_RCC_OscConfig+0x274>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800637c:	f7fd f84a 	bl	8003414 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006384:	f7fd f846 	bl	8003414 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e160      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <HAL_RCC_OscConfig+0x26c>)
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80063a2:	2001      	movs	r0, #1
 80063a4:	f000 fac4 	bl	8006930 <RCC_Delay>
 80063a8:	e01c      	b.n	80063e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <HAL_RCC_OscConfig+0x274>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063b0:	f7fd f830 	bl	8003414 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063b6:	e00f      	b.n	80063d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b8:	f7fd f82c 	bl	8003414 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d908      	bls.n	80063d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e146      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
 80063ca:	bf00      	nop
 80063cc:	40021000 	.word	0x40021000
 80063d0:	42420000 	.word	0x42420000
 80063d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d8:	4b92      	ldr	r3, [pc, #584]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e9      	bne.n	80063b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80a6 	beq.w	800653e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063f6:	4b8b      	ldr	r3, [pc, #556]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10d      	bne.n	800641e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006402:	4b88      	ldr	r3, [pc, #544]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	4a87      	ldr	r2, [pc, #540]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800640c:	61d3      	str	r3, [r2, #28]
 800640e:	4b85      	ldr	r3, [pc, #532]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006416:	60bb      	str	r3, [r7, #8]
 8006418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800641a:	2301      	movs	r3, #1
 800641c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800641e:	4b82      	ldr	r3, [pc, #520]	; (8006628 <HAL_RCC_OscConfig+0x4c8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d118      	bne.n	800645c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800642a:	4b7f      	ldr	r3, [pc, #508]	; (8006628 <HAL_RCC_OscConfig+0x4c8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a7e      	ldr	r2, [pc, #504]	; (8006628 <HAL_RCC_OscConfig+0x4c8>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006436:	f7fc ffed 	bl	8003414 <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643e:	f7fc ffe9 	bl	8003414 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b64      	cmp	r3, #100	; 0x64
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e103      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006450:	4b75      	ldr	r3, [pc, #468]	; (8006628 <HAL_RCC_OscConfig+0x4c8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <HAL_RCC_OscConfig+0x312>
 8006464:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	4a6e      	ldr	r2, [pc, #440]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6213      	str	r3, [r2, #32]
 8006470:	e02d      	b.n	80064ce <HAL_RCC_OscConfig+0x36e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10c      	bne.n	8006494 <HAL_RCC_OscConfig+0x334>
 800647a:	4b6a      	ldr	r3, [pc, #424]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	4a69      	ldr	r2, [pc, #420]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	6213      	str	r3, [r2, #32]
 8006486:	4b67      	ldr	r3, [pc, #412]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	4a66      	ldr	r2, [pc, #408]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800648c:	f023 0304 	bic.w	r3, r3, #4
 8006490:	6213      	str	r3, [r2, #32]
 8006492:	e01c      	b.n	80064ce <HAL_RCC_OscConfig+0x36e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d10c      	bne.n	80064b6 <HAL_RCC_OscConfig+0x356>
 800649c:	4b61      	ldr	r3, [pc, #388]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	4a60      	ldr	r2, [pc, #384]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064a2:	f043 0304 	orr.w	r3, r3, #4
 80064a6:	6213      	str	r3, [r2, #32]
 80064a8:	4b5e      	ldr	r3, [pc, #376]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	4a5d      	ldr	r2, [pc, #372]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	6213      	str	r3, [r2, #32]
 80064b4:	e00b      	b.n	80064ce <HAL_RCC_OscConfig+0x36e>
 80064b6:	4b5b      	ldr	r3, [pc, #364]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	4a5a      	ldr	r2, [pc, #360]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	6213      	str	r3, [r2, #32]
 80064c2:	4b58      	ldr	r3, [pc, #352]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4a57      	ldr	r2, [pc, #348]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064c8:	f023 0304 	bic.w	r3, r3, #4
 80064cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d015      	beq.n	8006502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d6:	f7fc ff9d 	bl	8003414 <HAL_GetTick>
 80064da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064dc:	e00a      	b.n	80064f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064de:	f7fc ff99 	bl	8003414 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e0b1      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f4:	4b4b      	ldr	r3, [pc, #300]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0ee      	beq.n	80064de <HAL_RCC_OscConfig+0x37e>
 8006500:	e014      	b.n	800652c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006502:	f7fc ff87 	bl	8003414 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006508:	e00a      	b.n	8006520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fc ff83 	bl	8003414 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4293      	cmp	r3, r2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e09b      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006520:	4b40      	ldr	r3, [pc, #256]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ee      	bne.n	800650a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d105      	bne.n	800653e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006532:	4b3c      	ldr	r3, [pc, #240]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	4a3b      	ldr	r2, [pc, #236]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8087 	beq.w	8006656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006548:	4b36      	ldr	r3, [pc, #216]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f003 030c 	and.w	r3, r3, #12
 8006550:	2b08      	cmp	r3, #8
 8006552:	d061      	beq.n	8006618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	2b02      	cmp	r3, #2
 800655a:	d146      	bne.n	80065ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655c:	4b33      	ldr	r3, [pc, #204]	; (800662c <HAL_RCC_OscConfig+0x4cc>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006562:	f7fc ff57 	bl	8003414 <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800656a:	f7fc ff53 	bl	8003414 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e06d      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800657c:	4b29      	ldr	r3, [pc, #164]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006590:	d108      	bne.n	80065a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	4921      	ldr	r1, [pc, #132]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065a4:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a19      	ldr	r1, [r3, #32]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	430b      	orrs	r3, r1
 80065b6:	491b      	ldr	r1, [pc, #108]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065bc:	4b1b      	ldr	r3, [pc, #108]	; (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065be:	2201      	movs	r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c2:	f7fc ff27 	bl	8003414 <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ca:	f7fc ff23 	bl	8003414 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e03d      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065dc:	4b11      	ldr	r3, [pc, #68]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x46a>
 80065e8:	e035      	b.n	8006656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ea:	4b10      	ldr	r3, [pc, #64]	; (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f0:	f7fc ff10 	bl	8003414 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fc ff0c 	bl	8003414 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e026      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_RCC_OscConfig+0x4c4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x498>
 8006616:	e01e      	b.n	8006656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d107      	bne.n	8006630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e019      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
 8006624:	40021000 	.word	0x40021000
 8006628:	40007000 	.word	0x40007000
 800662c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_OscConfig+0x500>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	429a      	cmp	r2, r3
 8006642:	d106      	bne.n	8006652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800664e:	429a      	cmp	r2, r3
 8006650:	d001      	beq.n	8006656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40021000 	.word	0x40021000

08006664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0d0      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006678:	4b6a      	ldr	r3, [pc, #424]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d910      	bls.n	80066a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006686:	4b67      	ldr	r3, [pc, #412]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 0207 	bic.w	r2, r3, #7
 800668e:	4965      	ldr	r1, [pc, #404]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	4313      	orrs	r3, r2
 8006694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006696:	4b63      	ldr	r3, [pc, #396]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0b8      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066c0:	4b59      	ldr	r3, [pc, #356]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4a58      	ldr	r2, [pc, #352]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80066ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066d8:	4b53      	ldr	r3, [pc, #332]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4a52      	ldr	r2, [pc, #328]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80066e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e4:	4b50      	ldr	r3, [pc, #320]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	494d      	ldr	r1, [pc, #308]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d040      	beq.n	8006784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d107      	bne.n	800671a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670a:	4b47      	ldr	r3, [pc, #284]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d115      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e07f      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d107      	bne.n	8006732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006722:	4b41      	ldr	r3, [pc, #260]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e073      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006732:	4b3d      	ldr	r3, [pc, #244]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e06b      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006742:	4b39      	ldr	r3, [pc, #228]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f023 0203 	bic.w	r2, r3, #3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	4936      	ldr	r1, [pc, #216]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006750:	4313      	orrs	r3, r2
 8006752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006754:	f7fc fe5e 	bl	8003414 <HAL_GetTick>
 8006758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800675a:	e00a      	b.n	8006772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800675c:	f7fc fe5a 	bl	8003414 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f241 3288 	movw	r2, #5000	; 0x1388
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e053      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006772:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f003 020c 	and.w	r2, r3, #12
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	429a      	cmp	r2, r3
 8006782:	d1eb      	bne.n	800675c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006784:	4b27      	ldr	r3, [pc, #156]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d210      	bcs.n	80067b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b24      	ldr	r3, [pc, #144]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f023 0207 	bic.w	r2, r3, #7
 800679a:	4922      	ldr	r1, [pc, #136]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	4313      	orrs	r3, r2
 80067a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a2:	4b20      	ldr	r3, [pc, #128]	; (8006824 <HAL_RCC_ClockConfig+0x1c0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d001      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e032      	b.n	800681a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067c0:	4b19      	ldr	r3, [pc, #100]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4916      	ldr	r1, [pc, #88]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d009      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	490e      	ldr	r1, [pc, #56]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067f2:	f000 f821 	bl	8006838 <HAL_RCC_GetSysClockFreq>
 80067f6:	4602      	mov	r2, r0
 80067f8:	4b0b      	ldr	r3, [pc, #44]	; (8006828 <HAL_RCC_ClockConfig+0x1c4>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	490a      	ldr	r1, [pc, #40]	; (800682c <HAL_RCC_ClockConfig+0x1c8>)
 8006804:	5ccb      	ldrb	r3, [r1, r3]
 8006806:	fa22 f303 	lsr.w	r3, r2, r3
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <HAL_RCC_ClockConfig+0x1cc>)
 800680c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800680e:	4b09      	ldr	r3, [pc, #36]	; (8006834 <HAL_RCC_ClockConfig+0x1d0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7fc fdbc 	bl	8003390 <HAL_InitTick>

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40022000 	.word	0x40022000
 8006828:	40021000 	.word	0x40021000
 800682c:	0800c914 	.word	0x0800c914
 8006830:	20000000 	.word	0x20000000
 8006834:	20000004 	.word	0x20000004

08006838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006838:	b490      	push	{r4, r7}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800683e:	4b29      	ldr	r3, [pc, #164]	; (80068e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006840:	1d3c      	adds	r4, r7, #4
 8006842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006848:	f240 2301 	movw	r3, #513	; 0x201
 800684c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	2300      	movs	r3, #0
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006862:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f003 030c 	and.w	r3, r3, #12
 800686e:	2b04      	cmp	r3, #4
 8006870:	d002      	beq.n	8006878 <HAL_RCC_GetSysClockFreq+0x40>
 8006872:	2b08      	cmp	r3, #8
 8006874:	d003      	beq.n	800687e <HAL_RCC_GetSysClockFreq+0x46>
 8006876:	e02b      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006878:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800687a:	623b      	str	r3, [r7, #32]
      break;
 800687c:	e02b      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	0c9b      	lsrs	r3, r3, #18
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	3328      	adds	r3, #40	; 0x28
 8006888:	443b      	add	r3, r7
 800688a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800688e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d012      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800689a:	4b13      	ldr	r3, [pc, #76]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	0c5b      	lsrs	r3, r3, #17
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	3328      	adds	r3, #40	; 0x28
 80068a6:	443b      	add	r3, r7
 80068a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80068ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4a0e      	ldr	r2, [pc, #56]	; (80068ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80068b2:	fb03 f202 	mul.w	r2, r3, r2
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
 80068be:	e004      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4a0b      	ldr	r2, [pc, #44]	; (80068f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	623b      	str	r3, [r7, #32]
      break;
 80068ce:	e002      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80068d2:	623b      	str	r3, [r7, #32]
      break;
 80068d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068d6:	6a3b      	ldr	r3, [r7, #32]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3728      	adds	r7, #40	; 0x28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc90      	pop	{r4, r7}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	0800c86c 	.word	0x0800c86c
 80068e8:	40021000 	.word	0x40021000
 80068ec:	007a1200 	.word	0x007a1200
 80068f0:	003d0900 	.word	0x003d0900

080068f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f8:	4b02      	ldr	r3, [pc, #8]	; (8006904 <HAL_RCC_GetHCLKFreq+0x10>)
 80068fa:	681b      	ldr	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr
 8006904:	20000000 	.word	0x20000000

08006908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800690c:	f7ff fff2 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	0adb      	lsrs	r3, r3, #11
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4903      	ldr	r1, [pc, #12]	; (800692c <HAL_RCC_GetPCLK2Freq+0x24>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40021000 	.word	0x40021000
 800692c:	0800c924 	.word	0x0800c924

08006930 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <RCC_Delay+0x34>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0a      	ldr	r2, [pc, #40]	; (8006968 <RCC_Delay+0x38>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	0a5b      	lsrs	r3, r3, #9
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800694c:	bf00      	nop
  }
  while (Delay --);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1e5a      	subs	r2, r3, #1
 8006952:	60fa      	str	r2, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1f9      	bne.n	800694c <RCC_Delay+0x1c>
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr
 8006964:	20000000 	.word	0x20000000
 8006968:	10624dd3 	.word	0x10624dd3

0800696c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d07d      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800698c:	4b4f      	ldr	r3, [pc, #316]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10d      	bne.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006998:	4b4c      	ldr	r3, [pc, #304]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	4a4b      	ldr	r2, [pc, #300]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800699e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a2:	61d3      	str	r3, [r2, #28]
 80069a4:	4b49      	ldr	r3, [pc, #292]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b4:	4b46      	ldr	r3, [pc, #280]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d118      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069c0:	4b43      	ldr	r3, [pc, #268]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a42      	ldr	r2, [pc, #264]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069cc:	f7fc fd22 	bl	8003414 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d2:	e008      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069d4:	f7fc fd1e 	bl	8003414 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b64      	cmp	r3, #100	; 0x64
 80069e0:	d901      	bls.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e06d      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e6:	4b3a      	ldr	r3, [pc, #232]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0f0      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069f2:	4b36      	ldr	r3, [pc, #216]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d02e      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d027      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a10:	4b2e      	ldr	r3, [pc, #184]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a20:	4b2c      	ldr	r3, [pc, #176]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a26:	4a29      	ldr	r2, [pc, #164]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d014      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a36:	f7fc fced 	bl	8003414 <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a3c:	e00a      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a3e:	f7fc fce9 	bl	8003414 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e036      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a54:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0ee      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a60:	4b1a      	ldr	r3, [pc, #104]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4917      	ldr	r1, [pc, #92]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d105      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a78:	4b14      	ldr	r3, [pc, #80]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4a13      	ldr	r2, [pc, #76]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a90:	4b0e      	ldr	r3, [pc, #56]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	490b      	ldr	r1, [pc, #44]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006aae:	4b07      	ldr	r3, [pc, #28]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	4904      	ldr	r1, [pc, #16]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	42420440 	.word	0x42420440

08006ad8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b08d      	sub	sp, #52	; 0x34
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ae0:	4b58      	ldr	r3, [pc, #352]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006ae2:	f107 040c 	add.w	r4, r7, #12
 8006ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ae8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006aec:	f240 2301 	movw	r3, #513	; 0x201
 8006af0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
 8006af6:	2300      	movs	r3, #0
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afa:	2300      	movs	r3, #0
 8006afc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	2300      	movs	r3, #0
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d00a      	beq.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	f200 808e 	bhi.w	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d049      	beq.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d079      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006b20:	e086      	b.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006b22:	4b49      	ldr	r3, [pc, #292]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006b28:	4b47      	ldr	r3, [pc, #284]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d07f      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	0c9b      	lsrs	r3, r3, #18
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	3330      	adds	r3, #48	; 0x30
 8006b3e:	443b      	add	r3, r7
 8006b40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b44:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d017      	beq.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b50:	4b3d      	ldr	r3, [pc, #244]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	0c5b      	lsrs	r3, r3, #17
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	3330      	adds	r3, #48	; 0x30
 8006b5c:	443b      	add	r3, r7
 8006b5e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006b6e:	4a37      	ldr	r2, [pc, #220]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7e:	e004      	b.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	4a33      	ldr	r2, [pc, #204]	; (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006b84:	fb02 f303 	mul.w	r3, r2, r3
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006b8a:	4b2f      	ldr	r3, [pc, #188]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b96:	d102      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b9c:	e04a      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	4a2c      	ldr	r2, [pc, #176]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006bac:	e042      	b.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8006bae:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bbe:	d108      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd0:	e01f      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bdc:	d109      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006bde:	4b1a      	ldr	r3, [pc, #104]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8006bea:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bf0:	e00f      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bfc:	d11c      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006bfe:	4b12      	ldr	r3, [pc, #72]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d016      	beq.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8006c0a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c10:	e012      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006c12:	e011      	b.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006c14:	f7ff fe78 	bl	8006908 <HAL_RCC_GetPCLK2Freq>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	0b9b      	lsrs	r3, r3, #14
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	3301      	adds	r3, #1
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006c2e:	e004      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006c38:	bf00      	nop
    }
  }
  return (frequency);
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3734      	adds	r7, #52	; 0x34
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd90      	pop	{r4, r7, pc}
 8006c44:	0800c87c 	.word	0x0800c87c
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	007a1200 	.word	0x007a1200
 8006c50:	003d0900 	.word	0x003d0900
 8006c54:	aaaaaaab 	.word	0xaaaaaaab

08006c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e041      	b.n	8006cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fc fa68 	bl	8003154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f000 fcb0 	bl	80075fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d001      	beq.n	8006d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e03a      	b.n	8006d86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68da      	ldr	r2, [r3, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <HAL_TIM_Base_Start_IT+0x98>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x58>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3a:	d009      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x58>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a14      	ldr	r2, [pc, #80]	; (8006d94 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_TIM_Base_Start_IT+0x58>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <HAL_TIM_Base_Start_IT+0xa0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d111      	bne.n	8006d74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b06      	cmp	r3, #6
 8006d60:	d010      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f042 0201 	orr.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d72:	e007      	b.n	8006d84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800

08006d9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10f      	bne.n	8006de4 <HAL_TIM_Base_Stop_IT+0x48>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6a1a      	ldr	r2, [r3, #32]
 8006dca:	f240 4344 	movw	r3, #1092	; 0x444
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d107      	bne.n	8006de4 <HAL_TIM_Base_Stop_IT+0x48>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e041      	b.n	8006e8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f839 	bl	8006e96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f000 fbe0 	bl	80075fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d109      	bne.n	8006ecc <HAL_TIM_PWM_Start+0x24>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	bf14      	ite	ne
 8006ec4:	2301      	movne	r3, #1
 8006ec6:	2300      	moveq	r3, #0
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	e022      	b.n	8006f12 <HAL_TIM_PWM_Start+0x6a>
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d109      	bne.n	8006ee6 <HAL_TIM_PWM_Start+0x3e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	bf14      	ite	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	2300      	moveq	r3, #0
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	e015      	b.n	8006f12 <HAL_TIM_PWM_Start+0x6a>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d109      	bne.n	8006f00 <HAL_TIM_PWM_Start+0x58>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	bf14      	ite	ne
 8006ef8:	2301      	movne	r3, #1
 8006efa:	2300      	moveq	r3, #0
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	e008      	b.n	8006f12 <HAL_TIM_PWM_Start+0x6a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e05e      	b.n	8006fd8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIM_PWM_Start+0x82>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f28:	e013      	b.n	8006f52 <HAL_TIM_PWM_Start+0xaa>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d104      	bne.n	8006f3a <HAL_TIM_PWM_Start+0x92>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f38:	e00b      	b.n	8006f52 <HAL_TIM_PWM_Start+0xaa>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d104      	bne.n	8006f4a <HAL_TIM_PWM_Start+0xa2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f48:	e003      	b.n	8006f52 <HAL_TIM_PWM_Start+0xaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2201      	movs	r2, #1
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fdce 	bl	8007afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1e      	ldr	r2, [pc, #120]	; (8006fe0 <HAL_TIM_PWM_Start+0x138>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d107      	bne.n	8006f7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a18      	ldr	r2, [pc, #96]	; (8006fe0 <HAL_TIM_PWM_Start+0x138>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0xfa>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8c:	d009      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0xfa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a14      	ldr	r2, [pc, #80]	; (8006fe4 <HAL_TIM_PWM_Start+0x13c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0xfa>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a12      	ldr	r2, [pc, #72]	; (8006fe8 <HAL_TIM_PWM_Start+0x140>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d111      	bne.n	8006fc6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b06      	cmp	r3, #6
 8006fb2:	d010      	beq.n	8006fd6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc4:	e007      	b.n	8006fd6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0201 	orr.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40000400 	.word	0x40000400
 8006fe8:	40000800 	.word	0x40000800

08006fec <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e041      	b.n	8007084 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f839 	bl	800708c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3304      	adds	r3, #4
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f000 fae5 	bl	80075fc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0208 	bic.w	r2, r2, #8
 8007040:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6819      	ldr	r1, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d122      	bne.n	80070fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d11b      	bne.n	80070fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f06f 0202 	mvn.w	r2, #2
 80070ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f003 0303 	and.w	r3, r3, #3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fa70 	bl	80075c6 <HAL_TIM_IC_CaptureCallback>
 80070e6:	e005      	b.n	80070f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fa63 	bl	80075b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa72 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b04      	cmp	r3, #4
 8007106:	d122      	bne.n	800714e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b04      	cmp	r3, #4
 8007114:	d11b      	bne.n	800714e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f06f 0204 	mvn.w	r2, #4
 800711e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fa46 	bl	80075c6 <HAL_TIM_IC_CaptureCallback>
 800713a:	e005      	b.n	8007148 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fa39 	bl	80075b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa48 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b08      	cmp	r3, #8
 800715a:	d122      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b08      	cmp	r3, #8
 8007168:	d11b      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0208 	mvn.w	r2, #8
 8007172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2204      	movs	r2, #4
 8007178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fa1c 	bl	80075c6 <HAL_TIM_IC_CaptureCallback>
 800718e:	e005      	b.n	800719c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fa0f 	bl	80075b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa1e 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d122      	bne.n	80071f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b10      	cmp	r3, #16
 80071bc:	d11b      	bne.n	80071f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f06f 0210 	mvn.w	r2, #16
 80071c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2208      	movs	r2, #8
 80071cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f9f2 	bl	80075c6 <HAL_TIM_IC_CaptureCallback>
 80071e2:	e005      	b.n	80071f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f9e5 	bl	80075b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f9f4 	bl	80075d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b01      	cmp	r3, #1
 8007202:	d10e      	bne.n	8007222 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b01      	cmp	r3, #1
 8007210:	d107      	bne.n	8007222 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f06f 0201 	mvn.w	r2, #1
 800721a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fa ffd3 	bl	80021c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722c:	2b80      	cmp	r3, #128	; 0x80
 800722e:	d10e      	bne.n	800724e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723a:	2b80      	cmp	r3, #128	; 0x80
 800723c:	d107      	bne.n	800724e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fce2 	bl	8007c12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d10e      	bne.n	800727a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b40      	cmp	r3, #64	; 0x40
 8007268:	d107      	bne.n	800727a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f9b8 	bl	80075ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b20      	cmp	r3, #32
 8007286:	d10e      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b20      	cmp	r3, #32
 8007294:	d107      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f06f 0220 	mvn.w	r2, #32
 800729e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fcad 	bl	8007c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e0ac      	b.n	8007424 <HAL_TIM_PWM_ConfigChannel+0x174>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b0c      	cmp	r3, #12
 80072d6:	f200 809f 	bhi.w	8007418 <HAL_TIM_PWM_ConfigChannel+0x168>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007315 	.word	0x08007315
 80072e4:	08007419 	.word	0x08007419
 80072e8:	08007419 	.word	0x08007419
 80072ec:	08007419 	.word	0x08007419
 80072f0:	08007355 	.word	0x08007355
 80072f4:	08007419 	.word	0x08007419
 80072f8:	08007419 	.word	0x08007419
 80072fc:	08007419 	.word	0x08007419
 8007300:	08007397 	.word	0x08007397
 8007304:	08007419 	.word	0x08007419
 8007308:	08007419 	.word	0x08007419
 800730c:	08007419 	.word	0x08007419
 8007310:	080073d7 	.word	0x080073d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f9d0 	bl	80076c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0208 	orr.w	r2, r2, #8
 800732e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0204 	bic.w	r2, r2, #4
 800733e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6999      	ldr	r1, [r3, #24]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	619a      	str	r2, [r3, #24]
      break;
 8007352:	e062      	b.n	800741a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fa16 	bl	800778c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6999      	ldr	r1, [r3, #24]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	619a      	str	r2, [r3, #24]
      break;
 8007394:	e041      	b.n	800741a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fa5f 	bl	8007860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0208 	orr.w	r2, r2, #8
 80073b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69da      	ldr	r2, [r3, #28]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0204 	bic.w	r2, r2, #4
 80073c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69d9      	ldr	r1, [r3, #28]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	61da      	str	r2, [r3, #28]
      break;
 80073d4:	e021      	b.n	800741a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 faa9 	bl	8007934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69da      	ldr	r2, [r3, #28]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69d9      	ldr	r1, [r3, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	021a      	lsls	r2, r3, #8
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	61da      	str	r2, [r3, #28]
      break;
 8007416:	e000      	b.n	800741a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007418:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_TIM_ConfigClockSource+0x18>
 8007440:	2302      	movs	r3, #2
 8007442:	e0b3      	b.n	80075ac <HAL_TIM_ConfigClockSource+0x180>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800746a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800747c:	d03e      	beq.n	80074fc <HAL_TIM_ConfigClockSource+0xd0>
 800747e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007482:	f200 8087 	bhi.w	8007594 <HAL_TIM_ConfigClockSource+0x168>
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748a:	f000 8085 	beq.w	8007598 <HAL_TIM_ConfigClockSource+0x16c>
 800748e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007492:	d87f      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x168>
 8007494:	2b70      	cmp	r3, #112	; 0x70
 8007496:	d01a      	beq.n	80074ce <HAL_TIM_ConfigClockSource+0xa2>
 8007498:	2b70      	cmp	r3, #112	; 0x70
 800749a:	d87b      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x168>
 800749c:	2b60      	cmp	r3, #96	; 0x60
 800749e:	d050      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0x116>
 80074a0:	2b60      	cmp	r3, #96	; 0x60
 80074a2:	d877      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x168>
 80074a4:	2b50      	cmp	r3, #80	; 0x50
 80074a6:	d03c      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0xf6>
 80074a8:	2b50      	cmp	r3, #80	; 0x50
 80074aa:	d873      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x168>
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	d058      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x136>
 80074b0:	2b40      	cmp	r3, #64	; 0x40
 80074b2:	d86f      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x168>
 80074b4:	2b30      	cmp	r3, #48	; 0x30
 80074b6:	d064      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x156>
 80074b8:	2b30      	cmp	r3, #48	; 0x30
 80074ba:	d86b      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x168>
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d060      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x156>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d867      	bhi.n	8007594 <HAL_TIM_ConfigClockSource+0x168>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d05c      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x156>
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d05a      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074cc:	e062      	b.n	8007594 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6899      	ldr	r1, [r3, #8]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f000 faee 	bl	8007abe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	609a      	str	r2, [r3, #8]
      break;
 80074fa:	e04e      	b.n	800759a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6899      	ldr	r1, [r3, #8]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f000 fad7 	bl	8007abe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800751e:	609a      	str	r2, [r3, #8]
      break;
 8007520:	e03b      	b.n	800759a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6859      	ldr	r1, [r3, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	461a      	mov	r2, r3
 8007530:	f000 fa4e 	bl	80079d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2150      	movs	r1, #80	; 0x50
 800753a:	4618      	mov	r0, r3
 800753c:	f000 faa5 	bl	8007a8a <TIM_ITRx_SetConfig>
      break;
 8007540:	e02b      	b.n	800759a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	461a      	mov	r2, r3
 8007550:	f000 fa6c 	bl	8007a2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2160      	movs	r1, #96	; 0x60
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fa95 	bl	8007a8a <TIM_ITRx_SetConfig>
      break;
 8007560:	e01b      	b.n	800759a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	461a      	mov	r2, r3
 8007570:	f000 fa2e 	bl	80079d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2140      	movs	r1, #64	; 0x40
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fa85 	bl	8007a8a <TIM_ITRx_SetConfig>
      break;
 8007580:	e00b      	b.n	800759a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4619      	mov	r1, r3
 800758c:	4610      	mov	r0, r2
 800758e:	f000 fa7c 	bl	8007a8a <TIM_ITRx_SetConfig>
        break;
 8007592:	e002      	b.n	800759a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007594:	bf00      	nop
 8007596:	e000      	b.n	800759a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007598:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr

080075c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bc80      	pop	{r7}
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bc80      	pop	{r7}
 80075e8:	4770      	bx	lr

080075ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr

080075fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a29      	ldr	r2, [pc, #164]	; (80076b4 <TIM_Base_SetConfig+0xb8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00b      	beq.n	800762c <TIM_Base_SetConfig+0x30>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761a:	d007      	beq.n	800762c <TIM_Base_SetConfig+0x30>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a26      	ldr	r2, [pc, #152]	; (80076b8 <TIM_Base_SetConfig+0xbc>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d003      	beq.n	800762c <TIM_Base_SetConfig+0x30>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a25      	ldr	r2, [pc, #148]	; (80076bc <TIM_Base_SetConfig+0xc0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d108      	bne.n	800763e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1c      	ldr	r2, [pc, #112]	; (80076b4 <TIM_Base_SetConfig+0xb8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00b      	beq.n	800765e <TIM_Base_SetConfig+0x62>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764c:	d007      	beq.n	800765e <TIM_Base_SetConfig+0x62>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <TIM_Base_SetConfig+0xbc>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d003      	beq.n	800765e <TIM_Base_SetConfig+0x62>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a18      	ldr	r2, [pc, #96]	; (80076bc <TIM_Base_SetConfig+0xc0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d108      	bne.n	8007670 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a07      	ldr	r2, [pc, #28]	; (80076b4 <TIM_Base_SetConfig+0xb8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d103      	bne.n	80076a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	615a      	str	r2, [r3, #20]
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800

080076c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f023 0201 	bic.w	r2, r3, #1
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f023 0302 	bic.w	r3, r3, #2
 8007708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	4313      	orrs	r3, r2
 8007712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a1c      	ldr	r2, [pc, #112]	; (8007788 <TIM_OC1_SetConfig+0xc8>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d10c      	bne.n	8007736 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f023 0308 	bic.w	r3, r3, #8
 8007722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f023 0304 	bic.w	r3, r3, #4
 8007734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <TIM_OC1_SetConfig+0xc8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d111      	bne.n	8007762 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800774c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	621a      	str	r2, [r3, #32]
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40012c00 	.word	0x40012c00

0800778c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f023 0210 	bic.w	r2, r3, #16
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f023 0320 	bic.w	r3, r3, #32
 80077d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a1d      	ldr	r2, [pc, #116]	; (800785c <TIM_OC2_SetConfig+0xd0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d10d      	bne.n	8007808 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a14      	ldr	r2, [pc, #80]	; (800785c <TIM_OC2_SetConfig+0xd0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d113      	bne.n	8007838 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800781e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	bc80      	pop	{r7}
 800785a:	4770      	bx	lr
 800785c:	40012c00 	.word	0x40012c00

08007860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a1d      	ldr	r2, [pc, #116]	; (8007930 <TIM_OC3_SetConfig+0xd0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d10d      	bne.n	80078da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a14      	ldr	r2, [pc, #80]	; (8007930 <TIM_OC3_SetConfig+0xd0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d113      	bne.n	800790a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	621a      	str	r2, [r3, #32]
}
 8007924:	bf00      	nop
 8007926:	371c      	adds	r7, #28
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	40012c00 	.word	0x40012c00

08007934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800797e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	031b      	lsls	r3, r3, #12
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a0f      	ldr	r2, [pc, #60]	; (80079cc <TIM_OC4_SetConfig+0x98>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d109      	bne.n	80079a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800799a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	019b      	lsls	r3, r3, #6
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	621a      	str	r2, [r3, #32]
}
 80079c2:	bf00      	nop
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bc80      	pop	{r7}
 80079ca:	4770      	bx	lr
 80079cc:	40012c00 	.word	0x40012c00

080079d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f023 0201 	bic.w	r2, r3, #1
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f023 030a 	bic.w	r3, r3, #10
 8007a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	621a      	str	r2, [r3, #32]
}
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bc80      	pop	{r7}
 8007a2a:	4770      	bx	lr

08007a2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	f023 0210 	bic.w	r2, r3, #16
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	031b      	lsls	r3, r3, #12
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	621a      	str	r2, [r3, #32]
}
 8007a80:	bf00      	nop
 8007a82:	371c      	adds	r7, #28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr

08007a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f043 0307 	orr.w	r3, r3, #7
 8007aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	609a      	str	r2, [r3, #8]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b087      	sub	sp, #28
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ad8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	021a      	lsls	r2, r3, #8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	609a      	str	r2, [r3, #8]
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f003 031f 	and.w	r3, r3, #31
 8007b0e:	2201      	movs	r2, #1
 8007b10:	fa02 f303 	lsl.w	r3, r2, r3
 8007b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6a1a      	ldr	r2, [r3, #32]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	401a      	ands	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a1a      	ldr	r2, [r3, #32]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	fa01 f303 	lsl.w	r3, r1, r3
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	621a      	str	r2, [r3, #32]
}
 8007b3a:	bf00      	nop
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bc80      	pop	{r7}
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e046      	b.n	8007bea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00e      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba8:	d009      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a12      	ldr	r2, [pc, #72]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d004      	beq.n	8007bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a10      	ldr	r2, [pc, #64]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d10c      	bne.n	8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40000400 	.word	0x40000400
 8007bfc:	40000800 	.word	0x40000800

08007c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr

08007c12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c24:	b084      	sub	sp, #16
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	f107 0014 	add.w	r0, r7, #20
 8007c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	b004      	add	sp, #16
 8007c42:	4770      	bx	lr

08007c44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c54:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c78:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007c7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	43db      	mvns	r3, r3
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4013      	ands	r3, r2
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr

08007ca4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr

08007cbc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	f107 0014 	add.w	r0, r7, #20
 8007cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	b004      	add	sp, #16
 8007cfa:	4770      	bx	lr

08007cfc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b09b      	sub	sp, #108	; 0x6c
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d22:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	78db      	ldrb	r3, [r3, #3]
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d81f      	bhi.n	8007d6e <USB_ActivateEndpoint+0x72>
 8007d2e:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <USB_ActivateEndpoint+0x38>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d45 	.word	0x08007d45
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d77 	.word	0x08007d77
 8007d40:	08007d53 	.word	0x08007d53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d4c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d50:	e012      	b.n	8007d78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d56:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d5e:	e00b      	b.n	8007d78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d68:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d6c:	e004      	b.n	8007d78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007d74:	e000      	b.n	8007d78 <USB_ActivateEndpoint+0x7c>
      break;
 8007d76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	441a      	add	r2, r3
 8007d82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4313      	orrs	r3, r2
 8007dba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	441a      	add	r2, r3
 8007dc8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	7b1b      	ldrb	r3, [r3, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f040 8149 	bne.w	800807c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 8084 	beq.w	8007efc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	4413      	add	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	011a      	lsls	r2, r3, #4
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	88db      	ldrh	r3, [r3, #6]
 8007e1c:	085b      	lsrs	r3, r3, #1
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	81fb      	strh	r3, [r7, #14]
 8007e36:	89fb      	ldrh	r3, [r7, #14]
 8007e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01b      	beq.n	8007e78 <USB_ActivateEndpoint+0x17c>
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e56:	81bb      	strh	r3, [r7, #12]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	441a      	add	r2, r3
 8007e62:	89bb      	ldrh	r3, [r7, #12]
 8007e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	78db      	ldrb	r3, [r3, #3]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d020      	beq.n	8007ec2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e96:	813b      	strh	r3, [r7, #8]
 8007e98:	893b      	ldrh	r3, [r7, #8]
 8007e9a:	f083 0320 	eor.w	r3, r3, #32
 8007e9e:	813b      	strh	r3, [r7, #8]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	441a      	add	r2, r3
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	8013      	strh	r3, [r2, #0]
 8007ec0:	e27f      	b.n	80083c2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed8:	817b      	strh	r3, [r7, #10]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	441a      	add	r2, r3
 8007ee4:	897b      	ldrh	r3, [r7, #10]
 8007ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	8013      	strh	r3, [r2, #0]
 8007efa:	e262      	b.n	80083c2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	4413      	add	r3, r2
 8007f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	011a      	lsls	r2, r3, #4
 8007f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	88db      	ldrh	r3, [r3, #6]
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	4413      	add	r3, r2
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	011a      	lsls	r2, r3, #4
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f52:	623b      	str	r3, [r7, #32]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d112      	bne.n	8007f82 <USB_ActivateEndpoint+0x286>
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	801a      	strh	r2, [r3, #0]
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e02f      	b.n	8007fe2 <USB_ActivateEndpoint+0x2e6>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b3e      	cmp	r3, #62	; 0x3e
 8007f88:	d813      	bhi.n	8007fb2 <USB_ActivateEndpoint+0x2b6>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	663b      	str	r3, [r7, #96]	; 0x60
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <USB_ActivateEndpoint+0x2a8>
 8007f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8007fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	029b      	lsls	r3, r3, #10
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	801a      	strh	r2, [r3, #0]
 8007fb0:	e017      	b.n	8007fe2 <USB_ActivateEndpoint+0x2e6>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	095b      	lsrs	r3, r3, #5
 8007fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <USB_ActivateEndpoint+0x2d0>
 8007fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	663b      	str	r3, [r7, #96]	; 0x60
 8007fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	029b      	lsls	r3, r3, #10
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	83fb      	strh	r3, [r7, #30]
 8007ff0:	8bfb      	ldrh	r3, [r7, #30]
 8007ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01b      	beq.n	8008032 <USB_ActivateEndpoint+0x336>
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008010:	83bb      	strh	r3, [r7, #28]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	441a      	add	r2, r3
 800801c:	8bbb      	ldrh	r3, [r7, #28]
 800801e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008026:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800802a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802e:	b29b      	uxth	r3, r3
 8008030:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008048:	837b      	strh	r3, [r7, #26]
 800804a:	8b7b      	ldrh	r3, [r7, #26]
 800804c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008050:	837b      	strh	r3, [r7, #26]
 8008052:	8b7b      	ldrh	r3, [r7, #26]
 8008054:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008058:	837b      	strh	r3, [r7, #26]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	441a      	add	r2, r3
 8008064:	8b7b      	ldrh	r3, [r7, #26]
 8008066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008076:	b29b      	uxth	r3, r3
 8008078:	8013      	strh	r3, [r2, #0]
 800807a:	e1a2      	b.n	80083c2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	441a      	add	r2, r3
 80080a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80080a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80080b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080c8:	4413      	add	r3, r2
 80080ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	011a      	lsls	r2, r3, #4
 80080d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080da:	657b      	str	r3, [r7, #84]	; 0x54
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	891b      	ldrh	r3, [r3, #8]
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	653b      	str	r3, [r7, #80]	; 0x50
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080fc:	4413      	add	r3, r2
 80080fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	011a      	lsls	r2, r3, #4
 8008106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008108:	4413      	add	r3, r2
 800810a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800810e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	895b      	ldrh	r3, [r3, #10]
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	b29b      	uxth	r3, r3
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 8091 	bne.w	800824c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008138:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800813a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01b      	beq.n	800817a <USB_ActivateEndpoint+0x47e>
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008158:	877b      	strh	r3, [r7, #58]	; 0x3a
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	441a      	add	r2, r3
 8008164:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008176:	b29b      	uxth	r3, r3
 8008178:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	873b      	strh	r3, [r7, #56]	; 0x38
 8008188:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800818a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818e:	2b00      	cmp	r3, #0
 8008190:	d01b      	beq.n	80081ca <USB_ActivateEndpoint+0x4ce>
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4413      	add	r3, r2
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	441a      	add	r2, r3
 80081b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	441a      	add	r2, r3
 80081fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800820a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820e:	b29b      	uxth	r3, r3
 8008210:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008228:	867b      	strh	r3, [r7, #50]	; 0x32
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	441a      	add	r2, r3
 8008234:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008246:	b29b      	uxth	r3, r3
 8008248:	8013      	strh	r3, [r2, #0]
 800824a:	e0ba      	b.n	80083c2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800825c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01d      	beq.n	80082a4 <USB_ActivateEndpoint+0x5a8>
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	b29b      	uxth	r3, r3
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	441a      	add	r2, r3
 800828c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80082b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01d      	beq.n	80082fc <USB_ActivateEndpoint+0x600>
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	441a      	add	r2, r3
 80082e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80082e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	78db      	ldrb	r3, [r3, #3]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d024      	beq.n	800834e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800831e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008322:	f083 0320 	eor.w	r3, r3, #32
 8008326:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	441a      	add	r2, r3
 8008334:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800833c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008348:	b29b      	uxth	r3, r3
 800834a:	8013      	strh	r3, [r2, #0]
 800834c:	e01d      	b.n	800838a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008364:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	441a      	add	r2, r3
 8008372:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800837a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800837e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800839c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	441a      	add	r2, r3
 80083ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80083ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083be:	b29b      	uxth	r3, r3
 80083c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80083c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	376c      	adds	r7, #108	; 0x6c
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b08d      	sub	sp, #52	; 0x34
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	7b1b      	ldrb	r3, [r3, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f040 808e 	bne.w	8008500 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d044      	beq.n	8008476 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	81bb      	strh	r3, [r7, #12]
 80083fa:	89bb      	ldrh	r3, [r7, #12]
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01b      	beq.n	800843c <USB_DeactivateEndpoint+0x6c>
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29b      	uxth	r3, r3
 8008412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	817b      	strh	r3, [r7, #10]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	441a      	add	r2, r3
 8008426:	897b      	ldrh	r3, [r7, #10]
 8008428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008434:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008438:	b29b      	uxth	r3, r3
 800843a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008452:	813b      	strh	r3, [r7, #8]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	441a      	add	r2, r3
 800845e:	893b      	ldrh	r3, [r7, #8]
 8008460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800846c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008470:	b29b      	uxth	r3, r3
 8008472:	8013      	strh	r3, [r2, #0]
 8008474:	e192      	b.n	800879c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	827b      	strh	r3, [r7, #18]
 8008484:	8a7b      	ldrh	r3, [r7, #18]
 8008486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01b      	beq.n	80084c6 <USB_DeactivateEndpoint+0xf6>
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a4:	823b      	strh	r3, [r7, #16]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	441a      	add	r2, r3
 80084b0:	8a3b      	ldrh	r3, [r7, #16]
 80084b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084dc:	81fb      	strh	r3, [r7, #14]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	441a      	add	r2, r3
 80084e8:	89fb      	ldrh	r3, [r7, #14]
 80084ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	8013      	strh	r3, [r2, #0]
 80084fe:	e14d      	b.n	800879c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f040 80a5 	bne.w	8008654 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	843b      	strh	r3, [r7, #32]
 8008518:	8c3b      	ldrh	r3, [r7, #32]
 800851a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01b      	beq.n	800855a <USB_DeactivateEndpoint+0x18a>
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008538:	83fb      	strh	r3, [r7, #30]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	441a      	add	r2, r3
 8008544:	8bfb      	ldrh	r3, [r7, #30]
 8008546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800854a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800854e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008556:	b29b      	uxth	r3, r3
 8008558:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	83bb      	strh	r3, [r7, #28]
 8008568:	8bbb      	ldrh	r3, [r7, #28]
 800856a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856e:	2b00      	cmp	r3, #0
 8008570:	d01b      	beq.n	80085aa <USB_DeactivateEndpoint+0x1da>
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008588:	837b      	strh	r3, [r7, #26]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	441a      	add	r2, r3
 8008594:	8b7b      	ldrh	r3, [r7, #26]
 8008596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	833b      	strh	r3, [r7, #24]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	8b3b      	ldrh	r3, [r7, #24]
 80085ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085de:	b29b      	uxth	r3, r3
 80085e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f8:	82fb      	strh	r3, [r7, #22]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	441a      	add	r2, r3
 8008604:	8afb      	ldrh	r3, [r7, #22]
 8008606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800860e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008616:	b29b      	uxth	r3, r3
 8008618:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800862c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008630:	82bb      	strh	r3, [r7, #20]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	441a      	add	r2, r3
 800863c:	8abb      	ldrh	r3, [r7, #20]
 800863e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864e:	b29b      	uxth	r3, r3
 8008650:	8013      	strh	r3, [r2, #0]
 8008652:	e0a3      	b.n	800879c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01b      	beq.n	80086a4 <USB_DeactivateEndpoint+0x2d4>
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	b29b      	uxth	r3, r3
 800867a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008682:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800869c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80086b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01b      	beq.n	80086f4 <USB_DeactivateEndpoint+0x324>
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	441a      	add	r2, r3
 80086de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800871c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008728:	b29b      	uxth	r3, r3
 800872a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800873e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008742:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	441a      	add	r2, r3
 800874e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008760:	b29b      	uxth	r3, r3
 8008762:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877a:	847b      	strh	r3, [r7, #34]	; 0x22
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	441a      	add	r2, r3
 8008786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800878c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008798:	b29b      	uxth	r3, r3
 800879a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3734      	adds	r7, #52	; 0x34
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b0cc      	sub	sp, #304	; 0x130
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087b6:	6018      	str	r0, [r3, #0]
 80087b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	785b      	ldrb	r3, [r3, #1]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	f041 817d 	bne.w	8009ace <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80087d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	699a      	ldr	r2, [r3, #24]
 80087e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d908      	bls.n	8008802 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80087f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008800:	e007      	b.n	8008812 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	7b1b      	ldrb	r3, [r3, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d152      	bne.n	80088c8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6959      	ldr	r1, [r3, #20]
 800882e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	88da      	ldrh	r2, [r3, #6]
 800883a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800883e:	b29b      	uxth	r3, r3
 8008840:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008844:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008848:	6800      	ldr	r0, [r0, #0]
 800884a:	f001 ff23 	bl	800a694 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800884e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008852:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008856:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800885a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800885e:	6812      	ldr	r2, [r2, #0]
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008870:	b29b      	uxth	r3, r3
 8008872:	4619      	mov	r1, r3
 8008874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008878:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800887c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008880:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	440a      	add	r2, r1
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	011a      	lsls	r2, r3, #4
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4413      	add	r3, r2
 80088a4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80088a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	801a      	strh	r2, [r3, #0]
 80088c4:	f001 b8b5 	b.w	8009a32 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80088c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	78db      	ldrb	r3, [r3, #3]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	f040 84c6 	bne.w	8009266 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6a1a      	ldr	r2, [r3, #32]
 80088e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	f240 8443 	bls.w	800917e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80088f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	b29b      	uxth	r3, r3
 8008916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	441a      	add	r2, r3
 800893c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008948:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800894c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008950:	b29b      	uxth	r3, r3
 8008952:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6a1a      	ldr	r2, [r3, #32]
 8008960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008964:	1ad2      	subs	r2, r2, r3
 8008966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 823e 	beq.w	8008e16 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800899a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80089a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f040 809a 	bne.w	8008af4 <USB_EPStartXfer+0x34c>
 80089c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089d0:	6812      	ldr	r2, [r2, #0]
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	4619      	mov	r1, r3
 80089e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089f2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	440a      	add	r2, r1
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	011a      	lsls	r2, r3, #4
 8008a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4413      	add	r3, r2
 8008a16:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d122      	bne.n	8008a72 <USB_EPStartXfer+0x2ca>
 8008a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	801a      	strh	r2, [r3, #0]
 8008a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	801a      	strh	r2, [r3, #0]
 8008a70:	e079      	b.n	8008b66 <USB_EPStartXfer+0x3be>
 8008a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a76:	2b3e      	cmp	r3, #62	; 0x3e
 8008a78:	d81b      	bhi.n	8008ab2 <USB_EPStartXfer+0x30a>
 8008a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d004      	beq.n	8008a9a <USB_EPStartXfer+0x2f2>
 8008a90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a94:	3301      	adds	r3, #1
 8008a96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	029b      	lsls	r3, r3, #10
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	801a      	strh	r2, [r3, #0]
 8008ab0:	e059      	b.n	8008b66 <USB_EPStartXfer+0x3be>
 8008ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac0:	f003 031f 	and.w	r3, r3, #31
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <USB_EPStartXfer+0x32a>
 8008ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008acc:	3b01      	subs	r3, #1
 8008ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	029b      	lsls	r3, r3, #10
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	e038      	b.n	8008b66 <USB_EPStartXfer+0x3be>
 8008af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	785b      	ldrb	r3, [r3, #1]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d130      	bne.n	8008b66 <USB_EPStartXfer+0x3be>
 8008b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	4619      	mov	r1, r3
 8008b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b22:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008b26:	6812      	ldr	r2, [r2, #0]
 8008b28:	440a      	add	r2, r1
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	011a      	lsls	r2, r3, #4
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4413      	add	r3, r2
 8008b46:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	895b      	ldrh	r3, [r3, #10]
 8008b72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6959      	ldr	r1, [r3, #20]
 8008b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008b8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008b90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008b94:	6800      	ldr	r0, [r0, #0]
 8008b96:	f001 fd7d 	bl	800a694 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	695a      	ldr	r2, [r3, #20]
 8008ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008baa:	441a      	add	r2, r3
 8008bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6a1a      	ldr	r2, [r3, #32]
 8008bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d90f      	bls.n	8008bf4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6a1a      	ldr	r2, [r3, #32]
 8008be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008be4:	1ad2      	subs	r2, r2, r3
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	621a      	str	r2, [r3, #32]
 8008bf2:	e00e      	b.n	8008c12 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 809a 	bne.w	8008d58 <USB_EPStartXfer+0x5b0>
 8008c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c30:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	4619      	mov	r1, r3
 8008c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c56:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008c5a:	6812      	ldr	r2, [r2, #0]
 8008c5c:	440a      	add	r2, r1
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	011a      	lsls	r2, r3, #4
 8008c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d122      	bne.n	8008cd6 <USB_EPStartXfer+0x52e>
 8008c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ccc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	801a      	strh	r2, [r3, #0]
 8008cd4:	e083      	b.n	8008dde <USB_EPStartXfer+0x636>
 8008cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cda:	2b3e      	cmp	r3, #62	; 0x3e
 8008cdc:	d81b      	bhi.n	8008d16 <USB_EPStartXfer+0x56e>
 8008cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce2:	085b      	lsrs	r3, r3, #1
 8008ce4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d004      	beq.n	8008cfe <USB_EPStartXfer+0x556>
 8008cf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008cfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	029b      	lsls	r3, r3, #10
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	801a      	strh	r2, [r3, #0]
 8008d14:	e063      	b.n	8008dde <USB_EPStartXfer+0x636>
 8008d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1a:	095b      	lsrs	r3, r3, #5
 8008d1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d24:	f003 031f 	and.w	r3, r3, #31
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d104      	bne.n	8008d36 <USB_EPStartXfer+0x58e>
 8008d2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d30:	3b01      	subs	r3, #1
 8008d32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008d36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	029b      	lsls	r3, r3, #10
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	801a      	strh	r2, [r3, #0]
 8008d56:	e042      	b.n	8008dde <USB_EPStartXfer+0x636>
 8008d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d13a      	bne.n	8008dde <USB_EPStartXfer+0x636>
 8008d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d74:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008d96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d9a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008d9e:	6812      	ldr	r2, [r2, #0]
 8008da0:	440a      	add	r2, r1
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	011a      	lsls	r2, r3, #4
 8008db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	891b      	ldrh	r3, [r3, #8]
 8008dea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6959      	ldr	r1, [r3, #20]
 8008dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008e04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008e08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008e0c:	6800      	ldr	r0, [r0, #0]
 8008e0e:	f001 fc41 	bl	800a694 <USB_WritePMA>
 8008e12:	f000 be0e 	b.w	8009a32 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d16d      	bne.n	8008f02 <USB_EPStartXfer+0x75a>
 8008e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	461a      	mov	r2, r3
 8008e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e46:	4413      	add	r3, r2
 8008e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	011a      	lsls	r2, r3, #4
 8008e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e60:	647b      	str	r3, [r7, #68]	; 0x44
 8008e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d112      	bne.n	8008e90 <USB_EPStartXfer+0x6e8>
 8008e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e78:	801a      	strh	r2, [r3, #0]
 8008e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8c:	801a      	strh	r2, [r3, #0]
 8008e8e:	e063      	b.n	8008f58 <USB_EPStartXfer+0x7b0>
 8008e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e94:	2b3e      	cmp	r3, #62	; 0x3e
 8008e96:	d817      	bhi.n	8008ec8 <USB_EPStartXfer+0x720>
 8008e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9c:	085b      	lsrs	r3, r3, #1
 8008e9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <USB_EPStartXfer+0x710>
 8008eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008eb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	029b      	lsls	r3, r3, #10
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	e047      	b.n	8008f58 <USB_EPStartXfer+0x7b0>
 8008ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d104      	bne.n	8008ee8 <USB_EPStartXfer+0x740>
 8008ede:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ee8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	029b      	lsls	r3, r3, #10
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efe:	801a      	strh	r2, [r3, #0]
 8008f00:	e02a      	b.n	8008f58 <USB_EPStartXfer+0x7b0>
 8008f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	785b      	ldrb	r3, [r3, #1]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d122      	bne.n	8008f58 <USB_EPStartXfer+0x7b0>
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	653b      	str	r3, [r7, #80]	; 0x50
 8008f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	461a      	mov	r2, r3
 8008f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f32:	4413      	add	r3, r2
 8008f34:	653b      	str	r3, [r7, #80]	; 0x50
 8008f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	011a      	lsls	r2, r3, #4
 8008f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f46:	4413      	add	r3, r2
 8008f48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	891b      	ldrh	r3, [r3, #8]
 8008f64:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6959      	ldr	r1, [r3, #20]
 8008f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f7e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f82:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f86:	6800      	ldr	r0, [r0, #0]
 8008f88:	f001 fb84 	bl	800a694 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	695a      	ldr	r2, [r3, #20]
 8008f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f9c:	441a      	add	r2, r3
 8008f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d90f      	bls.n	8008fe6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6a1a      	ldr	r2, [r3, #32]
 8008fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd6:	1ad2      	subs	r2, r2, r3
 8008fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	621a      	str	r2, [r3, #32]
 8008fe4:	e00e      	b.n	8009004 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2200      	movs	r2, #0
 8009002:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	643b      	str	r3, [r7, #64]	; 0x40
 8009010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d16d      	bne.n	80090fc <USB_EPStartXfer+0x954>
 8009020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009024:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	63bb      	str	r3, [r7, #56]	; 0x38
 800902c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800903a:	b29b      	uxth	r3, r3
 800903c:	461a      	mov	r2, r3
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	4413      	add	r3, r2
 8009042:	63bb      	str	r3, [r7, #56]	; 0x38
 8009044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	011a      	lsls	r2, r3, #4
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	4413      	add	r3, r2
 8009056:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800905a:	637b      	str	r3, [r7, #52]	; 0x34
 800905c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d112      	bne.n	800908a <USB_EPStartXfer+0x8e2>
 8009064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29b      	uxth	r3, r3
 800906a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800906e:	b29a      	uxth	r2, r3
 8009070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009072:	801a      	strh	r2, [r3, #0]
 8009074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009086:	801a      	strh	r2, [r3, #0]
 8009088:	e05d      	b.n	8009146 <USB_EPStartXfer+0x99e>
 800908a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908e:	2b3e      	cmp	r3, #62	; 0x3e
 8009090:	d817      	bhi.n	80090c2 <USB_EPStartXfer+0x91a>
 8009092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009096:	085b      	lsrs	r3, r3, #1
 8009098:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800909c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d004      	beq.n	80090b2 <USB_EPStartXfer+0x90a>
 80090a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090ac:	3301      	adds	r3, #1
 80090ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	029b      	lsls	r3, r3, #10
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090be:	801a      	strh	r2, [r3, #0]
 80090c0:	e041      	b.n	8009146 <USB_EPStartXfer+0x99e>
 80090c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c6:	095b      	lsrs	r3, r3, #5
 80090c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d0:	f003 031f 	and.w	r3, r3, #31
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <USB_EPStartXfer+0x93a>
 80090d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090dc:	3b01      	subs	r3, #1
 80090de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80090e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	029b      	lsls	r3, r3, #10
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f8:	801a      	strh	r2, [r3, #0]
 80090fa:	e024      	b.n	8009146 <USB_EPStartXfer+0x99e>
 80090fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	785b      	ldrb	r3, [r3, #1]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d11c      	bne.n	8009146 <USB_EPStartXfer+0x99e>
 800910c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009110:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800911a:	b29b      	uxth	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009120:	4413      	add	r3, r2
 8009122:	643b      	str	r3, [r7, #64]	; 0x40
 8009124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	011a      	lsls	r2, r3, #4
 8009132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009134:	4413      	add	r3, r2
 8009136:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800913c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009140:	b29a      	uxth	r2, r3
 8009142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009144:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	895b      	ldrh	r3, [r3, #10]
 8009152:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6959      	ldr	r1, [r3, #20]
 8009162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009166:	b29b      	uxth	r3, r3
 8009168:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800916c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009170:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009174:	6800      	ldr	r0, [r0, #0]
 8009176:	f001 fa8d 	bl	800a694 <USB_WritePMA>
 800917a:	f000 bc5a 	b.w	8009a32 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800917e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800918e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800919c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80091b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80091b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	441a      	add	r2, r3
 80091d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80091d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80091ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009204:	b29b      	uxth	r3, r3
 8009206:	461a      	mov	r2, r3
 8009208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800920a:	4413      	add	r3, r2
 800920c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800920e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	011a      	lsls	r2, r3, #4
 800921c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800921e:	4413      	add	r3, r2
 8009220:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009224:	65bb      	str	r3, [r7, #88]	; 0x58
 8009226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800922a:	b29a      	uxth	r2, r3
 800922c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800922e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	891b      	ldrh	r3, [r3, #8]
 800923c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6959      	ldr	r1, [r3, #20]
 800924c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009250:	b29b      	uxth	r3, r3
 8009252:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009256:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800925a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800925e:	6800      	ldr	r0, [r0, #0]
 8009260:	f001 fa18 	bl	800a694 <USB_WritePMA>
 8009264:	e3e5      	b.n	8009a32 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29b      	uxth	r3, r3
 8009284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	441a      	add	r2, r3
 80092aa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80092ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80092ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092be:	b29b      	uxth	r3, r3
 80092c0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80092c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6a1a      	ldr	r2, [r3, #32]
 80092ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d2:	1ad2      	subs	r2, r2, r3
 80092d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 81bc 	beq.w	8009680 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	785b      	ldrb	r3, [r3, #1]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d16d      	bne.n	8009402 <USB_EPStartXfer+0xc5a>
 8009326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800932a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	67bb      	str	r3, [r7, #120]	; 0x78
 8009332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009340:	b29b      	uxth	r3, r3
 8009342:	461a      	mov	r2, r3
 8009344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009346:	4413      	add	r3, r2
 8009348:	67bb      	str	r3, [r7, #120]	; 0x78
 800934a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	011a      	lsls	r2, r3, #4
 8009358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800935a:	4413      	add	r3, r2
 800935c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009360:	677b      	str	r3, [r7, #116]	; 0x74
 8009362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d112      	bne.n	8009390 <USB_EPStartXfer+0xbe8>
 800936a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009374:	b29a      	uxth	r2, r3
 8009376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009378:	801a      	strh	r2, [r3, #0]
 800937a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009388:	b29a      	uxth	r2, r3
 800938a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800938c:	801a      	strh	r2, [r3, #0]
 800938e:	e060      	b.n	8009452 <USB_EPStartXfer+0xcaa>
 8009390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009394:	2b3e      	cmp	r3, #62	; 0x3e
 8009396:	d817      	bhi.n	80093c8 <USB_EPStartXfer+0xc20>
 8009398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800939c:	085b      	lsrs	r3, r3, #1
 800939e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d004      	beq.n	80093b8 <USB_EPStartXfer+0xc10>
 80093ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093b2:	3301      	adds	r3, #1
 80093b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093bc:	b29b      	uxth	r3, r3
 80093be:	029b      	lsls	r3, r3, #10
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093c4:	801a      	strh	r2, [r3, #0]
 80093c6:	e044      	b.n	8009452 <USB_EPStartXfer+0xcaa>
 80093c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093cc:	095b      	lsrs	r3, r3, #5
 80093ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d104      	bne.n	80093e8 <USB_EPStartXfer+0xc40>
 80093de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093e2:	3b01      	subs	r3, #1
 80093e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80093e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	029b      	lsls	r3, r3, #10
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	e027      	b.n	8009452 <USB_EPStartXfer+0xcaa>
 8009402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d11f      	bne.n	8009452 <USB_EPStartXfer+0xcaa>
 8009412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009420:	b29b      	uxth	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009428:	4413      	add	r3, r2
 800942a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800942e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	011a      	lsls	r2, r3, #4
 800943c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009440:	4413      	add	r3, r2
 8009442:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009446:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944c:	b29a      	uxth	r2, r3
 800944e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009450:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	895b      	ldrh	r3, [r3, #10]
 800945e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6959      	ldr	r1, [r3, #20]
 800946e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009472:	b29b      	uxth	r3, r3
 8009474:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009478:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800947c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009480:	6800      	ldr	r0, [r0, #0]
 8009482:	f001 f907 	bl	800a694 <USB_WritePMA>
          ep->xfer_buff += len;
 8009486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	695a      	ldr	r2, [r3, #20]
 8009492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009496:	441a      	add	r2, r3
 8009498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800949c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80094a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6a1a      	ldr	r2, [r3, #32]
 80094b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d90f      	bls.n	80094e0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80094c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6a1a      	ldr	r2, [r3, #32]
 80094cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d0:	1ad2      	subs	r2, r2, r3
 80094d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	621a      	str	r2, [r3, #32]
 80094de:	e00e      	b.n	80094fe <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80094e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80094f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2200      	movs	r2, #0
 80094fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80094fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 8295 	beq.w	8009a32 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	785b      	ldrb	r3, [r3, #1]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d16d      	bne.n	80095f4 <USB_EPStartXfer+0xe4c>
 8009518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800951c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	66bb      	str	r3, [r7, #104]	; 0x68
 8009524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009532:	b29b      	uxth	r3, r3
 8009534:	461a      	mov	r2, r3
 8009536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009538:	4413      	add	r3, r2
 800953a:	66bb      	str	r3, [r7, #104]	; 0x68
 800953c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	011a      	lsls	r2, r3, #4
 800954a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800954c:	4413      	add	r3, r2
 800954e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009552:	667b      	str	r3, [r7, #100]	; 0x64
 8009554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d112      	bne.n	8009582 <USB_EPStartXfer+0xdda>
 800955c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29b      	uxth	r3, r3
 8009562:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009566:	b29a      	uxth	r2, r3
 8009568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	b29b      	uxth	r3, r3
 8009572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800957a:	b29a      	uxth	r2, r3
 800957c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	e063      	b.n	800964a <USB_EPStartXfer+0xea2>
 8009582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009586:	2b3e      	cmp	r3, #62	; 0x3e
 8009588:	d817      	bhi.n	80095ba <USB_EPStartXfer+0xe12>
 800958a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800958e:	085b      	lsrs	r3, r3, #1
 8009590:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <USB_EPStartXfer+0xe02>
 80095a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a4:	3301      	adds	r3, #1
 80095a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	029b      	lsls	r3, r3, #10
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095b6:	801a      	strh	r2, [r3, #0]
 80095b8:	e047      	b.n	800964a <USB_EPStartXfer+0xea2>
 80095ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095be:	095b      	lsrs	r3, r3, #5
 80095c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c8:	f003 031f 	and.w	r3, r3, #31
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <USB_EPStartXfer+0xe32>
 80095d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d4:	3b01      	subs	r3, #1
 80095d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095de:	b29b      	uxth	r3, r3
 80095e0:	029b      	lsls	r3, r3, #10
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	e02a      	b.n	800964a <USB_EPStartXfer+0xea2>
 80095f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d122      	bne.n	800964a <USB_EPStartXfer+0xea2>
 8009604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	673b      	str	r3, [r7, #112]	; 0x70
 8009610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800961e:	b29b      	uxth	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009624:	4413      	add	r3, r2
 8009626:	673b      	str	r3, [r7, #112]	; 0x70
 8009628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	011a      	lsls	r2, r3, #4
 8009636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009638:	4413      	add	r3, r2
 800963a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800963e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009644:	b29a      	uxth	r2, r3
 8009646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009648:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800964a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	891b      	ldrh	r3, [r3, #8]
 8009656:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800965a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800965e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6959      	ldr	r1, [r3, #20]
 8009666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800966a:	b29b      	uxth	r3, r3
 800966c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009670:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009674:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009678:	6800      	ldr	r0, [r0, #0]
 800967a:	f001 f80b 	bl	800a694 <USB_WritePMA>
 800967e:	e1d8      	b.n	8009a32 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	785b      	ldrb	r3, [r3, #1]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d178      	bne.n	8009782 <USB_EPStartXfer+0xfda>
 8009690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800969e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	461a      	mov	r2, r3
 80096b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096b4:	4413      	add	r3, r2
 80096b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	011a      	lsls	r2, r3, #4
 80096c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096cc:	4413      	add	r3, r2
 80096ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d116      	bne.n	800970c <USB_EPStartXfer+0xf64>
 80096de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009702:	b29a      	uxth	r2, r3
 8009704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009708:	801a      	strh	r2, [r3, #0]
 800970a:	e06b      	b.n	80097e4 <USB_EPStartXfer+0x103c>
 800970c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009710:	2b3e      	cmp	r3, #62	; 0x3e
 8009712:	d818      	bhi.n	8009746 <USB_EPStartXfer+0xf9e>
 8009714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009718:	085b      	lsrs	r3, r3, #1
 800971a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800971e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <USB_EPStartXfer+0xf8c>
 800972a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800972e:	3301      	adds	r3, #1
 8009730:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009734:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009738:	b29b      	uxth	r3, r3
 800973a:	029b      	lsls	r3, r3, #10
 800973c:	b29a      	uxth	r2, r3
 800973e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e04e      	b.n	80097e4 <USB_EPStartXfer+0x103c>
 8009746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800974a:	095b      	lsrs	r3, r3, #5
 800974c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009754:	f003 031f 	and.w	r3, r3, #31
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <USB_EPStartXfer+0xfbe>
 800975c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009760:	3b01      	subs	r3, #1
 8009762:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009766:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800976a:	b29b      	uxth	r3, r3
 800976c:	029b      	lsls	r3, r3, #10
 800976e:	b29b      	uxth	r3, r3
 8009770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009778:	b29a      	uxth	r2, r3
 800977a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	e030      	b.n	80097e4 <USB_EPStartXfer+0x103c>
 8009782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	785b      	ldrb	r3, [r3, #1]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d128      	bne.n	80097e4 <USB_EPStartXfer+0x103c>
 8009792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097b6:	4413      	add	r3, r2
 80097b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80097bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	011a      	lsls	r2, r3, #4
 80097ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097ce:	4413      	add	r3, r2
 80097d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097dc:	b29a      	uxth	r2, r3
 80097de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80097e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	891b      	ldrh	r3, [r3, #8]
 80097f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6959      	ldr	r1, [r3, #20]
 8009800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009804:	b29b      	uxth	r3, r3
 8009806:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800980a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800980e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009812:	6800      	ldr	r0, [r0, #0]
 8009814:	f000 ff3e 	bl	800a694 <USB_WritePMA>
          ep->xfer_buff += len;
 8009818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800981c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	695a      	ldr	r2, [r3, #20]
 8009824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009828:	441a      	add	r2, r3
 800982a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800982e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6a1a      	ldr	r2, [r3, #32]
 8009842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	429a      	cmp	r2, r3
 8009850:	d90f      	bls.n	8009872 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6a1a      	ldr	r2, [r3, #32]
 800985e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009862:	1ad2      	subs	r2, r2, r3
 8009864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	621a      	str	r2, [r3, #32]
 8009870:	e00e      	b.n	8009890 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2200      	movs	r2, #0
 800988e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 80cc 	beq.w	8009a32 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800989a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d178      	bne.n	80099aa <USB_EPStartXfer+0x1202>
 80098b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098dc:	4413      	add	r3, r2
 80098de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	011a      	lsls	r2, r3, #4
 80098f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098f4:	4413      	add	r3, r2
 80098f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009902:	2b00      	cmp	r3, #0
 8009904:	d116      	bne.n	8009934 <USB_EPStartXfer+0x118c>
 8009906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	b29b      	uxth	r3, r3
 800990e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009912:	b29a      	uxth	r2, r3
 8009914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	b29b      	uxth	r3, r3
 8009922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800992a:	b29a      	uxth	r2, r3
 800992c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009930:	801a      	strh	r2, [r3, #0]
 8009932:	e064      	b.n	80099fe <USB_EPStartXfer+0x1256>
 8009934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009938:	2b3e      	cmp	r3, #62	; 0x3e
 800993a:	d818      	bhi.n	800996e <USB_EPStartXfer+0x11c6>
 800993c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009940:	085b      	lsrs	r3, r3, #1
 8009942:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d004      	beq.n	800995c <USB_EPStartXfer+0x11b4>
 8009952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009956:	3301      	adds	r3, #1
 8009958:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800995c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009960:	b29b      	uxth	r3, r3
 8009962:	029b      	lsls	r3, r3, #10
 8009964:	b29a      	uxth	r2, r3
 8009966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800996a:	801a      	strh	r2, [r3, #0]
 800996c:	e047      	b.n	80099fe <USB_EPStartXfer+0x1256>
 800996e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009972:	095b      	lsrs	r3, r3, #5
 8009974:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997c:	f003 031f 	and.w	r3, r3, #31
 8009980:	2b00      	cmp	r3, #0
 8009982:	d104      	bne.n	800998e <USB_EPStartXfer+0x11e6>
 8009984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009988:	3b01      	subs	r3, #1
 800998a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800998e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009992:	b29b      	uxth	r3, r3
 8009994:	029b      	lsls	r3, r3, #10
 8009996:	b29b      	uxth	r3, r3
 8009998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800999c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099a6:	801a      	strh	r2, [r3, #0]
 80099a8:	e029      	b.n	80099fe <USB_EPStartXfer+0x1256>
 80099aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	785b      	ldrb	r3, [r3, #1]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d121      	bne.n	80099fe <USB_EPStartXfer+0x1256>
 80099ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	461a      	mov	r2, r3
 80099cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099d0:	4413      	add	r3, r2
 80099d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	011a      	lsls	r2, r3, #4
 80099e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099e8:	4413      	add	r3, r2
 80099ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	895b      	ldrh	r3, [r3, #10]
 8009a0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6959      	ldr	r1, [r3, #20]
 8009a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a2c:	6800      	ldr	r0, [r0, #0]
 8009a2e:	f000 fe31 	bl	800a694 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	881b      	ldrh	r3, [r3, #0]
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a54:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a60:	8013      	strh	r3, [r2, #0]
 8009a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a66:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a6e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a72:	8812      	ldrh	r2, [r2, #0]
 8009a74:	f082 0210 	eor.w	r2, r2, #16
 8009a78:	801a      	strh	r2, [r3, #0]
 8009a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a7e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009a82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a86:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009a8a:	8812      	ldrh	r2, [r2, #0]
 8009a8c:	f082 0220 	eor.w	r2, r2, #32
 8009a90:	801a      	strh	r2, [r3, #0]
 8009a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	441a      	add	r2, r3
 8009aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	8013      	strh	r3, [r2, #0]
 8009aca:	f000 bc9f 	b.w	800a40c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	7b1b      	ldrb	r3, [r3, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f040 80ae 	bne.w	8009c3c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d917      	bls.n	8009b2c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	699a      	ldr	r2, [r3, #24]
 8009b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1c:	1ad2      	subs	r2, r2, r3
 8009b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	619a      	str	r2, [r3, #24]
 8009b2a:	e00e      	b.n	8009b4a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b6e:	4413      	add	r3, r2
 8009b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	011a      	lsls	r2, r3, #4
 8009b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b86:	4413      	add	r3, r2
 8009b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d116      	bne.n	8009bc6 <USB_EPStartXfer+0x141e>
 8009b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009baa:	801a      	strh	r2, [r3, #0]
 8009bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bc2:	801a      	strh	r2, [r3, #0]
 8009bc4:	e3e8      	b.n	800a398 <USB_EPStartXfer+0x1bf0>
 8009bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bca:	2b3e      	cmp	r3, #62	; 0x3e
 8009bcc:	d818      	bhi.n	8009c00 <USB_EPStartXfer+0x1458>
 8009bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bd2:	085b      	lsrs	r3, r3, #1
 8009bd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <USB_EPStartXfer+0x1446>
 8009be4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009be8:	3301      	adds	r3, #1
 8009bea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009bee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	029b      	lsls	r3, r3, #10
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bfc:	801a      	strh	r2, [r3, #0]
 8009bfe:	e3cb      	b.n	800a398 <USB_EPStartXfer+0x1bf0>
 8009c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c04:	095b      	lsrs	r3, r3, #5
 8009c06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c0e:	f003 031f 	and.w	r3, r3, #31
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d104      	bne.n	8009c20 <USB_EPStartXfer+0x1478>
 8009c16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	029b      	lsls	r3, r3, #10
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c38:	801a      	strh	r2, [r3, #0]
 8009c3a:	e3ad      	b.n	800a398 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	78db      	ldrb	r3, [r3, #3]
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	f040 8200 	bne.w	800a04e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	785b      	ldrb	r3, [r3, #1]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f040 8091 	bne.w	8009d82 <USB_EPStartXfer+0x15da>
 8009c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	461a      	mov	r2, r3
 8009c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c84:	4413      	add	r3, r2
 8009c86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	011a      	lsls	r2, r3, #4
 8009c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d116      	bne.n	8009ce4 <USB_EPStartXfer+0x153c>
 8009cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cc8:	801a      	strh	r2, [r3, #0]
 8009cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ce0:	801a      	strh	r2, [r3, #0]
 8009ce2:	e083      	b.n	8009dec <USB_EPStartXfer+0x1644>
 8009ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	2b3e      	cmp	r3, #62	; 0x3e
 8009cf2:	d820      	bhi.n	8009d36 <USB_EPStartXfer+0x158e>
 8009cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	085b      	lsrs	r3, r3, #1
 8009d02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d004      	beq.n	8009d24 <USB_EPStartXfer+0x157c>
 8009d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d1e:	3301      	adds	r3, #1
 8009d20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	029b      	lsls	r3, r3, #10
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d32:	801a      	strh	r2, [r3, #0]
 8009d34:	e05a      	b.n	8009dec <USB_EPStartXfer+0x1644>
 8009d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	f003 031f 	and.w	r3, r3, #31
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d104      	bne.n	8009d66 <USB_EPStartXfer+0x15be>
 8009d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d60:	3b01      	subs	r3, #1
 8009d62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	029b      	lsls	r3, r3, #10
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d7e:	801a      	strh	r2, [r3, #0]
 8009d80:	e034      	b.n	8009dec <USB_EPStartXfer+0x1644>
 8009d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	785b      	ldrb	r3, [r3, #1]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d12c      	bne.n	8009dec <USB_EPStartXfer+0x1644>
 8009d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	461a      	mov	r2, r3
 8009db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009db6:	4413      	add	r3, r2
 8009db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	011a      	lsls	r2, r3, #4
 8009dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dce:	4413      	add	r3, r2
 8009dd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009dea:	801a      	strh	r2, [r3, #0]
 8009dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 8091 	bne.w	8009f2e <USB_EPStartXfer+0x1786>
 8009e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e30:	4413      	add	r3, r2
 8009e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	011a      	lsls	r2, r3, #4
 8009e44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e48:	4413      	add	r3, r2
 8009e4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d116      	bne.n	8009e90 <USB_EPStartXfer+0x16e8>
 8009e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e74:	801a      	strh	r2, [r3, #0]
 8009e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e8c:	801a      	strh	r2, [r3, #0]
 8009e8e:	e07c      	b.n	8009f8a <USB_EPStartXfer+0x17e2>
 8009e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	2b3e      	cmp	r3, #62	; 0x3e
 8009e9e:	d820      	bhi.n	8009ee2 <USB_EPStartXfer+0x173a>
 8009ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	085b      	lsrs	r3, r3, #1
 8009eae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d004      	beq.n	8009ed0 <USB_EPStartXfer+0x1728>
 8009ec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009eca:	3301      	adds	r3, #1
 8009ecc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	029b      	lsls	r3, r3, #10
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ede:	801a      	strh	r2, [r3, #0]
 8009ee0:	e053      	b.n	8009f8a <USB_EPStartXfer+0x17e2>
 8009ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	095b      	lsrs	r3, r3, #5
 8009ef0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	f003 031f 	and.w	r3, r3, #31
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <USB_EPStartXfer+0x176a>
 8009f08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	029b      	lsls	r3, r3, #10
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	e02d      	b.n	8009f8a <USB_EPStartXfer+0x17e2>
 8009f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d125      	bne.n	8009f8a <USB_EPStartXfer+0x17e2>
 8009f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f54:	4413      	add	r3, r2
 8009f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	011a      	lsls	r2, r3, #4
 8009f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f88:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 81fe 	beq.w	800a398 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <USB_EPStartXfer+0x182c>
 8009fc8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10d      	bne.n	8009ff0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fd4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f040 81db 	bne.w	800a398 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fe2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f040 81d4 	bne.w	800a398 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ff4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a016:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a01a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	441a      	add	r2, r3
 800a034:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a03c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a048:	b29b      	uxth	r3, r3
 800a04a:	8013      	strh	r3, [r2, #0]
 800a04c:	e1a4      	b.n	800a398 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a04e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	78db      	ldrb	r3, [r3, #3]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	f040 819a 	bne.w	800a394 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	699a      	ldr	r2, [r3, #24]
 800a06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d917      	bls.n	800a0ac <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a07c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a08c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	699a      	ldr	r2, [r3, #24]
 800a098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a09c:	1ad2      	subs	r2, r2, r3
 800a09e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	619a      	str	r2, [r3, #24]
 800a0aa:	e00e      	b.n	800a0ca <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a0bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a0ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	785b      	ldrb	r3, [r3, #1]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d178      	bne.n	800a1cc <USB_EPStartXfer+0x1a24>
 800a0da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0fe:	4413      	add	r3, r2
 800a100:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	011a      	lsls	r2, r3, #4
 800a112:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a116:	4413      	add	r3, r2
 800a118:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a11c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a124:	2b00      	cmp	r3, #0
 800a126:	d116      	bne.n	800a156 <USB_EPStartXfer+0x19ae>
 800a128:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a134:	b29a      	uxth	r2, r3
 800a136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a13a:	801a      	strh	r2, [r3, #0]
 800a13c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a152:	801a      	strh	r2, [r3, #0]
 800a154:	e06b      	b.n	800a22e <USB_EPStartXfer+0x1a86>
 800a156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a15a:	2b3e      	cmp	r3, #62	; 0x3e
 800a15c:	d818      	bhi.n	800a190 <USB_EPStartXfer+0x19e8>
 800a15e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a162:	085b      	lsrs	r3, r3, #1
 800a164:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	d004      	beq.n	800a17e <USB_EPStartXfer+0x19d6>
 800a174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a178:	3301      	adds	r3, #1
 800a17a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a17e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a182:	b29b      	uxth	r3, r3
 800a184:	029b      	lsls	r3, r3, #10
 800a186:	b29a      	uxth	r2, r3
 800a188:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	e04e      	b.n	800a22e <USB_EPStartXfer+0x1a86>
 800a190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a194:	095b      	lsrs	r3, r3, #5
 800a196:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a19a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a19e:	f003 031f 	and.w	r3, r3, #31
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d104      	bne.n	800a1b0 <USB_EPStartXfer+0x1a08>
 800a1a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	029b      	lsls	r3, r3, #10
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1c8:	801a      	strh	r2, [r3, #0]
 800a1ca:	e030      	b.n	800a22e <USB_EPStartXfer+0x1a86>
 800a1cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	785b      	ldrb	r3, [r3, #1]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d128      	bne.n	800a22e <USB_EPStartXfer+0x1a86>
 800a1dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a200:	4413      	add	r3, r2
 800a202:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a20a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	011a      	lsls	r2, r3, #4
 800a214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a218:	4413      	add	r3, r2
 800a21a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a21e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a226:	b29a      	uxth	r2, r3
 800a228:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a22c:	801a      	strh	r2, [r3, #0]
 800a22e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a23c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d178      	bne.n	800a33e <USB_EPStartXfer+0x1b96>
 800a24c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a25a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a25e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a268:	b29b      	uxth	r3, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a270:	4413      	add	r3, r2
 800a272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a27a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	011a      	lsls	r2, r3, #4
 800a284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a288:	4413      	add	r3, r2
 800a28a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a28e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a296:	2b00      	cmp	r3, #0
 800a298:	d116      	bne.n	800a2c8 <USB_EPStartXfer+0x1b20>
 800a29a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2ac:	801a      	strh	r2, [r3, #0]
 800a2ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2c4:	801a      	strh	r2, [r3, #0]
 800a2c6:	e067      	b.n	800a398 <USB_EPStartXfer+0x1bf0>
 800a2c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2cc:	2b3e      	cmp	r3, #62	; 0x3e
 800a2ce:	d818      	bhi.n	800a302 <USB_EPStartXfer+0x1b5a>
 800a2d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2d4:	085b      	lsrs	r3, r3, #1
 800a2d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d004      	beq.n	800a2f0 <USB_EPStartXfer+0x1b48>
 800a2e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	029b      	lsls	r3, r3, #10
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2fe:	801a      	strh	r2, [r3, #0]
 800a300:	e04a      	b.n	800a398 <USB_EPStartXfer+0x1bf0>
 800a302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a306:	095b      	lsrs	r3, r3, #5
 800a308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a30c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a310:	f003 031f 	and.w	r3, r3, #31
 800a314:	2b00      	cmp	r3, #0
 800a316:	d104      	bne.n	800a322 <USB_EPStartXfer+0x1b7a>
 800a318:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a31c:	3b01      	subs	r3, #1
 800a31e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a326:	b29b      	uxth	r3, r3
 800a328:	029b      	lsls	r3, r3, #10
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a334:	b29a      	uxth	r2, r3
 800a336:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a33a:	801a      	strh	r2, [r3, #0]
 800a33c:	e02c      	b.n	800a398 <USB_EPStartXfer+0x1bf0>
 800a33e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d124      	bne.n	800a398 <USB_EPStartXfer+0x1bf0>
 800a34e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a352:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	461a      	mov	r2, r3
 800a360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a364:	4413      	add	r3, r2
 800a366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a36a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	011a      	lsls	r2, r3, #4
 800a378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a37c:	4413      	add	r3, r2
 800a37e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a382:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a390:	801a      	strh	r2, [r3, #0]
 800a392:	e001      	b.n	800a398 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e03a      	b.n	800a40e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3c2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3ce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a3d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a3da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	441a      	add	r2, r3
 800a3f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a408:	b29b      	uxth	r3, r3
 800a40a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d020      	beq.n	800a46c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	b29b      	uxth	r3, r3
 800a438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a43c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a440:	81bb      	strh	r3, [r7, #12]
 800a442:	89bb      	ldrh	r3, [r7, #12]
 800a444:	f083 0310 	eor.w	r3, r3, #16
 800a448:	81bb      	strh	r3, [r7, #12]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	441a      	add	r2, r3
 800a454:	89bb      	ldrh	r3, [r7, #12]
 800a456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a45a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a45e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a466:	b29b      	uxth	r3, r3
 800a468:	8013      	strh	r3, [r2, #0]
 800a46a:	e01f      	b.n	800a4ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a47e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a482:	81fb      	strh	r3, [r7, #14]
 800a484:	89fb      	ldrh	r3, [r7, #14]
 800a486:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a48a:	81fb      	strh	r3, [r7, #14]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	441a      	add	r2, r3
 800a496:	89fb      	ldrh	r3, [r7, #14]
 800a498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a49c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bc80      	pop	{r7}
 800a4b6:	4770      	bx	lr

0800a4b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	7b1b      	ldrb	r3, [r3, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f040 809d 	bne.w	800a606 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	785b      	ldrb	r3, [r3, #1]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d04c      	beq.n	800a56e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	823b      	strh	r3, [r7, #16]
 800a4e2:	8a3b      	ldrh	r3, [r7, #16]
 800a4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01b      	beq.n	800a524 <USB_EPClearStall+0x6c>
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a502:	81fb      	strh	r3, [r7, #14]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	441a      	add	r2, r3
 800a50e:	89fb      	ldrh	r3, [r7, #14]
 800a510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a51c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a520:	b29b      	uxth	r3, r3
 800a522:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	78db      	ldrb	r3, [r3, #3]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d06c      	beq.n	800a606 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a542:	81bb      	strh	r3, [r7, #12]
 800a544:	89bb      	ldrh	r3, [r7, #12]
 800a546:	f083 0320 	eor.w	r3, r3, #32
 800a54a:	81bb      	strh	r3, [r7, #12]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	441a      	add	r2, r3
 800a556:	89bb      	ldrh	r3, [r7, #12]
 800a558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a55c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	b29b      	uxth	r3, r3
 800a56a:	8013      	strh	r3, [r2, #0]
 800a56c:	e04b      	b.n	800a606 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4413      	add	r3, r2
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	82fb      	strh	r3, [r7, #22]
 800a57c:	8afb      	ldrh	r3, [r7, #22]
 800a57e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d01b      	beq.n	800a5be <USB_EPClearStall+0x106>
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	4413      	add	r3, r2
 800a590:	881b      	ldrh	r3, [r3, #0]
 800a592:	b29b      	uxth	r3, r3
 800a594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59c:	82bb      	strh	r3, [r7, #20]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	441a      	add	r2, r3
 800a5a8:	8abb      	ldrh	r3, [r7, #20]
 800a5aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d4:	827b      	strh	r3, [r7, #18]
 800a5d6:	8a7b      	ldrh	r3, [r7, #18]
 800a5d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5dc:	827b      	strh	r3, [r7, #18]
 800a5de:	8a7b      	ldrh	r3, [r7, #18]
 800a5e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a5e4:	827b      	strh	r3, [r7, #18]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	441a      	add	r2, r3
 800a5f0:	8a7b      	ldrh	r3, [r7, #18]
 800a5f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a602:	b29b      	uxth	r3, r3
 800a604:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	371c      	adds	r7, #28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bc80      	pop	{r7}
 800a610:	4770      	bx	lr

0800a612 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d103      	bne.n	800a62c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2280      	movs	r2, #128	; 0x80
 800a628:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	bc80      	pop	{r7}
 800a636:	4770      	bx	lr

0800a638 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	bc80      	pop	{r7}
 800a64a:	4770      	bx	lr

0800a64c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bc80      	pop	{r7}
 800a65e:	4770      	bx	lr

0800a660 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a66e:	b29b      	uxth	r3, r3
 800a670:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a672:	68fb      	ldr	r3, [r7, #12]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	bc80      	pop	{r7}
 800a67c:	4770      	bx	lr

0800a67e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	bc80      	pop	{r7}
 800a692:	4770      	bx	lr

0800a694 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a694:	b480      	push	{r7}
 800a696:	b08d      	sub	sp, #52	; 0x34
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	4611      	mov	r1, r2
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	80fb      	strh	r3, [r7, #6]
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a6aa:	88bb      	ldrh	r3, [r7, #4]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	085b      	lsrs	r3, r3, #1
 800a6b0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	005a      	lsls	r2, r3, #1
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6c6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6cc:	e01e      	b.n	800a70c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	3302      	adds	r3, #2
 800a6f8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	3302      	adds	r3, #2
 800a6fe:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	3301      	adds	r3, #1
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	3b01      	subs	r3, #1
 800a70a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1dd      	bne.n	800a6ce <USB_WritePMA+0x3a>
  }
}
 800a712:	bf00      	nop
 800a714:	bf00      	nop
 800a716:	3734      	adds	r7, #52	; 0x34
 800a718:	46bd      	mov	sp, r7
 800a71a:	bc80      	pop	{r7}
 800a71c:	4770      	bx	lr

0800a71e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a71e:	b480      	push	{r7}
 800a720:	b08b      	sub	sp, #44	; 0x2c
 800a722:	af00      	add	r7, sp, #0
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	4611      	mov	r1, r2
 800a72a:	461a      	mov	r2, r3
 800a72c:	460b      	mov	r3, r1
 800a72e:	80fb      	strh	r3, [r7, #6]
 800a730:	4613      	mov	r3, r2
 800a732:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a734:	88bb      	ldrh	r3, [r7, #4]
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	b29b      	uxth	r3, r3
 800a73a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a744:	88fb      	ldrh	r3, [r7, #6]
 800a746:	005a      	lsls	r2, r3, #1
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a750:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
 800a756:	e01b      	b.n	800a790 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	3302      	adds	r3, #2
 800a764:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	3301      	adds	r3, #1
 800a772:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	0a1b      	lsrs	r3, r3, #8
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	3301      	adds	r3, #1
 800a782:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a784:	6a3b      	ldr	r3, [r7, #32]
 800a786:	3302      	adds	r3, #2
 800a788:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	3b01      	subs	r3, #1
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e0      	bne.n	800a758 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a796:	88bb      	ldrh	r3, [r7, #4]
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d007      	beq.n	800a7b2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	701a      	strb	r2, [r3, #0]
  }
}
 800a7b2:	bf00      	nop
 800a7b4:	372c      	adds	r7, #44	; 0x2c
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bc80      	pop	{r7}
 800a7ba:	4770      	bx	lr

0800a7bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	7c1b      	ldrb	r3, [r3, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d115      	bne.n	800a800 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a7d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7d8:	2202      	movs	r2, #2
 800a7da:	2181      	movs	r1, #129	; 0x81
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 fe8c 	bl	800c4fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 fe82 	bl	800c4fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a7fe:	e012      	b.n	800a826 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a800:	2340      	movs	r3, #64	; 0x40
 800a802:	2202      	movs	r2, #2
 800a804:	2181      	movs	r1, #129	; 0x81
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f001 fe77 	bl	800c4fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a812:	2340      	movs	r3, #64	; 0x40
 800a814:	2202      	movs	r2, #2
 800a816:	2101      	movs	r1, #1
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f001 fe6e 	bl	800c4fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a826:	2308      	movs	r3, #8
 800a828:	2203      	movs	r2, #3
 800a82a:	2182      	movs	r1, #130	; 0x82
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f001 fe64 	bl	800c4fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a838:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a83c:	f001 ff84 	bl	800c748 <USBD_static_malloc>
 800a840:	4602      	mov	r2, r0
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d102      	bne.n	800a858 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a852:	2301      	movs	r3, #1
 800a854:	73fb      	strb	r3, [r7, #15]
 800a856:	e026      	b.n	800a8a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a85e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2200      	movs	r2, #0
 800a876:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	7c1b      	ldrb	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d109      	bne.n	800a896 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a88c:	2101      	movs	r1, #1
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f001 ff24 	bl	800c6dc <USBD_LL_PrepareReceive>
 800a894:	e007      	b.n	800a8a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a89c:	2340      	movs	r3, #64	; 0x40
 800a89e:	2101      	movs	r1, #1
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 ff1b 	bl	800c6dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8c0:	2181      	movs	r1, #129	; 0x81
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 fe3f 	bl	800c546 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fe38 	bl	800c546 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8de:	2182      	movs	r1, #130	; 0x82
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f001 fe30 	bl	800c546 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00e      	beq.n	800a914 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a906:	4618      	mov	r0, r3
 800a908:	f001 ff2a 	bl	800c760 <USBD_static_free>
    pdev->pClassData = NULL;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b086      	sub	sp, #24
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a944:	2b00      	cmp	r3, #0
 800a946:	d039      	beq.n	800a9bc <USBD_CDC_Setup+0x9e>
 800a948:	2b20      	cmp	r3, #32
 800a94a:	d17f      	bne.n	800aa4c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	88db      	ldrh	r3, [r3, #6]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d029      	beq.n	800a9a8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	b25b      	sxtb	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	da11      	bge.n	800a982 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a96a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	88d2      	ldrh	r2, [r2, #6]
 800a970:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a972:	6939      	ldr	r1, [r7, #16]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	88db      	ldrh	r3, [r3, #6]
 800a978:	461a      	mov	r2, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 fa09 	bl	800bd92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a980:	e06b      	b.n	800aa5a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	785a      	ldrb	r2, [r3, #1]
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	88db      	ldrh	r3, [r3, #6]
 800a990:	b2da      	uxtb	r2, r3
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a998:	6939      	ldr	r1, [r7, #16]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	88db      	ldrh	r3, [r3, #6]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f001 fa24 	bl	800bdee <USBD_CtlPrepareRx>
      break;
 800a9a6:	e058      	b.n	800aa5a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	7850      	ldrb	r0, [r2, #1]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	4798      	blx	r3
      break;
 800a9ba:	e04e      	b.n	800aa5a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	785b      	ldrb	r3, [r3, #1]
 800a9c0:	2b0b      	cmp	r3, #11
 800a9c2:	d02e      	beq.n	800aa22 <USBD_CDC_Setup+0x104>
 800a9c4:	2b0b      	cmp	r3, #11
 800a9c6:	dc38      	bgt.n	800aa3a <USBD_CDC_Setup+0x11c>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <USBD_CDC_Setup+0xb4>
 800a9cc:	2b0a      	cmp	r3, #10
 800a9ce:	d014      	beq.n	800a9fa <USBD_CDC_Setup+0xdc>
 800a9d0:	e033      	b.n	800aa3a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d107      	bne.n	800a9ec <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a9dc:	f107 030c 	add.w	r3, r7, #12
 800a9e0:	2202      	movs	r2, #2
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f001 f9d4 	bl	800bd92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9ea:	e02e      	b.n	800aa4a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 f965 	bl	800bcbe <USBD_CtlError>
            ret = USBD_FAIL;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	75fb      	strb	r3, [r7, #23]
          break;
 800a9f8:	e027      	b.n	800aa4a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d107      	bne.n	800aa14 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa04:	f107 030f 	add.w	r3, r7, #15
 800aa08:	2201      	movs	r2, #1
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f001 f9c0 	bl	800bd92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa12:	e01a      	b.n	800aa4a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 f951 	bl	800bcbe <USBD_CtlError>
            ret = USBD_FAIL;
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa20:	e013      	b.n	800aa4a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d00d      	beq.n	800aa48 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 f945 	bl	800bcbe <USBD_CtlError>
            ret = USBD_FAIL;
 800aa34:	2302      	movs	r3, #2
 800aa36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa38:	e006      	b.n	800aa48 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 f93e 	bl	800bcbe <USBD_CtlError>
          ret = USBD_FAIL;
 800aa42:	2302      	movs	r3, #2
 800aa44:	75fb      	strb	r3, [r7, #23]
          break;
 800aa46:	e000      	b.n	800aa4a <USBD_CDC_Setup+0x12c>
          break;
 800aa48:	bf00      	nop
      }
      break;
 800aa4a:	e006      	b.n	800aa5a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 f935 	bl	800bcbe <USBD_CtlError>
      ret = USBD_FAIL;
 800aa54:	2302      	movs	r3, #2
 800aa56:	75fb      	strb	r3, [r7, #23]
      break;
 800aa58:	bf00      	nop
  }

  return ret;
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa76:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa7e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d03a      	beq.n	800ab00 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa8a:	78fa      	ldrb	r2, [r7, #3]
 800aa8c:	6879      	ldr	r1, [r7, #4]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	4413      	add	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	440b      	add	r3, r1
 800aa98:	331c      	adds	r3, #28
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d029      	beq.n	800aaf4 <USBD_CDC_DataIn+0x90>
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	331c      	adds	r3, #28
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	78f9      	ldrb	r1, [r7, #3]
 800aab4:	68b8      	ldr	r0, [r7, #8]
 800aab6:	460b      	mov	r3, r1
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	440b      	add	r3, r1
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	4403      	add	r3, r0
 800aac0:	3338      	adds	r3, #56	; 0x38
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	fbb2 f1f3 	udiv	r1, r2, r3
 800aac8:	fb01 f303 	mul.w	r3, r1, r3
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d110      	bne.n	800aaf4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	440b      	add	r3, r1
 800aae0:	331c      	adds	r3, #28
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aae6:	78f9      	ldrb	r1, [r7, #3]
 800aae8:	2300      	movs	r3, #0
 800aaea:	2200      	movs	r2, #0
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 fdd2 	bl	800c696 <USBD_LL_Transmit>
 800aaf2:	e003      	b.n	800aafc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	e000      	b.n	800ab02 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ab00:	2302      	movs	r3, #2
  }
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	460b      	mov	r3, r1
 800ab14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab1c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab1e:	78fb      	ldrb	r3, [r7, #3]
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 fdfd 	bl	800c722 <USBD_LL_GetRxDataSize>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00d      	beq.n	800ab56 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab4e:	4611      	mov	r1, r2
 800ab50:	4798      	blx	r3

    return USBD_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	e000      	b.n	800ab58 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ab56:	2302      	movs	r3, #2
  }
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab6e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d015      	beq.n	800aba6 <USBD_CDC_EP0_RxReady+0x46>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab80:	2bff      	cmp	r3, #255	; 0xff
 800ab82:	d010      	beq.n	800aba6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ab92:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab9a:	b292      	uxth	r2, r2
 800ab9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	22ff      	movs	r2, #255	; 0xff
 800aba2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2243      	movs	r2, #67	; 0x43
 800abbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800abbe:	4b03      	ldr	r3, [pc, #12]	; (800abcc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bc80      	pop	{r7}
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	20000094 	.word	0x20000094

0800abd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2243      	movs	r2, #67	; 0x43
 800abdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800abde:	4b03      	ldr	r3, [pc, #12]	; (800abec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bc80      	pop	{r7}
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	20000050 	.word	0x20000050

0800abf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2243      	movs	r2, #67	; 0x43
 800abfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800abfe:	4b03      	ldr	r3, [pc, #12]	; (800ac0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	200000d8 	.word	0x200000d8

0800ac10 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	220a      	movs	r2, #10
 800ac1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ac1e:	4b03      	ldr	r3, [pc, #12]	; (800ac2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bc80      	pop	{r7}
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	2000000c 	.word	0x2000000c

0800ac30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bc80      	pop	{r7}
 800ac5a:	4770      	bx	lr

0800ac5c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	4613      	mov	r3, r2
 800ac68:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ac7a:	88fa      	ldrh	r2, [r7, #6]
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bc80      	pop	{r7}
 800ac8c:	4770      	bx	lr

0800ac8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	bc80      	pop	{r7}
 800acb2:	4770      	bx	lr

0800acb4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acca:	2b00      	cmp	r3, #0
 800accc:	d01c      	beq.n	800ad08 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d115      	bne.n	800ad04 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2201      	movs	r2, #1
 800acdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	2181      	movs	r1, #129	; 0x81
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f001 fccb 	bl	800c696 <USBD_LL_Transmit>

      return USBD_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	e002      	b.n	800ad0a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e000      	b.n	800ad0a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ad08:	2302      	movs	r3, #2
  }
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad20:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d017      	beq.n	800ad5c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7c1b      	ldrb	r3, [r3, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d109      	bne.n	800ad48 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad3e:	2101      	movs	r1, #1
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f001 fccb 	bl	800c6dc <USBD_LL_PrepareReceive>
 800ad46:	e007      	b.n	800ad58 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad4e:	2340      	movs	r3, #64	; 0x40
 800ad50:	2101      	movs	r1, #1
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f001 fcc2 	bl	800c6dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e000      	b.n	800ad5e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ad5c:	2302      	movs	r3, #2
  }
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	4613      	mov	r3, r2
 800ad72:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	e01a      	b.n	800adb4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	79fa      	ldrb	r2, [r7, #7]
 800adaa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f001 fb2f 	bl	800c410 <USBD_LL_Init>

  return USBD_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d006      	beq.n	800adde <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
 800addc:	e001      	b.n	800ade2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800adde:	2302      	movs	r3, #2
 800ade0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	bc80      	pop	{r7}
 800adec:	4770      	bx	lr

0800adee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b082      	sub	sp, #8
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 fb64 	bl	800c4c4 <USBD_LL_Start>

  return USBD_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bc80      	pop	{r7}
 800ae18:	4770      	bx	lr

0800ae1a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b084      	sub	sp, #16
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ae26:	2302      	movs	r3, #2
 800ae28:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00c      	beq.n	800ae4e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	78fa      	ldrb	r2, [r7, #3]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	4798      	blx	r3
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	78fa      	ldrb	r2, [r7, #3]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	4798      	blx	r3

  return USBD_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 fed8 	bl	800bc46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aea4:	461a      	mov	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aeb2:	f003 031f 	and.w	r3, r3, #31
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d016      	beq.n	800aee8 <USBD_LL_SetupStage+0x6a>
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d81c      	bhi.n	800aef8 <USBD_LL_SetupStage+0x7a>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d002      	beq.n	800aec8 <USBD_LL_SetupStage+0x4a>
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d008      	beq.n	800aed8 <USBD_LL_SetupStage+0x5a>
 800aec6:	e017      	b.n	800aef8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f9cb 	bl	800b26c <USBD_StdDevReq>
      break;
 800aed6:	e01a      	b.n	800af0e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fa2d 	bl	800b340 <USBD_StdItfReq>
      break;
 800aee6:	e012      	b.n	800af0e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fa6d 	bl	800b3d0 <USBD_StdEPReq>
      break;
 800aef6:	e00a      	b.n	800af0e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aefe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af02:	b2db      	uxtb	r3, r3
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f001 fb3c 	bl	800c584 <USBD_LL_StallEP>
      break;
 800af0c:	bf00      	nop
  }

  return USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	460b      	mov	r3, r1
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af26:	7afb      	ldrb	r3, [r7, #11]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d14b      	bne.n	800afc4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800af32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d134      	bne.n	800afa8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	68da      	ldr	r2, [r3, #12]
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	429a      	cmp	r2, r3
 800af48:	d919      	bls.n	800af7e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	68da      	ldr	r2, [r3, #12]
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	1ad2      	subs	r2, r2, r3
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af60:	429a      	cmp	r2, r3
 800af62:	d203      	bcs.n	800af6c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800af68:	b29b      	uxth	r3, r3
 800af6a:	e002      	b.n	800af72 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800af70:	b29b      	uxth	r3, r3
 800af72:	461a      	mov	r2, r3
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f000 ff57 	bl	800be2a <USBD_CtlContinueRx>
 800af7c:	e038      	b.n	800aff0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800af90:	2b03      	cmp	r3, #3
 800af92:	d105      	bne.n	800afa0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f000 ff54 	bl	800be4e <USBD_CtlSendStatus>
 800afa6:	e023      	b.n	800aff0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afae:	2b05      	cmp	r3, #5
 800afb0:	d11e      	bne.n	800aff0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800afba:	2100      	movs	r1, #0
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f001 fae1 	bl	800c584 <USBD_LL_StallEP>
 800afc2:	e015      	b.n	800aff0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00d      	beq.n	800afec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800afd6:	2b03      	cmp	r3, #3
 800afd8:	d108      	bne.n	800afec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	7afa      	ldrb	r2, [r7, #11]
 800afe4:	4611      	mov	r1, r2
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	4798      	blx	r3
 800afea:	e001      	b.n	800aff0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800afec:	2302      	movs	r3, #2
 800afee:	e000      	b.n	800aff2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b086      	sub	sp, #24
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	460b      	mov	r3, r1
 800b004:	607a      	str	r2, [r7, #4]
 800b006:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b008:	7afb      	ldrb	r3, [r7, #11]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d17f      	bne.n	800b10e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3314      	adds	r3, #20
 800b012:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d15c      	bne.n	800b0d8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	429a      	cmp	r2, r3
 800b028:	d915      	bls.n	800b056 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	1ad2      	subs	r2, r2, r3
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	461a      	mov	r2, r3
 800b040:	6879      	ldr	r1, [r7, #4]
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f000 fec1 	bl	800bdca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b048:	2300      	movs	r3, #0
 800b04a:	2200      	movs	r2, #0
 800b04c:	2100      	movs	r1, #0
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f001 fb44 	bl	800c6dc <USBD_LL_PrepareReceive>
 800b054:	e04e      	b.n	800b0f4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	6912      	ldr	r2, [r2, #16]
 800b05e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b062:	fb01 f202 	mul.w	r2, r1, r2
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d11c      	bne.n	800b0a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	689a      	ldr	r2, [r3, #8]
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b074:	429a      	cmp	r2, r3
 800b076:	d316      	bcc.n	800b0a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	689a      	ldr	r2, [r3, #8]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b082:	429a      	cmp	r2, r3
 800b084:	d20f      	bcs.n	800b0a6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b086:	2200      	movs	r2, #0
 800b088:	2100      	movs	r1, #0
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f000 fe9d 	bl	800bdca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b098:	2300      	movs	r3, #0
 800b09a:	2200      	movs	r2, #0
 800b09c:	2100      	movs	r1, #0
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f001 fb1c 	bl	800c6dc <USBD_LL_PrepareReceive>
 800b0a4:	e026      	b.n	800b0f4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00a      	beq.n	800b0c8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b0b8:	2b03      	cmp	r3, #3
 800b0ba:	d105      	bne.n	800b0c8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b0c8:	2180      	movs	r1, #128	; 0x80
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f001 fa5a 	bl	800c584 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 fecf 	bl	800be74 <USBD_CtlReceiveStatus>
 800b0d6:	e00d      	b.n	800b0f4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d004      	beq.n	800b0ec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d103      	bne.n	800b0f4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b0ec:	2180      	movs	r1, #128	; 0x80
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f001 fa48 	bl	800c584 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d11d      	bne.n	800b13a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f7ff fe81 	bl	800ae06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b10c:	e015      	b.n	800b13a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00d      	beq.n	800b136 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b120:	2b03      	cmp	r3, #3
 800b122:	d108      	bne.n	800b136 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	7afa      	ldrb	r2, [r7, #11]
 800b12e:	4611      	mov	r1, r2
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	4798      	blx	r3
 800b134:	e001      	b.n	800b13a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b136:	2302      	movs	r3, #2
 800b138:	e000      	b.n	800b13c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3718      	adds	r7, #24
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b14c:	2340      	movs	r3, #64	; 0x40
 800b14e:	2200      	movs	r2, #0
 800b150:	2100      	movs	r1, #0
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f001 f9d1 	bl	800c4fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2240      	movs	r2, #64	; 0x40
 800b164:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	2200      	movs	r2, #0
 800b16c:	2180      	movs	r1, #128	; 0x80
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f001 f9c3 	bl	800c4fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2240      	movs	r2, #64	; 0x40
 800b17e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d009      	beq.n	800b1bc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	6852      	ldr	r2, [r2, #4]
 800b1b4:	b2d2      	uxtb	r2, r2
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	4798      	blx	r3
  }

  return USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	78fa      	ldrb	r2, [r7, #3]
 800b1d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc80      	pop	{r7}
 800b1e2:	4770      	bx	lr

0800b1e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	bc80      	pop	{r7}
 800b20a:	4770      	bx	lr

0800b20c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d105      	bne.n	800b22a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	bc80      	pop	{r7}
 800b234:	4770      	bx	lr

0800b236 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b244:	2b03      	cmp	r3, #3
 800b246:	d10b      	bne.n	800b260 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d005      	beq.n	800b260 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b282:	2b40      	cmp	r3, #64	; 0x40
 800b284:	d005      	beq.n	800b292 <USBD_StdDevReq+0x26>
 800b286:	2b40      	cmp	r3, #64	; 0x40
 800b288:	d84f      	bhi.n	800b32a <USBD_StdDevReq+0xbe>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d009      	beq.n	800b2a2 <USBD_StdDevReq+0x36>
 800b28e:	2b20      	cmp	r3, #32
 800b290:	d14b      	bne.n	800b32a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	4798      	blx	r3
      break;
 800b2a0:	e048      	b.n	800b334 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	785b      	ldrb	r3, [r3, #1]
 800b2a6:	2b09      	cmp	r3, #9
 800b2a8:	d839      	bhi.n	800b31e <USBD_StdDevReq+0xb2>
 800b2aa:	a201      	add	r2, pc, #4	; (adr r2, 800b2b0 <USBD_StdDevReq+0x44>)
 800b2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b0:	0800b301 	.word	0x0800b301
 800b2b4:	0800b315 	.word	0x0800b315
 800b2b8:	0800b31f 	.word	0x0800b31f
 800b2bc:	0800b30b 	.word	0x0800b30b
 800b2c0:	0800b31f 	.word	0x0800b31f
 800b2c4:	0800b2e3 	.word	0x0800b2e3
 800b2c8:	0800b2d9 	.word	0x0800b2d9
 800b2cc:	0800b31f 	.word	0x0800b31f
 800b2d0:	0800b2f7 	.word	0x0800b2f7
 800b2d4:	0800b2ed 	.word	0x0800b2ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f9dc 	bl	800b698 <USBD_GetDescriptor>
          break;
 800b2e0:	e022      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fb3f 	bl	800b968 <USBD_SetAddress>
          break;
 800b2ea:	e01d      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fb7e 	bl	800b9f0 <USBD_SetConfig>
          break;
 800b2f4:	e018      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fc07 	bl	800bb0c <USBD_GetConfig>
          break;
 800b2fe:	e013      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fc37 	bl	800bb76 <USBD_GetStatus>
          break;
 800b308:	e00e      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fc65 	bl	800bbdc <USBD_SetFeature>
          break;
 800b312:	e009      	b.n	800b328 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fc74 	bl	800bc04 <USBD_ClrFeature>
          break;
 800b31c:	e004      	b.n	800b328 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fccc 	bl	800bcbe <USBD_CtlError>
          break;
 800b326:	bf00      	nop
      }
      break;
 800b328:	e004      	b.n	800b334 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 fcc6 	bl	800bcbe <USBD_CtlError>
      break;
 800b332:	bf00      	nop
  }

  return ret;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop

0800b340 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b356:	2b40      	cmp	r3, #64	; 0x40
 800b358:	d005      	beq.n	800b366 <USBD_StdItfReq+0x26>
 800b35a:	2b40      	cmp	r3, #64	; 0x40
 800b35c:	d82e      	bhi.n	800b3bc <USBD_StdItfReq+0x7c>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <USBD_StdItfReq+0x26>
 800b362:	2b20      	cmp	r3, #32
 800b364:	d12a      	bne.n	800b3bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b36c:	3b01      	subs	r3, #1
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d81d      	bhi.n	800b3ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	889b      	ldrh	r3, [r3, #4]
 800b376:	b2db      	uxtb	r3, r3
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d813      	bhi.n	800b3a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	4798      	blx	r3
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	88db      	ldrh	r3, [r3, #6]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d110      	bne.n	800b3b8 <USBD_StdItfReq+0x78>
 800b396:	7bfb      	ldrb	r3, [r7, #15]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10d      	bne.n	800b3b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fd56 	bl	800be4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3a2:	e009      	b.n	800b3b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fc89 	bl	800bcbe <USBD_CtlError>
          break;
 800b3ac:	e004      	b.n	800b3b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fc84 	bl	800bcbe <USBD_CtlError>
          break;
 800b3b6:	e000      	b.n	800b3ba <USBD_StdItfReq+0x7a>
          break;
 800b3b8:	bf00      	nop
      }
      break;
 800b3ba:	e004      	b.n	800b3c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fc7d 	bl	800bcbe <USBD_CtlError>
      break;
 800b3c4:	bf00      	nop
  }

  return USBD_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	889b      	ldrh	r3, [r3, #4]
 800b3e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3ec:	2b40      	cmp	r3, #64	; 0x40
 800b3ee:	d007      	beq.n	800b400 <USBD_StdEPReq+0x30>
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	f200 8146 	bhi.w	800b682 <USBD_StdEPReq+0x2b2>
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00a      	beq.n	800b410 <USBD_StdEPReq+0x40>
 800b3fa:	2b20      	cmp	r3, #32
 800b3fc:	f040 8141 	bne.w	800b682 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	4798      	blx	r3
      break;
 800b40e:	e13d      	b.n	800b68c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b418:	2b20      	cmp	r3, #32
 800b41a:	d10a      	bne.n	800b432 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	4798      	blx	r3
 800b42a:	4603      	mov	r3, r0
 800b42c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	e12d      	b.n	800b68e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	785b      	ldrb	r3, [r3, #1]
 800b436:	2b03      	cmp	r3, #3
 800b438:	d007      	beq.n	800b44a <USBD_StdEPReq+0x7a>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	f300 811b 	bgt.w	800b676 <USBD_StdEPReq+0x2a6>
 800b440:	2b00      	cmp	r3, #0
 800b442:	d072      	beq.n	800b52a <USBD_StdEPReq+0x15a>
 800b444:	2b01      	cmp	r3, #1
 800b446:	d03a      	beq.n	800b4be <USBD_StdEPReq+0xee>
 800b448:	e115      	b.n	800b676 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b450:	2b02      	cmp	r3, #2
 800b452:	d002      	beq.n	800b45a <USBD_StdEPReq+0x8a>
 800b454:	2b03      	cmp	r3, #3
 800b456:	d015      	beq.n	800b484 <USBD_StdEPReq+0xb4>
 800b458:	e02b      	b.n	800b4b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b45a:	7bbb      	ldrb	r3, [r7, #14]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00c      	beq.n	800b47a <USBD_StdEPReq+0xaa>
 800b460:	7bbb      	ldrb	r3, [r7, #14]
 800b462:	2b80      	cmp	r3, #128	; 0x80
 800b464:	d009      	beq.n	800b47a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b466:	7bbb      	ldrb	r3, [r7, #14]
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 f88a 	bl	800c584 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b470:	2180      	movs	r1, #128	; 0x80
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f001 f886 	bl	800c584 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b478:	e020      	b.n	800b4bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fc1e 	bl	800bcbe <USBD_CtlError>
              break;
 800b482:	e01b      	b.n	800b4bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	885b      	ldrh	r3, [r3, #2]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10e      	bne.n	800b4aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00b      	beq.n	800b4aa <USBD_StdEPReq+0xda>
 800b492:	7bbb      	ldrb	r3, [r7, #14]
 800b494:	2b80      	cmp	r3, #128	; 0x80
 800b496:	d008      	beq.n	800b4aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	88db      	ldrh	r3, [r3, #6]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d104      	bne.n	800b4aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f001 f86d 	bl	800c584 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fccf 	bl	800be4e <USBD_CtlSendStatus>

              break;
 800b4b0:	e004      	b.n	800b4bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fc02 	bl	800bcbe <USBD_CtlError>
              break;
 800b4ba:	bf00      	nop
          }
          break;
 800b4bc:	e0e0      	b.n	800b680 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d002      	beq.n	800b4ce <USBD_StdEPReq+0xfe>
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	d015      	beq.n	800b4f8 <USBD_StdEPReq+0x128>
 800b4cc:	e026      	b.n	800b51c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00c      	beq.n	800b4ee <USBD_StdEPReq+0x11e>
 800b4d4:	7bbb      	ldrb	r3, [r7, #14]
 800b4d6:	2b80      	cmp	r3, #128	; 0x80
 800b4d8:	d009      	beq.n	800b4ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b4da:	7bbb      	ldrb	r3, [r7, #14]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f001 f850 	bl	800c584 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b4e4:	2180      	movs	r1, #128	; 0x80
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f001 f84c 	bl	800c584 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4ec:	e01c      	b.n	800b528 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fbe4 	bl	800bcbe <USBD_CtlError>
              break;
 800b4f6:	e017      	b.n	800b528 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	885b      	ldrh	r3, [r3, #2]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d112      	bne.n	800b526 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b506:	2b00      	cmp	r3, #0
 800b508:	d004      	beq.n	800b514 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f001 f857 	bl	800c5c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fc9a 	bl	800be4e <USBD_CtlSendStatus>
              }
              break;
 800b51a:	e004      	b.n	800b526 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fbcd 	bl	800bcbe <USBD_CtlError>
              break;
 800b524:	e000      	b.n	800b528 <USBD_StdEPReq+0x158>
              break;
 800b526:	bf00      	nop
          }
          break;
 800b528:	e0aa      	b.n	800b680 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b530:	2b02      	cmp	r3, #2
 800b532:	d002      	beq.n	800b53a <USBD_StdEPReq+0x16a>
 800b534:	2b03      	cmp	r3, #3
 800b536:	d032      	beq.n	800b59e <USBD_StdEPReq+0x1ce>
 800b538:	e097      	b.n	800b66a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b53a:	7bbb      	ldrb	r3, [r7, #14]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d007      	beq.n	800b550 <USBD_StdEPReq+0x180>
 800b540:	7bbb      	ldrb	r3, [r7, #14]
 800b542:	2b80      	cmp	r3, #128	; 0x80
 800b544:	d004      	beq.n	800b550 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fbb8 	bl	800bcbe <USBD_CtlError>
                break;
 800b54e:	e091      	b.n	800b674 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b554:	2b00      	cmp	r3, #0
 800b556:	da0b      	bge.n	800b570 <USBD_StdEPReq+0x1a0>
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b55e:	4613      	mov	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	3310      	adds	r3, #16
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	4413      	add	r3, r2
 800b56c:	3304      	adds	r3, #4
 800b56e:	e00b      	b.n	800b588 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b570:	7bbb      	ldrb	r3, [r7, #14]
 800b572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b576:	4613      	mov	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	4413      	add	r3, r2
 800b586:	3304      	adds	r3, #4
 800b588:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2200      	movs	r2, #0
 800b58e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2202      	movs	r2, #2
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fbfb 	bl	800bd92 <USBD_CtlSendData>
              break;
 800b59c:	e06a      	b.n	800b674 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b59e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	da11      	bge.n	800b5ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5a6:	7bbb      	ldrb	r3, [r7, #14]
 800b5a8:	f003 020f 	and.w	r2, r3, #15
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	440b      	add	r3, r1
 800b5b8:	3318      	adds	r3, #24
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d117      	bne.n	800b5f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5c0:	6839      	ldr	r1, [r7, #0]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 fb7b 	bl	800bcbe <USBD_CtlError>
                  break;
 800b5c8:	e054      	b.n	800b674 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	f003 020f 	and.w	r2, r3, #15
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	440b      	add	r3, r1
 800b5dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d104      	bne.n	800b5f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fb68 	bl	800bcbe <USBD_CtlError>
                  break;
 800b5ee:	e041      	b.n	800b674 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da0b      	bge.n	800b610 <USBD_StdEPReq+0x240>
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5fe:	4613      	mov	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	3310      	adds	r3, #16
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	4413      	add	r3, r2
 800b60c:	3304      	adds	r3, #4
 800b60e:	e00b      	b.n	800b628 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b616:	4613      	mov	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	4413      	add	r3, r2
 800b626:	3304      	adds	r3, #4
 800b628:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b62a:	7bbb      	ldrb	r3, [r7, #14]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <USBD_StdEPReq+0x266>
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d103      	bne.n	800b63e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	e00e      	b.n	800b65c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b63e:	7bbb      	ldrb	r3, [r7, #14]
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 ffdc 	bl	800c600 <USBD_LL_IsStallEP>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2201      	movs	r2, #1
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	e002      	b.n	800b65c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2202      	movs	r2, #2
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fb95 	bl	800bd92 <USBD_CtlSendData>
              break;
 800b668:	e004      	b.n	800b674 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fb26 	bl	800bcbe <USBD_CtlError>
              break;
 800b672:	bf00      	nop
          }
          break;
 800b674:	e004      	b.n	800b680 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fb20 	bl	800bcbe <USBD_CtlError>
          break;
 800b67e:	bf00      	nop
      }
      break;
 800b680:	e004      	b.n	800b68c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fb1a 	bl	800bcbe <USBD_CtlError>
      break;
 800b68a:	bf00      	nop
  }

  return ret;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	885b      	ldrh	r3, [r3, #2]
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	2b06      	cmp	r3, #6
 800b6ba:	f200 8128 	bhi.w	800b90e <USBD_GetDescriptor+0x276>
 800b6be:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <USBD_GetDescriptor+0x2c>)
 800b6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c4:	0800b6e1 	.word	0x0800b6e1
 800b6c8:	0800b6f9 	.word	0x0800b6f9
 800b6cc:	0800b739 	.word	0x0800b739
 800b6d0:	0800b90f 	.word	0x0800b90f
 800b6d4:	0800b90f 	.word	0x0800b90f
 800b6d8:	0800b8af 	.word	0x0800b8af
 800b6dc:	0800b8db 	.word	0x0800b8db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	7c12      	ldrb	r2, [r2, #16]
 800b6ec:	f107 0108 	add.w	r1, r7, #8
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
 800b6f4:	60f8      	str	r0, [r7, #12]
      break;
 800b6f6:	e112      	b.n	800b91e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	7c1b      	ldrb	r3, [r3, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10d      	bne.n	800b71c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b708:	f107 0208 	add.w	r2, r7, #8
 800b70c:	4610      	mov	r0, r2
 800b70e:	4798      	blx	r3
 800b710:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	3301      	adds	r3, #1
 800b716:	2202      	movs	r2, #2
 800b718:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b71a:	e100      	b.n	800b91e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b724:	f107 0208 	add.w	r2, r7, #8
 800b728:	4610      	mov	r0, r2
 800b72a:	4798      	blx	r3
 800b72c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3301      	adds	r3, #1
 800b732:	2202      	movs	r2, #2
 800b734:	701a      	strb	r2, [r3, #0]
      break;
 800b736:	e0f2      	b.n	800b91e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	885b      	ldrh	r3, [r3, #2]
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b05      	cmp	r3, #5
 800b740:	f200 80ac 	bhi.w	800b89c <USBD_GetDescriptor+0x204>
 800b744:	a201      	add	r2, pc, #4	; (adr r2, 800b74c <USBD_GetDescriptor+0xb4>)
 800b746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74a:	bf00      	nop
 800b74c:	0800b765 	.word	0x0800b765
 800b750:	0800b799 	.word	0x0800b799
 800b754:	0800b7cd 	.word	0x0800b7cd
 800b758:	0800b801 	.word	0x0800b801
 800b75c:	0800b835 	.word	0x0800b835
 800b760:	0800b869 	.word	0x0800b869
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	7c12      	ldrb	r2, [r2, #16]
 800b77c:	f107 0108 	add.w	r1, r7, #8
 800b780:	4610      	mov	r0, r2
 800b782:	4798      	blx	r3
 800b784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b786:	e091      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fa97 	bl	800bcbe <USBD_CtlError>
            err++;
 800b790:	7afb      	ldrb	r3, [r7, #11]
 800b792:	3301      	adds	r3, #1
 800b794:	72fb      	strb	r3, [r7, #11]
          break;
 800b796:	e089      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00b      	beq.n	800b7bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	7c12      	ldrb	r2, [r2, #16]
 800b7b0:	f107 0108 	add.w	r1, r7, #8
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	4798      	blx	r3
 800b7b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ba:	e077      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fa7d 	bl	800bcbe <USBD_CtlError>
            err++;
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	72fb      	strb	r3, [r7, #11]
          break;
 800b7ca:	e06f      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00b      	beq.n	800b7f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	7c12      	ldrb	r2, [r2, #16]
 800b7e4:	f107 0108 	add.w	r1, r7, #8
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	4798      	blx	r3
 800b7ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7ee:	e05d      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fa63 	bl	800bcbe <USBD_CtlError>
            err++;
 800b7f8:	7afb      	ldrb	r3, [r7, #11]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b7fe:	e055      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00b      	beq.n	800b824 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	7c12      	ldrb	r2, [r2, #16]
 800b818:	f107 0108 	add.w	r1, r7, #8
 800b81c:	4610      	mov	r0, r2
 800b81e:	4798      	blx	r3
 800b820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b822:	e043      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fa49 	bl	800bcbe <USBD_CtlError>
            err++;
 800b82c:	7afb      	ldrb	r3, [r7, #11]
 800b82e:	3301      	adds	r3, #1
 800b830:	72fb      	strb	r3, [r7, #11]
          break;
 800b832:	e03b      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00b      	beq.n	800b858 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	7c12      	ldrb	r2, [r2, #16]
 800b84c:	f107 0108 	add.w	r1, r7, #8
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b856:	e029      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fa2f 	bl	800bcbe <USBD_CtlError>
            err++;
 800b860:	7afb      	ldrb	r3, [r7, #11]
 800b862:	3301      	adds	r3, #1
 800b864:	72fb      	strb	r3, [r7, #11]
          break;
 800b866:	e021      	b.n	800b8ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00b      	beq.n	800b88c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7c12      	ldrb	r2, [r2, #16]
 800b880:	f107 0108 	add.w	r1, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b88a:	e00f      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b88c:	6839      	ldr	r1, [r7, #0]
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fa15 	bl	800bcbe <USBD_CtlError>
            err++;
 800b894:	7afb      	ldrb	r3, [r7, #11]
 800b896:	3301      	adds	r3, #1
 800b898:	72fb      	strb	r3, [r7, #11]
          break;
 800b89a:	e007      	b.n	800b8ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 fa0d 	bl	800bcbe <USBD_CtlError>
          err++;
 800b8a4:	7afb      	ldrb	r3, [r7, #11]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b8aa:	e038      	b.n	800b91e <USBD_GetDescriptor+0x286>
 800b8ac:	e037      	b.n	800b91e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	7c1b      	ldrb	r3, [r3, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d109      	bne.n	800b8ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8be:	f107 0208 	add.w	r2, r7, #8
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	4798      	blx	r3
 800b8c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8c8:	e029      	b.n	800b91e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f9f6 	bl	800bcbe <USBD_CtlError>
        err++;
 800b8d2:	7afb      	ldrb	r3, [r7, #11]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b8d8:	e021      	b.n	800b91e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	7c1b      	ldrb	r3, [r3, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10d      	bne.n	800b8fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ea:	f107 0208 	add.w	r2, r7, #8
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4798      	blx	r3
 800b8f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	2207      	movs	r2, #7
 800b8fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b8fc:	e00f      	b.n	800b91e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f9dc 	bl	800bcbe <USBD_CtlError>
        err++;
 800b906:	7afb      	ldrb	r3, [r7, #11]
 800b908:	3301      	adds	r3, #1
 800b90a:	72fb      	strb	r3, [r7, #11]
      break;
 800b90c:	e007      	b.n	800b91e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f9d4 	bl	800bcbe <USBD_CtlError>
      err++;
 800b916:	7afb      	ldrb	r3, [r7, #11]
 800b918:	3301      	adds	r3, #1
 800b91a:	72fb      	strb	r3, [r7, #11]
      break;
 800b91c:	bf00      	nop
  }

  if (err != 0U)
 800b91e:	7afb      	ldrb	r3, [r7, #11]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d11c      	bne.n	800b95e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b924:	893b      	ldrh	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d011      	beq.n	800b94e <USBD_GetDescriptor+0x2b6>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	88db      	ldrh	r3, [r3, #6]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00d      	beq.n	800b94e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	88da      	ldrh	r2, [r3, #6]
 800b936:	893b      	ldrh	r3, [r7, #8]
 800b938:	4293      	cmp	r3, r2
 800b93a:	bf28      	it	cs
 800b93c:	4613      	movcs	r3, r2
 800b93e:	b29b      	uxth	r3, r3
 800b940:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b942:	893b      	ldrh	r3, [r7, #8]
 800b944:	461a      	mov	r2, r3
 800b946:	68f9      	ldr	r1, [r7, #12]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fa22 	bl	800bd92 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	88db      	ldrh	r3, [r3, #6]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d104      	bne.n	800b960 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fa79 	bl	800be4e <USBD_CtlSendStatus>
 800b95c:	e000      	b.n	800b960 <USBD_GetDescriptor+0x2c8>
    return;
 800b95e:	bf00      	nop
    }
  }
}
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop

0800b968 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	889b      	ldrh	r3, [r3, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d130      	bne.n	800b9dc <USBD_SetAddress+0x74>
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	88db      	ldrh	r3, [r3, #6]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d12c      	bne.n	800b9dc <USBD_SetAddress+0x74>
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	885b      	ldrh	r3, [r3, #2]
 800b986:	2b7f      	cmp	r3, #127	; 0x7f
 800b988:	d828      	bhi.n	800b9dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	885b      	ldrh	r3, [r3, #2]
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b994:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d104      	bne.n	800b9aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f98b 	bl	800bcbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a8:	e01d      	b.n	800b9e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	7bfa      	ldrb	r2, [r7, #15]
 800b9ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fe4e 	bl	800c658 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fa46 	bl	800be4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d004      	beq.n	800b9d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d0:	e009      	b.n	800b9e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	e004      	b.n	800b9e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f96d 	bl	800bcbe <USBD_CtlError>
  }
}
 800b9e4:	bf00      	nop
 800b9e6:	bf00      	nop
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
	...

0800b9f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	885b      	ldrh	r3, [r3, #2]
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	4b41      	ldr	r3, [pc, #260]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba04:	4b40      	ldr	r3, [pc, #256]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d904      	bls.n	800ba16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ba0c:	6839      	ldr	r1, [r7, #0]
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f955 	bl	800bcbe <USBD_CtlError>
 800ba14:	e075      	b.n	800bb02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d002      	beq.n	800ba26 <USBD_SetConfig+0x36>
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d023      	beq.n	800ba6c <USBD_SetConfig+0x7c>
 800ba24:	e062      	b.n	800baec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800ba26:	4b38      	ldr	r3, [pc, #224]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d01a      	beq.n	800ba64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800ba2e:	4b36      	ldr	r3, [pc, #216]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2203      	movs	r2, #3
 800ba3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba40:	4b31      	ldr	r3, [pc, #196]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff f9e7 	bl	800ae1a <USBD_SetClassConfig>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d104      	bne.n	800ba5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f932 	bl	800bcbe <USBD_CtlError>
            return;
 800ba5a:	e052      	b.n	800bb02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f9f6 	bl	800be4e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba62:	e04e      	b.n	800bb02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f000 f9f2 	bl	800be4e <USBD_CtlSendStatus>
        break;
 800ba6a:	e04a      	b.n	800bb02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800ba6c:	4b26      	ldr	r3, [pc, #152]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d112      	bne.n	800ba9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2202      	movs	r2, #2
 800ba78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ba7c:	4b22      	ldr	r3, [pc, #136]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	461a      	mov	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ba86:	4b20      	ldr	r3, [pc, #128]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff f9e3 	bl	800ae58 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f9db 	bl	800be4e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ba98:	e033      	b.n	800bb02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <USBD_SetConfig+0x118>)
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d01d      	beq.n	800bae4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	b2db      	uxtb	r3, r3
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff f9d1 	bl	800ae58 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bab6:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <USBD_SetConfig+0x118>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bac0:	4b11      	ldr	r3, [pc, #68]	; (800bb08 <USBD_SetConfig+0x118>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff f9a7 	bl	800ae1a <USBD_SetClassConfig>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d104      	bne.n	800badc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f8f2 	bl	800bcbe <USBD_CtlError>
            return;
 800bada:	e012      	b.n	800bb02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f9b6 	bl	800be4e <USBD_CtlSendStatus>
        break;
 800bae2:	e00e      	b.n	800bb02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f9b2 	bl	800be4e <USBD_CtlSendStatus>
        break;
 800baea:	e00a      	b.n	800bb02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f8e5 	bl	800bcbe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800baf4:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <USBD_SetConfig+0x118>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff f9ac 	bl	800ae58 <USBD_ClrClassConfig>
        break;
 800bb00:	bf00      	nop
    }
  }
}
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20000630 	.word	0x20000630

0800bb0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	88db      	ldrh	r3, [r3, #6]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d004      	beq.n	800bb28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f8cc 	bl	800bcbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb26:	e022      	b.n	800bb6e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	dc02      	bgt.n	800bb38 <USBD_GetConfig+0x2c>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	dc03      	bgt.n	800bb3e <USBD_GetConfig+0x32>
 800bb36:	e015      	b.n	800bb64 <USBD_GetConfig+0x58>
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d00b      	beq.n	800bb54 <USBD_GetConfig+0x48>
 800bb3c:	e012      	b.n	800bb64 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3308      	adds	r3, #8
 800bb48:	2201      	movs	r2, #1
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f920 	bl	800bd92 <USBD_CtlSendData>
        break;
 800bb52:	e00c      	b.n	800bb6e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3304      	adds	r3, #4
 800bb58:	2201      	movs	r2, #1
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f918 	bl	800bd92 <USBD_CtlSendData>
        break;
 800bb62:	e004      	b.n	800bb6e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bb64:	6839      	ldr	r1, [r7, #0]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f8a9 	bl	800bcbe <USBD_CtlError>
        break;
 800bb6c:	bf00      	nop
}
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb86:	3b01      	subs	r3, #1
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d81e      	bhi.n	800bbca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	88db      	ldrh	r3, [r3, #6]
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d004      	beq.n	800bb9e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f891 	bl	800bcbe <USBD_CtlError>
        break;
 800bb9c:	e01a      	b.n	800bbd4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d005      	beq.n	800bbba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f043 0202 	orr.w	r2, r3, #2
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	330c      	adds	r3, #12
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f8e5 	bl	800bd92 <USBD_CtlSendData>
      break;
 800bbc8:	e004      	b.n	800bbd4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f876 	bl	800bcbe <USBD_CtlError>
      break;
 800bbd2:	bf00      	nop
  }
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	885b      	ldrh	r3, [r3, #2]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d106      	bne.n	800bbfc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f929 	bl	800be4e <USBD_CtlSendStatus>
  }
}
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc14:	3b01      	subs	r3, #1
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d80b      	bhi.n	800bc32 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	885b      	ldrh	r3, [r3, #2]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d10c      	bne.n	800bc3c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f90f 	bl	800be4e <USBD_CtlSendStatus>
      }
      break;
 800bc30:	e004      	b.n	800bc3c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f842 	bl	800bcbe <USBD_CtlError>
      break;
 800bc3a:	e000      	b.n	800bc3e <USBD_ClrFeature+0x3a>
      break;
 800bc3c:	bf00      	nop
  }
}
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b083      	sub	sp, #12
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781a      	ldrb	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	785a      	ldrb	r2, [r3, #1]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	3302      	adds	r3, #2
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	3303      	adds	r3, #3
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	021b      	lsls	r3, r3, #8
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	4413      	add	r3, r2
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	3305      	adds	r3, #5
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	021b      	lsls	r3, r3, #8
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	4413      	add	r3, r2
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	3306      	adds	r3, #6
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	3307      	adds	r3, #7
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	021b      	lsls	r3, r3, #8
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	4413      	add	r3, r2
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	80da      	strh	r2, [r3, #6]

}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bc80      	pop	{r7}
 800bcbc:	4770      	bx	lr

0800bcbe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bcc8:	2180      	movs	r1, #128	; 0x80
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fc5a 	bl	800c584 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fc56 	bl	800c584 <USBD_LL_StallEP>
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bcec:	2300      	movs	r3, #0
 800bcee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d032      	beq.n	800bd5c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 f834 	bl	800bd64 <USBD_GetLen>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	3301      	adds	r3, #1
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	75fa      	strb	r2, [r7, #23]
 800bd10:	461a      	mov	r2, r3
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	4413      	add	r3, r2
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	7812      	ldrb	r2, [r2, #0]
 800bd1a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	75fa      	strb	r2, [r7, #23]
 800bd22:	461a      	mov	r2, r3
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	4413      	add	r3, r2
 800bd28:	2203      	movs	r2, #3
 800bd2a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bd2c:	e012      	b.n	800bd54 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	60fa      	str	r2, [r7, #12]
 800bd34:	7dfa      	ldrb	r2, [r7, #23]
 800bd36:	1c51      	adds	r1, r2, #1
 800bd38:	75f9      	strb	r1, [r7, #23]
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	440a      	add	r2, r1
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bd44:	7dfb      	ldrb	r3, [r7, #23]
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	75fa      	strb	r2, [r7, #23]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	4413      	add	r3, r2
 800bd50:	2200      	movs	r2, #0
 800bd52:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1e8      	bne.n	800bd2e <USBD_GetString+0x4e>
    }
  }
}
 800bd5c:	bf00      	nop
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bd70:	e005      	b.n	800bd7e <USBD_GetLen+0x1a>
  {
    len++;
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
 800bd74:	3301      	adds	r3, #1
 800bd76:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1f5      	bne.n	800bd72 <USBD_GetLen+0xe>
  }

  return len;
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3714      	adds	r7, #20
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bc80      	pop	{r7}
 800bd90:	4770      	bx	lr

0800bd92 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	60f8      	str	r0, [r7, #12]
 800bd9a:	60b9      	str	r1, [r7, #8]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2202      	movs	r2, #2
 800bda4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bda8:	88fa      	ldrh	r2, [r7, #6]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bdae:	88fa      	ldrh	r2, [r7, #6]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdb4:	88fb      	ldrh	r3, [r7, #6]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	2100      	movs	r1, #0
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f000 fc6b 	bl	800c696 <USBD_LL_Transmit>

  return USBD_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	60f8      	str	r0, [r7, #12]
 800bdd2:	60b9      	str	r1, [r7, #8]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdd8:	88fb      	ldrh	r3, [r7, #6]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	2100      	movs	r1, #0
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f000 fc59 	bl	800c696 <USBD_LL_Transmit>

  return USBD_OK;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2203      	movs	r2, #3
 800be00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be04:	88fa      	ldrh	r2, [r7, #6]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800be0c:	88fa      	ldrh	r2, [r7, #6]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be14:	88fb      	ldrh	r3, [r7, #6]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	2100      	movs	r1, #0
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 fc5e 	bl	800c6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	4613      	mov	r3, r2
 800be36:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be38:	88fb      	ldrh	r3, [r7, #6]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	2100      	movs	r1, #0
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 fc4c 	bl	800c6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b082      	sub	sp, #8
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2204      	movs	r2, #4
 800be5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be5e:	2300      	movs	r3, #0
 800be60:	2200      	movs	r2, #0
 800be62:	2100      	movs	r1, #0
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fc16 	bl	800c696 <USBD_LL_Transmit>

  return USBD_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2205      	movs	r2, #5
 800be80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be84:	2300      	movs	r3, #0
 800be86:	2200      	movs	r2, #0
 800be88:	2100      	movs	r1, #0
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 fc26 	bl	800c6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
	...

0800be9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bea0:	2200      	movs	r2, #0
 800bea2:	4912      	ldr	r1, [pc, #72]	; (800beec <MX_USB_DEVICE_Init+0x50>)
 800bea4:	4812      	ldr	r0, [pc, #72]	; (800bef0 <MX_USB_DEVICE_Init+0x54>)
 800bea6:	f7fe ff5e 	bl	800ad66 <USBD_Init>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d001      	beq.n	800beb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800beb0:	f7f7 f8b6 	bl	8003020 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800beb4:	490f      	ldr	r1, [pc, #60]	; (800bef4 <MX_USB_DEVICE_Init+0x58>)
 800beb6:	480e      	ldr	r0, [pc, #56]	; (800bef0 <MX_USB_DEVICE_Init+0x54>)
 800beb8:	f7fe ff80 	bl	800adbc <USBD_RegisterClass>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bec2:	f7f7 f8ad 	bl	8003020 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bec6:	490c      	ldr	r1, [pc, #48]	; (800bef8 <MX_USB_DEVICE_Init+0x5c>)
 800bec8:	4809      	ldr	r0, [pc, #36]	; (800bef0 <MX_USB_DEVICE_Init+0x54>)
 800beca:	f7fe feb1 	bl	800ac30 <USBD_CDC_RegisterInterface>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bed4:	f7f7 f8a4 	bl	8003020 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bed8:	4805      	ldr	r0, [pc, #20]	; (800bef0 <MX_USB_DEVICE_Init+0x54>)
 800beda:	f7fe ff88 	bl	800adee <USBD_Start>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bee4:	f7f7 f89c 	bl	8003020 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bee8:	bf00      	nop
 800beea:	bd80      	pop	{r7, pc}
 800beec:	2000012c 	.word	0x2000012c
 800bef0:	20000634 	.word	0x20000634
 800bef4:	20000018 	.word	0x20000018
 800bef8:	2000011c 	.word	0x2000011c

0800befc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf00:	2200      	movs	r2, #0
 800bf02:	4905      	ldr	r1, [pc, #20]	; (800bf18 <CDC_Init_FS+0x1c>)
 800bf04:	4805      	ldr	r0, [pc, #20]	; (800bf1c <CDC_Init_FS+0x20>)
 800bf06:	f7fe fea9 	bl	800ac5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf0a:	4905      	ldr	r1, [pc, #20]	; (800bf20 <CDC_Init_FS+0x24>)
 800bf0c:	4803      	ldr	r0, [pc, #12]	; (800bf1c <CDC_Init_FS+0x20>)
 800bf0e:	f7fe febe 	bl	800ac8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20000cf8 	.word	0x20000cf8
 800bf1c:	20000634 	.word	0x20000634
 800bf20:	200008f8 	.word	0x200008f8

0800bf24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf24:	b480      	push	{r7}
 800bf26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bc80      	pop	{r7}
 800bf30:	4770      	bx	lr
	...

0800bf34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	6039      	str	r1, [r7, #0]
 800bf3e:	71fb      	strb	r3, [r7, #7]
 800bf40:	4613      	mov	r3, r2
 800bf42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf44:	79fb      	ldrb	r3, [r7, #7]
 800bf46:	2b23      	cmp	r3, #35	; 0x23
 800bf48:	d84a      	bhi.n	800bfe0 <CDC_Control_FS+0xac>
 800bf4a:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <CDC_Control_FS+0x1c>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bfe1 	.word	0x0800bfe1
 800bf54:	0800bfe1 	.word	0x0800bfe1
 800bf58:	0800bfe1 	.word	0x0800bfe1
 800bf5c:	0800bfe1 	.word	0x0800bfe1
 800bf60:	0800bfe1 	.word	0x0800bfe1
 800bf64:	0800bfe1 	.word	0x0800bfe1
 800bf68:	0800bfe1 	.word	0x0800bfe1
 800bf6c:	0800bfe1 	.word	0x0800bfe1
 800bf70:	0800bfe1 	.word	0x0800bfe1
 800bf74:	0800bfe1 	.word	0x0800bfe1
 800bf78:	0800bfe1 	.word	0x0800bfe1
 800bf7c:	0800bfe1 	.word	0x0800bfe1
 800bf80:	0800bfe1 	.word	0x0800bfe1
 800bf84:	0800bfe1 	.word	0x0800bfe1
 800bf88:	0800bfe1 	.word	0x0800bfe1
 800bf8c:	0800bfe1 	.word	0x0800bfe1
 800bf90:	0800bfe1 	.word	0x0800bfe1
 800bf94:	0800bfe1 	.word	0x0800bfe1
 800bf98:	0800bfe1 	.word	0x0800bfe1
 800bf9c:	0800bfe1 	.word	0x0800bfe1
 800bfa0:	0800bfe1 	.word	0x0800bfe1
 800bfa4:	0800bfe1 	.word	0x0800bfe1
 800bfa8:	0800bfe1 	.word	0x0800bfe1
 800bfac:	0800bfe1 	.word	0x0800bfe1
 800bfb0:	0800bfe1 	.word	0x0800bfe1
 800bfb4:	0800bfe1 	.word	0x0800bfe1
 800bfb8:	0800bfe1 	.word	0x0800bfe1
 800bfbc:	0800bfe1 	.word	0x0800bfe1
 800bfc0:	0800bfe1 	.word	0x0800bfe1
 800bfc4:	0800bfe1 	.word	0x0800bfe1
 800bfc8:	0800bfe1 	.word	0x0800bfe1
 800bfcc:	0800bfe1 	.word	0x0800bfe1
 800bfd0:	0800bfe1 	.word	0x0800bfe1
 800bfd4:	0800bfe1 	.word	0x0800bfe1
 800bfd8:	0800bfe1 	.word	0x0800bfe1
 800bfdc:	0800bfe1 	.word	0x0800bfe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfe0:	bf00      	nop
  }

  return (USBD_OK);
 800bfe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop

0800bff0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bffa:	6879      	ldr	r1, [r7, #4]
 800bffc:	4808      	ldr	r0, [pc, #32]	; (800c020 <CDC_Receive_FS+0x30>)
 800bffe:	f7fe fe46 	bl	800ac8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c002:	4807      	ldr	r0, [pc, #28]	; (800c020 <CDC_Receive_FS+0x30>)
 800c004:	f7fe fe85 	bl	800ad12 <USBD_CDC_ReceivePacket>
  USB_Packet_Received(&Buf[0], Len[0]);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7f5 fcac 	bl	800196c <USB_Packet_Received>
  return (USBD_OK);
 800c014:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	20000634 	.word	0x20000634

0800c024 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c034:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <CDC_Transmit_FS+0x48>)
 800c036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c03a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c046:	2301      	movs	r3, #1
 800c048:	e00b      	b.n	800c062 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c04a:	887b      	ldrh	r3, [r7, #2]
 800c04c:	461a      	mov	r2, r3
 800c04e:	6879      	ldr	r1, [r7, #4]
 800c050:	4806      	ldr	r0, [pc, #24]	; (800c06c <CDC_Transmit_FS+0x48>)
 800c052:	f7fe fe03 	bl	800ac5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c056:	4805      	ldr	r0, [pc, #20]	; (800c06c <CDC_Transmit_FS+0x48>)
 800c058:	f7fe fe2c 	bl	800acb4 <USBD_CDC_TransmitPacket>
 800c05c:	4603      	mov	r3, r0
 800c05e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000634 	.word	0x20000634

0800c070 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	6039      	str	r1, [r7, #0]
 800c07a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2212      	movs	r2, #18
 800c080:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c082:	4b03      	ldr	r3, [pc, #12]	; (800c090 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c084:	4618      	mov	r0, r3
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	bc80      	pop	{r7}
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	20000148 	.word	0x20000148

0800c094 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c094:	b480      	push	{r7}
 800c096:	b083      	sub	sp, #12
 800c098:	af00      	add	r7, sp, #0
 800c09a:	4603      	mov	r3, r0
 800c09c:	6039      	str	r1, [r7, #0]
 800c09e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2204      	movs	r2, #4
 800c0a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0a6:	4b03      	ldr	r3, [pc, #12]	; (800c0b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bc80      	pop	{r7}
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	2000015c 	.word	0x2000015c

0800c0b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	4603      	mov	r3, r0
 800c0c0:	6039      	str	r1, [r7, #0]
 800c0c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0c4:	79fb      	ldrb	r3, [r7, #7]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d105      	bne.n	800c0d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	4907      	ldr	r1, [pc, #28]	; (800c0ec <USBD_FS_ProductStrDescriptor+0x34>)
 800c0ce:	4808      	ldr	r0, [pc, #32]	; (800c0f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0d0:	f7ff fe06 	bl	800bce0 <USBD_GetString>
 800c0d4:	e004      	b.n	800c0e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	4904      	ldr	r1, [pc, #16]	; (800c0ec <USBD_FS_ProductStrDescriptor+0x34>)
 800c0da:	4805      	ldr	r0, [pc, #20]	; (800c0f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800c0dc:	f7ff fe00 	bl	800bce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0e0:	4b02      	ldr	r3, [pc, #8]	; (800c0ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200010f8 	.word	0x200010f8
 800c0f0:	0800c88c 	.word	0x0800c88c

0800c0f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	6039      	str	r1, [r7, #0]
 800c0fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	4904      	ldr	r1, [pc, #16]	; (800c114 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c104:	4804      	ldr	r0, [pc, #16]	; (800c118 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c106:	f7ff fdeb 	bl	800bce0 <USBD_GetString>
  return USBD_StrDesc;
 800c10a:	4b02      	ldr	r3, [pc, #8]	; (800c114 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	200010f8 	.word	0x200010f8
 800c118:	0800c8a0 	.word	0x0800c8a0

0800c11c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	4603      	mov	r3, r0
 800c124:	6039      	str	r1, [r7, #0]
 800c126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	221a      	movs	r2, #26
 800c12c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c12e:	f000 f843 	bl	800c1b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c132:	4b02      	ldr	r3, [pc, #8]	; (800c13c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	20000160 	.word	0x20000160

0800c140 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	4603      	mov	r3, r0
 800c148:	6039      	str	r1, [r7, #0]
 800c14a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d105      	bne.n	800c15e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	4907      	ldr	r1, [pc, #28]	; (800c174 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c156:	4808      	ldr	r0, [pc, #32]	; (800c178 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c158:	f7ff fdc2 	bl	800bce0 <USBD_GetString>
 800c15c:	e004      	b.n	800c168 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	4904      	ldr	r1, [pc, #16]	; (800c174 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c162:	4805      	ldr	r0, [pc, #20]	; (800c178 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c164:	f7ff fdbc 	bl	800bce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c168:	4b02      	ldr	r3, [pc, #8]	; (800c174 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	200010f8 	.word	0x200010f8
 800c178:	0800c8b4 	.word	0x0800c8b4

0800c17c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	4603      	mov	r3, r0
 800c184:	6039      	str	r1, [r7, #0]
 800c186:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c188:	79fb      	ldrb	r3, [r7, #7]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d105      	bne.n	800c19a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	4907      	ldr	r1, [pc, #28]	; (800c1b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c192:	4808      	ldr	r0, [pc, #32]	; (800c1b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c194:	f7ff fda4 	bl	800bce0 <USBD_GetString>
 800c198:	e004      	b.n	800c1a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	4904      	ldr	r1, [pc, #16]	; (800c1b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c19e:	4805      	ldr	r0, [pc, #20]	; (800c1b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1a0:	f7ff fd9e 	bl	800bce0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1a4:	4b02      	ldr	r3, [pc, #8]	; (800c1b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	200010f8 	.word	0x200010f8
 800c1b4:	0800c8c0 	.word	0x0800c8c0

0800c1b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1be:	4b0f      	ldr	r3, [pc, #60]	; (800c1fc <Get_SerialNum+0x44>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1c4:	4b0e      	ldr	r3, [pc, #56]	; (800c200 <Get_SerialNum+0x48>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1ca:	4b0e      	ldr	r3, [pc, #56]	; (800c204 <Get_SerialNum+0x4c>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d009      	beq.n	800c1f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c1de:	2208      	movs	r2, #8
 800c1e0:	4909      	ldr	r1, [pc, #36]	; (800c208 <Get_SerialNum+0x50>)
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f000 f814 	bl	800c210 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1e8:	2204      	movs	r2, #4
 800c1ea:	4908      	ldr	r1, [pc, #32]	; (800c20c <Get_SerialNum+0x54>)
 800c1ec:	68b8      	ldr	r0, [r7, #8]
 800c1ee:	f000 f80f 	bl	800c210 <IntToUnicode>
  }
}
 800c1f2:	bf00      	nop
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	1ffff7e8 	.word	0x1ffff7e8
 800c200:	1ffff7ec 	.word	0x1ffff7ec
 800c204:	1ffff7f0 	.word	0x1ffff7f0
 800c208:	20000162 	.word	0x20000162
 800c20c:	20000172 	.word	0x20000172

0800c210 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c210:	b480      	push	{r7}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	4613      	mov	r3, r2
 800c21c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c222:	2300      	movs	r3, #0
 800c224:	75fb      	strb	r3, [r7, #23]
 800c226:	e027      	b.n	800c278 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	0f1b      	lsrs	r3, r3, #28
 800c22c:	2b09      	cmp	r3, #9
 800c22e:	d80b      	bhi.n	800c248 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	0f1b      	lsrs	r3, r3, #28
 800c234:	b2da      	uxtb	r2, r3
 800c236:	7dfb      	ldrb	r3, [r7, #23]
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	4619      	mov	r1, r3
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	440b      	add	r3, r1
 800c240:	3230      	adds	r2, #48	; 0x30
 800c242:	b2d2      	uxtb	r2, r2
 800c244:	701a      	strb	r2, [r3, #0]
 800c246:	e00a      	b.n	800c25e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	0f1b      	lsrs	r3, r3, #28
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	4619      	mov	r1, r3
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	440b      	add	r3, r1
 800c258:	3237      	adds	r2, #55	; 0x37
 800c25a:	b2d2      	uxtb	r2, r2
 800c25c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	011b      	lsls	r3, r3, #4
 800c262:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	3301      	adds	r3, #1
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	4413      	add	r3, r2
 800c26e:	2200      	movs	r2, #0
 800c270:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c272:	7dfb      	ldrb	r3, [r7, #23]
 800c274:	3301      	adds	r3, #1
 800c276:	75fb      	strb	r3, [r7, #23]
 800c278:	7dfa      	ldrb	r2, [r7, #23]
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d3d3      	bcc.n	800c228 <IntToUnicode+0x18>
  }
}
 800c280:	bf00      	nop
 800c282:	bf00      	nop
 800c284:	371c      	adds	r7, #28
 800c286:	46bd      	mov	sp, r7
 800c288:	bc80      	pop	{r7}
 800c28a:	4770      	bx	lr

0800c28c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a0d      	ldr	r2, [pc, #52]	; (800c2d0 <HAL_PCD_MspInit+0x44>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d113      	bne.n	800c2c6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c29e:	4b0d      	ldr	r3, [pc, #52]	; (800c2d4 <HAL_PCD_MspInit+0x48>)
 800c2a0:	69db      	ldr	r3, [r3, #28]
 800c2a2:	4a0c      	ldr	r2, [pc, #48]	; (800c2d4 <HAL_PCD_MspInit+0x48>)
 800c2a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c2a8:	61d3      	str	r3, [r2, #28]
 800c2aa:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <HAL_PCD_MspInit+0x48>)
 800c2ac:	69db      	ldr	r3, [r3, #28]
 800c2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2103      	movs	r1, #3
 800c2ba:	2014      	movs	r0, #20
 800c2bc:	f7f7 fe3b 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c2c0:	2014      	movs	r0, #20
 800c2c2:	f7f7 fe54 	bl	8003f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c2c6:	bf00      	nop
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	40005c00 	.word	0x40005c00
 800c2d4:	40021000 	.word	0x40021000

0800c2d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	f7fe fdc5 	bl	800ae7e <USBD_LL_SetupStage>
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c30e:	78fa      	ldrb	r2, [r7, #3]
 800c310:	6879      	ldr	r1, [r7, #4]
 800c312:	4613      	mov	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4413      	add	r3, r2
 800c318:	00db      	lsls	r3, r3, #3
 800c31a:	440b      	add	r3, r1
 800c31c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	78fb      	ldrb	r3, [r7, #3]
 800c324:	4619      	mov	r1, r3
 800c326:	f7fe fdf7 	bl	800af18 <USBD_LL_DataOutStage>
}
 800c32a:	bf00      	nop
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	460b      	mov	r3, r1
 800c33c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c344:	78fa      	ldrb	r2, [r7, #3]
 800c346:	6879      	ldr	r1, [r7, #4]
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	440b      	add	r3, r1
 800c352:	333c      	adds	r3, #60	; 0x3c
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	78fb      	ldrb	r3, [r7, #3]
 800c358:	4619      	mov	r1, r3
 800c35a:	f7fe fe4e 	bl	800affa <USBD_LL_DataInStage>
}
 800c35e:	bf00      	nop
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b082      	sub	sp, #8
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c374:	4618      	mov	r0, r3
 800c376:	f7fe ff5e 	bl	800b236 <USBD_LL_SOF>
}
 800c37a:	bf00      	nop
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c38a:	2301      	movs	r3, #1
 800c38c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	2b02      	cmp	r3, #2
 800c394:	d001      	beq.n	800c39a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c396:	f7f6 fe43 	bl	8003020 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3a0:	7bfa      	ldrb	r2, [r7, #15]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe ff0e 	bl	800b1c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe fec7 	bl	800b144 <USBD_LL_Reset>
}
 800c3b6:	bf00      	nop
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
	...

0800c3c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe ff08 	bl	800b1e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d005      	beq.n	800c3e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3dc:	4b04      	ldr	r3, [pc, #16]	; (800c3f0 <HAL_PCD_SuspendCallback+0x30>)
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	4a03      	ldr	r2, [pc, #12]	; (800c3f0 <HAL_PCD_SuspendCallback+0x30>)
 800c3e2:	f043 0306 	orr.w	r3, r3, #6
 800c3e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3e8:	bf00      	nop
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	e000ed00 	.word	0xe000ed00

0800c3f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c402:	4618      	mov	r0, r3
 800c404:	f7fe ff02 	bl	800b20c <USBD_LL_Resume>
}
 800c408:	bf00      	nop
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c418:	4a28      	ldr	r2, [pc, #160]	; (800c4bc <USBD_LL_Init+0xac>)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a26      	ldr	r2, [pc, #152]	; (800c4bc <USBD_LL_Init+0xac>)
 800c424:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c428:	4b24      	ldr	r3, [pc, #144]	; (800c4bc <USBD_LL_Init+0xac>)
 800c42a:	4a25      	ldr	r2, [pc, #148]	; (800c4c0 <USBD_LL_Init+0xb0>)
 800c42c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c42e:	4b23      	ldr	r3, [pc, #140]	; (800c4bc <USBD_LL_Init+0xac>)
 800c430:	2208      	movs	r2, #8
 800c432:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c434:	4b21      	ldr	r3, [pc, #132]	; (800c4bc <USBD_LL_Init+0xac>)
 800c436:	2202      	movs	r2, #2
 800c438:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c43a:	4b20      	ldr	r3, [pc, #128]	; (800c4bc <USBD_LL_Init+0xac>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c440:	4b1e      	ldr	r3, [pc, #120]	; (800c4bc <USBD_LL_Init+0xac>)
 800c442:	2200      	movs	r2, #0
 800c444:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c446:	4b1d      	ldr	r3, [pc, #116]	; (800c4bc <USBD_LL_Init+0xac>)
 800c448:	2200      	movs	r2, #0
 800c44a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c44c:	481b      	ldr	r0, [pc, #108]	; (800c4bc <USBD_LL_Init+0xac>)
 800c44e:	f7f8 f9c3 	bl	80047d8 <HAL_PCD_Init>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c458:	f7f6 fde2 	bl	8003020 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c462:	2318      	movs	r3, #24
 800c464:	2200      	movs	r2, #0
 800c466:	2100      	movs	r1, #0
 800c468:	f7f9 fe37 	bl	80060da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c472:	2358      	movs	r3, #88	; 0x58
 800c474:	2200      	movs	r2, #0
 800c476:	2180      	movs	r1, #128	; 0x80
 800c478:	f7f9 fe2f 	bl	80060da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c482:	23c0      	movs	r3, #192	; 0xc0
 800c484:	2200      	movs	r2, #0
 800c486:	2181      	movs	r1, #129	; 0x81
 800c488:	f7f9 fe27 	bl	80060da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c492:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c496:	2200      	movs	r2, #0
 800c498:	2101      	movs	r1, #1
 800c49a:	f7f9 fe1e 	bl	80060da <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	2182      	movs	r1, #130	; 0x82
 800c4ac:	f7f9 fe15 	bl	80060da <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200012f8 	.word	0x200012f8
 800c4c0:	40005c00 	.word	0x40005c00

0800c4c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7f8 fa87 	bl	80049ee <HAL_PCD_Start>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 f94e 	bl	800c788 <USBD_Get_USB_Status>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	4608      	mov	r0, r1
 800c504:	4611      	mov	r1, r2
 800c506:	461a      	mov	r2, r3
 800c508:	4603      	mov	r3, r0
 800c50a:	70fb      	strb	r3, [r7, #3]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70bb      	strb	r3, [r7, #2]
 800c510:	4613      	mov	r3, r2
 800c512:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c518:	2300      	movs	r3, #0
 800c51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c522:	78bb      	ldrb	r3, [r7, #2]
 800c524:	883a      	ldrh	r2, [r7, #0]
 800c526:	78f9      	ldrb	r1, [r7, #3]
 800c528:	f7f8 fbff 	bl	8004d2a <HAL_PCD_EP_Open>
 800c52c:	4603      	mov	r3, r0
 800c52e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c530:	7bfb      	ldrb	r3, [r7, #15]
 800c532:	4618      	mov	r0, r3
 800c534:	f000 f928 	bl	800c788 <USBD_Get_USB_Status>
 800c538:	4603      	mov	r3, r0
 800c53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	460b      	mov	r3, r1
 800c550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c560:	78fa      	ldrb	r2, [r7, #3]
 800c562:	4611      	mov	r1, r2
 800c564:	4618      	mov	r0, r3
 800c566:	f7f8 fc46 	bl	8004df6 <HAL_PCD_EP_Close>
 800c56a:	4603      	mov	r3, r0
 800c56c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f909 	bl	800c788 <USBD_Get_USB_Status>
 800c576:	4603      	mov	r3, r0
 800c578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c59e:	78fa      	ldrb	r2, [r7, #3]
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7f8 fd06 	bl	8004fb4 <HAL_PCD_EP_SetStall>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 f8ea 	bl	800c788 <USBD_Get_USB_Status>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5dc:	78fa      	ldrb	r2, [r7, #3]
 800c5de:	4611      	mov	r1, r2
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7f8 fd47 	bl	8005074 <HAL_PCD_EP_ClrStall>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 f8cb 	bl	800c788 <USBD_Get_USB_Status>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	460b      	mov	r3, r1
 800c60a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c612:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	da0c      	bge.n	800c636 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	4613      	mov	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	00db      	lsls	r3, r3, #3
 800c62e:	440b      	add	r3, r1
 800c630:	3302      	adds	r3, #2
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	e00b      	b.n	800c64e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c636:	78fb      	ldrb	r3, [r7, #3]
 800c638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c63c:	68f9      	ldr	r1, [r7, #12]
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	440b      	add	r3, r1
 800c648:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c64c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3714      	adds	r7, #20
 800c652:	46bd      	mov	sp, r7
 800c654:	bc80      	pop	{r7}
 800c656:	4770      	bx	lr

0800c658 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	460b      	mov	r3, r1
 800c662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c664:	2300      	movs	r3, #0
 800c666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c668:	2300      	movs	r3, #0
 800c66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c672:	78fa      	ldrb	r2, [r7, #3]
 800c674:	4611      	mov	r1, r2
 800c676:	4618      	mov	r0, r3
 800c678:	f7f8 fb32 	bl	8004ce0 <HAL_PCD_SetAddress>
 800c67c:	4603      	mov	r3, r0
 800c67e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c680:	7bfb      	ldrb	r3, [r7, #15]
 800c682:	4618      	mov	r0, r3
 800c684:	f000 f880 	bl	800c788 <USBD_Get_USB_Status>
 800c688:	4603      	mov	r3, r0
 800c68a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c68c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b086      	sub	sp, #24
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	72fb      	strb	r3, [r7, #11]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6b8:	893b      	ldrh	r3, [r7, #8]
 800c6ba:	7af9      	ldrb	r1, [r7, #11]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	f7f8 fc36 	bl	8004f2e <HAL_PCD_EP_Transmit>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6c6:	7dfb      	ldrb	r3, [r7, #23]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 f85d 	bl	800c788 <USBD_Get_USB_Status>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	607a      	str	r2, [r7, #4]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	72fb      	strb	r3, [r7, #11]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6fe:	893b      	ldrh	r3, [r7, #8]
 800c700:	7af9      	ldrb	r1, [r7, #11]
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	f7f8 fbbf 	bl	8004e86 <HAL_PCD_EP_Receive>
 800c708:	4603      	mov	r3, r0
 800c70a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c70c:	7dfb      	ldrb	r3, [r7, #23]
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 f83a 	bl	800c788 <USBD_Get_USB_Status>
 800c714:	4603      	mov	r3, r0
 800c716:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c718:	7dbb      	ldrb	r3, [r7, #22]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b082      	sub	sp, #8
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
 800c72a:	460b      	mov	r3, r1
 800c72c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c734:	78fa      	ldrb	r2, [r7, #3]
 800c736:	4611      	mov	r1, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f7f8 fbe1 	bl	8004f00 <HAL_PCD_EP_GetRxCount>
 800c73e:	4603      	mov	r3, r0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c750:	4b02      	ldr	r3, [pc, #8]	; (800c75c <USBD_static_malloc+0x14>)
}
 800c752:	4618      	mov	r0, r3
 800c754:	370c      	adds	r7, #12
 800c756:	46bd      	mov	sp, r7
 800c758:	bc80      	pop	{r7}
 800c75a:	4770      	bx	lr
 800c75c:	200015e4 	.word	0x200015e4

0800c760 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]

}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bc80      	pop	{r7}
 800c770:	4770      	bx	lr

0800c772 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c772:	b480      	push	{r7}
 800c774:	b083      	sub	sp, #12
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	460b      	mov	r3, r1
 800c77c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c77e:	bf00      	nop
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	bc80      	pop	{r7}
 800c786:	4770      	bx	lr

0800c788 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	4603      	mov	r3, r0
 800c790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c796:	79fb      	ldrb	r3, [r7, #7]
 800c798:	2b03      	cmp	r3, #3
 800c79a:	d817      	bhi.n	800c7cc <USBD_Get_USB_Status+0x44>
 800c79c:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <USBD_Get_USB_Status+0x1c>)
 800c79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a2:	bf00      	nop
 800c7a4:	0800c7b5 	.word	0x0800c7b5
 800c7a8:	0800c7bb 	.word	0x0800c7bb
 800c7ac:	0800c7c1 	.word	0x0800c7c1
 800c7b0:	0800c7c7 	.word	0x0800c7c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b8:	e00b      	b.n	800c7d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c7be:	e008      	b.n	800c7d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7c4:	e005      	b.n	800c7d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7ca:	e002      	b.n	800c7d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c7d0:	bf00      	nop
  }
  return usb_status;
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bc80      	pop	{r7}
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop

0800c7e0 <__libc_init_array>:
 800c7e0:	b570      	push	{r4, r5, r6, lr}
 800c7e2:	2600      	movs	r6, #0
 800c7e4:	4d0c      	ldr	r5, [pc, #48]	; (800c818 <__libc_init_array+0x38>)
 800c7e6:	4c0d      	ldr	r4, [pc, #52]	; (800c81c <__libc_init_array+0x3c>)
 800c7e8:	1b64      	subs	r4, r4, r5
 800c7ea:	10a4      	asrs	r4, r4, #2
 800c7ec:	42a6      	cmp	r6, r4
 800c7ee:	d109      	bne.n	800c804 <__libc_init_array+0x24>
 800c7f0:	f000 f830 	bl	800c854 <_init>
 800c7f4:	2600      	movs	r6, #0
 800c7f6:	4d0a      	ldr	r5, [pc, #40]	; (800c820 <__libc_init_array+0x40>)
 800c7f8:	4c0a      	ldr	r4, [pc, #40]	; (800c824 <__libc_init_array+0x44>)
 800c7fa:	1b64      	subs	r4, r4, r5
 800c7fc:	10a4      	asrs	r4, r4, #2
 800c7fe:	42a6      	cmp	r6, r4
 800c800:	d105      	bne.n	800c80e <__libc_init_array+0x2e>
 800c802:	bd70      	pop	{r4, r5, r6, pc}
 800c804:	f855 3b04 	ldr.w	r3, [r5], #4
 800c808:	4798      	blx	r3
 800c80a:	3601      	adds	r6, #1
 800c80c:	e7ee      	b.n	800c7ec <__libc_init_array+0xc>
 800c80e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c812:	4798      	blx	r3
 800c814:	3601      	adds	r6, #1
 800c816:	e7f2      	b.n	800c7fe <__libc_init_array+0x1e>
 800c818:	0800c92c 	.word	0x0800c92c
 800c81c:	0800c92c 	.word	0x0800c92c
 800c820:	0800c92c 	.word	0x0800c92c
 800c824:	0800c930 	.word	0x0800c930

0800c828 <memcpy>:
 800c828:	440a      	add	r2, r1
 800c82a:	4291      	cmp	r1, r2
 800c82c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c830:	d100      	bne.n	800c834 <memcpy+0xc>
 800c832:	4770      	bx	lr
 800c834:	b510      	push	{r4, lr}
 800c836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c83a:	4291      	cmp	r1, r2
 800c83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c840:	d1f9      	bne.n	800c836 <memcpy+0xe>
 800c842:	bd10      	pop	{r4, pc}

0800c844 <memset>:
 800c844:	4603      	mov	r3, r0
 800c846:	4402      	add	r2, r0
 800c848:	4293      	cmp	r3, r2
 800c84a:	d100      	bne.n	800c84e <memset+0xa>
 800c84c:	4770      	bx	lr
 800c84e:	f803 1b01 	strb.w	r1, [r3], #1
 800c852:	e7f9      	b.n	800c848 <memset+0x4>

0800c854 <_init>:
 800c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c856:	bf00      	nop
 800c858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85a:	bc08      	pop	{r3}
 800c85c:	469e      	mov	lr, r3
 800c85e:	4770      	bx	lr

0800c860 <_fini>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	bf00      	nop
 800c864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c866:	bc08      	pop	{r3}
 800c868:	469e      	mov	lr, r3
 800c86a:	4770      	bx	lr
